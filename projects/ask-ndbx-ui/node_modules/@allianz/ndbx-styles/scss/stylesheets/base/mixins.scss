// Mixin to handle vh & vw for some apple devices.
// https://gist.github.com/BenMorel/e9e34c08360ebbbd0634
// Modified: Removed iphone 4 specs.
@mixin viewport-unit($property, $value) {
  #{$property}: $value;

  $unit: unit($value);

  @if (index((vw, vh, vmin, vmax), $unit) != null) {
    $devices: (
      (768px, 1024px), // iPad (all versions)
      (320px, 568px)   // iPhone 5, 5C, 5S
    );

    @each $device in $devices {
      $device-width: nth($device, 1);
      $device-height: nth($device, 2);

      $device-query: "only screen and (-webkit-min-device-pixel-ratio: 1)";
      $device-query: "#{$device-query} and (device-width: #{$device-width})";
      $device-query: "#{$device-query} and (device-height: #{$device-height})";

      $percent: $value / ($value * 0 + 1); // see https://github.com/sass/sass/issues/533

      $percent-width: $device-width * $percent / 100;
      $percent-height: $device-height * $percent / 100;

      @if ($unit == vmin or $unit == vmax) {
        @media #{$device-query} {
          #{$property}: if($unit == vmin, $percent-width, $percent-height);
        }
      }@else {
        @media #{$device-query} and (orientation: portrait) {
          #{$property}: if($unit == vw, $percent-width, $percent-height);
        }

        @media #{$device-query} and (orientation: landscape) {
          #{$property}: if($unit == vw, $percent-height, $percent-width);
        }
      }
    }
  }
}

@mixin font-face($family, $path, $weight: normal, $style: normal, $exts: woff2 woff) {

  $src: null;

  $pathArr: str-split($path, '/');
  $extmods: (
    eot: "?#iefix",
    svg: "#" + last($pathArr)
  );

  $formats: (
    eot: "embedded-opentype",
    otf: "opentype",
    ttf: "truetype"
  );


  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }


  @font-face {
    font-family: $family;
    font-style: $style;
    font-weight: $weight;

    // if there is eot extension included
    @if index($exts, eot) {
      src:  url("#{$path}.eot");
    }

    src:          $src;
  }
}

@mixin paperstyle() {
  background-color: $c-white;
  border: 1px solid $c-secondary-light-grey;
  border-radius: 4px;
  box-shadow: 0 2px 5px $c-grey-shadow;
  //REVIEW: remove?
  display: block;
  padding: $box-padding-small;
}

@mixin placeholder-color ($color) {
  &::placeholder {
    color: $color;
    opacity: 1;
  }
}

@mixin overlay($offset: 0) {
  bottom: $offset;
  left: $offset;
  position: absolute;
  right: $offset;
  top: $offset;
}

@mixin center-absolute {
  transform: translate(-50%, -50%);
  position: absolute;
  left: 50%;
  top: 50%;
}

@mixin quantity-query( $number, $comparison: 'equal' ) {
  $nth: '';

  @if index( ('greater' 'more' '>'), $comparison ) {
    $nth: 'n + #{$number}';
  } @else if index( ('less' 'fewer' '<'), $comparison ) {
    $nth: '-n + #{$number}';
  } @else if index( ('equal' 'same' '='), $comparison ) {
    $nth: $number;
  } @else {
    @warn "Sorry, that's an invalid $comparison value."
  }

  &:nth-last-child(#{$nth}):first-child {
    &,
    & ~ * {
      @content;
    }
  }
}
