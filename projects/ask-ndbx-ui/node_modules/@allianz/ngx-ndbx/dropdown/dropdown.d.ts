import { NxFormfieldComponent } from '@allianz/ngx-ndbx/formfield';
import { CdkConnectedOverlay, ConnectionPositionPair } from '@angular/cdk/overlay';
import { AfterContentInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { Observable, Subject } from 'rxjs';
import { NxDropdownControl } from './dropdown.control';
import { NxDropdownItemChange, NxDropdownItemComponent } from './item/dropdown-item';
import { NxDropdownClosedLabelDirective } from './closed-label.directive';
/** Change event object that is emitted when the select value has changed. */
export declare class NxDropdownSelectChange<T = any> {
    /** Reference to the select that emitted the change event. */
    source: NxDropdownComponent;
    /** Current value of the select that emitted the event. */
    value: T;
    constructor(
    /** Reference to the select that emitted the change event. */
    source: NxDropdownComponent, 
    /** Current value of the select that emitted the event. */
    value: T);
}
export declare class NxDropdownComponent extends NxDropdownControl implements ControlValueAccessor, OnInit, AfterContentInit, OnDestroy, DoCheck {
    private _changeDetectorRef;
    private _elementRef;
    private _ngZone;
    private formFieldComponent;
    /** @docs-private */
    ngControl: NgControl;
    private _parentForm;
    private _parentFormGroup;
    readonly readonly: boolean;
    private _selectionModel;
    protected _disabled: boolean;
    private _focused;
    /** Whether or not the overlay panel is open. */
    private _panelOpen;
    /** @docs-private */
    errorState: boolean;
    /** @docs-private */
    isStable: boolean;
    /**
     * Name of this control that is used inside the formfield component
     * @docs-private
     */
    controlType: string;
    /** Holds the value from nxValue. */
    private _value;
    /** The minimal space between the viewport and the overlay */
    _overlayViewportMargin: number;
    /** The last measured value for the trigger's client bounding rect. */
    _triggerRect: ClientRect;
    /** Holds the panelWidth after panel was attached. */
    _panelWidth: number;
    /**
     * @docs-private
     * Emits when internal state changes to inform formfield about it.
     */
    readonly stateChanges: Subject<any>;
    /** The IDs of child options to be passed to the aria-owns attribute. */
    _optionIds: string;
    /** @docs-private */
    ariaDescribedby: string;
    private _tabIndex;
    /** @docs-private */
    currentFilter: string;
    tabIndex: number;
    /** Label to describe the component. */
    _ariaLabel: string;
    /** Selected value */
    value: any;
    /** Whether the dropdown is disabled. */
    disabled: boolean;
    /** Whether the component is required. This adds an aria-required label to the component. */
    required: boolean;
    private _style;
    /** Whether the dropdown should render in its negative style or not. */
    _negative: boolean;
    /** If set to 'negative', the component is displayed with the negative set of styles. */
    styles: string;
    /** Whether the dropdown should be shown with an additional filter input. */
    showFilter: boolean;
    /** Text displayed as placeholder for the filter. */
    filterPlaceholder: string;
    /** Event emitted when the select panel has been toggled. */
    readonly openedChange: EventEmitter<boolean>;
    /** Event emitted when the select has been opened. */
    readonly _openedStream: Observable<void>;
    /** Event emitted when the select has been closed. */
    readonly _closedStream: Observable<void>;
    /** Event emitted when the user types in the filter input. */
    readonly filterChanges: Subject<any>;
    /**
     * Event that emits whenever the raw value of the select changes. This is here primarily
     * to facilitate the two-way binding for the `value` input.
     * @docs-private
     */
    readonly valueChange: EventEmitter<any>;
    /** Event emitted when the selected value has been changed. */
    readonly selectionChange: EventEmitter<NxDropdownSelectChange>;
    /** @docs-private */
    readonly optionSelectionChanges: Observable<NxDropdownItemChange>;
    /**
     * This position config ensures that the top "start" corner of the overlay
     * is aligned with with the top "start" of the origin by default (overlapping
     * the trigger completely). If the panel cannot fit below the trigger, it
     * will fall back to a position above the trigger.
     */
    _positions: ConnectionPositionPair[];
    /**
     * @docs-private
     * Panel containing the select options.
     */
    panel: ElementRef;
    /** @docs-private */
    panelBody: ElementRef;
    /** @docs-private */
    trigger: ElementRef;
    /** @docs-private */
    filterInput: ElementRef;
    /**
     * @docs-private
     * Overlay pane containing the options.
     */
    overlayDir: CdkConnectedOverlay;
    /** @docs-private */
    options: any;
    /** @docs-private */
    groups: any;
    _customClosedDropdownLabel: NxDropdownClosedLabelDirective;
    private _defaultClosedDropdownLabel;
    /** @docs-private */
    readonly closedDropdownLabel: TemplateRef<any>;
    private _closedDropdownLabel;
    /** Emits whenever the component is destroyed. */
    private readonly _destroy;
    /**
     * @docs-private
     * The currently selected option.
     */
    readonly selected: NxDropdownItemComponent | NxDropdownItemComponent[];
    private _keyManager;
    /** @docs-private */
    panelOpen: boolean;
    /**
     * Function that transforms the value into a string.
     * This function is used for displaying and filtering the content
     * ( Default: (value) => value ? value.toString() : null; ).
     */
    valueFormatter: (value: any) => any;
    /** @docs-private */
    readonly label: string;
    /** Comparison function to specify which option is displayed. Defaults to object equality. */
    private _compareWith;
    /**
     * Function to compare the option values with the selected values. The first argument
     * is a value from an option. The second is a value from the selection. A boolean
     * should be returned.
     */
    compareWith: (o1: any, o2: any) => boolean;
    private _filterFn;
    /**
     * Function to be used when the user types into the search filter. The first argument is the user input,
     * the second argument is the dropdown item value. The dropdown items will use this function to set their
     * visibility state.
     * A boolean should be returned.
     */
    filterFn: (search: string, itemValue: string) => boolean;
    /**
     * @docs-private
     * Whether the select is focused.
     */
    readonly focused: boolean;
    /** `View -> model callback called when value changes` */
    _onChange: (value: any) => void;
    /** `View -> model callback called when select has been touched` */
    _onTouched: () => void;
    /** @docs-private */
    readonly elementRef: ElementRef;
    constructor(_changeDetectorRef: ChangeDetectorRef, _elementRef: ElementRef, _ngZone: NgZone, tabIndex: string, formFieldComponent: NxFormfieldComponent, 
    /** @docs-private */
    ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective);
    ngDoCheck(): void;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /** @docs-private */
    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;
    /** @docs-private */
    updateErrorState(): void;
    /** Sets up a key manager to listen to keyboard events on the overlay panel. */
    private _initKeyManager;
    private _resetOptions;
    /** Records option IDs to pass to the aria-owns property. */
    private _setOptionIds;
    /** Invoked when an option is clicked. */
    private _onSelect;
    private _initializeSelection;
    /**
     * Sets the selected option based on a value. If no option can be
     * found with the designated value, the select trigger is cleared.
     */
    private _setSelectionByValue;
    /**
     * Finds and selects and option based on its value.
     * @returns Option that has the corresponding value.
     */
    private _selectValue;
    /** Emits change event to set the model value. */
    private _propagateChanges;
    /** Sorts the selected values in the selected based on their order in the panel. */
    private _sortValues;
    /** Adds a offset to the overlay position, so the formfield label and the dropdown panel header are vertically aligned. */
    private _updatePositionOffset;
    /** Focuses the select element. */
    focus(): void;
    /** Opens the panel of the dropdown. */
    openPanel(): void;
    /** Closes the panel of the dropdown. */
    closePanel(): void;
    private _calculateScrollTop;
    /** Scrolls the active option into view. */
    private _scrollActiveOptionIntoView;
    /** @docs-private */
    private _getItemOffset;
    /**
     * @docs-private
     * Formfield Implementation
     */
    setDescribedByIds(ids: string[]): void;
    /** @docs-private */
    setAriaLabel(value: string): void;
    _getAriaLabel(): string;
    readonly _isInOutlineField: boolean;
    /**
     * @docs-private
     * Whether the select has a value.
     */
    readonly empty: boolean;
    /** @docs-private */
    readonly hasValue: boolean;
    /** @docs-private */
    readonly shouldLabelFloat: boolean;
    /** End Formfield */
    /** ControlValueAccessor */
    /**
     * Sets the select's value. Part of the ControlValueAccessor interface
     * required to integrate with Angular's core forms API.
     *
     * @param value New value to be written to the model.
     */
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: () => void): void;
    /**
     * Disables the select. Part of the ControlValueAccessor interface required
     * to integrate with Angular's core forms API.
     *
     * @param isDisabled Sets whether the component is disabled.
     */
    setDisabledState(isDisabled: boolean): void;
    /** End ControlValueAccessor */
    _handleKeydown(event: KeyboardEvent): void;
    private _handleClosedKeydown;
    private _handleOpenKeydown;
    /** @docs-private */
    formatValue(value: any): string;
    /** Called when the user types in the filter input */
    _onFilter(event: any): void;
    /**
     * @docs-private
     * The value displayed in the trigger.
     */
    readonly triggerValue: string;
    /**
     * Highlights the selected item. If no option is selected, it will highlight
     * the first item instead.
     */
    private _highlightCorrectOption;
    /**
     * Callback that is invoked when the overlay panel has been attached.
     */
    _onAttached(): void;
    _onFocus(): void;
    /**
     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will
     * "blur" to the panel when it opens, causing a false positive.
     */
    _onBlur(): void;
    /** @docs-private */
    readonly isFilterEmpty: boolean;
    /** @docs-private */
    _clearFilter(): void;
    /** @docs-private determines the `aria-activedescendant` to be set on the host. */
    _getAriaActiveDescendant(): string | null;
}
