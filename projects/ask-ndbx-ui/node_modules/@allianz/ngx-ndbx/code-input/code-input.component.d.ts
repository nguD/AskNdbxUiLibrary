import { ChangeDetectorRef, ElementRef, DoCheck } from '@angular/core';
import { ControlValueAccessor, NgControl, NgForm, FormGroupDirective } from '@angular/forms';
import { NxCodeInputIntl } from './code-input-intl';
import { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';
export declare type NxConversionTypes = 'lower' | 'upper';
export declare class NxCodeInputComponent implements ControlValueAccessor, DoCheck {
    private _changeDetectorRef;
    private _el;
    _control: NgControl;
    _intl: NxCodeInputIntl;
    private _errorStateMatcher;
    private _parentForm;
    private _parentFormGroup;
    /** Whether the current input of the component has an error. */
    errorState: boolean;
    /** The length of the code input. Default: 6. */
    codeLength: number;
    private _codeLength;
    /** The type of HTML input */
    type: string;
    private _type;
    private _isUpDown;
    /** Sets the tabindex of the contained input elements. */
    tabindex: number;
    private _tabindex;
    /** Whether the form should auto capitalize or lowercase (optional). */
    convertTo: NxConversionTypes;
    private _convertTo?;
    /** The user input in array form */
    _keyCode: string[];
    private _focused;
    /** Whether the code input uses the negative set of styling. */
    negative: boolean;
    private _negative;
    /** Whether the code input is disabled. */
    disabled: boolean;
    private _disabled;
    constructor(_changeDetectorRef: ChangeDetectorRef, _el: ElementRef, _control: NgControl, _intl: NxCodeInputIntl, _errorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective);
    ngDoCheck(): void;
    /** Sets the length of the input fields. */
    setInputLength(): void;
    /** Converts to upper or lowercase when enabled. */
    _convertLetterSize(value: any): string;
    /** Reacts to keydown event. */
    _keydownAction(event: any): void | false;
    /** Selects the value on click of an input field. */
    _selectText(event: any): void;
    /** Automatically focuses and selects the next input on key input. */
    _selectNextInput(event: any): void;
    /** Paste event to distribute content in input fields. */
    _pasteClipboard(event: any): void;
    /** Returns the index of the code input, which is currently focused. */
    private _getFocusedInputIndex;
    /** Removes all characters from the input except for numbers [0-9]. */
    private _formatNumberInput;
    /** Triggers when an input field is blurred. */
    _onBlur(): void;
    /** Sets _focused state and makes valid. */
    _setFocusState(): void;
    /**
     * Disables the code input. Part of the ControlValueAccessor interface required
     * to integrate with Angular's core forms API.
     *
     * @param isDisabled Sets whether the component is disabled.
     */
    setDisabledState(isDisabled: boolean): void;
    /** Sets initial value, used by ControlValueAccessor. */
    writeValue(value: string): void;
    _trackByKeyCode(index: number, item: string): number;
    /** Adds a gap to input fields when appropriate. */
    _inputGap(index: any): string;
    /** @docs-private */
    propagateChange: (_: any) => void;
    /** @docs-private */
    propagateTouch: (_: any) => void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    /** @docs-private */
    updateErrorState(): void;
    getAriaLabel(keyIndex: number): string;
    /** @docs-private
     * Workaround preventing the selection error because the `setSelectionRange` is not supported on input['type=number']
     * */
    selectInput(input: HTMLInputElement): void;
}
