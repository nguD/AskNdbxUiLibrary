import { AriaDescriber, FocusMonitor } from '@angular/cdk/a11y';
import { Directionality } from '@angular/cdk/bidi';
import { OriginConnectionPosition, Overlay, OverlayConnectionPosition, OverlayRef } from '@angular/cdk/overlay';
import { Platform } from '@angular/cdk/platform';
import { ScrollDispatcher } from '@angular/cdk/scrolling';
import { ElementRef, InjectionToken, NgZone, OnDestroy, ViewContainerRef, OnInit } from '@angular/core';
import { NxTooltipComponent } from './tooltip.component';
/**
 * Possible positions of the tooltip.
 */
export declare type TooltipPosition = 'left' | 'right' | 'top' | 'bottom';
/**
 * CSS class that will be attached to the overlay panel.
 * @docs-private
 */
export declare const NX_TOOLTIP_PANEL_CLASS = "nx-tooltip-panel";
/**
 * Creates an error to be thrown if the user supplied an invalid tooltip position.
 * @docs-private
 */
export declare function getNxTooltipInvalidPositionError(position: string): Error;
/** Default `nxTooltip` options that can be overridden. */
export interface NxTooltipDefaultOptions {
    /** The default delay in ms before showing the tooltip after show is called */
    showDelay: number;
    /** The default delay in ms before hiding the tooltip after hide is called */
    hideDelay: number;
    /** The default delay in ms before hiding the tooltip on touch devices */
    touchendHideDelay: number;
    /** The default position of the tooltip */
    position?: TooltipPosition;
}
/** Injection token to be used to override the default options for `nxTooltip`. */
export declare const NX_TOOLTIP_DEFAULT_OPTIONS: InjectionToken<NxTooltipDefaultOptions>;
export declare function NX_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): NxTooltipDefaultOptions;
/**
 * Directive that attaches a tooltip to the host element.
 *
 */
export declare class NxTooltipDirective implements OnDestroy, OnInit {
    private _overlay;
    private _elementRef;
    private _scrollDispatcher;
    private _viewContainerRef;
    private _ngZone;
    private _ariaDescriber;
    private _focusMonitor;
    private _dir;
    private _defaultOptions;
    _overlayRef: OverlayRef | null;
    _tooltipInstance: NxTooltipComponent | null;
    private _portal;
    private _position;
    private _disabled;
    private _scrollStrategy;
    private _embeddedViewRef;
    /** Allows the user to define the position of the tooltip relative to the parent element */
    position: TooltipPosition;
    /** Disables the display of the tooltip. */
    disabled: boolean;
    /** The default delay in ms before showing the tooltip after show is called */
    showDelay: number;
    /** The default delay in ms before hiding the tooltip after hide is called */
    hideDelay: number;
    private _message;
    /** The message to be displayed in the tooltip */
    message: string;
    private _manualListeners;
    /** Emits when the component is destroyed. */
    private readonly _destroyed;
    constructor(_overlay: Overlay, _elementRef: ElementRef<HTMLElement>, _scrollDispatcher: ScrollDispatcher, _viewContainerRef: ViewContainerRef, _ngZone: NgZone, platform: Platform, _ariaDescriber: AriaDescriber, _focusMonitor: FocusMonitor, _dir: Directionality, _defaultOptions: NxTooltipDefaultOptions);
    /**
     * Setup styling-specific things
     */
    ngOnInit(): void;
    /**
     * Dispose the tooltip when destroyed.
     */
    ngOnDestroy(): void;
    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */
    show(delay?: number): void;
    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */
    hide(delay?: number): void;
    /** Shows/hides the tooltip */
    toggle(): void;
    /** Returns true if the tooltip is currently visible to the user */
    _isTooltipVisible(): boolean;
    /** Handles the keydown events on the host element. */
    _handleKeydown(e: KeyboardEvent): void;
    /** Handles the touchend events on the host element. */
    _handleTouchend(): void;
    /** Create the overlay config and position strategy */
    private _createOverlay;
    /** Detaches the currently-attached tooltip. */
    private _detach;
    /** Updates the position of the current tooltip. */
    private _updatePosition;
    /**
     * Returns the origin position and a fallback position based on the user's position preference.
     * The fallback position is the inverse of the origin (e.g. `'left' -> 'right'`).
     */
    _getOrigin(): OriginConnectionPosition;
    /** Returns the overlay position and a fallback position based on the user's preference */
    _getOverlayPosition(): OverlayConnectionPosition;
    /** Updates the tooltip message and repositions the overlay according to the new message length */
    private _updateTooltipMessage;
    private _positionArrow;
}
