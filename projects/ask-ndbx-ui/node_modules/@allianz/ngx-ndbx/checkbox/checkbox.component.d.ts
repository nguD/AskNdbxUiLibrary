import { EventEmitter, ChangeDetectorRef, AfterContentInit, OnDestroy, QueryList, OnInit, ElementRef } from '@angular/core';
import { ControlValueAccessor, NgControl, NgForm, FormGroupDirective } from '@angular/forms';
import { Subject } from 'rxjs';
import { NxLabelComponent } from '@allianz/ngx-ndbx/base';
import { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';
export declare class NxCheckboxChangeEvent {
    /** The checked value of the checkbox. */
    checked: boolean;
    /** The value of the checkbox. */
    value: string;
    /** The component instance of the checkbox which emitted the change event. */
    checkbox: NxCheckboxComponent;
    constructor(
    /** The checked value of the checkbox. */
    checked: boolean, 
    /** The value of the checkbox. */
    value: string, 
    /** The component instance of the checkbox which emitted the change event. */
    checkbox: NxCheckboxComponent);
}
/** Size of the label. */
export declare type NxCheckboxLabelSize = 'small' | 'large';
export declare class NxCheckboxGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy {
    private _changeDetectorRef;
    ngControl: NgControl;
    _checkboxes: QueryList<NxCheckboxComponent>;
    _label: NxLabelComponent;
    readonly _stateChanges: Subject<void>;
    selectionChange: EventEmitter<NxCheckboxChangeEvent>;
    private _id;
    /** Sets the Id of the checkbox group. */
    id: string;
    private _name;
    /** Sets the name of the checkboxes inside the nx-checkbox-group. */
    name: string;
    private _disabled;
    /** Disables all checkboxes inside the nx-checkbox-group. */
    disabled: boolean;
    private _negative;
    /** Set the negative styles for all the checkboxes inside the nx-checkbox-group */
    negative: boolean;
    private _labelSize;
    /** Sets the label size of the checkboxes inside the group */
    labelSize: NxCheckboxLabelSize;
    /** Whether the nx-checkbox-group are required. */
    required: boolean;
    private _required;
    private _value;
    constructor(_changeDetectorRef: ChangeDetectorRef, ngControl: NgControl);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    private _onChange;
    private _onTouched;
    private _updateSelectedCheckboxFromValue;
    /** @docs-private */
    change(value: any): void;
}
export declare class NxCheckboxComponent implements ControlValueAccessor, OnDestroy, OnInit {
    private _changeDetectorRef;
    private _errorStateMatcher;
    checkboxGroup: NxCheckboxGroupComponent;
    ngControl: NgControl;
    private _parentForm;
    private _parentFormGroup;
    private _parentChangeSubscription;
    private _id;
    private _disabled;
    private _negative;
    private _labelSize;
    private _checked;
    private _name;
    /** @docs-private */
    _checkboxLabelWrapper: ElementRef;
    /**
     * Id of the checkbox.
     *
     * If not set, the checkbox gets an incremented value by default.
     */
    id: string;
    /** Name of the checkbox. */
    name: string;
    /** Whether the checkbox is disabled. */
    disabled: boolean;
    /**
     * Sets the label size of the checkbox. Default value: small
     */
    labelSize: NxCheckboxLabelSize;
    /**
     * Whether the checkbox has negative styling.
     */
    negative: boolean;
    /** Whether the checkbox is checked. */
    checked: boolean;
    private _indeterminate;
    /** Whether the checkbox is indeterminated. */
    indeterminate: boolean;
    /** Whether the checkbox is required. */
    required: boolean;
    private _required;
    /** Sets the value of the checkbox. Default value is the checked status. */
    value: string;
    private _value;
    /** An event emitted when the indeterminate value has changed */
    indeterminateChange: EventEmitter<boolean>;
    /** An event emitted when the checked value has changed.
     *
     * Emits the boolean checked value of the changed checkbox.
     */
    checkedChange: EventEmitter<boolean>;
    /** An event emitted when the checked value has changed.
     *
     * Emits a NxCheckboxChangeEvent.
     */
    checkboxChange: EventEmitter<NxCheckboxChangeEvent>;
    /** @docs-private */
    readonly labelHasContent: boolean;
    /** @docs-private
     * Callback for when the content of the label has changed.
     */
    labelContentChanged(): void;
    constructor(_changeDetectorRef: ChangeDetectorRef, _errorStateMatcher: ErrorStateMatcher, checkboxGroup: NxCheckboxGroupComponent, ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective);
    /** @docs-private */
    _controlInvalid(): boolean;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private _setIndeterminate;
    private _setChecked;
    /** Toggles the checked state of the checkbox. */
    toggle(): void;
    writeValue(value: any): void;
    private onChangeCallback;
    registerOnChange(onChange: any): void;
    private onTouchedCallback;
    registerOnTouched(onTouched: any): void;
    setDisabledState?(isDisabled: boolean): void;
    /** @docs-private */
    touch(): void;
    /** @docs-private */
    _onInputClick(event: any): void;
    /**@docs-private */
    private _createChangeEvent;
}
