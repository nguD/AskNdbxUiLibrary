{"version":3,"sources":["ng://@allianz/ngx-ndbx/rating/rating.component.ts","ng://@allianz/ngx-ndbx/rating/rating.module.ts"],"names":["NxRatingComponent","_changeDetectorRef","this","_value","_disabled","_negative","_startLabel","_endLabel","_ariaLabel","valueChange","EventEmitter","onTouchedCallback","onChangeCallback","option","Object","defineProperty","prototype","newValue","coerceNumberProperty","markForCheck","coerceBooleanProperty","newAriaLabels","isSelected","index","value","setSelection","disabled","emit","handleKeyUp","event","rating","keyCode","preventDefault","stopPropagation","ENTER","RIGHT_ARROW","Math","min","icons","toArray","nativeElement","focus","LEFT_ARROW","max","writeValue","registerOnChange","callback","registerOnTouched","setDisabledState","isDisabled","getAriaLabel","ariaLabel","getIconName","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","host","[class.nx-rating--negative]","[class.nx-rating--disabled]","ChangeDetectorRef","Input","Output","ViewChildren","NxIconComponent","read","ElementRef","NxRatingModule","NgModule","imports","CommonModule","NxIconModule","declarations","exports"],"mappings":"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","sourcesContent":["import { NxIconComponent } from '@allianz/ngx-ndbx/icon';\nimport { ENTER, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\n\n@Component({\n  selector: 'nx-rating',\n  templateUrl: './rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./rating.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxRatingComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.nx-rating--negative]': 'negative',\n    '[class.nx-rating--disabled]': 'disabled',\n  }\n})\nexport class NxRatingComponent implements ControlValueAccessor {\n\n  private _value: number = 0;\n  /** Sets the selected rating 1 - 5. */\n  @Input('nxValue')\n  set value(newValue: number) {\n    this._value = coerceNumberProperty(newValue);\n    this._changeDetectorRef.markForCheck();\n  }\n  get value(): number {\n    return this._value;\n  }\n\n  private _disabled: boolean = false;\n  /** Whether the rating component should be disabled. */\n  @Input('nxDisabled')\n  set disabled( newValue: boolean) {\n    if (this._disabled === newValue) {\n      return;\n    }\n    this._disabled = coerceBooleanProperty(newValue);\n    this._changeDetectorRef.markForCheck();\n  }\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  private _negative: boolean = false;\n  /** Whether the negative colors be used. */\n  @Input('nxNegative')\n  set negative(newValue: boolean) {\n    if (this._negative === newValue) {\n      return;\n    }\n    this._negative = coerceBooleanProperty(newValue);\n    this._changeDetectorRef.markForCheck();\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _startLabel: string = null;\n  /** Sets the label painted at the start of the rating component. */\n  @Input('nxStartLabel')\n  set startLabel(newValue: string) {\n    this._startLabel = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get startLabel(): string {\n    return this._startLabel;\n  }\n\n  private _endLabel: string = null;\n  /** Sets the label painted at the end of the rating component. */\n  @Input('nxEndLabel')\n  set endLabel(newValue: string) {\n    this._endLabel = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get endLabel(): string {\n    return this._endLabel;\n  }\n\n  private _ariaLabel: string[] = ['1/5', '2/5', '3/5', '4/5', '5/5'];\n  @Input('nxAriaLabel')\n  /** Sets an array of custom aria-describedby attributes for each of the stars in the component. */\n  set ariaLabel(newAriaLabels: string[]) {\n    this._ariaLabel = newAriaLabels;\n    this._changeDetectorRef.markForCheck();\n  }\n  get ariaLabel(): string[] {\n    return this._ariaLabel;\n  }\n  /** An event is dispatched each time when the rating changes. */\n  @Output('nxValueChange') valueChange = new EventEmitter<number>();\n\n  /** @docs-private */\n  @ViewChildren(NxIconComponent, {read: ElementRef}) icons: QueryList<ElementRef>;\n  private onTouchedCallback = () => {};\n  private onChangeCallback = (option: any) => {};\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** Whether the given rating is selected. */\n  isSelected(index: number) {\n    return index <= this.value;\n  }\n\n  /** Allows to set the rating. */\n  setSelection(value: number) {\n    if (!this.disabled) {\n      this.value = value;\n      this.valueChange.emit(value);\n      this.onTouchedCallback();\n      this.onChangeCallback(this.value);\n    }\n  }\n\n  /** @docs-private */\n  handleKeyUp(event: KeyboardEvent, rating: number) {\n    const keyCode = event.keyCode;\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (keyCode === ENTER) {\n      this.setSelection(rating);\n    }\n\n    if (keyCode === RIGHT_ARROW) {\n      this.value = Math.min(this.value + 1, 5);\n      const elementRef: ElementRef = this.icons.toArray()[this.value - 1];\n      elementRef.nativeElement.focus();\n    }\n\n    if (keyCode === LEFT_ARROW) {\n      this.value = Math.max(this.value - 1, 1);\n      const elementRef: ElementRef = this.icons.toArray()[this.value - 1];\n      elementRef.nativeElement.focus();\n    }\n  }\n\n  writeValue(value: number): void {\n    this.value = value;\n  }\n\n  registerOnChange(callback: any): void {\n    this.onChangeCallback = callback;\n  }\n\n  registerOnTouched(callback: any): void {\n    this.onTouchedCallback = callback;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  getAriaLabel(rating) {\n    return this.ariaLabel[rating - 1];\n  }\n\n  /** @docs-private */\n  getIconName(rating: number) {\n    return 'star' + ((!this.isSelected(rating)) ? '-o' : '');\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {NxRatingComponent} from './rating.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxIconModule\n  ],\n  declarations: [\n    NxRatingComponent\n  ],\n  exports: [\n    NxRatingComponent\n  ]\n})\nexport class NxRatingModule {\n\n}\n"]}