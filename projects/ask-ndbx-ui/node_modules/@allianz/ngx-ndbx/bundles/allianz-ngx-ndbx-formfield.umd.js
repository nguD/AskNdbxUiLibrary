(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operators'), require('@allianz/ngx-ndbx/utils'), require('@angular/common'), require('@allianz/ngx-ndbx/base')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/formfield', ['exports', '@angular/core', 'rxjs/operators', '@allianz/ngx-ndbx/utils', '@angular/common', '@allianz/ngx-ndbx/base'], factory) :
    (global = global || self, factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx'].formfield = {}), global.ng.core, global.rxjs.operators, global.allianz['ngx-ndbx'].utils, global.ng.common, global.allianz['ngx-ndbx'].base));
}(this, (function (exports, core, operators, utils, common, base) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: appendix.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var uniqueId = 0;
    // This Directive solely purpose is to mark given ng-content and project it into the required destination.
    var NxFormfieldAppendixDirective = /** @class */ (function () {
        function NxFormfieldAppendixDirective() {
            /**
             * Sets the id of the formfield appendix.
             */
            this.id = "nx-formfield-appendix-" + uniqueId++;
        }
        NxFormfieldAppendixDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[nxFormfieldAppendix]',
                        host: {
                            '[attr.id]': 'id'
                        }
                    },] }
        ];
        NxFormfieldAppendixDirective.propDecorators = {
            id: [{ type: core.Input }]
        };
        return NxFormfieldAppendixDirective;
    }());
    if (false) {
        /**
         * Sets the id of the formfield appendix.
         * @type {?}
         */
        NxFormfieldAppendixDirective.prototype.id;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: error.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var uniqueId$1 = 0;
    var NxFormfieldErrorDirective = /** @class */ (function () {
        function NxFormfieldErrorDirective() {
            // create a unique id to be used by aria-described-by
            /**
             * Sets the id of the formfield error.
             */
            this.id = "nx-formfield-error-" + uniqueId$1++;
        }
        NxFormfieldErrorDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[nxFormfieldError], [nxError]',
                        host: {
                            role: 'alert',
                            '[attr.id]': 'id'
                        }
                    },] }
        ];
        NxFormfieldErrorDirective.propDecorators = {
            id: [{ type: core.Input }]
        };
        return NxFormfieldErrorDirective;
    }());
    if (false) {
        /**
         * Sets the id of the formfield error.
         * @type {?}
         */
        NxFormfieldErrorDirective.prototype.id;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: formfield-control.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docs-private
     * @abstract
     * @template T
     */
    var   /**
     * \@docs-private
     * @abstract
     * @template T
     */
    NxFormfieldControl = /** @class */ (function () {
        function NxFormfieldControl() {
        }
        return NxFormfieldControl;
    }());
    if (false) {
        /** @type {?} */
        NxFormfieldControl.prototype.value;
        /** @type {?} */
        NxFormfieldControl.prototype.stateChanges;
        /** @type {?} */
        NxFormfieldControl.prototype.empty;
        /** @type {?} */
        NxFormfieldControl.prototype.id;
        /** @type {?} */
        NxFormfieldControl.prototype.ngControl;
        /** @type {?} */
        NxFormfieldControl.prototype.focused;
        /** @type {?} */
        NxFormfieldControl.prototype.required;
        /** @type {?} */
        NxFormfieldControl.prototype.disabled;
        /** @type {?} */
        NxFormfieldControl.prototype.readonly;
        /** @type {?} */
        NxFormfieldControl.prototype.shouldLabelFloat;
        /** @type {?} */
        NxFormfieldControl.prototype.errorState;
        /**
         * The placeholder for this control.
         * @type {?}
         */
        NxFormfieldControl.prototype.placeholder;
        /**
         * An optional name for the control type that can be used to distinguish `nx-formfield` elements
         * based on their control type. The form field will add a class,
         * `nx-formfield--type-{{controlType}}` to its root element.
         * @type {?}
         */
        NxFormfieldControl.prototype.controlType;
        /**
         * @abstract
         * @param {?} ids
         * @return {?}
         */
        NxFormfieldControl.prototype.setDescribedByIds = function (ids) { };
        /**
         * @abstract
         * @param {?} value
         * @return {?}
         */
        NxFormfieldControl.prototype.setAriaLabel = function (value) { };
        /**
         * @abstract
         * @return {?}
         */
        NxFormfieldControl.prototype.elementRef = function () { };
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: hint.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var uniqueId$2 = 0;
    // This Directive solely purpose is to mark given ng-content and project it into the required destination.
    var NxFormfieldHintDirective = /** @class */ (function () {
        function NxFormfieldHintDirective() {
            /**
             * Sets the id of the formfield hint.
             */
            this.id = "nx-formfield-hint-" + uniqueId$2++;
        }
        NxFormfieldHintDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[nxFormfieldHint]',
                        host: {
                            '[attr.id]': 'id'
                        }
                    },] }
        ];
        NxFormfieldHintDirective.propDecorators = {
            id: [{ type: core.Input }]
        };
        return NxFormfieldHintDirective;
    }());
    if (false) {
        /**
         * Sets the id of the formfield hint.
         * @type {?}
         */
        NxFormfieldHintDirective.prototype.id;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: note.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var uniqueId$3 = 0;
    // This Directive solely purpose is to mark given ng-content and project it into the required destination.
    var NxFormfieldNoteDirective = /** @class */ (function () {
        function NxFormfieldNoteDirective() {
            /**
             * Sets the id of the formfield note.
             */
            this.id = "nx-formfield-note-" + uniqueId$3++;
        }
        NxFormfieldNoteDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[nxFormfieldNote]',
                        host: {
                            '[attr.id]': 'id'
                        }
                    },] }
        ];
        NxFormfieldNoteDirective.propDecorators = {
            id: [{ type: core.Input }]
        };
        return NxFormfieldNoteDirective;
    }());
    if (false) {
        /**
         * Sets the id of the formfield note.
         * @type {?}
         */
        NxFormfieldNoteDirective.prototype.id;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: suffix.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // This Directive solely purpose is to mark given ng-content and project it into the required destination.
    var NxFormfieldSuffixDirective = /** @class */ (function () {
        function NxFormfieldSuffixDirective() {
        }
        NxFormfieldSuffixDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[nxFormfieldSuffix]'
                    },] }
        ];
        return NxFormfieldSuffixDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: prefix.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // This Directive solely purpose is to mark given ng-content and project it into the required destination.
    var NxFormfieldPrefixDirective = /** @class */ (function () {
        function NxFormfieldPrefixDirective() {
        }
        NxFormfieldPrefixDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[nxFormfieldPrefix]'
                    },] }
        ];
        return NxFormfieldPrefixDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: label.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * A directive for passing more complex custom label content.
     */
    var NxFormfieldLabelDirective = /** @class */ (function () {
        function NxFormfieldLabelDirective() {
        }
        NxFormfieldLabelDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: 'nx-formfield-label'
                    },] }
        ];
        return NxFormfieldLabelDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: formfield.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NX_STYLES = {
        'negative': 'nx-formfield--negative'
    };
    /**
     * Represents the default options for the form field that can be configured
     * using the `FORMFIELD_DEFAULT_OPTIONS` injection token.
     * @record
     */
    function FormfieldDefaultOptions() { }
    if (false) {
        /**
         * Sets the default appearance. (optional)
         * @type {?|undefined}
         */
        FormfieldDefaultOptions.prototype.appearance;
        /**
         * Sets the default float label type. (optional)
         * @type {?|undefined}
         */
        FormfieldDefaultOptions.prototype.nxFloatLabel;
    }
    /** @type {?} */
    var FORMFIELD_DEFAULT_OPTIONS = new core.InjectionToken('FORMFIELD_DEFAULT_OPTIONS');
    var NxFormfieldComponent = /** @class */ (function () {
        function NxFormfieldComponent(elementRef, renderer, _changeDetectorRef, _defaultOptions) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this._changeDetectorRef = _changeDetectorRef;
            this._defaultOptions = _defaultOptions;
            this._styles = '';
            this._subscriptions = [];
        }
        Object.defineProperty(NxFormfieldComponent.prototype, "floatLabel", {
            /**
             * Whether the label should float once the input is focused or filled (auto, default)
             * or force it to always float with a value of always to simulate a more static form.
             */
            get: /**
             * Whether the label should float once the input is focused or filled (auto, default)
             * or force it to always float with a value of always to simulate a more static form.
             * @return {?}
             */
            function () {
                return this._floatLabel || (this._defaultOptions && this._defaultOptions.nxFloatLabel) || 'auto';
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value !== this._floatLabel) {
                    this._floatLabel = value || 'auto';
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxFormfieldComponent.prototype, "styles", {
            /**
             * Sets the styling of the formfield.
             * If 'negative', a negative set of stylings is used.
             */
            set: /**
             * Sets the styling of the formfield.
             * If 'negative', a negative set of stylings is used.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                var _this = this;
                if (this._styles === value) {
                    return;
                }
                /** @type {?} */
                var classNames = utils.getClassNameList(value, NX_STYLES);
                classNames.forEach((/**
                 * @param {?} classStr
                 * @return {?}
                 */
                function (classStr) {
                    _this.renderer.addClass(_this.elementRef.nativeElement, classStr);
                }));
                this._styles = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxFormfieldComponent.prototype, "appearance", {
            get: /**
             * @return {?}
             */
            function () {
                return this._appearance || (this._defaultOptions && this._defaultOptions.appearance) || 'auto';
            },
            /**
             * **NDBX Expert option**
             *
             * Sets the appearance of the formfield.
             */
            set: /**
             * **NDBX Expert option**
             *
             * Sets the appearance of the formfield.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (this._appearance !== value) {
                    this._appearance = value;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxFormfieldComponent.prototype, "_shouldAlwaysFloat", {
            get: /**
             * @return {?}
             */
            function () {
                return this.floatLabel === 'always';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxFormfieldComponent.prototype, "shouldLabelFloat", {
            /** @docs-private */
            get: /**
             * \@docs-private
             * @return {?}
             */
            function () {
                return (this._control.shouldLabelFloat || this._shouldAlwaysFloat);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxFormfieldComponent.prototype, "control", {
            /** @docs-private */
            get: /**
             * \@docs-private
             * @return {?}
             */
            function () {
                return this._control;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NxFormfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var subscription;
            /** @type {?} */
            var subscriptions = [];
            this._validateControlChild();
            if (this._control.controlType) {
                this.elementRef.nativeElement.classList.add("nx-formfield--type-" + this._control.controlType);
            }
            // Subscribe to changes in the child control state in order to update the form field UI.
            subscription = this._control.stateChanges.pipe(operators.startWith(null), operators.delay(0)).subscribe((/**
             * @return {?}
             */
            function () {
                _this._syncDescribedByIds();
                _this._changeDetectorRef.markForCheck();
            }));
            subscriptions.push(subscription);
            // Re-validate when the number of hints changes.
            subscription = this._hintChildren.changes.pipe(operators.startWith(null), operators.delay(0)).subscribe((/**
             * @return {?}
             */
            function () {
                _this._changeDetectorRef.markForCheck();
            }));
            subscriptions.push(subscription);
            // Update the aria-described by when the number of errors changes.
            subscription = this._errorChildren.changes.pipe(operators.startWith(null), operators.delay(0)).subscribe((/**
             * @return {?}
             */
            function () {
                _this._syncDescribedByIds();
                _this._changeDetectorRef.markForCheck();
            }));
            subscriptions.push(subscription);
            this._subscriptions = subscriptions;
        };
        /**
         * @return {?}
         */
        NxFormfieldComponent.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
        function () {
            this._validateControlChild();
        };
        /**
         * @return {?}
         */
        NxFormfieldComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this._subscriptions.forEach((/**
             * @param {?} subscription
             * @return {?}
             */
            function (subscription) { return subscription.unsubscribe(); }));
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxFormfieldComponent.prototype.getDisplayedMessage = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            if (this._control.errorState && this._errorChildren && this._errorChildren.length > 0) {
                return 'error';
            }
            if (this._noteChildren && this._noteChildren.length > 0) {
                return 'note';
            }
            return '';
        };
        /**
         * @private
         * @return {?}
         */
        NxFormfieldComponent.prototype._syncDescribedByIds = /**
         * @private
         * @return {?}
         */
        function () {
            if (this._control) {
                /** @type {?} */
                var ids = [];
                ids = this._hintChildren.map((/**
                 * @param {?} hint
                 * @return {?}
                 */
                function (hint) { return hint.id; }));
                if (this.getDisplayedMessage() === 'note') {
                    ids = __spread(this._noteChildren.map((/**
                     * @param {?} hint
                     * @return {?}
                     */
                    function (hint) { return hint.id; })), ids);
                }
                else if (this._errorChildren) {
                    ids = __spread(this._errorChildren.map((/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) { return error.id; })), ids);
                }
                this._control.setDescribedByIds(ids);
            }
        };
        // Fail if the required control is missing.
        // Fail if the required control is missing.
        /**
         * @protected
         * @return {?}
         */
        NxFormfieldComponent.prototype._validateControlChild = 
        // Fail if the required control is missing.
        /**
         * @protected
         * @return {?}
         */
        function () {
            if (!this._control) {
                throw new Error('Formfield must contain a NxFormfieldControl like input[nxInput] or a custom implementation');
            }
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxFormfieldComponent.prototype.getConnectedOverlayOrigin = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._connectionContainerRef || this.elementRef;
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxFormfieldComponent.prototype._hasLabel = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return !!this._labelChild || !!this.label;
        };
        /** @docs-private
         * The placeholder is hidden when
         *  - the control is not empty
         *  - The label is not floated
         * */
        /**
         * \@docs-private
         * The placeholder is hidden when
         *  - the control is not empty
         *  - The label is not floated
         *
         * @return {?}
         */
        NxFormfieldComponent.prototype._hideControlPlaceholder = /**
         * \@docs-private
         * The placeholder is hidden when
         *  - the control is not empty
         *  - The label is not floated
         *
         * @return {?}
         */
        function () {
            return !this.shouldLabelFloat && this._hasLabel() || this._control.empty === false;
        };
        NxFormfieldComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-formfield',
                        template: "<!--\nWe are building the following structure.\n\n+-----------------------------+ +-----------+\n| Prefix |   Input   | Suffix | |  Appendix |\n+-----------------------------+ +-----------+\n|-----------------Border--------------------|\n+-------------------------------------------+\n|                 Hints                     |\n+-------------------------------------------+\n|                                           |\n|                Messages                   |\n|                                           |\n+-------------------------------------------+\n\n-->\n\n<div class=\"nx-formfield__wrapper\">\n\n\n  <!-- Give a flex context to properly align suffix, input & postfix -->\n  <div class=\"nx-formfield__row\" #connectionContainer>\n    <div class=\"nx-formfield__flexfield\">\n\n\n      <div class=\"nx-formfield__input-container\">\n        <div class=\"nx-formfield__prefix\" *ngIf=\"_prefixChildren.length\">\n          <ng-content select=\"[nxFormfieldPrefix]\"></ng-content>\n        </div>\n\n        <div class=\"nx-formfield__input\">\n          <ng-content></ng-content>\n\n          <!-- This handles the floating whole behavior -->\n          <span class=\"nx-formfield__label-holder\">\n            <label class=\"nx-formfield__label\" [attr.aria-owns]=\"_control.id\"\n              [attr.for]=\"_control.id\">\n              <ng-container *ngIf=\"!_labelChild\">\n                {{ label }}\n              </ng-container>\n              <ng-content select=\"nx-formfield-label\"></ng-content>\n            </label>\n          </span>\n        </div>\n\n        <div class=\"nx-formfield__suffix\" *ngIf=\"_suffixChildren.length\">\n          <ng-content select=\"[nxFormfieldSuffix]\"></ng-content>\n        </div>\n      </div>\n      <!-- Space to render the hints below the textfield -->\n      <div class=\"nx-formfield__hints\" *ngIf=\"_hintChildren.length\">\n        <ng-content select=\"[nxFormfieldHint]\"></ng-content>\n      </div>\n    </div>\n\n    <!-- Appendix is similar to a suffix but visibly outside of the input  -->\n    <div class=\"nx-formfield__appendix\" *ngIf=\"_appendixChildren.length\">\n      <ng-content select=\"[nxFormfieldAppendix]\"></ng-content>\n    </div>\n  </div>\n\n  <!-- In case we got some additional information we render them below the given input -->\n  <ng-container [ngSwitch]=\"getDisplayedMessage()\">\n    <div class=\"nx-formfield__message\" *ngSwitchCase=\"'error'\">\n      <ng-content select=\"[nxFormfieldError]\"></ng-content>\n    </div>\n\n    <div class=\"nx-formfield__message\" *ngSwitchCase=\"'note'\">\n      <ng-content select=\"[nxFormfieldNote]\"></ng-content>\n    </div>\n  </ng-container>\n</div>\n",
                        host: {
                            '[class.nx-formfield]': 'true',
                            '[class.is-disabled]': 'this._control.disabled',
                            '[class.is-readonly]': 'this._control.readonly',
                            '[class.is-filled]': 'this._control.empty === false',
                            '[class.is-focused]': 'this._control.focused',
                            '[class.is-floating]': 'this.shouldLabelFloat',
                            '[class.has-error]': 'this._control.errorState',
                            '[class.has-outline]': 'this.appearance === "outline"',
                            '[class.has-hint]': 'this._hintChildren?.length > 0',
                        },
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        encapsulation: core.ViewEncapsulation.None,
                        styles: [".nx-formfield{display:block;color:#414141;color:var(--text-01,#414141)}.nx-formfield__wrapper{padding-bottom:24px;padding-bottom:var(--formfield-bottom-padding,24px);padding-top:16px;padding-top:var(--formfield-label-height,16px)}.has-hint .nx-formfield__wrapper{padding-bottom:0}.nx-formfield__row{min-height:32px;min-height:var(--formfield-control-height,32px);background-color:transparent;background-color:var(--formfield-background-color,transparent);display:flex;align-items:stretch;width:100%}.nx-formfield__row:after{content:'';font-size:0;display:block;min-height:inherit}.nx-formfield__flexfield{font-size:20px;font-size:var(--formfield-control-font-size,20px);line-height:28px;line-height:var(--formfield-control-line-height,28px);font-weight:600;font-weight:var(--formfield-control-font-weight,600);letter-spacing:.2px;letter-spacing:var(--formfield-control-letter-spacing,.2px);align-items:stretch;flex-direction:column;display:inline-flex;width:100%;position:relative;min-width:0;flex:0 1 auto}.nx-formfield__input-container{display:flex;border-bottom:1px solid #414141;border-bottom:var(--formfield-border-width,1px) solid var(--formfield-border-color,#414141);height:32px;height:var(--formfield-control-height,32px);flex:auto;padding:0 0 3px;padding:var(--formfield-input-padding,0 0 3px 0)}.nx-formfield__input{position:relative;flex:auto;min-width:0;display:flex}.nx-formfield__label-holder{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none;z-index:10}.nx-formfield__label{font-size:20px;font-size:var(--formfield-placeholder-label-font-size,20px);line-height:28px;line-height:var(--formfield-placeholder-label-line-height,28px);font-weight:300;font-weight:var(--formfield-placeholder-label-font-weight,300);letter-spacing:.2px;letter-spacing:var(--formfield-placeholder-label-letter-spacing,.2px);color:#414141;color:var(--formfield-label-color,#414141);display:block;position:absolute;left:0;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform .15s ease-out,font-size .15s ease-out;-webkit-text-size-adjust:100%;-moz-text-size-adjust:100%;-ms-text-size-adjust:100%;text-size-adjust:100%}.nx-formfield__appendix,.nx-formfield__prefix,.nx-formfield__suffix{align-items:center;flex:none;white-space:nowrap;color:#414141;color:var(--formfield-control-color,#414141)}.nx-formfield__appendix nx-icon.nx-icon--auto,.nx-formfield__prefix nx-icon.nx-icon--auto,.nx-formfield__suffix nx-icon.nx-icon--auto{font-size:24px;font-size:var(--formfield-icon-size,24px);font-weight:400}.nx-formfield__appendix nx-icon,.nx-formfield__prefix nx-icon,.nx-formfield__suffix nx-icon{display:block}.nx-formfield__prefix,.nx-formfield__suffix{display:inline-flex}.nx-formfield__appendix{height:32px;height:var(--formfield-control-height,32px);margin-left:8px;display:flex;border-bottom-width:var(--formfield-border-width,1px);padding:0 0 3px;padding:var(--formfield-input-padding,0 0 3px 0);border-bottom:1px solid transparent}.nx-formfield__prefix{margin-right:8px}.nx-formfield__suffix{margin-left:8px}.nx-formfield__hints{color:#414141;color:var(--text-01,#414141);font-size:12px;font-size:var(--formfield-hint-font-size,12px);line-height:16px;line-height:var(--formfield-hint-line-height,16px);font-weight:400;font-weight:var(--formfield-hint-font-weight,400);letter-spacing:.5px;letter-spacing:var(--formfield-hint-letter-spacing,.5px);padding-top:8px;text-align:right}[nxformfieldhint]{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.nx-formfield__message{margin-top:4px}.nx-formfield:not(.nx-formfield--negative) .nx-formfield__appendix nx-icon{color:#006192;color:var(--formfield-active-color,#006192)}.nx-formfield.is-focused .nx-formfield__label{text-overflow:ellipsis}.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error){color:#006192;color:var(--formfield-active-color,#006192)}.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error) .nx-formfield__input-container{border-bottom-color:#007ab3;border-bottom-color:var(--formfield-active-border-color,#007ab3)}.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error).nx-formfield--negative{color:#fff}.nx-formfield:not(.nx-formfield--negative):not(.has-error):not(.is-disabled):not(.is-focused):not(.has-outline) .nx-formfield__row:hover .nx-formfield__input-container{border-bottom-color:#414141;border-bottom-color:var(--formfield-hover-border-color,#414141)}.nx-formfield.is-focused:not(.nx-formfield--negative).has-outline .nx-formfield__input-container{border-color:#006192;border-color:var(--formfield-outline-active-border-color,#006192);box-shadow:0 0 0 2px #009de6;box-shadow:var(--formfield-outline-focus-box-shadow,0 0 0 2px #009de6)}.nx-formfield.is-focused:not(.nx-formfield--negative).has-outline.has-error .nx-formfield__input-container{border-bottom-color:#dc3149;border-bottom-color:var(--danger,#dc3149)}.nx-formfield.has-outline{font-size:16px;font-size:var(--formfield-outline-control-font-size,16px);line-height:24px;line-height:var(--formfield-outline-control-line-height,24px);font-weight:400;font-weight:var(--formfield-outline-control-font-weight,400);letter-spacing:0;letter-spacing:var(--formfield-outline-control-letter-spacing,0)}.nx-formfield.has-outline.nx-formfield--type-textarea .nx-formfield__input-container{height:auto}.nx-formfield.has-outline .nx-formfield__wrapper{padding-top:28px;padding-top:var(--formfield-outline-label-height,28px)}.nx-formfield.has-outline .nx-formfield__row{min-height:40px;min-height:var(--formfield-outline-control-height,40px)}.nx-formfield.has-outline .nx-formfield__flexfield{font-size:16px;font-size:var(--formfield-outline-control-font-size,16px);line-height:24px;line-height:var(--formfield-outline-control-line-height,24px);font-weight:400;font-weight:var(--formfield-outline-control-font-weight,400);letter-spacing:0;letter-spacing:var(--formfield-outline-control-letter-spacing,0);padding:0}.nx-formfield.has-outline .nx-formfield__input-container{padding:0;border-width:var(--formfield-border-width,1px);border-color:var(--formfield-outline-border-color,#767676);border-radius:4px;height:40px;height:var(--formfield-outline-control-height,40px);border:1px solid #767676}.nx-formfield.has-outline input,.nx-formfield.has-outline nx-dropdown .nx-dropdown__container{padding:0 7px}.nx-formfield.has-outline .nx-formfield__suffix{margin-right:7px;margin-left:0}.nx-formfield.has-outline .nx-formfield__prefix{margin-left:7px;margin-right:0}.nx-formfield.has-outline .nx-formfield__input textarea[nxInput]{line-height:24px;padding:7px}.nx-formfield.has-outline .nx-formfield__appendix{height:40px;height:var(--formfield-outline-control-height,40px);margin-left:8px;display:flex;border-top:1px solid transparent;border-top:var(--formfield-border-width,1px) solid transparent;border-bottom:1px solid transparent;border-bottom:var(--formfield-border-width,1px) solid transparent;padding:0}.nx-formfield.has-outline .nx-formfield__hints{text-align:left;font-size:16px;font-size:var(--formfield-outline-hint-font-size,16px);line-height:1em;line-height:var(--formfield-outline-hint-line-height,1em);font-weight:400;font-weight:var(--formfield-outline-hint-font-weight,400);letter-spacing:0;letter-spacing:var(--formfield-outline-hint-letter-spacing,0)}.nx-formfield.has-outline input::-ms-input-placeholder{font-size:16px;font-size:var(--formfield-outline-input-native-placeholder-font-size,16px);line-height:40px;line-height:var(--formfield-outline-input-native-placeholder-line-height,40px);font-weight:200;font-weight:var(--formfield-outline-input-native-placeholder-font-weight,200);letter-spacing:0;letter-spacing:var(--formfield-outline-input-native-placeholder-letter-spacing,0);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676)}.nx-formfield.has-outline input::placeholder{font-size:16px;font-size:var(--formfield-outline-input-native-placeholder-font-size,16px);line-height:40px;line-height:var(--formfield-outline-input-native-placeholder-line-height,40px);font-weight:200;font-weight:var(--formfield-outline-input-native-placeholder-font-weight,200);letter-spacing:0;letter-spacing:var(--formfield-outline-input-native-placeholder-letter-spacing,0);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676)}.nx-formfield.has-outline input::-moz-placeholder{font-size:16px;font-size:var(--formfield-outline-input-native-placeholder-font-size,16px);line-height:40px;line-height:var(--formfield-outline-input-native-placeholder-line-height,40px);font-weight:200;font-weight:var(--formfield-outline-input-native-placeholder-font-weight,200);letter-spacing:0;letter-spacing:var(--formfield-outline-input-native-placeholder-letter-spacing,0);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676)}.nx-formfield.has-outline input::-webkit-input-placeholder{font-size:16px;font-size:var(--formfield-outline-input-native-placeholder-font-size,16px);line-height:40px;line-height:var(--formfield-outline-input-native-placeholder-line-height,40px);font-weight:200;font-weight:var(--formfield-outline-input-native-placeholder-font-weight,200);letter-spacing:0;letter-spacing:var(--formfield-outline-input-native-placeholder-letter-spacing,0);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676)}.nx-formfield.has-outline input:-ms-input-placeholder{font-size:16px;font-size:var(--formfield-outline-input-native-placeholder-font-size,16px);line-height:40px;line-height:var(--formfield-outline-input-native-placeholder-line-height,40px);font-weight:200;font-weight:var(--formfield-outline-input-native-placeholder-font-weight,200);letter-spacing:0;letter-spacing:var(--formfield-outline-input-native-placeholder-letter-spacing,0);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676)}.nx-formfield.has-outline.is-readonly .nx-formfield__input-container{border-color:#c2c2c2;border-color:var(--formfield-readonly-border-color,#c2c2c2);background-color:#f5f5f5;background-color:var(--formfield-readonly-background-color,#f5f5f5)}.nx-formfield.is-floating .nx-formfield__label{transform:translateY(-16px);transform:translateY(var(--formfield-floating-distance,-16px));font-size:12px;font-size:var(--formfield-label-font-size,12px);line-height:16px;line-height:var(--formfield-label-line-height,16px);font-weight:600;font-weight:var(--formfield-label-font-weight,600);letter-spacing:.5px;letter-spacing:var(--formfield-label-letter-spacing,.5px)}.nx-formfield.is-floating.is-filled .nx-formfield__label{transition:none}.nx-formfield.is-floating.has-outline .nx-formfield__label{padding-top:0;transform:translateY(-29px);transform:translateY(var(--formfield-outline-floating-distance,-29px));font-size:16px;font-size:var(--formfield-outline-label-font-size,16px);line-height:24px;line-height:var(--formfield-outline-label-line-height,24px);font-weight:600;font-weight:var(--formfield-outline-label-font-weight,600);letter-spacing:0;letter-spacing:var(--formfield-outline-label-letter-spacing,0)}.nx-formfield.is-floating.has-outline .nx-formfield__prefix~.nx-formfield__input .nx-formfield__label{padding:0 7px}.nx-formfield.has-error:not(.has-outline) .nx-formfield__input input[nxInput],.nx-formfield.has-error:not(.has-outline) .nx-formfield__prefix,.nx-formfield.has-error:not(.has-outline) .nx-formfield__suffix,.nx-formfield.has-error:not(.has-outline):not(.is-floating) .nx-formfield__label{font-weight:700;font-weight:var(--formfield-error-input-font-weight,700)}.nx-formfield.has-error:not(.nx-formfield--negative),.nx-formfield.has-error:not(.nx-formfield--negative):not(.has-outline) .nx-formfield__label,.nx-formfield.has-error:not(.nx-formfield--negative):not(.has-outline) .nx-formfield__prefix,.nx-formfield.has-error:not(.nx-formfield--negative):not(.has-outline) .nx-formfield__suffix{color:#dc3149;color:var(--danger,#dc3149)}.nx-formfield.has-error:not(.nx-formfield--negative) .nx-formfield__input-container{border-bottom-color:#dc3149;border-bottom-color:var(--danger,#dc3149)}.nx-formfield.has-error:not(.nx-formfield--negative).is-floating .nx-formfield__label{color:#414141;color:var(--formfield-label-color,#414141)}.nx-formfield.has-error:not(.nx-formfield--negative).has-outline{color:#414141;color:var(--text-01,#414141)}.nx-formfield.has-error:not(.nx-formfield--negative).has-outline .nx-formfield__input-container{border-color:#dc3149;border-color:var(--danger,#dc3149)}.nx-formfield.is-disabled{color:#c2c2c2;color:var(--formfield-disabled-text-color,#c2c2c2);-webkit-text-fill-color:#c2c2c2;-webkit-text-fill-color:var(--formfield-disabled-text-color,#c2c2c2);cursor:not-allowed}.nx-formfield.is-disabled .nx-formfield__hints{color:inherit}.nx-formfield.is-disabled .nx-formfield__input-container{border-bottom-color:#c2c2c2;border-bottom-color:var(--formfield-disabled-border-color,#c2c2c2)}.nx-formfield.is-disabled.has-outline .nx-formfield__input-container{border-color:#c2c2c2;border-color:var(--formfield-disabled-border-color,#c2c2c2)}.nx-formfield.is-disabled nx-datepicker-toggle button{color:#c2c2c2;color:var(--formfield-disabled-text-color,#c2c2c2)}.nx-formfield--negative{color:#fff}.nx-formfield--negative .nx-formfield__hints{color:inherit}.nx-formfield--negative .nx-formfield__input-container,.nx-formfield--negative.has-outline .nx-formfield__input-container{border-color:#fff}.nx-formfield--negative .nx-formfield__appendix,.nx-formfield--negative .nx-formfield__label,.nx-formfield--negative .nx-formfield__prefix,.nx-formfield--negative .nx-formfield__suffix{color:#fff}.nx-formfield--type-nx-dropdown .nx-formfield__label{width:calc(100% - 24px);width:calc(100% - var(--formfield-icon-size,24px))}.nx-formfield__input textarea[nxInput]{vertical-align:bottom}@media screen and (-ms-high-contrast:active){.nx-formfield.is-focused:not(.nx-formfield--negative).has-outline .nx-formfield__input-container{box-shadow:0 0 0 2px windowText}.nx-formfield__input-container{border-bottom-color:buttonText}.nx-formfield.has-outline .nx-formfield__input-container{border-color:buttonText}.nx-formfield.has-outline .nx-formfield__appendix{border-bottom-color:window;border-top-color:window}.nx-formfield.is-disabled{color:GrayText;-webkit-text-fill-color:GrayText}.nx-formfield.is-disabled .nx-formfield__input-container{border-bottom-color:GrayText}.nx-formfield.is-disabled .nx-formfield__hints{color:windowText}.nx-formfield.is-disabled.has-outline .nx-formfield__input-container{border-color:GrayText}.nx-formfield.is-focused:not(.has-outline) .nx-formfield__input-container{border-bottom-color:highlight}.nx-formfield:not(.nx-formfield--negative) .nx-formfield__appendix nx-icon{color:inherit}}.nx-formfield--type-textarea .nx-formfield__flexfield{padding:0}.nx-formfield--type-textarea .nx-formfield__input-container{height:auto}input:-webkit-autofill{transition:background-color 5000s ease-in-out}input:-webkit-autofill::first-line{font-size:20px;font-size:var(--formfield-control-font-size,20px);line-height:28px;line-height:var(--formfield-control-line-height,28px);font-weight:600;font-weight:var(--formfield-control-font-weight,600);letter-spacing:.2px;letter-spacing:var(--formfield-control-letter-spacing,.2px);font-family:'Allianz Neo',sans-serif!important}", "@-webkit-keyframes cdk-text-field-autofill-start{/*!*/}@keyframes cdk-text-field-autofill-start{/*!*/}@-webkit-keyframes cdk-text-field-autofill-end{/*!*/}@keyframes cdk-text-field-autofill-end{/*!*/}.cdk-text-field-autofill-monitored:-webkit-autofill{-webkit-animation:0s 1ms cdk-text-field-autofill-start;animation:0s 1ms cdk-text-field-autofill-start}.cdk-text-field-autofill-monitored:not(:-webkit-autofill){-webkit-animation:0s 1ms cdk-text-field-autofill-end;animation:0s 1ms cdk-text-field-autofill-end}textarea.cdk-textarea-autosize{resize:none}textarea.cdk-textarea-autosize-measuring{height:auto!important;overflow:hidden!important;padding:2px 0!important;box-sizing:content-box!important}.c-input{text-align:inherit;font-size:inherit;font-weight:inherit;background:0 0;color:inherit;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%}.c-input::-ms-clear{display:none}.c-input::-webkit-search-cancel-button,.c-input::-webkit-search-decoration,.c-input::-webkit-search-results-button,.c-input::-webkit-search-results-decoration{display:none;-webkit-appearance:none}.c-input::-ms-input-placeholder{-ms-user-select:none;user-select:none;font-size:20px;font-size:var(--formfield-input-native-placeholder-font-size,20px);line-height:28px;line-height:var(--formfield-input-native-placeholder-line-height,28px);font-weight:200;font-weight:var(--formfield-input-native-placeholder-font-weight,200);letter-spacing:.2px;letter-spacing:var(--formfield-input-native-placeholder-letter-spacing,.2px);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676);transition:color .1s ease-in .2s}.c-input::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;font-size:20px;font-size:var(--formfield-input-native-placeholder-font-size,20px);line-height:28px;line-height:var(--formfield-input-native-placeholder-line-height,28px);font-weight:200;font-weight:var(--formfield-input-native-placeholder-font-weight,200);letter-spacing:.2px;letter-spacing:var(--formfield-input-native-placeholder-letter-spacing,.2px);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676);transition:color .1s ease-in .2s}.c-input::-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.c-input::placeholder:-ms-input-placeholder{-ms-user-select:text}.c-input::-moz-placeholder{-moz-user-select:none;user-select:none;font-size:20px;font-size:var(--formfield-input-native-placeholder-font-size,20px);line-height:28px;line-height:var(--formfield-input-native-placeholder-line-height,28px);font-weight:200;font-weight:var(--formfield-input-native-placeholder-font-weight,200);letter-spacing:.2px;letter-spacing:var(--formfield-input-native-placeholder-letter-spacing,.2px);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676);transition:color .1s ease-in .2s}.c-input::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.c-input::-webkit-input-placeholder{-webkit-user-select:none;user-select:none;font-size:20px;font-size:var(--formfield-input-native-placeholder-font-size,20px);line-height:28px;line-height:var(--formfield-input-native-placeholder-line-height,28px);font-weight:200;font-weight:var(--formfield-input-native-placeholder-font-weight,200);letter-spacing:.2px;letter-spacing:var(--formfield-input-native-placeholder-letter-spacing,.2px);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676);transition:color .1s ease-in .2s}.c-input::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.c-input:-ms-input-placeholder{-ms-user-select:none;user-select:none;font-size:20px;font-size:var(--formfield-input-native-placeholder-font-size,20px);line-height:28px;line-height:var(--formfield-input-native-placeholder-line-height,28px);font-weight:200;font-weight:var(--formfield-input-native-placeholder-font-weight,200);letter-spacing:.2px;letter-spacing:var(--formfield-input-native-placeholder-letter-spacing,.2px);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676);transition:color .1s ease-in .2s}.c-input:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}textarea.c-input{height:auto;font-family:inherit}.c-input.is-focused{border:none;outline:0;box-shadow:none}.c-input.is-focused::-ms-input-placeholder{opacity:1;transition:opacity .2s ease-in 150ms}.c-input.is-focused::placeholder{opacity:1;transition:opacity .2s ease-in 150ms}.c-input.is-focused::-moz-placeholder{opacity:1;transition:opacity .2s ease-in 150ms}.c-input.is-focused::-webkit-input-placeholder{opacity:1;transition:opacity .2s ease-in 150ms}.c-input.is-focused:-ms-input-placeholder{opacity:1;transition:opacity .2s ease-in 150ms}.c-input.is-disabled{cursor:not-allowed}textarea.nx-input-element{resize:vertical;overflow:auto}.c-input:invalid,.c-input:required{box-shadow:none}"]
                    }] }
        ];
        /** @nocollapse */
        NxFormfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 },
            { type: core.ChangeDetectorRef },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [FORMFIELD_DEFAULT_OPTIONS,] }] }
        ]; };
        NxFormfieldComponent.propDecorators = {
            _control: [{ type: core.ContentChild, args: [NxFormfieldControl, { static: false },] }],
            label: [{ type: core.Input, args: ['nxLabel',] }],
            _labelChild: [{ type: core.ContentChild, args: [NxFormfieldLabelDirective, { static: false },] }],
            _hintChildren: [{ type: core.ContentChildren, args: [NxFormfieldHintDirective,] }],
            _noteChildren: [{ type: core.ContentChildren, args: [NxFormfieldNoteDirective,] }],
            _errorChildren: [{ type: core.ContentChildren, args: [NxFormfieldErrorDirective,] }],
            _suffixChildren: [{ type: core.ContentChildren, args: [NxFormfieldSuffixDirective,] }],
            _prefixChildren: [{ type: core.ContentChildren, args: [NxFormfieldPrefixDirective,] }],
            _appendixChildren: [{ type: core.ContentChildren, args: [NxFormfieldAppendixDirective,] }],
            _connectionContainerRef: [{ type: core.ViewChild, args: ['connectionContainer', { static: true },] }],
            floatLabel: [{ type: core.Input, args: ['nxFloatLabel',] }],
            styles: [{ type: core.Input, args: ['nxStyle',] }],
            appearance: [{ type: core.Input }]
        };
        return NxFormfieldComponent;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NxFormfieldComponent.prototype._styles;
        /**
         * @type {?}
         * @private
         */
        NxFormfieldComponent.prototype._subscriptions;
        /** @type {?} */
        NxFormfieldComponent.prototype._control;
        /**
         * Sets the label which will act as a floating label.
         * In addition, the component uses input and label to properly support accessibility.
         * @type {?}
         */
        NxFormfieldComponent.prototype.label;
        /** @type {?} */
        NxFormfieldComponent.prototype._labelChild;
        /** @type {?} */
        NxFormfieldComponent.prototype._hintChildren;
        /** @type {?} */
        NxFormfieldComponent.prototype._noteChildren;
        /** @type {?} */
        NxFormfieldComponent.prototype._errorChildren;
        /** @type {?} */
        NxFormfieldComponent.prototype._suffixChildren;
        /** @type {?} */
        NxFormfieldComponent.prototype._prefixChildren;
        /** @type {?} */
        NxFormfieldComponent.prototype._appendixChildren;
        /** @type {?} */
        NxFormfieldComponent.prototype._connectionContainerRef;
        /**
         * @type {?}
         * @private
         */
        NxFormfieldComponent.prototype._floatLabel;
        /**
         * @type {?}
         * @private
         */
        NxFormfieldComponent.prototype._appearance;
        /**
         * \@docs-private
         * @type {?}
         */
        NxFormfieldComponent.prototype.elementRef;
        /**
         * @type {?}
         * @private
         */
        NxFormfieldComponent.prototype.renderer;
        /**
         * @type {?}
         * @private
         */
        NxFormfieldComponent.prototype._changeDetectorRef;
        /**
         * @type {?}
         * @private
         */
        NxFormfieldComponent.prototype._defaultOptions;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: formfield.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxFormfieldModule = /** @class */ (function () {
        function NxFormfieldModule() {
        }
        NxFormfieldModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            NxFormfieldComponent,
                            NxFormfieldHintDirective,
                            NxFormfieldErrorDirective,
                            NxFormfieldNoteDirective,
                            NxFormfieldPrefixDirective,
                            NxFormfieldSuffixDirective,
                            NxFormfieldAppendixDirective,
                            NxFormfieldLabelDirective
                        ],
                        exports: [
                            NxFormfieldComponent,
                            NxFormfieldHintDirective,
                            NxFormfieldErrorDirective,
                            NxFormfieldNoteDirective,
                            NxFormfieldPrefixDirective,
                            NxFormfieldSuffixDirective,
                            NxFormfieldAppendixDirective,
                            NxFormfieldLabelDirective,
                            base.NxErrorModule,
                            base.NxLabelModule
                        ]
                    },] }
        ];
        return NxFormfieldModule;
    }());

    exports.FORMFIELD_DEFAULT_OPTIONS = FORMFIELD_DEFAULT_OPTIONS;
    exports.NxFormfieldAppendixDirective = NxFormfieldAppendixDirective;
    exports.NxFormfieldComponent = NxFormfieldComponent;
    exports.NxFormfieldControl = NxFormfieldControl;
    exports.NxFormfieldErrorDirective = NxFormfieldErrorDirective;
    exports.NxFormfieldHintDirective = NxFormfieldHintDirective;
    exports.NxFormfieldLabelDirective = NxFormfieldLabelDirective;
    exports.NxFormfieldModule = NxFormfieldModule;
    exports.NxFormfieldNoteDirective = NxFormfieldNoteDirective;
    exports.NxFormfieldPrefixDirective = NxFormfieldPrefixDirective;
    exports.NxFormfieldSuffixDirective = NxFormfieldSuffixDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=allianz-ngx-ndbx-formfield.umd.js.map
