(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/coercion'), require('@angular/core'), require('@angular/cdk/keycodes'), require('@allianz/ngx-ndbx/icon'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/taglist', ['exports', '@angular/cdk/coercion', '@angular/core', '@angular/cdk/keycodes', '@allianz/ngx-ndbx/icon', '@angular/forms', '@angular/common'], factory) :
    (global = global || self, factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx'].taglist = {}), global.ng.cdk.coercion, global.ng.core, global.ng.cdk.keycodes, global.allianz['ngx-ndbx'].icon, global.ng.forms, global.ng.common));
}(this, (function (exports, coercion, core, keycodes, icon, forms, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: tag.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxTagComponent = /** @class */ (function () {
        function NxTagComponent(_changeDetectorRef) {
            this._changeDetectorRef = _changeDetectorRef;
            this._tabindex = -1;
            /**
             * An event is dispatched each time when the tag is clicked.
             */
            this.clicked = new core.EventEmitter();
            /**
             * An event is dispatched each time when the tag is removed.
             */
            this.removed = new core.EventEmitter();
        }
        Object.defineProperty(NxTagComponent.prototype, "removable", {
            get: /**
             * @return {?}
             */
            function () {
                return this._removable;
            },
            /** Whether the tag is removeable. */
            set: /**
             * Whether the tag is removeable.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._removable = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxTagComponent.prototype, "tabindex", {
            get: /**
             * @return {?}
             */
            function () {
                return this.removable ? 0 : this._tabindex;
            },
            /**
             * Sets the tab-index of a tag. Default value: -1.
             *
             * If `nxAllowTagDeletion` of the taglist is set to true, the default value is 0.
             */
            set: /**
             * Sets the tab-index of a tag. Default value: -1.
             *
             * If `nxAllowTagDeletion` of the taglist is set to true, the default value is 0.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._tabindex = coercion.coerceNumberProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxTagComponent.prototype, "value", {
            get: /**
             * @return {?}
             */
            function () {
                return this._value;
            },
            /** Sets the value of the tag. */
            set: /**
             * Sets the value of the tag.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (this._value !== value) {
                    this._value = value;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        /** @docs-private */
        // Emit the removed event that the parent can remove the value
        /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        // Emit the removed event that the parent can remove the value
        NxTagComponent.prototype.removeClickHandler = /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        // Emit the removed event that the parent can remove the value
        function (event) {
            event.stopPropagation();
            this.removed.emit(this.value);
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        NxTagComponent.prototype.removeKeyHandler = /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.removable && (event.keyCode === keycodes.DELETE || event.keyCode === keycodes.BACKSPACE)) {
                event.preventDefault();
                event.stopPropagation();
                this.removed.emit(this.value);
            }
            if (event.keyCode === keycodes.ENTER) {
                this.clicked.emit(this.value);
            }
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxTagComponent.prototype.tagClickHandler = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            this.clicked.emit(this.value);
        };
        NxTagComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-tag',
                        template: "{{ value }}\n<span role=\"link\" aria-label=\"close\" class=\"nx-tag__close\" *ngIf=\"removable\"\n    (click)=\"removeClickHandler($event)\">\n    <nx-icon class=\"nx-tag__close-icon\" name=\"close\"></nx-icon>\n</span>",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        host: {
                            '(click)': 'tagClickHandler()',
                            '(keydown)': 'removeKeyHandler($event)',
                            '[attr.tabindex]': 'tabindex'
                        },
                        styles: [":host{font-size:14px;font-size:var(--taglist-font-size,14px);line-height:16px;line-height:var(--taglist-line-height,16px);font-weight:600;font-weight:var(--taglist-font-weight,600);letter-spacing:1px;letter-spacing:var(--taglist-letter-spacing,1px);height:auto;max-width:100%;color:#767676;color:var(--taglist-color,#767676);background-color:transparent;background-color:var(--taglist-background-color,transparent);padding:6px 14px;display:flex;align-items:center;border:2px solid #d9d9d9;border:2px solid var(--taglist-border-color,#d9d9d9);border-radius:4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:background-color .2s,box-shadow .2s;cursor:pointer}:host:hover{border-color:#c2c2c2;border-color:var(--taglist-hover-border-color,#c2c2c2);color:#5b5b5b;color:var(--taglist-hover-color,#5b5b5b);background-color:#ececec;background-color:var(--taglist-hover-background-color,#ececec)}:host:focus{outline:transparent solid 2px}:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}.nx-tag__close-icon{outline:0;display:block;font-size:16px;font-size:var(--taglist-close-icon-size,16px)}.nx-tag__close{margin-left:8px}:host-context(.nx-taglist--keyword){padding:14px 22px}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}:host,:host:focus,:host:hover{color:buttonText;background-color:buttonFace;border-color:buttonText;-ms-high-contrast-adjust:none}}"]
                    }] }
        ];
        /** @nocollapse */
        NxTagComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        NxTagComponent.propDecorators = {
            removable: [{ type: core.Input }],
            tabindex: [{ type: core.Input }],
            value: [{ type: core.Input }],
            clicked: [{ type: core.Output }],
            removed: [{ type: core.Output }]
        };
        return NxTagComponent;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NxTagComponent.prototype._removable;
        /**
         * @type {?}
         * @private
         */
        NxTagComponent.prototype._tabindex;
        /**
         * @type {?}
         * @private
         */
        NxTagComponent.prototype._value;
        /**
         * An event is dispatched each time when the tag is clicked.
         * @type {?}
         */
        NxTagComponent.prototype.clicked;
        /**
         * An event is dispatched each time when the tag is removed.
         * @type {?}
         */
        NxTagComponent.prototype.removed;
        /**
         * @type {?}
         * @private
         */
        NxTagComponent.prototype._changeDetectorRef;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: taglist.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxTaglistComponent = /** @class */ (function () {
        function NxTaglistComponent(_changeDetectorRef) {
            this._changeDetectorRef = _changeDetectorRef;
            /**
             * An event is dispatched each time when the list of tags changed.
             */
            this.tagsChange = new core.EventEmitter();
            /**
             * An event is dispatched each time when a tag is clicked.
             */
            this.tagClickEvent = new core.EventEmitter();
            this._tags = [];
            this._tabindex = -1;
            this._allowTagDeletion = true;
            this._isKeywordList = false;
            this._labelProperty = 'nxTaglistLabel';
            this._valueFormatterFn = (/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return value; });
            this._onChange = (/**
             * @return {?}
             */
            function () { });
            this._onTouched = (/**
             * @return {?}
             */
            function () { });
        }
        Object.defineProperty(NxTaglistComponent.prototype, "tags", {
            get: /**
             * @return {?}
             */
            function () {
                return this._tags;
            },
            /** Sets the list of tags. */
            set: /**
             * Sets the list of tags.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._tags = value;
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxTaglistComponent.prototype, "tabindex", {
            get: /**
             * @return {?}
             */
            function () {
                return this.allowTagDeletion ? 0 : this._tabindex;
            },
            /** Sets the tabindex of the contained tags. Default value: -1. */
            set: /**
             * Sets the tabindex of the contained tags. Default value: -1.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._tabindex = coercion.coerceNumberProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxTaglistComponent.prototype, "allowTagDeletion", {
            get: /**
             * @return {?}
             */
            function () {
                return this._allowTagDeletion;
            },
            /** Whether the tags can be removed from the list. Default: true. */
            set: /**
             * Whether the tags can be removed from the list. Default: true.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._allowTagDeletion = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxTaglistComponent.prototype, "isKeywordList", {
            get: /**
             * @return {?}
             */
            function () {
                return this._isKeywordList;
            },
            /** Whether the tags can be styled as keywords. */
            set: /**
             * Whether the tags can be styled as keywords.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._isKeywordList = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxTaglistComponent.prototype, "labelProp", {
            get: /**
             * @return {?}
             */
            function () {
                return this._labelProperty;
            },
            /** Sets the label property, in case tags represent objects. */
            set: /**
             * Sets the label property, in case tags represent objects.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (this._labelProperty !== value) {
                    this._labelProperty = value;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxTaglistComponent.prototype, "labelledby", {
            get: /**
             * @return {?}
             */
            function () {
                return this._ariaLabelledBy;
            },
            /** Sets the label property to improve accessibility. */
            set: /**
             * Sets the label property to improve accessibility.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (this._ariaLabelledBy !== value) {
                    this._ariaLabelledBy = value;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxTaglistComponent.prototype, "valueFormatter", {
            get: /**
             * @return {?}
             */
            function () {
                return this._valueFormatterFn;
            },
            /** Sets the customization function for tag value.  */
            set: /**
             * Sets the customization function for tag value.
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this._valueFormatterFn = fn;
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        /** Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter */
        /**
         * Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter
         * @param {?} index
         * @param {?} value
         * @return {?}
         */
        NxTaglistComponent.prototype.delete = /**
         * Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter
         * @param {?} index
         * @param {?} value
         * @return {?}
         */
        function (index, value) {
            if (this.allowTagDeletion) {
                this.tags = __spread(this.tags.slice(0, index), this.tags.slice(index + 1));
                // focus next element after deletion
                if (this.tagChildren.toArray()[index + 1]) {
                    this.tagChildren.toArray()[index + 1].nativeElement.focus();
                }
                this._onChange(this.tags);
                this.tagsChange.emit(this.tags);
            }
        };
        /** Allows to add a tag. Takes tag object as an input */
        /**
         * Allows to add a tag. Takes tag object as an input
         * @param {?} tag
         * @return {?}
         */
        NxTaglistComponent.prototype.addTag = /**
         * Allows to add a tag. Takes tag object as an input
         * @param {?} tag
         * @return {?}
         */
        function (tag) {
            var _this = this;
            if (!tag) {
                return;
            }
            // make sure tag is either string or has the configured label prop and is not yet in the list
            if ((typeof tag === 'string' && this.tags.indexOf(tag) === -1) ||
                (tag[this.labelProp] && this.tags.filter((/**
                 * @param {?} t
                 * @return {?}
                 */
                function (t) { return t[_this.labelProp] === tag[_this.labelProp]; })).length < 1)) {
                this.tags = __spread(this.tags, [tag]);
                this._onChange(this.tags);
                this.tagsChange.emit(this.tags);
            }
        };
        /** Allows to clear the tag list. */
        /**
         * Allows to clear the tag list.
         * @return {?}
         */
        NxTaglistComponent.prototype.clearTags = /**
         * Allows to clear the tag list.
         * @return {?}
         */
        function () {
            this.tags = [];
            this._onChange(this.tags);
            this.tagsChange.emit(this.tags);
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} tags
         * @return {?}
         */
        NxTaglistComponent.prototype.writeValue = /**
         * \@docs-private
         * @param {?} tags
         * @return {?}
         */
        function (tags) {
            this.tags = tags;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        NxTaglistComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this._onChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        NxTaglistComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this._onTouched = fn;
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} tag
         * @return {?}
         */
        NxTaglistComponent.prototype.renderTag = /**
         * \@docs-private
         * @param {?} tag
         * @return {?}
         */
        function (tag) {
            /** @type {?} */
            var tagStr = typeof tag === 'string' ? tag : tag[this.labelProp];
            return this.valueFormatter(tagStr);
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} index
         * @param {?} value
         * @return {?}
         */
        NxTaglistComponent.prototype.tagClick = /**
         * \@docs-private
         * @param {?} index
         * @param {?} value
         * @return {?}
         */
        function (index, value) {
            this.tagClickEvent.emit(this.tags[index]);
        };
        NxTaglistComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-taglist',
                        template: "  <ul class=\"nx-taglist\" *ngIf=\"tags.length > 0\">\n    <li class=\"nx-taglist__list-item\" tabindex=\"-1\" *ngFor=\"let tag of tags; let i = index\">\n      <nx-tag [value]=\"renderTag(tag)\" [removable]=\"allowTagDeletion\" [tabindex]=\"tabindex\" (clicked)=\"tagClick(i, $event)\" (removed)=\"delete(i, $event)\"></nx-tag>\n  </li>\n  </ul>\n  <ng-content *ngIf=\"tags.length < 1\"></ng-content>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return NxTaglistComponent; })),
                                multi: true
                            }
                        ],
                        host: {
                            '[class.nx-taglist--keyword]': 'isKeywordList',
                            '[attr.aria-labelledby]': 'labelledby || null',
                            '[attr.tabindex]': '-1'
                        },
                        styles: [":host{position:relative;min-height:32px;margin-bottom:32px;display:flex;justify-content:space-between}:host:focus{outline:0}.nx-taglist{display:flex;flex-wrap:wrap}.nx-taglist__list-item{list-style:none;margin-right:12px;margin-bottom:12px;flex-wrap:wrap;display:flex}@media (max-width:703px){.nx-taglist--keyword{justify-content:center}}"]
                    }] }
        ];
        /** @nocollapse */
        NxTaglistComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        NxTaglistComponent.propDecorators = {
            tagsChange: [{ type: core.Output, args: ['nxTagsChange',] }],
            tagClickEvent: [{ type: core.Output, args: ['nxTagClick',] }],
            tagChildren: [{ type: core.ViewChildren, args: [NxTagComponent, { read: core.ElementRef },] }],
            tags: [{ type: core.Input, args: ['nxTags',] }],
            tabindex: [{ type: core.Input }],
            allowTagDeletion: [{ type: core.Input, args: ['nxAllowTagDeletion',] }],
            isKeywordList: [{ type: core.Input, args: ['nxIsKeywordList',] }],
            labelProp: [{ type: core.Input, args: ['nxLabelProperty',] }],
            labelledby: [{ type: core.Input, args: ['aria-labelledby',] }],
            valueFormatter: [{ type: core.Input, args: ['nxValueFormatter',] }]
        };
        return NxTaglistComponent;
    }());
    if (false) {
        /**
         * An event is dispatched each time when the list of tags changed.
         * @type {?}
         */
        NxTaglistComponent.prototype.tagsChange;
        /**
         * An event is dispatched each time when a tag is clicked.
         * @type {?}
         */
        NxTaglistComponent.prototype.tagClickEvent;
        /**
         * \@docs-private
         * @type {?}
         */
        NxTaglistComponent.prototype.tagChildren;
        /**
         * @type {?}
         * @private
         */
        NxTaglistComponent.prototype._tags;
        /**
         * @type {?}
         * @private
         */
        NxTaglistComponent.prototype._tabindex;
        /**
         * @type {?}
         * @private
         */
        NxTaglistComponent.prototype._allowTagDeletion;
        /**
         * @type {?}
         * @private
         */
        NxTaglistComponent.prototype._isKeywordList;
        /**
         * @type {?}
         * @private
         */
        NxTaglistComponent.prototype._labelProperty;
        /**
         * @type {?}
         * @private
         */
        NxTaglistComponent.prototype._ariaLabelledBy;
        /**
         * @type {?}
         * @private
         */
        NxTaglistComponent.prototype._valueFormatterFn;
        /**
         * @type {?}
         * @private
         */
        NxTaglistComponent.prototype._onChange;
        /**
         * @type {?}
         * @private
         */
        NxTaglistComponent.prototype._onTouched;
        /**
         * @type {?}
         * @private
         */
        NxTaglistComponent.prototype._changeDetectorRef;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: taglist.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxTaglistModule = /** @class */ (function () {
        function NxTaglistModule() {
        }
        NxTaglistModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NxTaglistComponent, NxTagComponent],
                        exports: [NxTaglistComponent, NxTagComponent],
                        imports: [common.CommonModule, icon.NxIconModule]
                    },] }
        ];
        return NxTaglistModule;
    }());

    exports.NxTaglistComponent = NxTaglistComponent;
    exports.NxTaglistModule = NxTaglistModule;
    exports.ɵa = NxTagComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=allianz-ngx-ndbx-taglist.umd.js.map
