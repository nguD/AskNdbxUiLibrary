{"version":3,"sources":["ng://@allianz/ngx-ndbx/switcher/switcher.component.ts","ng://@allianz/ngx-ndbx/switcher/switcher.module.ts"],"names":["nextId","NxSwitcherComponent","_changeDetectorRef","ngControl","_errorStateMatcher","_parentForm","_parentFormGroup","this","_id","errorState","_labelPosition","_name","_checked","_big","_labelSize","_negative","_disabled","checkedChange","EventEmitter","onChangeCallback","_","onTouchedCallback","valueAccessor","Object","defineProperty","prototype","value","markForCheck","newValue","coerceBooleanProperty","toggle","disabled","checked","emit","writeValue","registerOnChange","fn","registerOnTouched","ngDoCheck","updateErrorState","setDisabledState","isDisabled","touch","oldState","parent","control","newState","isErrorState","_switcherLabelWrapper","nativeElement","innerHTML","trim","labelContentChanged","detectChanges","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","host","[attr.id]","[class.is-negative]","[class.is-checked]","[class.is-big]","[class.nx-switcher--small-label]","[class.nx-switcher--large-label]","[class.is-disabled]","[class.is-swapped]","[class.has-error]","[attr.aria-invalid]","ChangeDetectorRef","NgControl","decorators","type","Optional","Self","ErrorStateMatcher","NgForm","FormGroupDirective","ViewChild","static","Input","Output","NxSwitcherModule","NgModule","declarations","exports","imports","CommonModule","NxIconModule","ObserversModule"],"mappings":"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","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Optional,\n  Self,\n  DoCheck,\n  ViewChild,\n  ElementRef\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';\n\nlet nextId = 0;\n/** Options for placement of the label */\nexport type POSITION = 'left' | 'right';\n/** Options for sizing of the label */\nexport type LABEL_SIZE = 'small' | 'large';\n\n@Component({\n  selector: 'nx-switcher',\n  templateUrl: 'switcher.component.html',\n  styleUrls: ['./switcher.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    /* the host id should be set to null, otherwise nx-switcher and its <input> get the same id\n    and on label click the input click is not triggered (double id problem) */\n    '[attr.id]': 'null',\n    '[class.is-negative]': 'negative',\n    '[class.is-checked]': 'checked',\n    '[class.is-big]': 'big',\n    '[class.nx-switcher--small-label]': 'labelSize === \"small\"',\n    '[class.nx-switcher--large-label]': 'labelSize === \"large\"',\n    '[class.is-disabled]': 'disabled',\n    '[class.is-swapped]': 'labelPosition === \"left\"',\n    '[class.has-error]': 'errorState',\n    '[attr.aria-invalid]': 'errorState'\n  }\n})\n\nexport class NxSwitcherComponent implements ControlValueAccessor, DoCheck {\n\n  private _id: string = `nx-switcher-${nextId++}`;\n  /** @docs-private */\n  errorState: boolean = false;\n\n  /** @docs-private */\n  @ViewChild('switcherLabelWrapper', { static: true }) _switcherLabelWrapper: ElementRef;\n\n  /** Sets the id of the switcher */\n  @Input()\n  set id(value: string) {\n    this._id = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get id(): string {\n    return this._id;\n  }\n\n  private _labelPosition: POSITION = 'right';\n  /** Specifies the placement of the label */\n  @Input()\n  set labelPosition(value: POSITION) {\n    this._labelPosition = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get labelPosition(): POSITION {\n    return this._labelPosition;\n  }\n\n  private _name: string = null;\n  /** Sets the label text of the switcher */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get name(): string {\n    return this._name;\n  }\n\n  private _checked: boolean = false;\n  /** Whether the switcher is checked (on) or unchecked (off) */\n  @Input()\n  set checked(value: boolean) {\n    this._checked = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get checked(): boolean {\n    return this._checked;\n  }\n\n  private _big: boolean = false;\n  /** Whether the big switcher is used */\n  @Input('nxBig')\n  set big(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    this._big = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get big(): boolean {\n    return this._big;\n  }\n\n  private _labelSize: LABEL_SIZE = 'large';\n  /** Sets the size of the label */\n  @Input()\n  set labelSize(value: LABEL_SIZE) {\n    this._labelSize = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get labelSize(): LABEL_SIZE {\n    return this._labelSize;\n  }\n\n  private _negative: boolean = false;\n  /** Whether the style for a dark background is used */\n  @Input('nxNegative')\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    this._negative = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _disabled: boolean = false;\n  /** Whether the switcher is in the disabled state */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    this._disabled = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  /** An event is dispatched each time the switcher value is changed */\n  @Output('checkedChange') checkedChange = new EventEmitter<boolean>();\n\n  private onChangeCallback = (_: any) => {};\n  private onTouchedCallback = () => {};\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Self() public ngControl: NgControl,\n              private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() private _parentForm: NgForm,\n              @Optional() private _parentFormGroup: FormGroupDirective\n  ) {\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  /** Allows to toggle between the states */\n  toggle() {\n    if (!this.disabled) {\n      this.checked = !this.checked;\n      this.onChangeCallback(this.checked);\n      this.checkedChange.emit(this.checked);\n      if (this.onTouchedCallback) {\n        this.onTouchedCallback();\n      }\n    }\n  }\n\n  writeValue(value: any): void {\n    if (value === null) {\n      value = false;\n    }\n    if (value !== this.checked) {\n      this.checked = value;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouchedCallback = fn;\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  touch() {\n    this.onTouchedCallback();\n  }\n\n  /** @docs-private */\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const control = this.ngControl ? this.ngControl.control as FormControl : null;\n    const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n    }\n  }\n\n  /** @docs-private */\n  get labelHasContent() {\n    return !!this._switcherLabelWrapper.nativeElement.innerHTML.trim();\n  }\n\n  /** @docs-private\n   * Callback for when the content of the label has changed.\n   */\n  labelContentChanged() {\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NxSwitcherComponent } from './switcher.component';\nimport { CommonModule } from '@angular/common';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport {ObserversModule} from '@angular/cdk/observers';\n\n@NgModule({\n  declarations: [ NxSwitcherComponent ],\n  exports: [ NxSwitcherComponent ],\n  imports: [ CommonModule, NxIconModule, ObserversModule ]\n})\nexport class NxSwitcherModule {}\n"]}