(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/coercion'), require('@angular/common'), require('rxjs'), require('@allianz/ngx-ndbx/utils'), require('@angular/forms'), require('@allianz/ngx-ndbx/base'), require('@allianz/ngx-ndbx/icon')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/card', ['exports', '@angular/core', '@angular/cdk/coercion', '@angular/common', 'rxjs', '@allianz/ngx-ndbx/utils', '@angular/forms', '@allianz/ngx-ndbx/base', '@allianz/ngx-ndbx/icon'], factory) :
    (global = global || self, factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx'].card = {}), global.ng.core, global.ng.cdk.coercion, global.ng.common, global.rxjs, global.allianz['ngx-ndbx'].utils, global.ng.forms, global.allianz['ngx-ndbx'].base, global.allianz['ngx-ndbx'].icon));
}(this, (function (exports, core, coercion, common, rxjs, utils, forms, base, icon) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: card.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxCardComponent = /** @class */ (function () {
        function NxCardComponent(_changeDetectorRef, tabindex) {
            this._changeDetectorRef = _changeDetectorRef;
            this._disabled = false;
            /**
             * Event emitted when the selected value has changed.
             *
             * This output  property of the card is deprecated,
             * as its selectable properties are deprecated as well.
             * Please use the selectable card component instead.
             *
             * @deprecated
             * \@deletion-target 10.0.0
             */
            this.selectedChange = new core.EventEmitter();
            this._tabindex = tabindex;
        }
        Object.defineProperty(NxCardComponent.prototype, "selectable", {
            get: /**
             * @return {?}
             */
            function () {
                return this._selectable;
            },
            /**
             * Whether this card is selectable or not.
             *
             * The selectable property of the card is deprecated.
             * Please use the selectable card component instead.
             *
             * @deprecated
             * @deletion-target 10.0.0
             */
            set: /**
             * Whether this card is selectable or not.
             *
             * The selectable property of the card is deprecated.
             * Please use the selectable card component instead.
             *
             * @deprecated
             * \@deletion-target 10.0.0
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._selectable = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxCardComponent.prototype, "selected", {
            get: /**
             * @return {?}
             */
            function () {
                return this._selected;
            },
            /**
             * Whether this card is selected or not.
             *
             * The selected property of the card is deprecated.
             * Please use the selectable card component instead.
             *
             * @deprecated
             * @deletion-target 10.0.0
            */
            set: /**
             * Whether this card is selected or not.
             *
             * The selected property of the card is deprecated.
             * Please use the selectable card component instead.
             *
             * @deprecated
             * \@deletion-target 10.0.0
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._selected = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxCardComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            /**
             * Whether a selectable card is disabled or not.
             *
             * The disabled property of the card will be deprecated,
             * as its selectable properties are deprecated as well.
             * Please use the selectable card component instead.
             *
             * @deprecated
             * @deletion-target 10.0.0
            */
            set: /**
             * Whether a selectable card is disabled or not.
             *
             * The disabled property of the card will be deprecated,
             * as its selectable properties are deprecated as well.
             * Please use the selectable card component instead.
             *
             * @deprecated
             * \@deletion-target 10.0.0
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NxCardComponent.prototype._toggleSelected = /**
         * @return {?}
         */
        function () {
            if (this.selectable && !this.disabled) {
                this.selected = !this.selected;
                this.selectedChange.emit(this.selected);
            }
        };
        /**
         * @return {?}
         */
        NxCardComponent.prototype._getTabindex = /**
         * @return {?}
         */
        function () {
            if (this.disabled) {
                return '-1';
            }
            if (this.selectable) {
                return this._tabindex || '0';
            }
            return this._tabindex || '';
        };
        NxCardComponent.decorators = [
            { type: core.Component, args: [{
                        template: '<ng-content></ng-content>',
                        selector: 'nx-card',
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        host: {
                            'class': 'nx-card',
                            '[class.is-selectable]': 'selectable',
                            '[class.is-selected]': 'selected',
                            '[class.is-disabled]': 'disabled',
                            '[attr.aria-disabled]': 'disabled',
                            '(click)': '_toggleSelected()',
                            '(keydown.enter)': '_toggleSelected()',
                            '[attr.tabindex]': '_getTabindex()'
                        },
                        styles: [":host{background:#fff;background:var(--card-background-color,#fff);border-color:var(--card-border-color,#d9d9d9);border-width:var(--card-border-width,1px);border-radius:4px;border-radius:var(--card-border-radius,4px);box-shadow:none;display:inline-block;margin-bottom:24px;padding:23px;transition:background-color .2s,box-shadow .2s;border:1px solid #d9d9d9}:host:focus,:host:hover{outline:0}:host.is-selectable{cursor:pointer}:host.is-selectable:hover{background:#f5f5f5;background:var(--card-background-hover-color,#f5f5f5)}:host.is-selected{box-shadow:0 8px 24px rgba(65,65,65,.35);background:#f5f5f5;background:var(--card-background-selected-color,#f5f5f5)}:host.is-disabled{cursor:not-allowed;opacity:.4}:host.is-disabled:hover{background:#fff;background:var(--card-background-color,#fff)}:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}:host.is-selectable{border-color:buttonText}:host.is-selected{border-width:3px;padding:21px;border-color:highlight}:host.is-disabled{opacity:1;border-color:GrayText;color:GrayText}}"]
                    }] }
        ];
        /** @nocollapse */
        NxCardComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: String, decorators: [{ type: core.Attribute, args: ['tabindex',] }] }
        ]; };
        NxCardComponent.propDecorators = {
            selectable: [{ type: core.Input }],
            selected: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            selectedChange: [{ type: core.Output }]
        };
        return NxCardComponent;
    }());
    if (false) {
        /** @type {?} */
        NxCardComponent.prototype._tabindex;
        /**
         * @type {?}
         * @private
         */
        NxCardComponent.prototype._selectable;
        /**
         * @type {?}
         * @private
         */
        NxCardComponent.prototype._selected;
        /**
         * @type {?}
         * @private
         */
        NxCardComponent.prototype._disabled;
        /**
         * Event emitted when the selected value has changed.
         *
         * This output  property of the card is deprecated,
         * as its selectable properties are deprecated as well.
         * Please use the selectable card component instead.
         *
         * @deprecated
         * \@deletion-target 10.0.0
         * @type {?}
         */
        NxCardComponent.prototype.selectedChange;
        /**
         * @type {?}
         * @private
         */
        NxCardComponent.prototype._changeDetectorRef;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: card.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxCardModule = /** @class */ (function () {
        function NxCardModule() {
        }
        NxCardModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NxCardComponent],
                        exports: [NxCardComponent],
                        imports: [
                            common.CommonModule
                        ]
                    },] }
        ];
        return NxCardModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: selectable-card.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docs-private
     * @abstract
     */
    var   /**
     * \@docs-private
     * @abstract
     */
    SelectableCard = /** @class */ (function () {
        function SelectableCard() {
        }
        return SelectableCard;
    }());
    if (false) {
        /** @type {?} */
        SelectableCard.prototype.id;
        /** @type {?} */
        SelectableCard.prototype.value;
        /** @type {?} */
        SelectableCard.prototype.checked;
        /** @type {?} */
        SelectableCard.prototype.name;
        /** @type {?} */
        SelectableCard.prototype.negative;
        /** @type {?} */
        SelectableCard.prototype.disabled;
        /** @type {?} */
        SelectableCard.prototype.checkedChange;
        /** @type {?} */
        SelectableCard.prototype.selectionChange;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: selectable-card-change-event.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxSelectableCardChangeEvent = /** @class */ (function () {
        function NxSelectableCardChangeEvent(checked, value, card) {
            this.checked = checked;
            this.value = value;
            this.card = card;
        }
        return NxSelectableCardChangeEvent;
    }());
    if (false) {
        /**
         * The checked value of the selectable card.
         * @type {?}
         */
        NxSelectableCardChangeEvent.prototype.checked;
        /**
         * The value of the selectable card.
         * @type {?}
         */
        NxSelectableCardChangeEvent.prototype.value;
        /**
         * The component instance of the selectable card which emitted the change event.
         * @type {?}
         */
        NxSelectableCardChangeEvent.prototype.card;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: selectable-card.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var nextId = 0;
    var NxSelectableCardComponent = /** @class */ (function (_super) {
        __extends(NxSelectableCardComponent, _super);
        function NxSelectableCardComponent(_changeDetectorRef, _errorStateMatcher, ngControl, _parentForm, _parentFormGroup) {
            var _this = _super.call(this) || this;
            _this._changeDetectorRef = _changeDetectorRef;
            _this._errorStateMatcher = _errorStateMatcher;
            _this.ngControl = ngControl;
            _this._parentForm = _parentForm;
            _this._parentFormGroup = _parentFormGroup;
            _this._id = (nextId++).toString();
            _this._checked = false;
            _this._disabled = false;
            _this._negative = false;
            _this._tabindex = '0';
            /**
             * \@docs-private
             */
            _this._errorListIds = '';
            /**
             * \@docs-private
             */
            _this.errorState = false;
            /**
             * \@docs-private
             */
            _this.stateChanges = new rxjs.Subject();
            /**
             * An event is dispatched each time the selectable card value is changed
             */
            _this.selectionChange = new core.EventEmitter();
            /**
             * An event is dispatched each time the selectable card value is changed
             */
            _this.checkedChange = new core.EventEmitter();
            /**
             * \@docs-private
             */
            _this.onChangeCallback = (/**
             * @param {?} _
             * @return {?}
             */
            function (_) { });
            _this.onTouchedCallback = (/**
             * @param {?} _
             * @return {?}
             */
            function (_) { });
            if (_this.ngControl) {
                // Note: we provide the value accessor through here, instead of
                // the `providers` to avoid running into a circular import.
                _this.ngControl.valueAccessor = _this;
            }
            return _this;
        }
        Object.defineProperty(NxSelectableCardComponent.prototype, "id", {
            get: /**
             * @return {?}
             */
            function () {
                return "nx-selectable-card-" + this._id;
            },
            /**
             * Id of the selectable card.
             *
             * If not set, the selectable card gets an incremented value by default.
             */
            set: /**
             * Id of the selectable card.
             *
             * If not set, the selectable card gets an incremented value by default.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value !== this._id) {
                    this._id = value;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSelectableCardComponent.prototype, "checked", {
            get: /**
             * @return {?}
             */
            function () {
                return this._checked;
            },
            /** Whether the selectable card  is checked. */
            set: /**
             * Whether the selectable card  is checked.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var newValue = coercion.coerceBooleanProperty(value);
                if (newValue !== this._checked) {
                    this._checked = newValue;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSelectableCardComponent.prototype, "value", {
            /** The value attribute of the native input element  */
            get: /**
             * The value attribute of the native input element
             * @return {?}
             */
            function () {
                return this._value;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value) {
                    this._value = value;
                }
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSelectableCardComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled || null;
            },
            /** Whether the selectable card is disabled. */
            set: /**
             * Whether the selectable card is disabled.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var newValue = coercion.coerceBooleanProperty(value);
                if (newValue !== this._disabled) {
                    this._disabled = newValue;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSelectableCardComponent.prototype, "negative", {
            get: /**
             * @return {?}
             */
            function () {
                return this._negative || null;
            },
            /** Whether the selectable card is negative. */
            set: /**
             * Whether the selectable card is negative.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var newValue = coercion.coerceBooleanProperty(value);
                if (newValue !== this._negative) {
                    this._negative = newValue;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSelectableCardComponent.prototype, "required", {
            /** Whether the selectable card is required. */
            get: /**
             * Whether the selectable card is required.
             * @return {?}
             */
            function () {
                return this._required;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._required = coercion.coerceBooleanProperty(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSelectableCardComponent.prototype, "name", {
            /** Name of the selectable card. */
            get: /**
             * Name of the selectable card.
             * @return {?}
             */
            function () {
                return this._name;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._name = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSelectableCardComponent.prototype, "tabindex", {
            /** The tabIndex of the element */
            get: /**
             * The tabIndex of the element
             * @return {?}
             */
            function () {
                if (this.disabled) {
                    return '-1';
                }
                return this._tabindex;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._tabindex = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NxSelectableCardComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this._errorList.changes.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                _this._errorListIds = value.map((/**
                 * @param {?} errorItem
                 * @return {?}
                 */
                function (errorItem) {
                    return errorItem.id;
                })).join(' ');
                _this._changeDetectorRef.markForCheck();
            }));
            this._errorListIds = this._errorList.map((/**
             * @param {?} errorItem
             * @return {?}
             */
            function (errorItem) {
                return errorItem.id;
            })).join(' ');
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        NxSelectableCardComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onChangeCallback = fn;
        };
        /**
         * @param {?} onTouched
         * @return {?}
         */
        NxSelectableCardComponent.prototype.registerOnTouched = /**
         * @param {?} onTouched
         * @return {?}
         */
        function (onTouched) {
            this.onTouchedCallback = onTouched;
        };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NxSelectableCardComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
        function (isDisabled) {
            this.disabled = isDisabled;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        NxSelectableCardComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.checked = !!value;
        };
        /**
         * @return {?}
         */
        NxSelectableCardComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
        function () {
            if (this.ngControl) {
                // We need to re-evaluate this on every change detection cycle, because there are some
                // error triggers that we can't subscribe to (e.g. parent form submissions). This means
                // that whatever logic is in here has to be super lean or we risk destroying the performance.
                this.updateErrorState();
            }
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSelectableCardComponent.prototype.updateErrorState = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var oldState = this.errorState;
            /** @type {?} */
            var parent = this._parentFormGroup || this._parentForm;
            /** @type {?} */
            var control = this.ngControl ? (/** @type {?} */ (this.ngControl.control)) : null;
            /** @type {?} */
            var newState = this._errorStateMatcher.isErrorState(control, parent);
            if (newState !== oldState) {
                this.errorState = newState;
                this.stateChanges.next();
            }
        };
        /** Toggles the checked state of the selectable card . */
        /**
         * Toggles the checked state of the selectable card .
         * @return {?}
         */
        NxSelectableCardComponent.prototype.toggle = /**
         * Toggles the checked state of the selectable card .
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.checked = !this.checked;
            }
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        NxSelectableCardComponent.prototype._onInputClick = /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            // We have to stop propagation for click events on the visual hidden input element.
            // By default, when a user clicks on a label element, a generated click event will be
            // stop the propagation of the native click on the checkbox input so that a click is not triggered twice
            // Preventing bubbling for the second event will solve that issue.
            event.stopPropagation();
            if (!this.disabled) {
                this.toggle();
                this._emitChangeEvent();
            }
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        NxSelectableCardComponent.prototype._onInteractionEvent = /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            // We always have to stop propagation on the change event.
            // Otherwise the change event, from the input element, will bubble up and
            // emit its event object to the `change` output.
            event.stopPropagation();
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @private
         * @return {?}
         */
        NxSelectableCardComponent.prototype._emitChangeEvent = /**
         * \@docs-private
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var event = new NxSelectableCardChangeEvent(this.checked, this.value, this);
            this.onChangeCallback(this.checked);
            this.selectionChange.emit(event);
            this.checkedChange.emit(this.checked);
        };
        NxSelectableCardComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-selectable-card',
                        template: "<input #input\n       type=\"checkbox\"\n       [checked]=\"checked\"\n       [value]=\"value || null\"\n       [attr.disabled]=\"disabled\"\n       (change)=\"_onInteractionEvent($event)\"\n       (blur)=\"onTouchedCallback($event)\"\n       [attr.id]=\"id\"\n       [attr.name]=\"name\"\n       (click)=\"_onInputClick($event)\"\n       [required]=\"required\"\n       [attr.aria-required]=\"required\"\n       [attr.tabindex]=\"tabindex\"\n       [attr.aria-invalid]=\"errorState\"\n       [attr.aria-describedby]=\"_errorListIds || null\"\n>\n\n<label [attr.for]=\"id\" [class.is-disabled]=\"disabled\">\n  <ng-container *ngTemplateOutlet=\"selectableCardContent\"></ng-container>\n</label>\n\n<ng-content *ngIf=\"errorState\" select=\"nx-error\"></ng-content>\n\n<ng-template #selectableCardContent>\n  <nx-icon name=\"check-circle\" size=\"s\" class=\"checked-icon\"></nx-icon>\n  <div class=\"nx-selectable-card--headline\">\n    <ng-content select=\"nx-card-header\"></ng-content>\n  </div>\n  <div class=\"nx-selectable-card--content\">\n    <ng-content></ng-content>\n  </div>\n  <div class=\"nx-selectable-card--footer\">\n    <ng-content select=\"nx-card-footer\"></ng-content>\n  </div>\n</ng-template>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        providers: [{ provide: SelectableCard, useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return NxSelectableCardComponent; })) }],
                        host: {
                            '[class.is-checked]': 'checked',
                            '[class.is-disabled]': 'disabled',
                            '[class.has-error]': 'errorState',
                            '[attr.aria-invalid]': 'errorState',
                            '[attr.role]': '"checkbox"',
                            '[attr.aria-checked]': 'checked'
                        },
                        styles: [":host{display:block}:host input{position:absolute;height:0;width:0;overflow:hidden;opacity:0}:host label{border:1px solid #999;border:var(--selectable-card-border-width,1px) solid var(--selectable-card-border-color,#999);display:block;position:relative;padding:16px;cursor:pointer;width:100%;margin-bottom:8px;border-radius:4px;border-radius:var(--selectable-card-border-radius,4px);background:#fff;background:var(--selectable-card-background-color,#fff)}:host:focus{outline:0}:host::-moz-focus-inner{border:0}:host input:checked+label{background:#f5f5f5;background:var(--selectable-card-background-selected-color,#f5f5f5);border-color:#414141;border-color:var(--selectable-card-border-selected-color,#414141)}:host input:checked+label ::ng-deep nx-icon.checked-icon{display:block}:host label:active,:host label:hover{background:#f5f5f5;background:var(--selectable-card-background-hover-color,#f5f5f5);border-color:#414141;border-color:var(--selectable-card-border-hover-color,#414141)}:host input:checked+label:hover{background:#ececec;background:var(--selectable-card-background-selected-hover-color,#ececec)}:host ::ng-deep nx-icon.checked-icon{position:absolute;right:8px;top:8px;display:none}:host(.is-disabled) label{border-color:#ececec;border-color:var(--selectable-card-border-disabled-color,#ececec);cursor:not-allowed}:host(.is-disabled) label:hover{background:#fff;background:var(--selectable-card-background-disabled-color,#fff)}:host(.is-disabled) input:checked+label{background:#f5f5f5;background:var(--selectable-card-background-disabled-selected-color,#f5f5f5);border-color:#c2c2c2;border-color:var(--selectable-card-border-disabled-selected-color,#c2c2c2)}:host(.is-disabled) input:checked+label ::ng-deep nx-icon.checked-icon{display:block;color:#c2c2c2;color:var(--selectable-card-icon-diabled-color,#c2c2c2)}:host(.has-error) input:checked+label,:host(.has-error) input:checked+label:hover,:host(.has-error) label,:host(.has-error) label:hover{border-color:#dc3149;border-color:var(--selectable-card-border-error-color,#dc3149)}:host-context([data-whatinput=keyboard]) :host:focus label,:host-context([data-whatinput=keyboard]) input:focus+label{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]) :host:focus label,:host-context([data-whatinput=keyboard]) input:focus+label{box-shadow:0 0 0 2px background,0 0 0 6px windowText}:host label{border-color:buttonText}:host input:checked+label{border-width:3px;padding:14px;border-color:highlight}:host(.is-disabled) input:checked+label,:host(.is-disabled) label{border-color:GrayText;color:GrayText}:host(.is-disabled) input:checked+label ::ng-deep nx-icon.checked-icon,:host(.is-disabled) label ::ng-deep nx-icon.checked-icon{color:GrayText}}"]
                    }] }
        ];
        /** @nocollapse */
        NxSelectableCardComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: utils.ErrorStateMatcher },
            { type: forms.NgControl, decorators: [{ type: core.Self }, { type: core.Optional }] },
            { type: forms.NgForm, decorators: [{ type: core.Optional }] },
            { type: forms.FormGroupDirective, decorators: [{ type: core.Optional }] }
        ]; };
        NxSelectableCardComponent.propDecorators = {
            _errorList: [{ type: core.ContentChildren, args: [base.NxErrorComponent,] }],
            selectionChange: [{ type: core.Output }],
            checkedChange: [{ type: core.Output }],
            id: [{ type: core.Input }],
            checked: [{ type: core.Input }],
            value: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            negative: [{ type: core.Input }],
            required: [{ type: core.Input }],
            name: [{ type: core.Input }],
            tabindex: [{ type: core.Input }]
        };
        return NxSelectableCardComponent;
    }(SelectableCard));
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NxSelectableCardComponent.prototype._id;
        /**
         * @type {?}
         * @private
         */
        NxSelectableCardComponent.prototype._checked;
        /**
         * @type {?}
         * @private
         */
        NxSelectableCardComponent.prototype._disabled;
        /**
         * @type {?}
         * @private
         */
        NxSelectableCardComponent.prototype._value;
        /**
         * @type {?}
         * @private
         */
        NxSelectableCardComponent.prototype._name;
        /**
         * @type {?}
         * @private
         */
        NxSelectableCardComponent.prototype._negative;
        /**
         * @type {?}
         * @private
         */
        NxSelectableCardComponent.prototype._tabindex;
        /**
         * @type {?}
         * @private
         */
        NxSelectableCardComponent.prototype._required;
        /**
         * \@docs-private
         * @type {?}
         */
        NxSelectableCardComponent.prototype._errorListIds;
        /**
         * \@docs-private
         * @type {?}
         */
        NxSelectableCardComponent.prototype._errorList;
        /**
         * \@docs-private
         * @type {?}
         */
        NxSelectableCardComponent.prototype.errorState;
        /**
         * \@docs-private
         * @type {?}
         */
        NxSelectableCardComponent.prototype.stateChanges;
        /**
         * An event is dispatched each time the selectable card value is changed
         * @type {?}
         */
        NxSelectableCardComponent.prototype.selectionChange;
        /**
         * An event is dispatched each time the selectable card value is changed
         * @type {?}
         */
        NxSelectableCardComponent.prototype.checkedChange;
        /**
         * \@docs-private
         * @type {?}
         */
        NxSelectableCardComponent.prototype.onChangeCallback;
        /** @type {?} */
        NxSelectableCardComponent.prototype.onTouchedCallback;
        /**
         * @type {?}
         * @private
         */
        NxSelectableCardComponent.prototype._changeDetectorRef;
        /**
         * @type {?}
         * @private
         */
        NxSelectableCardComponent.prototype._errorStateMatcher;
        /** @type {?} */
        NxSelectableCardComponent.prototype.ngControl;
        /**
         * @type {?}
         * @private
         */
        NxSelectableCardComponent.prototype._parentForm;
        /**
         * @type {?}
         * @private
         */
        NxSelectableCardComponent.prototype._parentFormGroup;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: card-header.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxCardHeaderComponent = /** @class */ (function () {
        function NxCardHeaderComponent() {
        }
        NxCardHeaderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-card-header',
                        template: "<ng-content></ng-content>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        return NxCardHeaderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: card-footer.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxCardFooterComponent = /** @class */ (function () {
        function NxCardFooterComponent() {
        }
        NxCardFooterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-card-footer',
                        template: "<ng-content></ng-content>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        return NxCardFooterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: selectable-card.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxSelectableCardModule = /** @class */ (function () {
        function NxSelectableCardModule() {
        }
        NxSelectableCardModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            NxSelectableCardComponent,
                            NxCardHeaderComponent,
                            NxCardFooterComponent
                        ],
                        exports: [
                            NxSelectableCardComponent,
                            NxCardHeaderComponent,
                            NxCardFooterComponent
                        ],
                        imports: [
                            common.CommonModule,
                            icon.NxIconModule,
                            base.NxErrorModule
                        ]
                    },] }
        ];
        return NxSelectableCardModule;
    }());

    exports.NxCardComponent = NxCardComponent;
    exports.NxCardFooterComponent = NxCardFooterComponent;
    exports.NxCardHeaderComponent = NxCardHeaderComponent;
    exports.NxCardModule = NxCardModule;
    exports.NxSelectableCardComponent = NxSelectableCardComponent;
    exports.NxSelectableCardModule = NxSelectableCardModule;
    exports.ɵa = SelectableCard;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=allianz-ngx-ndbx-card.umd.js.map
