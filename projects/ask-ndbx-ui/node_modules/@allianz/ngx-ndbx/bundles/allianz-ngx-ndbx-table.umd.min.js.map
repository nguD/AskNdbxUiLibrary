{"version":3,"sources":["ng://@allianz/ngx-ndbx/table/table-cell.component.ts","ng://@allianz/ngx-ndbx/table/header-cell.directive.ts","ng://@allianz/ngx-ndbx/table/table.component.ts","ng://@allianz/ngx-ndbx/table/table-row.component.ts","ng://@allianz/ngx-ndbx/table/expandable/expandable-table-row.component.ts","ng://@allianz/ngx-ndbx/table/expandable/expandable-table-cell.component.ts","ng://@allianz/ngx-ndbx/table/expandable/toggle-button.component.ts","ng://@allianz/ngx-ndbx/table/expandable/expandable-table.directive.ts","ng://@allianz/ngx-ndbx/table/sort-header/sort.directive.ts","ng://@allianz/ngx-ndbx/table/sort-header/sort-header-intl.ts","ng://@allianz/ngx-ndbx/table/sort-header/sort-header.component.ts","ng://@allianz/ngx-ndbx/table/table.module.ts"],"names":["NxTableCellComponent","Component","args","selector","template","host","[class.nx-table-cell]","changeDetection","ChangeDetectionStrategy","OnPush","NxHeaderCellDirective","Directive","[class.nx-header-cell]","NxTableComponent","_changeDetectorRef","this","Object","defineProperty","prototype","_condensed","value","newValue","coerceBooleanProperty","markForCheck","_zebra","class","[class.nx-table--condensed]","[class.nx-table--zebra]","ChangeDetectorRef","Input","NxTableRowComponent","_elementRef","_selectable","_selected","select","EventEmitter","_onSelect","$event","isActionEvent","keyCode","SPACE","preventDefault","emit","parent","target","nativeElement","indexOf","tagName","getAttribute","parentElement","[class.is-selected]","[class.nx-table-row--selectable]","[attr.aria-selected]","(click)","(keydown.space)","ElementRef","Output","NxExpandableTableRowComponent","expanded","BehaviorSubject","toggle","close","expand","next","NxExpandableTableCellComponent","_row","_this","_destroyed","Subject","_open","pipe","takeUntil","subscribe","open","ngOnDestroy","complete","animations","trigger","state","style","height","visibility","transition","animate","NxToggleButtonComponent","_expanded","_ariaLabel","_target","_subscription","unsubscribe","_onClick","NxExpandableTableDirective","ngAfterViewInit","rows","changes","startWith","flatMap","combineLatest","map","row","values","reduce","a","x","distinctUntilChanged","rowsOpen","forEach","exportAs","ContentChildren","descendants","SortEvent","active","direction","NxSortDirective","_stateChanges","_direction","activeChange","directionChange","sortChange","_active","sort","sortable","NxSortHeaderIntl","sortAscendingAriaLabel","sortDescendingAriaLabel","Injectable","NxSortHeaderComponent","_sort","_intl","_intlSubscription","_key","ngOnInit","_parentChangeSubscription","_handleClick","_onKeydown","ENTER","_isSortedAscending","_isSortedDescending","_getAriaLabel","(keydown)","decorators","type","Optional","EXPORTED_DECLARED_ELEMENTS","NxTableModule","NgModule","declarations","exports","imports","CommonModule","NxIconModule","providers"],"mappings":"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","sourcesContent":["import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n/**\n * This is a table cell.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'td[nxTableCell], td[nxCell]',\n  template: '<ng-content></ng-content>',\n  host: {\n    '[class.nx-table-cell]': 'true',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxTableCellComponent { }\n","import { Directive } from '@angular/core';\n\n/**\n * This is a table header cell.\n */\n@Directive({\n  selector: '[nxHeaderCell]',\n  host: {\n    '[class.nx-header-cell]': 'true'\n  }\n})\nexport class NxHeaderCellDirective { }\n","import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n/**\n * This is a table.\n * The table supports a `zebra` and a `condensed` mode.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'table[nxTable]',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['./table.component.scss'],\n  host: {\n    'class': 'nx-table',\n    '[class.nx-table--condensed]': 'condensed',\n    '[class.nx-table--zebra]': 'zebra'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxTableComponent {\n\n  private _condensed: boolean;\n\n  private _zebra: boolean;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n   /** Change the table mode to condensed  */\n  @Input() set condensed(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (value !== this._condensed) {\n      this._condensed = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get condensed(): boolean {\n    return this._condensed;\n  }\n\n   /** Change the table mode to zebra  */\n  @Input() set zebra(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (value !== this._zebra) {\n      this._zebra = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get zebra(): boolean {\n    return this._zebra;\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ChangeDetectorRef,\n  Output,\n  ElementRef\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EventEmitter } from '@angular/core';\nimport { SPACE } from '@angular/cdk/keycodes';\n\n/**\n * This is a table row.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'tr[nxTableRow]',\n  host: {\n   'class': 'nx-table-row',\n   '[class.is-selected]': 'selected',\n   '[class.nx-table-row--selectable]': 'selectable',\n   '[attr.aria-selected]': 'selected',\n   '(click)': '_onSelect($event)',\n   '(keydown.space)': '_onSelect($event)'\n  },\n  template: `<ng-content></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxTableRowComponent {\n\n  /** Whether this table row is selectable */\n  @Input()\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get selectable(): boolean {\n    return this._selectable;\n  }\n  private _selectable: boolean = false;\n\n  /** Whether this table row is selected */\n  @Input()\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get selected(): boolean {\n    return this._selected;\n  }\n  private _selected: boolean = false;\n\n  @Output()\n  select: EventEmitter<void> = new EventEmitter();\n\n  constructor(protected _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) {}\n\n  _onSelect($event) {\n    if (!this._selectable || this.isActionEvent($event)) {\n      return;\n    }\n\n    if ($event.keyCode === SPACE) {\n      $event.preventDefault();\n    }\n\n    this.select.emit();\n  }\n\n  /**\n   * Checks if the event would trigger an action.\n   * Return `true` if a button, link, input or label are clicked.\n   */\n  private isActionEvent($event) {\n    let parent: HTMLElement = $event.target;\n\n    while (parent && parent !== this._elementRef.nativeElement) {\n      if (['A', 'INPUT', 'BUTTON'].indexOf(parent.tagName) >= 0) {\n        return true;\n      } else if (parent.tagName === 'LABEL' && parent.getAttribute('for')) {\n        return true;\n      }\n\n      parent = parent.parentElement;\n    }\n\n    return false;\n  }\n}\n","import { Component, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { NxExpandable } from './toggle-button.component';\n\n/**\n * This is an expandable table row.\n * It can collapse its height to hide the content.\n * Requires the table cells to have the `[nxExpandableTableCell]` component.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'tr[nxExpandableTableRow]',\n  host: {\n   'class': 'nx-expandable-table-row'\n  },\n  template: `<ng-content></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxExpandableTableRowComponent implements NxExpandable {\n  expanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Toggles the expansion of this row.\n   */\n  toggle() {\n    if (this.expanded.value) {\n      this.close();\n    } else {\n      this.expand();\n    }\n  }\n\n  /**\n   * Expands this row.\n   */\n  expand() {\n    if (!this.expanded.value) {\n      this.expanded.next(true);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Closes this row.\n   */\n  close() {\n    if (this.expanded.value) {\n      this.expanded.next(false);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { ChangeDetectionStrategy, Component, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NxExpandableTableRowComponent } from './expandable-table-row.component';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * This is an expandable table cell.\n * Only works in conjunction with the `[nxExpandableTableRow]` component.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'td[nxExpandableTableCell]',\n  templateUrl: './expandable-table-cell.component.html',\n  host: {\n    'class': 'nx-expandable-table-cell'\n  },\n  animations: [\n    trigger('openClose', [\n      state('open', style({\n        height: '*',\n        visibility: 'visible'\n      })),\n      state('closed, void', style({\n        height: '0',\n        visibility: 'hidden' // visibility and height to toggle instead of display: none to prevent cell width jumping\n      })),\n      transition('closed <=> open, void => closed', [\n        animate('225ms cubic-bezier(0.4,0.0,0.2,1)')\n      ])\n    ])\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxExpandableTableCellComponent implements OnDestroy {\n  private _destroyed = new Subject();\n\n  _open: boolean = false;\n\n  constructor(\n      _row: NxExpandableTableRowComponent,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    _row.expanded.pipe(takeUntil(this._destroyed))\n      .subscribe(open => {\n        this._open = open;\n        this._changeDetectorRef.markForCheck();\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n}\n","import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { Subscription, BehaviorSubject } from 'rxjs';\n\nexport interface NxExpandable {\n  /** Indicates if this expandable instance is open or not.  */\n  expanded: BehaviorSubject<boolean>;\n\n  /** Toggles the open state. */\n  toggle: () => void;\n\n  /** Expands this component. */\n  expand: () => void;\n\n  /** Closes this component. */\n  close: () => void;\n}\n\n/**\n * This toggle button can be clicked and toggles expandable elements.\n * e.g. it can toggle a expandable table row or anything else that implements the `NxExpandable` interface.\n */\n@Component({\n  selector: 'nx-toggle-button',\n  templateUrl: './toggle-button.component.html',\n  styleUrls: ['./toggle-button.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxToggleButtonComponent implements OnDestroy {\n  _expanded: boolean = false;\n\n  /**\n   * This is the expandable target that will be toggled when the user clicks the button.\n   */\n  @Input()\n  set target(value: NxExpandable) {\n    this._target = value;\n\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n\n    if (this._target) {\n      this._subscription = this._target.expanded.subscribe(expanded => {\n          this._expanded = expanded;\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n  _target: NxExpandable;\n\n  @Input()\n  set ariaLabel(value: string) {\n    this._ariaLabel = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  _ariaLabel: string = '';\n\n  private _subscription: Subscription;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  _onClick() {\n    if (this._target) {\n      this._target.toggle();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n}\n","import { ContentChildren, QueryList, AfterViewInit, Directive } from '@angular/core';\nimport { NxExpandableTableRowComponent } from './expandable-table-row.component';\nimport { flatMap, startWith, map, distinctUntilChanged } from 'rxjs/operators';\nimport { combineLatest, BehaviorSubject } from 'rxjs';\nimport { NxExpandable } from './toggle-button.component';\n\n/**\n * The nxExpandableTable adds row expansion functionality to the nxTable.\n * It provides the logic to expand/collapse all expandable rows simultanously.\n */\n@Directive({\n  selector: 'table[nxExpandableTable]',\n  exportAs: 'nxExpandableTable'\n})\nexport class NxExpandableTableDirective implements AfterViewInit, NxExpandable {\n  @ContentChildren(NxExpandableTableRowComponent, { descendants: true }) rows: QueryList<NxExpandableTableRowComponent>;\n\n  expanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  ngAfterViewInit() {\n    this.rows.changes.pipe(\n      startWith(this.rows),\n      flatMap((rows: NxExpandableTableRowComponent[]) => {\n        return combineLatest(rows.map(row => row.expanded));\n      }),\n      map((values: boolean[]) =>\n        values.reduce((a, x) => a && x, true)\n      ),\n      distinctUntilChanged()\n    )\n    .subscribe((rowsOpen) => {\n      this.expanded.next(rowsOpen);\n    });\n  }\n\n  /**\n   * Toggles the expandable rows. If all rows are open it will close them, otherwise it will open them.\n   */\n  toggle() {\n    if (this.expanded.value) {\n      this.close();\n    } else {\n      this.expand();\n    }\n  }\n\n  /**\n   * Expands all expandable rows.\n   */\n  expand() {\n    this.rows.forEach(row => row.expanded.next(true));\n  }\n\n  /**\n   * Closes all expandable rows.\n   */\n  close() {\n    this.rows.forEach(row => row.expanded.next(false));\n  }\n}\n","import { Directive, Output, EventEmitter, Input, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nexport type SortDirection = 'asc' | 'desc';\n\nexport class SortEvent {\n  /** The name of the column that is being sorted by. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n\n  constructor(active, direction) {\n    this.active = active;\n    this.direction = direction;\n  }\n}\n\n@Directive({\n  selector: 'table[nxSort]',\n  exportAs: 'NxSortDirective'\n})\nexport class NxSortDirective implements OnDestroy {\n\n  readonly _stateChanges = new Subject<void>();\n\n  private _active: string;\n\n  /** Sets the key of the most recently sorted column. */\n  @Input()\n  set active(value: string) {\n    if (this._active !== value) {\n      this._active = value;\n      this.sortChange.emit(new SortEvent(this.active, this.direction));\n      this._stateChanges.next();\n    }\n  }\n  get active(): string {\n    return this._active;\n  }\n\n  private _direction: SortDirection = 'asc';\n\n  /** Sets the direction of the currently active sorted column. Default: 'asc'. */\n  @Input()\n  set direction(value: SortDirection) {\n    if (this._direction !== value) {\n      this._direction = value;\n      this.sortChange.emit(new SortEvent(this.active, this.direction));\n      this._stateChanges.next();\n    }\n  }\n  get direction(): SortDirection {\n    return this._direction;\n  }\n\n  /**\n   * @docs-private\n   * An event emitted when the active value has changed.\n   */\n  @Output() readonly activeChange: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * @docs-private\n   * An event emitted when the direction value has changed.\n   */\n  @Output() readonly directionChange: EventEmitter<SortDirection> = new EventEmitter<SortDirection>();\n\n  /** An event emitted when either the active sort or sort direction changes. */\n  @Output() readonly sortChange: EventEmitter<SortEvent> = new EventEmitter<SortEvent>();\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /**\n   * Sets the active sort key and determines the new sort direction.\n   * Afterwards the output event `sortChange` is called.\n   *\n   * If `sortable` is not the key of the active sort header, the initial direction to sort is 'asc'.\n   * Otherwise the direction of the sorted column changes.\n   */\n  sort(sortable: string): void {\n    if (this._active !== sortable) {\n      this._active = sortable;\n      this.activeChange.emit(this.active);\n      this._direction = 'asc';\n      this.directionChange.emit(this.direction);\n    } else if (this._direction === 'asc') {\n      this._direction = 'desc';\n      this.directionChange.emit(this.direction);\n    } else {\n      this._direction = 'asc';\n      this.directionChange.emit(this.direction);\n    }\n\n    this.sortChange.emit(new SortEvent(this.active, this.direction));\n    this._stateChanges.next();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class NxSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** The aria label for a header that can be sorted ascending. */\n  sortAscendingAriaLabel: string = 'sort ascending by';\n  /** The aria label for a header that can be sorted descending. */\n  sortDescendingAriaLabel: string = 'sort descending by';\n}\n","import { Component, Input, Optional, ChangeDetectionStrategy, OnInit, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NxSortDirective } from './sort.directive';\nimport { Subscription } from 'rxjs';\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { NxSortHeaderIntl } from './sort-header-intl';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'th[nxSortHeaderCell]',\n  exportAs: 'nxSortHeaderComponent',\n  templateUrl: 'sort-header.component.html',\n  styleUrls: ['sort-header.component.scss'],\n  host: {\n    '(click)': '_handleClick()',\n    '(keydown)': '_onKeydown($event)'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxSortHeaderComponent implements OnInit, OnDestroy {\n\n  private _parentChangeSubscription: Subscription;\n  private _intlSubscription: Subscription;\n  private _key: string;\n\n  /** Sets the key of this sort header. */\n  @Input('nxSortHeaderCell')\n  set key(value: string) {\n    if (this._key !== value) {\n      this._key = value;\n    }\n  }\n  get key(): string {\n    return this._key;\n  }\n\n  constructor(@Optional() public _sort: NxSortDirective,\n    public _intl: NxSortHeaderIntl,\n    private _changeDetectorRef: ChangeDetectorRef\n  ) {\n    this._intlSubscription = this._intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._parentChangeSubscription = this._sort._stateChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._parentChangeSubscription) {\n      this._parentChangeSubscription.unsubscribe();\n    }\n    this._intlSubscription.unsubscribe();\n  }\n\n  _handleClick() {\n    this._sort.sort(this._key);\n  }\n\n  _onKeydown($event) {\n    if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {\n      this._sort.sort(this._key);\n\n      // prevent page from scrolling down\n      if ($event.keyCode === SPACE) {\n        $event.preventDefault();\n      }\n    }\n  }\n\n  _isSortedAscending() {\n    return (this._sort.active === this._key && this._sort.direction === 'asc');\n  }\n\n  _isSortedDescending() {\n    return (this._sort.active === this._key && this._sort.direction === 'desc');\n  }\n\n  _getAriaLabel(): string {\n    if (this._sort.active === this._key && this._sort.direction === 'asc') {\n      return `${this._intl.sortDescendingAriaLabel}`;\n    }\n    return `${this._intl.sortAscendingAriaLabel}`;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxTableCellComponent } from './table-cell.component';\nimport { NxHeaderCellDirective } from './header-cell.directive';\nimport { NxTableComponent } from './table.component';\nimport { NxTableRowComponent } from './table-row.component';\nimport { NxExpandableTableCellComponent } from './expandable/expandable-table-cell.component';\nimport { NxExpandableTableRowComponent } from './expandable/expandable-table-row.component';\nimport { NxToggleButtonComponent } from './expandable/toggle-button.component';\nimport { NxExpandableTableDirective } from './expandable/expandable-table.directive';\nimport { NxSortHeaderComponent } from './sort-header/sort-header.component';\nimport { NxSortDirective } from './sort-header/sort.directive';\nimport { NxSortHeaderIntl } from './sort-header/sort-header-intl';\n\nconst EXPORTED_DECLARED_ELEMENTS = [\n  NxHeaderCellDirective,\n  NxTableComponent,\n  NxTableCellComponent,\n  NxTableComponent,\n  NxTableRowComponent,\n  NxToggleButtonComponent,\n  NxExpandableTableDirective,\n  NxExpandableTableRowComponent,\n  NxExpandableTableCellComponent,\n  NxSortHeaderComponent,\n  NxSortDirective\n];\n@NgModule({\n  declarations: EXPORTED_DECLARED_ELEMENTS,\n  exports: EXPORTED_DECLARED_ELEMENTS,\n  imports: [\n    CommonModule,\n    NxIconModule\n  ],\n  providers: [ NxSortHeaderIntl ],\n})\nexport class NxTableModule { }\n"]}