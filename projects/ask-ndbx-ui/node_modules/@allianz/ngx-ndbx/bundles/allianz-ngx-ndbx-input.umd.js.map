{"version":3,"file":"allianz-ngx-ndbx-input.umd.js","sources":["ng://@allianz/ngx-ndbx/input/input.directive.ts","ng://@allianz/ngx-ndbx/input/password-toggle.component.ts","ng://@allianz/ngx-ndbx/input/input.module.ts"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport {\n  Inject,\n  Directive,\n  DoCheck,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n  InjectionToken,\n  OnInit\n} from '@angular/core';\nimport { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { AutofillMonitor } from '@angular/cdk/text-field';\n\nimport { NxFormfieldControl } from '@allianz/ngx-ndbx/formfield';\nimport { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';\n\nexport const NX_INPUT_VALUE_ACCESSOR = new InjectionToken<{value: any}>('NX_INPUT_VALUE_ACCESSOR');\n\nconst INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nconst NEVER_EMPTY = [\n  'date',\n  'datetime',\n  'datetime-local',\n  'month',\n  'time',\n  'week'\n].filter(t => getSupportedInputTypes().has(t));\n\nlet nextUniqueId = 0;\n\n@Directive({\n  selector: 'input[nxInput], textarea[nxInput], select[nxInput]',\n  exportAs: 'nxInput',\n  host: {\n    '[class.c-input]': 'true',\n    '[attr.id]': 'id',\n    '[class.is-filled]': 'empty === false',\n    '[class.is-disabled]': 'disabled',\n    '[class.has-error]': 'errorState',\n    '[class.is-focused]': 'focused',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.readonly]': 'readonly || null',\n    '[attr.required]': 'required || null',\n    '[attr.aria-label]': '_ariaLabel || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.placeholder]': 'placeholder || null',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: NxFormfieldControl, useExisting: NxInputDirective}],\n})\nexport class NxInputDirective implements OnInit, DoCheck, OnChanges, OnDestroy, NxFormfieldControl<any> {\n\n  protected _type = 'text';\n\n  protected _id: string;\n  protected _uid = `nx-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  protected _disabled = false;\n  protected _required = false;\n  private _readonly: boolean = false;\n  private _inputValueAccessor: {value: any};\n  public _ariaDescribedby: string;\n  private _placeholder: string;\n\n  @Input('nxAriaLabel') _ariaLabel: string;\n\n  /** @docs-private */\n  errorState: boolean = false;\n\n  /**\n   * Name of this control that is used inside the formfield component\n   * @docs-private\n   */\n  controlType: string = 'nx-input';\n\n  /**\n  * @docs-private\n  */\n  autofilled = false;\n\n  /** @docs-private */\n  stateChanges = new Subject<void>();\n\n  /** @docs-private */\n  focused = false;\n\n  /** The id of the input. */\n  @Input()\n  get id() {\n    return this._id;\n  }\n  set id(value: string) {\n    this._id = value || this._uid;\n  }\n\n  /** The input element's value. */\n  @Input()\n  get value(): any { return this._inputValueAccessor.value; }\n  set value(value: any) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) {\n    this._readonly = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) { this._required = coerceBooleanProperty(value); }\n\n  /** Sets the type of the input element (e.g. password, text etc). */\n  @Input()\n  get type() { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /**\n   * Sets the text for the input placeholder\n   */\n  @Input()\n  get placeholder() {\n    return this.empty ? this._placeholder : '';\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n  }\n\n  constructor(\n    protected _elementRef: ElementRef,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() private _parentForm: NgForm,\n    @Optional() private _parentFormGroup: FormGroupDirective,\n    private _errorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(NX_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n  ) {\n    this.id = this.id;\n\n    // This will enable other directives to plugin itself as the value accessor\n    // by using the NX_INPUT_VALUE_ACCESSOR Token. Default is the given input field.\n    // TODO eliminate injected dateValueAccessor once we have intra-package support in ng-packagr\n    // See the datefield for details.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n    this._previousNativeValue = this.value;\n\n    if (this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea') {\n      this.controlType = 'textarea';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  /** @docs-private */\n  get elementRef(): ElementRef {\n    return this._elementRef;\n  }\n\n  _onInput() {\n    // force to to run change detection so we know about changes in the native form input\n  }\n\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** @docs-private */\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const control = this.ngControl ? this.ngControl.control as FormControl : null;\n    const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Set a list of ids that is currently describing this input\n   * (if you have hints and errors for example).\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  // allow to set a arial label value in case there\n  // is not possibility to display a proper label\n  /**\n   * Method to set the aria label.\n   * This is required if you use the input outside of a formfield\n   * where you don't have a label connected.\n   */\n  setAriaLabel(value: string) {\n    this._ariaLabel = value;\n  }\n\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** @docs-private */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n  }\n\n  protected _isNeverEmpty() {\n    return NEVER_EMPTY.indexOf(this._type) > -1;\n  }\n\n  protected _isTextarea() {\n    const nativeElement = this._elementRef.nativeElement;\n    return nativeElement.nodeName ? nativeElement.nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  protected _validateType() {\n    if (INVALID_TYPES.indexOf(this._type) > -1) {\n      throw new Error(`Input of type '${this._type}' is not supported`);\n    }\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean {\n    return this.focused || !this.empty || (this.placeholder && this.placeholder.length > 0);\n  }\n\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n}\n","import { Input, Component, AfterViewInit, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\n\nconst visibilityIcons = {\n  show: 'password-show-o',\n  hide: 'password-hide-o'\n};\n\n@Component({\n  selector: 'nx-password-toggle',\n  template:\n    `<nx-icon\n      aria-hidden=\"true\"\n      [name]=\"_currentIcon\">\n    </nx-icon>`,\n  styleUrls: ['./password-toggle.component.scss'],\n  host: {\n    '[attr.aria-label]': 'ariaLabel',\n    '[attr.tabindex]': 'tabindex',\n    '[attr.aria-pressed]': '_pressed',\n    'role': 'button',\n    '(click)': 'toggleInputType()',\n    '(keydown)': '_onKeydown($event)'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxPasswordToggleComponent implements AfterViewInit {\n\n  /** Input element using the toggle functionality. */\n  @Input() control: HTMLInputElement;\n\n  /**@docs-private */\n  _currentIcon: string = visibilityIcons['show'];\n  /**@docs-private */\n  _pressed: boolean = false;\n  private _ariaLabel: string = 'Show password';\n\n  /** Sets the aria-label needed for accessibility.\n   * Notice that this `aria-label` should describe the initial action according to the status of the visibility.\n   * E.g if you have an `input[type=password]` at the beginning then the\n   * password will be hidden and the correct aria-label would be 'Show password.'\n   */\n  @Input()\n  set ariaLabel(value: string) {\n    if (value !== this._ariaLabel) {\n      this._ariaLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get ariaLabel(): string {\n    return this._ariaLabel;\n  }\n\n  constructor (private _changeDetectorRef: ChangeDetectorRef) { }\n\n  ngAfterViewInit() {\n    if (!this.control) {\n      console.warn('You need to pass an input as a control to the password toggle.');\n    } else {\n      // show the right icon according to the initial type of the input\n      this._currentIcon = this.control.type === 'password' ? visibilityIcons['show'] : visibilityIcons['hide'];\n    }\n  }\n\n  /** Toggles the type of the input. */\n  toggleInputType(): void {\n    if (this.control) {\n      this.control.type = this.control.type === 'password' ? 'text' : 'password';\n      this._pressed = !this._pressed;\n      this.toggleIcon();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**@docs-private */\n  toggleIcon(): void {\n    this._currentIcon = this._currentIcon === visibilityIcons['show'] ? visibilityIcons['hide'] : visibilityIcons['show'];\n  }\n\n  /**@docs-private */\n  _onKeydown($event) {\n    if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {\n      this.toggleInputType();\n    }\n  }\n\n  /**@docs-private */\n  get tabindex(): number {\n    if (this.control) {\n      return this.control.disabled ? -1 : 0;\n    }\n    return null;\n  }\n }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport {NxFormfieldModule} from '@allianz/ngx-ndbx/formfield';\nimport { NxInputDirective } from './input.directive';\nimport { NxPasswordToggleComponent } from './password-toggle.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxFormfieldModule,\n    NxIconModule\n  ],\n  declarations: [\n    NxInputDirective,\n    NxPasswordToggleComponent\n  ],\n  exports: [\n    NxFormfieldModule,\n    NxInputDirective,\n    NxPasswordToggleComponent\n  ]\n})\nexport class NxInputModule { }\n"],"names":["InjectionToken","getSupportedInputTypes","Subject","coerceBooleanProperty","Directive","NxFormfieldControl","ElementRef","Platform","NgControl","Optional","Self","NgForm","FormGroupDirective","ErrorStateMatcher","Inject","AutofillMonitor","Input","ENTER","SPACE","Component","ChangeDetectionStrategy","ChangeDetectorRef","NgModule","CommonModule","NxFormfieldModule","NxIconModule"],"mappings":"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"}