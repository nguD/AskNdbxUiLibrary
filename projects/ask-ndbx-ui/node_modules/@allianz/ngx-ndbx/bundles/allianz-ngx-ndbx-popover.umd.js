(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/coercion'), require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('@angular/platform-browser'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/a11y'), require('@angular/cdk/keycodes'), require('@angular/common'), require('@angular/cdk/platform'), require('@allianz/ngx-ndbx/icon')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/popover', ['exports', '@angular/core', '@angular/cdk/coercion', '@angular/cdk/overlay', '@angular/cdk/portal', '@angular/platform-browser', 'rxjs', 'rxjs/operators', '@angular/cdk/a11y', '@angular/cdk/keycodes', '@angular/common', '@angular/cdk/platform', '@allianz/ngx-ndbx/icon'], factory) :
    (global = global || self, factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx'].popover = {}), global.ng.core, global.ng.cdk.coercion, global.ng.cdk.overlay, global.ng.cdk.portal, global.ng.platformBrowser, global.rxjs, global.rxjs.operators, global.ng.cdk.a11y, global.ng.cdk.keycodes, global.ng.common, global.ng.cdk.platform, global.allianz['ngx-ndbx'].icon));
}(this, (function (exports, core, coercion, overlay, portal, platformBrowser, rxjs, operators, a11y, keycodes, common, platform, icon) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: popover-content.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Popover content that will be rendered lazily
     * after the popover is opened for the first time.
     */
    var NxPopoverContentDirective = /** @class */ (function () {
        function NxPopoverContentDirective(_template) {
            this._template = _template;
        }
        NxPopoverContentDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'ng-template[nxPopoverContent]'
                    },] }
        ];
        /** @nocollapse */
        NxPopoverContentDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        return NxPopoverContentDirective;
    }());
    if (false) {
        /** @type {?} */
        NxPopoverContentDirective.prototype._template;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: popover.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxPopoverComponent = /** @class */ (function () {
        function NxPopoverComponent() {
            /**
             * Event emitted when the popover is closed.
             */
            this.closed = new core.EventEmitter();
            /**
             * \@docs-private
             */
            this.closeButtonClick = new rxjs.Subject();
            /**
             * \@docs-private
             */
            this.showCloseButton = false;
            /**
             * \@docs-private
             */
            this.arrowStyle = {};
        }
        /**
         * @return {?}
         */
        NxPopoverComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.closed.complete();
        };
        // emit to notify the popover trigger directive that the close button was clicked
        /** @docs-private */
        // emit to notify the popover trigger directive that the close button was clicked
        /**
         * \@docs-private
         * @return {?}
         */
        NxPopoverComponent.prototype.emitCloseButtonClick = 
        // emit to notify the popover trigger directive that the close button was clicked
        /**
         * \@docs-private
         * @return {?}
         */
        function () {
            this.closeButtonClick.next();
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} $event
         * @return {?}
         */
        NxPopoverComponent.prototype._onCloseKeyup = /**
         * \@docs-private
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if ($event && ($event.keyCode === keycodes.ENTER || $event.keyCode === keycodes.SPACE)) {
                this.emitCloseButtonClick();
            }
            $event.preventDefault();
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxPopoverComponent.prototype.emitClosedEvent = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            this.closed.emit();
        };
        Object.defineProperty(NxPopoverComponent.prototype, "classList", {
            /** @docs-private */
            get: /**
             * \@docs-private
             * @return {?}
             */
            function () {
                if (this.direction) {
                    return ["nx-popover--" + this.direction];
                }
            },
            enumerable: true,
            configurable: true
        });
        /** Prevent the popover from closing when the user clicks on the popover content. */
        /**
         * Prevent the popover from closing when the user clicks on the popover content.
         * @param {?} event
         * @return {?}
         */
        NxPopoverComponent.prototype._onClick = /**
         * Prevent the popover from closing when the user clicks on the popover content.
         * @param {?} event
         * @return {?}
         */
        function (event) {
            event.stopPropagation();
        };
        NxPopoverComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-popover',
                        template: "<ng-template>\n  <div [ngClass]=\"classList\" role=\"tooltip\" aria-hidden=\"false\" (click)=\"_onClick($event)\">\n    <div class=\"nx-popover__content\" tabindex=\"0\">\n        <div class=\"nx-popover__arrow\" [ngStyle]=\"arrowStyle\">\n          </div>\n      <span\n          aria-label=\"close\"\n          tabindex=\"0\"\n          role=\"button\"\n          class=\"nx-popover__close-icon\"\n          (click)=\"emitCloseButtonClick()\"\n          (keyup)=\"_onCloseKeyup($event)\"\n          *ngIf=\"showCloseButton\">\n        <nx-icon aria-hidden=\"true\" name=\"close\"></nx-icon>\n        </span>\n\n      <span [id]=\"id\">\n        <ng-content></ng-content>\n        <ng-container [ngTemplateOutlet]=\"_lazyContent?._template\"></ng-container>\n      </span>\n    </div>\n  </div>\n</ng-template>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        exportAs: 'nxPopover',
                        styles: [".nx-popover__content{font-size:16px;font-size:var(--popover-content-font-size,16px);line-height:24px;line-height:var(--popover-content-line-height,24px);font-weight:400;font-weight:var(--popover-content-font-weight,400);letter-spacing:0;letter-spacing:var(--popover-content-letter-spacing,0);background-color:#fff;background-color:var(--popover-background-color,#fff);color:#414141;color:var(--popover-text-color,#414141);border:1px solid #d9d9d9;border:1px solid var(--popover-border-color,#d9d9d9);border-radius:4px;box-shadow:0 2px 4px rgba(65,65,65,.5);padding:23px;display:inline-block}.nx-popover__content:focus{outline:0}.nx-popover__content::-moz-focus-inner{border:0}.nx-popover__close-icon{display:flex;position:absolute;top:4px;right:4px;cursor:pointer;font-size:16px;font-size:var(--popover-close-icon-size,16px);color:#d9d9d9;color:var(--popover-close-icon-color,#d9d9d9);border-radius:2px}.nx-popover__close-icon:focus{outline:0}.nx-popover__close-icon::-moz-focus-inner{border:0}::ng-deep [data-whatinput=keyboard] .nx-popover__close-icon:focus,::ng-deep [data-whatinput=keyboard] .nx-popover__content:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}@media screen and (-ms-high-contrast:active){::ng-deep [data-whatinput=keyboard] .nx-popover__close-icon:focus,::ng-deep [data-whatinput=keyboard] .nx-popover__content:focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}}.nx-popover__arrow{width:12px;height:12px;background-color:inherit;position:absolute;transform:translate(-50%,0);border-top:1px solid #d9d9d9;border-top:1px solid var(--popover-border-color,#d9d9d9);border-left:1px solid #d9d9d9;border-left:1px solid var(--popover-border-color,#d9d9d9)}.nx-popover--top .nx-popover__arrow{transform:translate(-50%,0) rotate(225deg);bottom:-5px;box-shadow:2px 2px 1px 1px #fff,-2px -2px 4px rgba(65,65,65,.5);box-shadow:2px 2px 1px 1px var(--popover-background-color,#fff),-2px -2px 4px rgba(65,65,65,.5)}.nx-popover--right .nx-popover__arrow{transform:translate(0,-50%) rotate(-45deg);left:-5px}.nx-popover--bottom .nx-popover__arrow{transform:translate(-50%,0) rotate(45deg);top:-5px}.nx-popover--left .nx-popover__arrow{transform:translate(0,-50%) rotate(135deg);right:-5px}"]
                    }] }
        ];
        /** @nocollapse */
        NxPopoverComponent.ctorParameters = function () { return []; };
        NxPopoverComponent.propDecorators = {
            templateRef: [{ type: core.ViewChild, args: [core.TemplateRef, { static: false },] }],
            _lazyContent: [{ type: core.ContentChild, args: [NxPopoverContentDirective, { static: false },] }],
            closed: [{ type: core.Output, args: ['nxClosed',] }]
        };
        return NxPopoverComponent;
    }());
    if (false) {
        /**
         * \@docs-private
         * @type {?}
         */
        NxPopoverComponent.prototype.templateRef;
        /**
         * Content that will be rendered lazily.
         * @type {?}
         */
        NxPopoverComponent.prototype._lazyContent;
        /**
         * Event emitted when the popover is closed.
         * @type {?}
         */
        NxPopoverComponent.prototype.closed;
        /**
         * \@docs-private
         * @type {?}
         */
        NxPopoverComponent.prototype.closeButtonClick;
        /**
         * \@docs-private
         * @type {?}
         */
        NxPopoverComponent.prototype.id;
        /**
         * \@docs-private
         * @type {?}
         */
        NxPopoverComponent.prototype.direction;
        /**
         * \@docs-private
         * @type {?}
         */
        NxPopoverComponent.prototype.showCloseButton;
        /**
         * \@docs-private
         * @type {?}
         */
        NxPopoverComponent.prototype.arrowStyle;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: popover-trigger.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var nextId = 0;
    /** @type {?} */
    var fallbacks = [
        {
            originX: 'start',
            originY: 'bottom',
            overlayX: 'start',
            overlayY: 'top',
            offsetX: 0,
            offsetY: 16
        },
        {
            originX: 'end',
            originY: 'top',
            overlayX: 'end',
            overlayY: 'bottom',
            offsetX: 0,
            offsetY: -16
        },
        {
            originX: 'center',
            originY: 'bottom',
            overlayX: 'center',
            overlayY: 'top',
            offsetX: 0,
            offsetY: 16
        },
        {
            originX: 'end',
            originY: 'bottom',
            overlayX: 'end',
            overlayY: 'top',
            offsetX: 0,
            offsetY: 16
        },
        {
            originX: 'end',
            originY: 'center',
            overlayX: 'start',
            overlayY: 'center',
            offsetX: 16,
            offsetY: 0
        },
        {
            originX: 'start',
            originY: 'center',
            overlayX: 'end',
            overlayY: 'center',
            offsetX: -16,
            offsetY: 0
        },
        {
            originX: 'center',
            originY: 'top',
            overlayX: 'center',
            overlayY: 'bottom',
            offsetX: 0,
            offsetY: -16
        },
        {
            originX: 'start',
            originY: 'top',
            overlayX: 'start',
            overlayY: 'bottom',
            offsetX: 0,
            offsetY: -16
        }
    ];
    var NxPopoverTriggerDirective = /** @class */ (function () {
        function NxPopoverTriggerDirective(overlay, elementRef, viewContainerRef, eventManager, _focusTrapFactory, _focusMonitor, _ngZone, _platform, _document) {
            var _this = this;
            this.overlay = overlay;
            this.elementRef = elementRef;
            this.viewContainerRef = viewContainerRef;
            this.eventManager = eventManager;
            this._focusTrapFactory = _focusTrapFactory;
            this._focusMonitor = _focusMonitor;
            this._ngZone = _ngZone;
            this._platform = _platform;
            this._document = _document;
            this._destroyed = new rxjs.Subject();
            this._show = false;
            this._closeable = null;
            /**
             * Element that was focused before the Popover was opened. Save this to restore upon close.
             */
            this._elementFocusedBeforePopoverWasOpened = null;
            this._manualListeners = new Map();
            /**
             * \@docs-private
             */
            this.id = 'nx-popover-' + nextId++;
            /**
             * An event is emitted if the visibility status of the popover changes.
             */
            this.changeShow = new core.EventEmitter();
            this._closeOnClickOutside = true;
            /**
             * Sets the desired direction to open the popover. E.g., right, left, bottom, top
             */
            this.direction = 'right';
            /**
             * Whether the popover will be opened automatically.
             */
            this.popoverInitialVisible = false;
            /**
             * An event is emitted when the visibility of the popopver changes.
             */
            this.visibleChange = new core.EventEmitter();
            /**
             * Whether the popover opens in modal state.
             */
            this.modal = false;
            // If nxPopoverTrigger equals to 'hover' the popover opens on mouseenter and closes on mouseout.
            // If nxPopoverTrigger equals to 'click' the popover opens on click and closes on a click of the close icon or pressing ESC key.
            // If nxPopoverTrigger equals to 'manual' the popover opens only when programatically requested.
            /**
             * Sets the way to trigger the popover. Options are hover, click, manual
             */
            this.trigger = 'click';
            /**
             * Sets the scroll strategy. 'close' closes the popover on scroll while 'reposition' scrolls the popover with the origin.
             */
            this.scrollStrategy = 'close';
            this._documentClickObservable = rxjs.fromEvent(document, 'click');
            /** @type {?} */
            var element = elementRef.nativeElement;
            if (!this._platform.IOS && !this._platform.ANDROID) {
                this._manualListeners
                    .set('mouseenter', (/**
                 * @return {?}
                 */
                function () {
                    if (_this.trigger === 'hover') {
                        _this.show = true;
                    }
                }))
                    .set('mouseleave', (/**
                 * @return {?}
                 */
                function () {
                    if (_this.trigger === 'hover') {
                        _this.show = false;
                    }
                }))
                    .set('keydown', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    switch (event.keyCode) {
                        case keycodes.SPACE:
                        case keycodes.ENTER:
                            _this.handleClick();
                            break;
                        default:
                            return;
                    }
                }));
            }
            else {
                this._manualListeners.set('touchstart', (/**
                 * @return {?}
                 */
                function () {
                    if (_this.trigger === 'hover') {
                        _this.show = true;
                    }
                }));
            }
            this._manualListeners.forEach((/**
             * @param {?} listener
             * @param {?} event
             * @return {?}
             */
            function (listener, event) { return element.addEventListener(event, listener); }));
            this._focusMonitor.monitor(element).pipe(operators.takeUntil(this._destroyed)).subscribe((/**
             * @param {?} origin
             * @return {?}
             */
            function (origin) {
                if (origin === 'keyboard' && _this.trigger === 'hover') {
                    _this._ngZone.run((/**
                     * @return {?}
                     */
                    function () { return _this.show = true; }));
                }
            }));
        }
        Object.defineProperty(NxPopoverTriggerDirective.prototype, "show", {
            get: /**
             * @return {?}
             */
            function () {
                return this._show;
            },
            /** Whether to show or hide the popover. */
            set: /**
             * Whether to show or hide the popover.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                value = coercion.coerceBooleanProperty(value);
                if (this._show !== value) {
                    this._show = value;
                    if (this._show) {
                        this.openPopover();
                    }
                    else {
                        this.closePopover();
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxPopoverTriggerDirective.prototype, "closeable", {
            get: /**
             * @return {?}
             */
            function () {
                return this._closeable;
            },
            /** Whether to show a close button. By default a close icon is only shown for trigger type click. */
            set: /**
             * Whether to show a close button. By default a close icon is only shown for trigger type click.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._closeable = coercion.coerceBooleanProperty(value);
                if (this.popover) {
                    this.popover.showCloseButton = this.isCloseable();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxPopoverTriggerDirective.prototype, "closeOnClickOutside", {
            get: /**
             * @return {?}
             */
            function () {
                return this._closeOnClickOutside;
            },
            /** Whether the popover should be closed on click outside of the popover in the trigger modes 'manual' and 'click'. */
            set: /**
             * Whether the popover should be closed on click outside of the popover in the trigger modes 'manual' and 'click'.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._closeOnClickOutside = coercion.coerceBooleanProperty(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.popover.showCloseButton = this.isCloseable();
        };
        /**
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.popover.id = this.id;
            this.eventManager.addGlobalEventListener('window', 'keyup.esc', (/**
             * @return {?}
             */
            function () {
                if (_this.isOpen) {
                    _this.show = false;
                }
            }));
            this.popover.closeButtonClick.pipe(operators.takeUntil(this._destroyed)).subscribe((/**
             * @return {?}
             */
            function () {
                _this.show = false;
            }));
            if (this.popoverInitialVisible || this._show) {
                this.show = true;
            }
        };
        /**
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.show = false;
            // Clean up the event listeners set in the constructor
            this._manualListeners.forEach((/**
             * @param {?} listener
             * @param {?} event
             * @return {?}
             */
            function (listener, event) {
                _this.elementRef.nativeElement.removeEventListener(event, listener);
            }));
            this._manualListeners.clear();
            this._destroyed.next();
            this._destroyed.complete();
        };
        Object.defineProperty(NxPopoverTriggerDirective.prototype, "isOpen", {
            /** @docs-private */
            get: /**
             * \@docs-private
             * @return {?}
             */
            function () {
                return this.overlayRef && this.createOverlay().hasAttached();
            },
            enumerable: true,
            configurable: true
        });
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.isCloseable = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return (this.trigger === 'click' && this._closeable === null) || this._closeable;
        };
        /** Update the popover with the given position strategy. */
        /**
         * Update the popover with the given position strategy.
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.updatePosition = /**
         * Update the popover with the given position strategy.
         * @return {?}
         */
        function () {
            if (this._positionStrategy) {
                this._positionStrategy.apply();
            }
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.handleClick = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            if (this.trigger === 'click') {
                this.show = !this.isOpen;
            }
            else if (this.trigger === 'hover') {
                this.show = true;
            }
        };
        /** Open the popover instance. */
        /**
         * Open the popover instance.
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.open = /**
         * Open the popover instance.
         * @return {?}
         */
        function () {
            this.show = true;
        };
        /** Close the popover instance. */
        /**
         * Close the popover instance.
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.close = /**
         * Close the popover instance.
         * @return {?}
         */
        function () {
            this.show = false;
        };
        /** Toggle the popover instance. */
        /**
         * Toggle the popover instance.
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.toggle = /**
         * Toggle the popover instance.
         * @return {?}
         */
        function () {
            this.show = !this.show;
        };
        /**
         * @private
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.openPopover = /**
         * @private
         * @return {?}
         */
        function () {
            if (!this.createOverlay().hasAttached()) {
                this._embeddedViewRef = this.createOverlay().attach(this.portal);
                /** @type {?} */
                var element = (/** @type {?} */ (this._embeddedViewRef.rootNodes[0]));
                this._focusTrap = this._focusTrapFactory.create(element);
                this._elementFocusedBeforePopoverWasOpened = this.elementRef.nativeElement;
                this._autoFocusFirstTabbableElement(element);
                // attach a close click listener only if it makes sense (ignore it on hover e.g.)
                if (this.shouldReactOnClickOutside()) {
                    this.waitForClose();
                }
            }
        };
        /**
         * Autofocus the first tabbable element inside of the popover, if there is not a tabbable element,
         * focus the popover instead.
         */
        /**
         * Autofocus the first tabbable element inside of the popover, if there is not a tabbable element,
         * focus the popover instead.
         * @private
         * @param {?} element
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype._autoFocusFirstTabbableElement = /**
         * Autofocus the first tabbable element inside of the popover, if there is not a tabbable element,
         * focus the popover instead.
         * @private
         * @param {?} element
         * @return {?}
         */
        function (element) {
            this._focusTrap.focusInitialElementWhenReady().then((/**
             * @param {?} hasMovedFocus
             * @return {?}
             */
            function (hasMovedFocus) {
                // If we didn't find any focusable elements inside the popover, focus the
                // container so the user can't tab into other elements behind it.
                if (!hasMovedFocus) {
                    element.focus();
                }
            }));
        };
        /**
         * @private
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.shouldReactOnClickOutside = /**
         * @private
         * @return {?}
         */
        function () {
            return (!this.modal && this.closeOnClickOutside);
        };
        // detaches the overlay
        // we are listening to the detachments observable which will then emit the nxClosed event
        // on the popover component
        // detaches the overlay
        // we are listening to the detachments observable which will then emit the nxClosed event
        // on the popover component
        /**
         * @private
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.closePopover = 
        // detaches the overlay
        // we are listening to the detachments observable which will then emit the nxClosed event
        // on the popover component
        /**
         * @private
         * @return {?}
         */
        function () {
            if (this.overlayRef) {
                this._returnFocusAfterPopover();
                this.overlayRef.detach();
                this._embeddedViewRef = null;
                this._focusTrap.destroy();
            }
        };
        /**
         * @private
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.createOverlay = /**
         * @private
         * @return {?}
         */
        function () {
            if (!this.overlayRef) {
                this.portal = new portal.TemplatePortal(this.popover.templateRef, this.viewContainerRef);
                /** @type {?} */
                var overlayState = new overlay.OverlayConfig();
                overlayState.positionStrategy = this.getPosition();
                this._positionStrategy = overlayState.positionStrategy;
                if (this.scrollStrategy === 'reposition') {
                    overlayState.scrollStrategy = this.overlay.scrollStrategies.reposition();
                }
                else {
                    overlayState.scrollStrategy = this.overlay.scrollStrategies.close();
                }
                overlayState.scrollStrategy.enable();
                if (this.modal && this.trigger === 'click') {
                    overlayState.hasBackdrop = true;
                }
                this.overlayRef = this.overlay.create(overlayState);
                this.subscribeToPositions((/** @type {?} */ (overlayState.positionStrategy)));
                this._subscribeToAttach();
                this._subscribeToDetach();
                if (this.modal) {
                    this._subscribeToBackdropClick();
                }
            }
            return this.overlayRef;
        };
        /**
         * @private
         * @param {?} position
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.subscribeToPositions = /**
         * @private
         * @param {?} position
         * @return {?}
         */
        function (position) {
            var _this = this;
            position.positionChanges.pipe(operators.takeUntil(this._destroyed)).subscribe((/**
             * @param {?} change
             * @return {?}
             */
            function (change) {
                /** @type {?} */
                var pair = change.connectionPair;
                _this.positionOverlay(pair);
                _this.positionArrow(pair);
                // These position changes arrive too late,
                // We have to trigger the change detection manually
                // as it's detached from any render hierarchy
                // and only updated by the overlay when attached.
                if (_this._embeddedViewRef && !_this._embeddedViewRef.destroyed) {
                    _this._embeddedViewRef.detectChanges();
                }
            }));
        };
        // for modal popovers close the popover on backdrop clicks
        // for modal popovers close the popover on backdrop clicks
        /**
         * @private
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype._subscribeToBackdropClick = 
        // for modal popovers close the popover on backdrop clicks
        /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.overlayRef.backdropClick().pipe(operators.takeUntil(this._destroyed)).subscribe((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.show = false;
            }));
        };
        // Emit the nxClosed and the show status change event on the popover component when the overlay detaches
        // Emit the nxClosed and the show status change event on the popover component when the overlay detaches
        /**
         * @private
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype._subscribeToDetach = 
        // Emit the nxClosed and the show status change event on the popover component when the overlay detaches
        /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.overlayRef.detachments().pipe(operators.takeUntil(this._destroyed)).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                // This is an exception: when the popover is closed by a scrolling event,
                // then only the detached method is called but the show state variable remains unchanged.
                if (_this.show) {
                    _this.show = false;
                }
                _this.changeShow.emit(_this._show);
                _this.popover.emitClosedEvent();
            }));
        };
        /**
         * @private
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype._subscribeToAttach = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.overlayRef.attachments().pipe(operators.takeUntil(this._destroyed)).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.changeShow.emit(_this._show);
            }));
        };
        // subscribe to document clicks when trigger='click' to close the popover on clicks on the background
        // subscribe to document clicks when trigger='click' to close the popover on clicks on the background
        /**
         * @private
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.waitForClose = 
        // subscribe to document clicks when trigger='click' to close the popover on clicks on the background
        /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            return this._documentClickObservable
                .pipe(operators.map((/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return event.target; })), operators.filter((/**
             * @param {?} target
             * @return {?}
             */
            function (target) { return !_this.elementRef.nativeElement.contains(target); })), operators.takeUntil(this.popover.closed))
                .subscribe((/**
             * @return {?}
             */
            function () {
                _this.show = false;
            }));
        };
        /**
         * @private
         * @param {?} pair
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.positionOverlay = /**
         * @private
         * @param {?} pair
         * @return {?}
         */
        function (pair) {
            if (pair.originX === 'end' && pair.overlayX === 'start') {
                this.popover.direction = 'right';
            }
            else if (pair.originY === 'bottom' && pair.overlayY === 'top') {
                this.popover.direction = 'bottom';
            }
            else if (pair.originX === 'start' && pair.overlayX === 'end') {
                this.popover.direction = 'left';
            }
            else if (pair.originY === 'top' && pair.overlayY === 'bottom') {
                this.popover.direction = 'top';
            }
        };
        /**
         * @private
         * @param {?} pair
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.positionArrow = /**
         * @private
         * @param {?} pair
         * @return {?}
         */
        function (pair) {
            /** @type {?} */
            var parentElementPositionX = this.elementRef.nativeElement.getBoundingClientRect().left;
            /** @type {?} */
            var parentElementWidth = this.elementRef.nativeElement.getBoundingClientRect().width / 2;
            /** @type {?} */
            var parentElementLeftOffset = this.overlayRef.overlayElement.parentElement.offsetLeft;
            /** @type {?} */
            var overlayElementLeftOffset = this.overlayRef.overlayElement.offsetLeft;
            // calculation for x position of the parent element. In this case, overlay left offset is the one thing to consider.
            /** @type {?} */
            var targetPosition = (parentElementPositionX + parentElementWidth) - (parentElementLeftOffset + overlayElementLeftOffset);
            if (pair.originX === pair.overlayX) {
                /** @type {?} */
                var direction = 'left';
                /** @type {?} */
                var arrowStyle = {};
                arrowStyle[direction] = targetPosition + 'px';
                this.popover.arrowStyle = arrowStyle;
            }
            if ((pair.originY === 'bottom' || pair.originY === 'top') && pair.overlayX === 'center') {
                this.popover.arrowStyle = { left: targetPosition + 'px' };
            }
            if ((pair.originX === 'end' || pair.originX === 'start') && pair.overlayY === 'center') {
                this.popover.arrowStyle = { top: '50%' };
            }
        };
        /**
         * @private
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype.getPosition = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var positions;
            /** @type {?} */
            var offsetX = 0;
            /** @type {?} */
            var offsetY = 0;
            if (this.direction === 'top') {
                positions = [{
                        overlayX: 'center',
                        overlayY: 'bottom',
                        originX: 'center',
                        originY: 'top'
                    }];
                offsetX = 0;
                offsetY = -20;
            }
            else if (this.direction === 'right') {
                positions = [{
                        overlayX: 'start',
                        overlayY: 'center',
                        originX: 'end',
                        originY: 'center'
                    }];
                offsetX = 20;
                offsetY = 0;
            }
            else if (this.direction === 'bottom') {
                positions = [{
                        overlayX: 'center',
                        overlayY: 'top',
                        originX: 'center',
                        originY: 'bottom'
                    }];
                offsetX = 0;
                offsetY = 20;
            }
            else if (this.direction === 'left') {
                positions = [{
                        overlayX: 'end',
                        overlayY: 'center',
                        originX: 'start',
                        originY: 'center'
                    }];
                offsetX = -20;
                offsetY = 0;
            }
            return this.overlay.position().flexibleConnectedTo(this.elementRef)
                .withPositions(__spread(positions, fallbacks))
                .withDefaultOffsetX(offsetX)
                .withDefaultOffsetY(offsetY);
        };
        /** Returns the focus to the element focused before the Popover was open. */
        /**
         * Returns the focus to the element focused before the Popover was open.
         * @private
         * @return {?}
         */
        NxPopoverTriggerDirective.prototype._returnFocusAfterPopover = /**
         * Returns the focus to the element focused before the Popover was open.
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var toFocus = this._elementFocusedBeforePopoverWasOpened;
            // We need the extra check, because IE can set the `activeElement` to null in some cases.
            if (toFocus && typeof toFocus.focus === 'function') {
                toFocus.focus();
            }
        };
        NxPopoverTriggerDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[nxPopoverTriggerFor]',
                        exportAs: 'nxPopoverTrigger',
                        host: {
                            '(click)': 'handleClick()',
                            'aria-haspopup': 'true',
                            '[attr.aria-expanded]': 'isOpen',
                            '[attr.aria-describedby]': 'isOpen ? id : null'
                        }
                    },] }
        ];
        /** @nocollapse */
        NxPopoverTriggerDirective.ctorParameters = function () { return [
            { type: overlay.Overlay },
            { type: core.ElementRef },
            { type: core.ViewContainerRef },
            { type: platformBrowser.EventManager },
            { type: a11y.FocusTrapFactory },
            { type: a11y.FocusMonitor },
            { type: core.NgZone },
            { type: platform.Platform },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] }
        ]; };
        NxPopoverTriggerDirective.propDecorators = {
            changeShow: [{ type: core.Output, args: ['nxPopoverShowChange',] }],
            show: [{ type: core.Input, args: ['nxPopoverShow',] }],
            closeable: [{ type: core.Input, args: ['nxPopoverCloseable',] }],
            closeOnClickOutside: [{ type: core.Input }],
            popover: [{ type: core.Input, args: ['nxPopoverTriggerFor',] }],
            direction: [{ type: core.Input, args: ['nxPopoverDirection',] }],
            popoverInitialVisible: [{ type: core.Input, args: ['nxPopoverInitialVisible',] }],
            visibleChange: [{ type: core.Input, args: ['nxPopoverVisibleChange',] }],
            modal: [{ type: core.Input, args: ['nxPopoverModal',] }],
            trigger: [{ type: core.Input, args: ['nxPopoverTrigger',] }],
            scrollStrategy: [{ type: core.Input, args: ['nxPopoverScrollStrategy',] }]
        };
        return NxPopoverTriggerDirective;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype.overlayRef;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype.portal;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype._destroyed;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype._show;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype._closeable;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype._positionStrategy;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype._embeddedViewRef;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype._documentClickObservable;
        /**
         * The class that traps and manages focus within the popover.
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype._focusTrap;
        /**
         * Element that was focused before the Popover was opened. Save this to restore upon close.
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype._elementFocusedBeforePopoverWasOpened;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype._manualListeners;
        /**
         * \@docs-private
         * @type {?}
         */
        NxPopoverTriggerDirective.prototype.id;
        /**
         * An event is emitted if the visibility status of the popover changes.
         * @type {?}
         */
        NxPopoverTriggerDirective.prototype.changeShow;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype._closeOnClickOutside;
        /**
         * Links the trigger with the popover to open.
         * @type {?}
         */
        NxPopoverTriggerDirective.prototype.popover;
        /**
         * Sets the desired direction to open the popover. E.g., right, left, bottom, top
         * @type {?}
         */
        NxPopoverTriggerDirective.prototype.direction;
        /**
         * Whether the popover will be opened automatically.
         * @type {?}
         */
        NxPopoverTriggerDirective.prototype.popoverInitialVisible;
        /**
         * An event is emitted when the visibility of the popopver changes.
         * @type {?}
         */
        NxPopoverTriggerDirective.prototype.visibleChange;
        /**
         * Whether the popover opens in modal state.
         * @type {?}
         */
        NxPopoverTriggerDirective.prototype.modal;
        /**
         * Sets the way to trigger the popover. Options are hover, click, manual
         * @type {?}
         */
        NxPopoverTriggerDirective.prototype.trigger;
        /**
         * Sets the scroll strategy. 'close' closes the popover on scroll while 'reposition' scrolls the popover with the origin.
         * @type {?}
         */
        NxPopoverTriggerDirective.prototype.scrollStrategy;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype.overlay;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype.elementRef;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype.viewContainerRef;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype.eventManager;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype._focusTrapFactory;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype._focusMonitor;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype._ngZone;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype._platform;
        /**
         * @type {?}
         * @private
         */
        NxPopoverTriggerDirective.prototype._document;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: popover.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxPopoverModule = /** @class */ (function () {
        function NxPopoverModule() {
        }
        NxPopoverModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            overlay.OverlayModule,
                            icon.NxIconModule
                        ],
                        declarations: [
                            NxPopoverTriggerDirective,
                            NxPopoverComponent,
                            NxPopoverContentDirective
                        ],
                        exports: [
                            NxPopoverTriggerDirective,
                            NxPopoverComponent,
                            NxPopoverContentDirective
                        ]
                    },] }
        ];
        return NxPopoverModule;
    }());

    exports.NxPopoverComponent = NxPopoverComponent;
    exports.NxPopoverContentDirective = NxPopoverContentDirective;
    exports.NxPopoverModule = NxPopoverModule;
    exports.NxPopoverTriggerDirective = NxPopoverTriggerDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=allianz-ngx-ndbx-popover.umd.js.map
