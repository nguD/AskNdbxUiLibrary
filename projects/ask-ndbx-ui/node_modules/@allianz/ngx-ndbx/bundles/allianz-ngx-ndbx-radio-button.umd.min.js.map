{"version":3,"sources":["ng://@allianz/ngx-ndbx/radio-button/radio-button.ts","ng://@allianz/ngx-ndbx/radio-button/radio-button.module.ts"],"names":["source","value","this","nextId","NxRadioGroupComponent","_changeDetectorRef","ngControl","_parentForm","_parentFormGroup","_stateChanges","Subject","_id","_disabled","_negative","_required","groupValueChange","EventEmitter","_name","_value","_selected","_onChange","_onTouched","valueAccessor","Object","defineProperty","prototype","markForCheck","coerceBooleanProperty","next","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","ngAfterContentInit","ngOnDestroy","complete","writeValue","registerOnChange","fn","registerOnTouched","change","emit","NxRadioChange","touch","setDisabledState","isDisabled","disabled","_this","isAlreadySelected","_radios","forEach","radio","checked","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","host","role","[attr.id]","[attr.required]","[class.nx-radio-group--negative]","[attr.aria-labelledby]","ChangeDetectorRef","NgControl","decorators","type","Optional","Self","NgForm","FormGroupDirective","ContentChild","forwardRef","NxLabelComponent","static","Input","Output","ContentChildren","NxRadioComponent","descendants","radioGroup","_labelSize","valueChange","_checked","onChangeCallback","_","onTouchedCallback","id","name","negative","_radioLabelWrapper","nativeElement","innerHTML","trim","labelContentChanged","detectChanges","required","ngOnInit","_parentChangeSubscription","subscribe","unsubscribe","onChange","onTouched","_onInputChange","event","stopPropagation","_onInputClick","_controlInvalid","form","invalid","touched","submitted","providers","provide","NG_VALUE_ACCESSOR","useExisting","multi","[class.nx-radio-button--small-label]","[class.nx-radio-button--big-label]","[class.nx-radio--negative]","[class.has-error]","[attr.aria-invalid]","ViewChild","NxRadioModule","NgModule","declarations","exports","NxErrorModule","NxLabelModule","imports","CommonModule","NxIconModule","ObserversModule"],"mappings":"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","sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component, ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewChild\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NG_VALUE_ACCESSOR,\n  NgControl, NgForm,\n} from '@angular/forms';\nimport { Subject, Subscription } from 'rxjs';\nimport { NxLabelComponent } from '@allianz/ngx-ndbx/base';\n\n/** The change event object emitted by the radio group and radio button. */\nexport class NxRadioChange {\n  source: NxRadioComponent;\n  value: any;\n\n  /** The NxRadioComponent that emits the change event. NxRadioChange object can be instantiated with source radio component and a value. */\n  constructor(source: NxRadioComponent, value: any) {\n    this.source = source;\n    this.value = value;\n  }\n}\n\n/** Label Size Types */\nexport type LabelSize  = 'small' | 'big';\n\nlet nextId = 0;\n\n@Component({\n  selector: 'nx-radio-group',\n  templateUrl: './radio-group.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'radiogroup',\n    '[attr.id]': 'id',\n    '[attr.required]': 'required',\n    '[class.nx-radio-group--negative]': 'negative',\n    '[attr.aria-labelledby]': 'this._label?.id  || null'\n  },\n  styleUrls: [ 'radio-button-group.scss' ]\n})\nexport class NxRadioGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy {\n\n  @ContentChild(forwardRef(() => NxLabelComponent), {static: false})\n  _label: NxLabelComponent;\n\n  // emits when the internal state changes on properties which are relevant\n  // for the radio buttons so that they can mark themself for check\n  readonly _stateChanges = new Subject<void>();\n\n  private _id: string = `nx-radio-group-${nextId++}`;\n  /** Sets the Id of the radio group. */\n  @Input('id')\n  set id(value: string) {\n    if (this._id !== value) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get id(): string {\n    return this._id;\n  }\n  private _disabled: boolean = false;\n\n  /** Whether every radio button in this group should be disabled. */\n  @Input('nxDisabled')\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    // inform childs about the change where CD should be triggered\n    this._stateChanges.next();\n  }\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  private _negative: boolean = false;\n  /** Whether the radio group should have negative styling. */\n  @Input()\n  set negative(value: boolean) {\n    this._negative = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _required: boolean = false;\n  /** Sets if at least an option should be selected. */\n  @Input()\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._stateChanges.next();\n  }\n  get required(): boolean {\n    return this._required;\n  }\n\n  /** An event is dispatched on each group value change. */\n  @Output('nxGroupValueChange') groupValueChange: EventEmitter<NxRadioChange> = new EventEmitter<NxRadioChange>();\n  private _name: string = `nx-radio-group-${nextId++}`;\n  private _value: any = null;\n  // The currently selected radio button; should match _value\n  private _selected: NxRadioComponent | null = null;\n\n  @ContentChildren(forwardRef(() => NxRadioComponent), {descendants: true})\n  _radios: QueryList<NxRadioComponent>;\n\n  private _onChange: (value: any) => void = () => {};\n  private _onTouched: () => any = () => {};\n\n  get name(): string {\n    return this._name;\n  }\n\n  // this is also the name attribute, which is mandatory in conjunction with ngModel, hence no nx prefix\n  /** Sets the name of this radio group, which is mandatory in conjunction with ngModel (Default: null). */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this._stateChanges.next();\n  }\n\n  get value(): any { return this._value; }\n\n  /** Sets the value of the selected radion button in this group (Default: null). */\n  @Input('nxValue')\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() public _parentForm: NgForm,\n              @Optional() public _parentFormGroup: FormGroupDirective) {\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._updateSelectedRadioFromValue();\n    this._checkSelectedRadioButton();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** @docs-private this is meant to be called by the radio buttons in this group */\n  change(value) {\n    this.value = value;\n    this._onChange(value);\n    this.groupValueChange.emit(new NxRadioChange(this._selected, this._value));\n  }\n\n  /** @docs-private this is meant to be called by the radio buttons in this group. */\n  touch() {\n    if (this._onTouched) {\n      this._onTouched();\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value === this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  private _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n}\n\n@Component({\n  selector: 'nx-radio',\n  templateUrl: 'radio-button.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ 'radio-button.scss' ],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxRadioComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[attr.required]': 'required',\n    '[class.nx-radio-button--small-label]': 'labelSize === \"small\"',\n    '[class.nx-radio-button--big-label]': 'labelSize === \"big\"',\n    '[class.nx-radio--negative]': 'negative',\n    '[class.has-error]': '_controlInvalid() || null',\n    '[attr.aria-invalid]': '_controlInvalid() || null',\n  }\n})\nexport class NxRadioComponent implements ControlValueAccessor, OnInit, OnDestroy {\n  /** @docs-private */\n  @ViewChild('radioLabelWrapper', { static: true }) _radioLabelWrapper: ElementRef;\n  private _parentChangeSubscription: Subscription;\n\n  private _id: string = `nx-radio-${nextId++}`;\n  /** Sets the id of the radio component. */\n  @Input('id')\n  set id(value: string) {\n    if (this._id !== value) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get id(): string {\n    return this._id;\n  }\n\n  /** @docs-private */\n  get inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  /** @docs-private */\n  get labelId(): string {\n    return `${this.id}-label`;\n  }\n\n  private _name: string = null;\n  // this is also the name attribute, which is mandatory in conjunction with ngModel, hence no nx prefix\n  /** Sets the name of this radio component, which is mandatory in conjunction with ngModel (Default: null). */\n  @Input('name')\n  set name(value: string) {\n    if (this._name !== value) {\n      this._name = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get name(): string {\n    return (this.radioGroup && this.radioGroup.name) ? this.radioGroup.name : this._name;\n  }\n\n  private _labelSize: LabelSize = 'big';\n  /** Sets the label size of the radio button.\n   * The default value is `big`.\n  */\n  @Input()\n  set labelSize(value: LabelSize) {\n    if (this._labelSize !== value) {\n      this._labelSize = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get labelSize(): LabelSize {\n    return this._labelSize;\n  }\n\n  private _negative:  boolean = false;\n  /**\n   * Whether the negative set of styles should be used.\n   *\n   * If the radio button is placed in a radio group, the negative value\n   * is overwritten by the group's negative value.\n   */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._negative !== newValue) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get negative(): boolean {\n    return this.radioGroup ? this.radioGroup.negative : this._negative;\n  }\n\n  /** An event is dispatched on each value change. */\n  @Output('nxValueChange') valueChange: EventEmitter<NxRadioChange> = new EventEmitter<NxRadioChange>();\n  private _value: any = null;\n  private _checked: boolean = false;\n  private _disabled: boolean = false;\n  private _required: boolean = false;\n\n  get value(): any {\n    return this._value;\n  }\n\n  /** @docs-private */\n  get labelHasContent(): boolean {\n    return !!this._radioLabelWrapper.nativeElement.innerHTML.trim();\n  }\n\n  /** @docs-private\n   * Callback for when the content of the label has changed.\n   */\n  labelContentChanged() {\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Sets the value of the form control element (Default: null). */\n  @Input('nxValue')\n  set value(value: any) {\n    if (value !== this._value) {\n      this._value = value;\n      this.onChangeCallback(value);\n    }\n  }\n\n  /** @docs-private */\n  get checked(): boolean {\n    return this._checked;\n  }\n\n  /** Whether the radio component is selected. */\n  @Input('nxChecked')\n  set checked(value: boolean) {\n    if (this._checked !== value) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** @docs-private */\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup && this.radioGroup.disabled);\n  }\n\n  /** Whether the radio button should be disabled or not. */\n  @Input('nxDisabled')\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** @docs-private */\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n\n  /** Sets if at least a radio button should be selected. */\n  @Input()\n  set required(value: boolean) {\n    this._required = value;\n    // needed when the outer component is set to onPush because it is a native property\n    // on the host element\n    this._changeDetectorRef.markForCheck();\n  }\n\n  constructor(@Optional() public radioGroup: NxRadioGroupComponent,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      this.name = this.radioGroup.name;\n      // when relevant properties of the parent like name and disabled change\n      // we need to let change detection know that the template needs an update\n      this._parentChangeSubscription = this.radioGroup._stateChanges.subscribe(()  => {\n        this._changeDetectorRef.markForCheck();\n      });\n\n      if (this.radioGroup.value === this._value) {\n        this._checked = true;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._parentChangeSubscription) {\n      this._parentChangeSubscription.unsubscribe();\n    }\n  }\n\n  writeValue(value: any): void {\n    if (value === this._value) {\n      this._checked = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  private onChangeCallback = (_: any) => {};\n\n  registerOnChange(onChange: any): void {\n    this.onChangeCallback = onChange;\n  }\n\n  private onTouchedCallback = () => {};\n\n  registerOnTouched(onTouched: any): void {\n    this.onTouchedCallback = onTouched;\n  }\n\n  /** @docs-private */\n  touch() {\n    this.onTouchedCallback();\n\n    if (this.radioGroup) {\n      this.radioGroup.touch();\n    }\n  }\n\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n    this._checked = true;\n    this.valueChange.emit(new NxRadioChange(this, this._value));\n    this.onChangeCallback(this.value);\n\n    if (this.radioGroup && this.value !== this.radioGroup.value) {\n      this.radioGroup.change(this.value);\n    }\n  }\n\n  _onInputClick(event: Event) {\n    // make sure click event propagation on the visually hidden input\n    // are stopped to prevent multiple events bubbling up.\n    event.stopPropagation();\n  }\n\n  /** @docs-private */\n  _controlInvalid(): boolean {\n    const form = this.radioGroup && (this.radioGroup._parentFormGroup || this.radioGroup._parentForm);\n    return !!(this.radioGroup && this.radioGroup.ngControl && this.radioGroup.ngControl.invalid\n      && (this.radioGroup.ngControl.touched || (form && form.submitted)));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxRadioComponent } from './radio-button';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxRadioGroupComponent } from './radio-button';\nimport { NxErrorModule, NxLabelModule } from '@allianz/ngx-ndbx/base';\nimport {ObserversModule} from '@angular/cdk/observers';\n\n@NgModule({\n  declarations: [\n    NxRadioComponent,\n    NxRadioGroupComponent\n  ],\n  exports: [\n    NxRadioComponent,\n    NxRadioGroupComponent,\n    NxErrorModule,\n    NxLabelModule\n  ],\n  imports: [\n    CommonModule,\n    NxIconModule,\n    ObserversModule\n  ]\n})\nexport class NxRadioModule { }\n"]}