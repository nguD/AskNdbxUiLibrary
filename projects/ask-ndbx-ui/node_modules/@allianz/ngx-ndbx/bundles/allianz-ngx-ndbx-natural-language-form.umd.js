(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@allianz/ngx-ndbx/popover'), require('@allianz/ngx-ndbx/input'), require('@allianz/ngx-ndbx/formfield'), require('@allianz/ngx-ndbx/utils'), require('@angular/cdk/overlay'), require('@angular/core'), require('rxjs/operators'), require('rxjs'), require('@allianz/ngx-ndbx/dropdown'), require('@angular/cdk/portal'), require('@angular/cdk/coercion'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/natural-language-form', ['exports', '@allianz/ngx-ndbx/popover', '@allianz/ngx-ndbx/input', '@allianz/ngx-ndbx/formfield', '@allianz/ngx-ndbx/utils', '@angular/cdk/overlay', '@angular/core', 'rxjs/operators', 'rxjs', '@allianz/ngx-ndbx/dropdown', '@angular/cdk/portal', '@angular/cdk/coercion', '@angular/common'], factory) :
    (global = global || self, factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx']['natural-language-form'] = {}), global.allianz['ngx-ndbx'].popover, global.allianz['ngx-ndbx'].input, global.allianz['ngx-ndbx'].formfield, global.allianz['ngx-ndbx'].utils, global.ng.cdk.overlay, global.ng.core, global.rxjs.operators, global.rxjs, global.allianz['ngx-ndbx'].dropdown, global.ng.cdk.portal, global.ng.cdk.coercion, global.ng.common));
}(this, (function (exports, popover, input, formfield, utils, overlay, core, operators, rxjs, dropdown, portal, coercion, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: word.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxWordComponent = /** @class */ (function () {
        function NxWordComponent(elementRef, _changeDetectorRef, _renderer, _overlay, _viewContainerRef, _overlayPositionBuilder) {
            this.elementRef = elementRef;
            this._changeDetectorRef = _changeDetectorRef;
            this._renderer = _renderer;
            this._overlay = _overlay;
            this._viewContainerRef = _viewContainerRef;
            this._overlayPositionBuilder = _overlayPositionBuilder;
            this.subscription = rxjs.Subscription.EMPTY;
            this.subscriptionValues = rxjs.Subscription.EMPTY;
            /**
             * \@docs-private
             */
            this.inputChanges = new rxjs.Subject();
            this._hasErrors = false;
            /**
             * \@docs-private
             */
            this.currentTextWidth = 0;
            // this will apply different min-widths to our component through our styles
            /**
             * Provide a hint for a minimal width. The actual size will be determined for inputs for each change.
             */
            this.size = 'regular';
        }
        /**
         * @return {?}
         */
        NxWordComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.setupErrorPopover();
        };
        /**
         * @return {?}
         */
        NxWordComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this._validateControlChild();
            this.subscription = this._control.stateChanges.pipe(operators.startWith(null)).subscribe((/**
             * @return {?}
             */
            function () {
                _this._hasErrors = _this._control.errorState;
                _this.updateErrorPopoverState();
                _this._changeDetectorRef.markForCheck();
            }));
            // if we have a ngcontrol available stick to its valueChanges subject
            if (this._control.ngControl) {
                this.subscriptionValues = this._control.ngControl.valueChanges.subscribe((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    _this.updateCurrentTextWidth();
                    _this.inputChanges.next();
                }));
                // in any other case it is a bre input and input changes are signaled through simple state changes
            }
            else {
                this.subscriptionValues = this._control.stateChanges.subscribe((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    _this.updateCurrentTextWidth();
                    _this.inputChanges.next();
                }));
            }
            this._control.setAriaLabel(this.label);
        };
        /**
         * @return {?}
         */
        NxWordComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.subscription.unsubscribe();
        };
        /**
          @docs-private
          Calculate the width of the full text given by the input,
          that value is bound to this component so it can grow.
      
          The involved input is known to have a width of 100% an will fit the additional space given
          which completes the auto growing behavior.
        */
        /**
         * \@docs-private
         * Calculate the width of the full text given by the input,
         * that value is bound to this component so it can grow.
         * The involved input is known to have a width of 100% an will fit the additional space given
         * which completes the auto growing behavior.
         * @return {?}
         */
        NxWordComponent.prototype.updateCurrentTextWidth = /**
         * \@docs-private
         * Calculate the width of the full text given by the input,
         * that value is bound to this component so it can grow.
         * The involved input is known to have a width of 100% an will fit the additional space given
         * which completes the auto growing behavior.
         * @return {?}
         */
        function () {
            // provide the canvas only lazy
            if (!this.measureCanvas) {
                this.measureCanvas = this._renderer.createElement('canvas');
            }
            /** @type {?} */
            var ctx = this.measureCanvas.getContext('2d');
            /** @type {?} */
            var inputRef = this._control.elementRef;
            /** @type {?} */
            var styles = window.getComputedStyle(inputRef.nativeElement);
            ctx.font = utils.getFontShorthand(styles);
            /** @type {?} */
            var metrics = ctx.measureText(this._control.value);
            // add 1px (cursor width) to prevent jumping of the text on blur.
            /** @type {?} */
            var newWidth = metrics.width + parseInt(styles.paddingRight, 10) + parseInt(styles.paddingLeft, 10) + 1;
            // This should be injected via @Host to get an exact reference to NxNaturalLanguageFormComponent
            // Works as promised as long as there is not other tag around the word. Not expected but possible.
            /** @type {?} */
            var parent = this.elementRef.nativeElement.parentElement;
            /** @type {?} */
            var parentMeasurement = parent.getBoundingClientRect();
            // Limit to own given minimal width
            this.currentTextWidth = Math.max(parseInt(styles.minWidth, 10), newWidth);
            // Limit to container width
            this.currentTextWidth = Math.min(this.currentTextWidth, parentMeasurement.width);
            if (this._overlayRef.hasAttached()) {
                this._overlayState.positionStrategy.apply();
            }
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxWordComponent.prototype.repositionError = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            if (this._overlayRef.hasAttached()) {
                this._overlayState.positionStrategy.apply();
            }
        };
        // Fail if the required control is missing.
        // Fail if the required control is missing.
        /**
         * @protected
         * @return {?}
         */
        NxWordComponent.prototype._validateControlChild = 
        // Fail if the required control is missing.
        /**
         * @protected
         * @return {?}
         */
        function () {
            if (!this._control) {
                throw new Error('NxWordComponent requires an NxFormfieldControl compatible input.');
            }
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxWordComponent.prototype.getConnectedOverlayOrigin = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this.elementRef;
        };
        Object.defineProperty(NxWordComponent.prototype, "isFocused", {
            /** @docs-private */
            get: /**
             * \@docs-private
             * @return {?}
             */
            function () {
                return this._control.focused;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxWordComponent.prototype, "isFilled", {
            /** @docs-private */
            get: /**
             * \@docs-private
             * @return {?}
             */
            function () {
                return !this._control.empty;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxWordComponent.prototype, "hasDropdown", {
            /** @docs-private */
            get: /**
             * \@docs-private
             * @return {?}
             */
            function () {
                return Boolean(this._dropdown);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NxWordComponent.prototype.updateErrorPopoverState = /**
         * @return {?}
         */
        function () {
            if (this._hasErrors && this._errorChildren.length > 0) {
                this.showPopover();
            }
            else {
                this.hidePopover();
            }
        };
        /**
         * @return {?}
         */
        NxWordComponent.prototype.setupErrorPopover = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var positionStrategy = this._overlayPositionBuilder
                .flexibleConnectedTo(this.elementRef)
                .withLockedPosition(true)
                .withFlexibleDimensions(false)
                .withPush(true)
                .withPositions([{
                    originX: 'center',
                    originY: 'top',
                    overlayX: 'center',
                    overlayY: 'bottom'
                },
                {
                    originX: 'center',
                    originY: 'bottom',
                    overlayX: 'center',
                    overlayY: 'top'
                }])
                .withDefaultOffsetY(-8);
            this._overlayState = new overlay.OverlayConfig();
            this._overlayState.positionStrategy = positionStrategy;
            this._overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();
            this._overlayRef = this._overlay.create(this._overlayState);
            ((/** @type {?} */ (this._overlayState.positionStrategy))).positionChanges.subscribe((/**
             * @param {?} change
             * @return {?}
             */
            function (change) {
                /** @type {?} */
                var pair = change.connectionPair;
                _this.positionArrow(pair);
                // These position changes arrive too late,
                // We have to trigger the change detection manually
                // as it's detached from any render hierarchy
                // and only updated by the overlay when attached.
                if (_this._embeddedViewRef && !_this._embeddedViewRef.destroyed) {
                    _this._embeddedViewRef.detectChanges();
                }
            }));
        };
        /**
         * @private
         * @param {?} pair
         * @return {?}
         */
        NxWordComponent.prototype.positionArrow = /**
         * @private
         * @param {?} pair
         * @return {?}
         */
        function (pair) {
            /** @type {?} */
            var parentElementPositionX = this.elementRef.nativeElement.getBoundingClientRect().left;
            /** @type {?} */
            var parentElementWidth = this.elementRef.nativeElement.getBoundingClientRect().width / 2;
            /** @type {?} */
            var parentElementLeftOffset = this._overlayRef.overlayElement.parentElement.offsetLeft;
            /** @type {?} */
            var overlayElementLeftOffset = this._overlayRef.overlayElement.offsetLeft;
            // calculation for x position of the parent element. In this case, overlay left offset is the one thing to consider.
            /** @type {?} */
            var targetPosition = (parentElementPositionX + parentElementWidth) - (parentElementLeftOffset + overlayElementLeftOffset);
            if (pair.originY === 'top' && pair.overlayY === 'bottom') {
                this._popover.direction = 'top';
            }
            else {
                this._popover.direction = 'bottom';
            }
            this._popover.arrowStyle = { left: targetPosition + 'px' };
        };
        /**
         * @return {?}
         */
        NxWordComponent.prototype.showPopover = /**
         * @return {?}
         */
        function () {
            if (!this._overlayRef.hasAttached()) {
                /** @type {?} */
                var tooltipPortal = new portal.TemplatePortal(this._popover.templateRef, this._viewContainerRef);
                this._embeddedViewRef = this._overlayRef.attach(tooltipPortal);
            }
        };
        /**
         * @return {?}
         */
        NxWordComponent.prototype.hidePopover = /**
         * @return {?}
         */
        function () {
            this._overlayRef.detach();
        };
        NxWordComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-word',
                        template: "<div>\n  <!-- We only allow formfield controls here -->\n  <div *ngIf=\"!hasDropdown\" class=\"nx-word__inner-wrapper\">\n    <ng-content select=\"[nxInput]\"></ng-content>\n  </div>\n  <ng-content select=\"nx-dropdown\"></ng-content>\n</div>\n\n<nx-popover #popover>\n  <ng-content select=\"[nxError]\"></ng-content>\n</nx-popover>",
                        host: {
                            '[class.size-short]': 'size == "short"',
                            '[class.size-regular]': 'size == "regular"',
                            '[class.size-long]': 'size == "long"',
                            '[class.has-error]': '_hasErrors',
                            '[class.is-focused]': 'isFocused',
                            '[class.is-filled]': 'isFilled',
                            '[class.has-dropdown]': 'hasDropdown',
                        },
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: [":host{display:inline-block;position:relative;font-weight:400;text-align:center;-webkit-hyphens:none;-ms-hyphens:none;hyphens:none;width:100%;margin:0 4px}:host .nx-word__inner-wrapper{border-bottom:2px solid #d9d9d9}:host.size-short{min-width:80px}:host.size-regular{min-width:152px}:host.size-long{min-width:360px}@media (max-width:991px){:host.size-long{min-width:280px}}@media (max-width:703px){:host.size-long{min-width:248px}}:host ::ng-deep .c-input{display:inline-block;text-align:inherit;font-size:inherit;line-height:inherit;background:0 0;color:inherit;border:none;outline:0;margin:0;width:100%;max-width:100%;height:auto;box-shadow:none;padding:0 8px}:host ::ng-deep .c-input.is-focused{outline:0;box-shadow:none}:host ::ng-deep .c-input.is-filled,:host ::ng-deep .c-input.is-focused{color:#006192;color:var(--natural-language-form-active-color,#006192);font-weight:400}:host ::ng-deep .c-input.is-disabled{cursor:not-allowed}:host ::ng-deep .c-input::-ms-clear{display:none}:host ::ng-deep nx-dropdown{position:relative;border-bottom:2px solid #d9d9d9}:host ::ng-deep nx-dropdown .nx-dropdown__container{font-size:inherit;margin-bottom:-2px}:host ::ng-deep nx-dropdown.has-focus,:host ::ng-deep nx-dropdown.is-filled{color:#006192;color:var(--natural-language-form-active-color,#006192);border-color:#007ab3;border-color:var(--natural-language-form-active-border-color,#007ab3)}:host ::ng-deep nx-dropdown .nx-dropdown__icon{line-height:inherit}:host ::ng-deep .nx-word__input-wrapper{width:100%}:host(.is-filled) .nx-word__inner-wrapper,:host(.is-focused) .nx-word__inner-wrapper{border-color:#007ab3;border-color:var(--natural-language-form-active-border-color,#007ab3)}:host(.has-error) .nx-word__inner-wrapper{border-color:#dc3149;border-color:var(--natural-language-form-error-border-color,#dc3149)}:host.has-error ::ng-deep nx-dropdown{color:#dc3149;color:var(--natural-language-form-error-color,#dc3149);border-color:#dc3149;border-color:var(--natural-language-form-error-border-color,#dc3149)}:host.has-error ::ng-deep .c-input.has-error{color:#dc3149;color:var(--natural-language-form-error-color,#dc3149)}:host-context(.is-negative) ::ng-deep .nx-dropdown,:host-context(.is-negative) ::ng-deep nx-dropdown,:host-context(.is-negative) ::ng-deep nx-dropdown.is-filled{border-color:#fff;color:#fff}:host-context(.is-negative) ::ng-deep .c-input,:host-context(.is-negative) ::ng-deep .c-input.has-error{color:#fff}:host-context(.is-negative) .nx-word__inner-wrapper{border-color:#fff}.nx-word__inner-wrapper{height:52px;height:var(--natural-language-form-large-line-height,52px)}@media (max-width:991px){:host ::ng-deep nx-dropdown .nx-dropdown__container{font-size:26px}.nx-word__inner-wrapper{height:36px;height:var(--natural-language-form-small-line-height,36px)}}:host-context(.nx-natural-language-form--small) .nx-word__inner-wrapper{height:36px;height:var(--natural-language-form-small-line-height,36px)}@media screen and (-ms-high-contrast:active){.nx-word__inner-wrapper,::ng-deep nx-dropdown{border-bottom-color:buttonText}}"]
                    }] }
        ];
        /** @nocollapse */
        NxWordComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.ChangeDetectorRef },
            { type: core.Renderer2 },
            { type: overlay.Overlay },
            { type: core.ViewContainerRef },
            { type: overlay.OverlayPositionBuilder }
        ]; };
        NxWordComponent.propDecorators = {
            _control: [{ type: core.ContentChild, args: [formfield.NxFormfieldControl, { static: false },] }],
            _errorChildren: [{ type: core.ContentChildren, args: [formfield.NxFormfieldErrorDirective,] }],
            _popover: [{ type: core.ViewChild, args: ['popover', { static: true },] }],
            _dropdown: [{ type: core.ContentChild, args: [dropdown.NxDropdownComponent, { static: false },] }],
            currentTextWidth: [{ type: core.HostBinding, args: ['style.width.px',] }],
            size: [{ type: core.Input, args: ['nxSize',] }],
            label: [{ type: core.Input, args: ['nxLabel',] }]
        };
        return NxWordComponent;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NxWordComponent.prototype.subscription;
        /**
         * @type {?}
         * @private
         */
        NxWordComponent.prototype.subscriptionValues;
        /**
         * @type {?}
         * @private
         */
        NxWordComponent.prototype.measureCanvas;
        /**
         * \@docs-private
         * @type {?}
         */
        NxWordComponent.prototype.inputChanges;
        /** @type {?} */
        NxWordComponent.prototype._hasErrors;
        /**
         * @type {?}
         * @private
         */
        NxWordComponent.prototype._overlayRef;
        /**
         * @type {?}
         * @private
         */
        NxWordComponent.prototype._embeddedViewRef;
        /**
         * @type {?}
         * @private
         */
        NxWordComponent.prototype._overlayState;
        /** @type {?} */
        NxWordComponent.prototype._control;
        /** @type {?} */
        NxWordComponent.prototype._errorChildren;
        /** @type {?} */
        NxWordComponent.prototype._popover;
        /** @type {?} */
        NxWordComponent.prototype._dropdown;
        /**
         * \@docs-private
         * @type {?}
         */
        NxWordComponent.prototype.currentTextWidth;
        /**
         * Provide a hint for a minimal width. The actual size will be determined for inputs for each change.
         * @type {?}
         */
        NxWordComponent.prototype.size;
        /**
         * A word doesn't have a set place to show labels.
         * In order to be accessible, you have to provide a label with this property.
         * It will be attached to the given input through `aria-label`.
         * @type {?}
         */
        NxWordComponent.prototype.label;
        /**
         * \@docs-private
         * @type {?}
         */
        NxWordComponent.prototype.elementRef;
        /**
         * @type {?}
         * @private
         */
        NxWordComponent.prototype._changeDetectorRef;
        /**
         * @type {?}
         * @private
         */
        NxWordComponent.prototype._renderer;
        /**
         * @type {?}
         * @private
         */
        NxWordComponent.prototype._overlay;
        /**
         * @type {?}
         * @private
         */
        NxWordComponent.prototype._viewContainerRef;
        /**
         * @type {?}
         * @private
         */
        NxWordComponent.prototype._overlayPositionBuilder;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: natural-language-form.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_SIZE = 'large';
    var NxNaturalLanguageFormComponent = /** @class */ (function () {
        function NxNaturalLanguageFormComponent(_changeDetectorRef) {
            this._changeDetectorRef = _changeDetectorRef;
            this._negative = false;
            /**
             * \@docs-private
             */
            this.resizeEvent$ = new rxjs.Subject();
            /**
             * \@docs-private
             */
            this.updatePopoversSubscription = rxjs.Subscription.EMPTY;
            /**
             * \@docs-private
             */
            this._size = DEFAULT_SIZE;
        }
        Object.defineProperty(NxNaturalLanguageFormComponent.prototype, "negative", {
            get: /**
             * @return {?}
             */
            function () {
                return this._negative;
            },
            /** Whether the negative set of stylings should be used. */
            set: /**
             * Whether the negative set of stylings should be used.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._negative = coercion.coerceBooleanProperty(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxNaturalLanguageFormComponent.prototype, "size", {
            get: /**
             * @return {?}
             */
            function () {
                return this._size;
            },
            /**
             * Sets the size of the NLF. Default value: large
             */
            set: /**
             * Sets the size of the NLF. Default value: large
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._size = value;
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        NxNaturalLanguageFormComponent.prototype.onResize = /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.resizeEvent$.next();
        };
        /**
         * @return {?}
         */
        NxNaturalLanguageFormComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            // Collect all words and listen for changes so we can update any open error popover
            // which would otherwise get wrongly positioned.
            /** @type {?} */
            var subjects = this._words.map((/**
             * @param {?} word
             * @return {?}
             */
            function (word) { return word.inputChanges; }));
            /** @type {?} */
            var source = rxjs.merge.apply(void 0, __spread(subjects));
            this.updatePopoversSubscription = source.subscribe((/**
             * @return {?}
             */
            function () {
                _this.updatePositionPopovers();
            }));
            this.resizeObservable = this.resizeEvent$.pipe(operators.throttleTime(500), operators.delay(100));
            this.resizeObservable.subscribe((/**
             * @return {?}
             */
            function () { return _this.resizeWords(); }));
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxNaturalLanguageFormComponent.prototype.resizeWords = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            this._words.forEach((/**
             * @param {?} word
             * @return {?}
             */
            function (word) {
                word.updateCurrentTextWidth();
            }));
        };
        /**
         * @return {?}
         */
        NxNaturalLanguageFormComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.updatePopoversSubscription.unsubscribe();
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxNaturalLanguageFormComponent.prototype.updatePositionPopovers = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            if (this._words) {
                this._words.forEach((/**
                 * @param {?} word
                 * @return {?}
                 */
                function (word) {
                    word.repositionError();
                }));
            }
        };
        NxNaturalLanguageFormComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-natural-language-form',
                        template: "<div class=\"nx-natural-language-form__wrapper\">\n    <ng-content></ng-content>\n</div>",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        host: {
                            '[class.is-negative]': 'negative',
                            '[class.nx-natural-language-form--small]': 'size === "small"',
                            '[class.nx-natural-language-form--large]': 'size === "large"',
                        },
                        styles: [":host{display:block;font-size:40px;font-size:var(--natural-language-form-large-font-size,40px);line-height:52px;line-height:var(--natural-language-form-large-line-height,52px);font-weight:300;font-weight:var(--natural-language-form-large-font-weight,300);letter-spacing:.3px;letter-spacing:var(--natural-language-form-large-letter-spacing,.3px);color:#414141;color:var(--natural-language-form-text-color,#414141);padding-top:72px;padding-bottom:80px}:host ::ng-deep .c-input{font-size:inherit;line-height:inherit}:host ::ng-deep nx-word+nx-word{margin-left:2px}:host.is-negative{color:#fff}@media (max-width:991px){:host{font-size:26px;font-size:var(--natural-language-form-small-font-size,26px);line-height:36px;line-height:var(--natural-language-form-small-line-height,36px);font-weight:300;font-weight:var(--natural-language-form-small-font-weight,300);letter-spacing:.3px;letter-spacing:var(--natural-language-form-small-letter-spacing,.3px)}}.nx-natural-language-form__wrapper{display:flex;flex-wrap:wrap}.nx-natural-language-form__wrapper>::ng-deep *{margin-bottom:8px}:host(.nx-natural-language-form--small){font-size:26px;font-size:var(--natural-language-form-small-font-size,26px);line-height:36px;line-height:var(--natural-language-form-small-line-height,36px);font-weight:300;font-weight:var(--natural-language-form-small-font-weight,300);letter-spacing:.3px;letter-spacing:var(--natural-language-form-small-letter-spacing,.3px)}:host(.nx-natural-language-form--small) ::ng-deep .c-input{font-size:inherit;line-height:inherit}"]
                    }] }
        ];
        /** @nocollapse */
        NxNaturalLanguageFormComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        NxNaturalLanguageFormComponent.propDecorators = {
            _words: [{ type: core.ContentChildren, args: [NxWordComponent,] }],
            negative: [{ type: core.Input, args: ['nxNegative',] }],
            size: [{ type: core.Input }],
            onResize: [{ type: core.HostListener, args: ['window:orientationchange', ['$event'],] }, { type: core.HostListener, args: ['window:resize', ['$event'],] }]
        };
        return NxNaturalLanguageFormComponent;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NxNaturalLanguageFormComponent.prototype._negative;
        /**
         * \@docs-private
         * @type {?}
         */
        NxNaturalLanguageFormComponent.prototype.resizeEvent$;
        /**
         * \@docs-private
         * @type {?}
         */
        NxNaturalLanguageFormComponent.prototype.resizeObservable;
        /** @type {?} */
        NxNaturalLanguageFormComponent.prototype._words;
        /**
         * \@docs-private
         * @type {?}
         */
        NxNaturalLanguageFormComponent.prototype.updatePopoversSubscription;
        /**
         * \@docs-private
         * @type {?}
         * @private
         */
        NxNaturalLanguageFormComponent.prototype._size;
        /**
         * @type {?}
         * @private
         */
        NxNaturalLanguageFormComponent.prototype._changeDetectorRef;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: natural-language-form.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxNaturalLanguageFormModule = /** @class */ (function () {
        function NxNaturalLanguageFormModule() {
        }
        NxNaturalLanguageFormModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            input.NxInputModule,
                            popover.NxPopoverModule
                        ],
                        declarations: [
                            NxNaturalLanguageFormComponent,
                            NxWordComponent
                        ],
                        exports: [
                            NxNaturalLanguageFormComponent,
                            NxWordComponent
                        ]
                    },] }
        ];
        return NxNaturalLanguageFormModule;
    }());

    exports.NxNaturalLanguageFormComponent = NxNaturalLanguageFormComponent;
    exports.NxNaturalLanguageFormModule = NxNaturalLanguageFormModule;
    exports.NxWordComponent = NxWordComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=allianz-ngx-ndbx-natural-language-form.umd.js.map
