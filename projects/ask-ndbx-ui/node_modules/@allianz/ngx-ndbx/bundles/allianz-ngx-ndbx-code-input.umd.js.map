{"version":3,"file":"allianz-ngx-ndbx-code-input.umd.js","sources":["ng://@allianz/ngx-ndbx/code-input/code-input-intl.ts","ng://@allianz/ngx-ndbx/code-input/code-input.component.ts","ng://@allianz/ngx-ndbx/code-input/code-input.module.ts"],"sourcesContent":["import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NxCodeInputIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that should replace the 'Enter key' of the aria-label. */\n  inputFieldAriaLabel: string = 'Enter Key';\n\n  /** Label that should replace the 'of' of the aria-label. */\n  ofLabel?: string = 'of';\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  ChangeDetectorRef,\n  ElementRef,\n  Self,\n  Optional,\n  DoCheck\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl, NgForm, FormGroupDirective, FormControl } from '@angular/forms';\nimport { NxCodeInputIntl } from './code-input-intl';\nimport { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';\nimport { BACKSPACE, LEFT_ARROW, RIGHT_ARROW, SPACE, DOWN_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nconst DEFAULT_INPUT_LENGTH = 6;\nconst TAG_NAME_INPUT = 'INPUT';\nconst AUTO_UPPERCASE = 'upper';\nconst AUTO_LOWERCASE = 'lower';\nconst INPUT_FIELD_GAP = 'nx-code-input--field-with-gap';\nexport type NxConversionTypes = 'lower' | 'upper';\n\n@Component({\n  selector: 'nx-code-input',\n  templateUrl: 'code-input.component.html',\n  styleUrls: [\n    'code-input.scss'\n  ],\n  host: {\n    '[class.nx-code-input]': 'true',\n    '[class.has-error]': 'errorState',\n    '[class.is-negative]': 'negative',\n    '[class.is-disabled]': 'disabled',\n    '[attr.tabindex]': '-1'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxCodeInputComponent implements ControlValueAccessor, DoCheck {\n\n  /** Whether the current input of the component has an error. */\n  errorState: boolean = false;\n\n  /** The length of the code input. Default: 6. */\n  @Input('length')\n  set codeLength(value: number) {\n    this._codeLength = value;\n    this.setInputLength();\n    this._changeDetectorRef.markForCheck();\n  }\n  get codeLength() {\n    return this._codeLength;\n  }\n  private _codeLength: number = DEFAULT_INPUT_LENGTH;\n\n  /** The type of HTML input */\n  @Input()\n  set type(value: string) {\n    this._type = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get type() {\n    return this._type;\n  }\n  private _type: string = 'text';\n  private _isUpDown: boolean = false;\n\n  /** Sets the tabindex of the contained input elements. */\n  @Input()\n  set tabindex(value: number) {\n    this._tabindex = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get tabindex(): number {\n    return this._tabindex;\n  }\n  private _tabindex: number = 0;\n\n  /** Whether the form should auto capitalize or lowercase (optional). */\n  @Input('nxConvertTo')\n  set convertTo(value: NxConversionTypes) {\n    this._convertTo = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get convertTo() {\n    return this._convertTo;\n  }\n  private _convertTo?: NxConversionTypes;\n\n  /** The user input in array form */\n  _keyCode: string[] = new Array(DEFAULT_INPUT_LENGTH);\n  private _focused: boolean = false;\n\n  /** Whether the code input uses the negative set of styling. */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._negative !== newValue) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get negative() {\n    return this._negative;\n  }\n\n  private _negative: boolean = false;\n\n  /** Whether the code input is disabled. */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get disabled() {\n    return this._disabled;\n  }\n\n  private _disabled: boolean = false;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _el: ElementRef,\n    @Self() @Optional() public _control: NgControl,\n    public _intl: NxCodeInputIntl,\n    private _errorStateMatcher: ErrorStateMatcher,\n    @Optional() private _parentForm: NgForm,\n    @Optional() private _parentFormGroup: FormGroupDirective) {\n    if (this._control) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this._control.valueAccessor = this;\n    }\n  }\n\n  ngDoCheck() {\n    if (this._control) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  /** Sets the length of the input fields. */\n  setInputLength(): void {\n    if (this.codeLength) {\n      this._keyCode = new Array(this.codeLength);\n    } else {\n      this._keyCode = new Array(DEFAULT_INPUT_LENGTH);\n    }\n  }\n\n  /** Converts to upper or lowercase when enabled. */\n  _convertLetterSize(value: any): string {\n    if (value === 'Ã') {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      if (this.convertTo === AUTO_UPPERCASE) {\n        return value.toUpperCase();\n      } else if (this.convertTo === AUTO_LOWERCASE) {\n        return value.toLowerCase();\n      }\n\n      return value;\n    }\n  }\n\n  /** Reacts to keydown event. */\n  _keydownAction(event): void | false {\n    const previousInputField: HTMLInputElement = event.target.previousElementSibling;\n    const nextInputField: HTMLInputElement = event.target.nextElementSibling;\n\n    switch (event.keyCode) {\n      case SPACE:\n        return false;\n\n      case BACKSPACE:\n        if (event.target.value === '') {\n          if (previousInputField && previousInputField.tagName === TAG_NAME_INPUT) {\n            this.selectInput(previousInputField);\n          }\n        }\n        break;\n\n      case LEFT_ARROW:\n        if (previousInputField && previousInputField.tagName === TAG_NAME_INPUT) {\n          event.preventDefault();\n          this.selectInput(previousInputField);\n        }\n        break;\n\n      case RIGHT_ARROW:\n        if (nextInputField && nextInputField.tagName === TAG_NAME_INPUT) {\n          this.selectInput(nextInputField);\n        }\n        event.preventDefault();\n        break;\n\n      case DOWN_ARROW:\n        this._isUpDown = true;\n        if (this._type === 'number' && (event.target.value === '' || event.target.value === '0')) {\n          event.preventDefault();\n        }\n        break;\n\n      case UP_ARROW:\n        this._isUpDown = true;\n        if (this._type === 'number' && event.target.value === '9') {\n          event.preventDefault();\n        }\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  /** Selects the value on click of an input field. */\n  _selectText(event): void {\n    this.selectInput(event.target);\n  }\n\n  /** Automatically focuses and selects the next input on key input. */\n  _selectNextInput(event): void {\n    event.target.value = this._convertLetterSize(event.target.value.slice(0, 1));\n    const currentIndex = this._getFocusedInputIndex(event);\n    // save in model with uppercase if needed\n    this._keyCode[currentIndex] = event.target.value;\n    this.propagateChange(this._keyCode.join(''));\n\n    // don't jump to next input if the user uses UP/DOWn arrow (native behaviour)\n    const focusNextInput = !(this._isUpDown && this.type === 'number');\n\n    if (event.target.value && focusNextInput) {\n      const nextInputField = event.target.nextSibling;\n\n      if (nextInputField !== null && nextInputField.tagName === TAG_NAME_INPUT) {\n        nextInputField.focus();\n        if (nextInputField.value !== '') {\n          this.selectInput(nextInputField);\n        }\n      }\n    }\n\n    this._isUpDown = false;\n  }\n\n  /** Paste event to distribute content in input fields. */\n  _pasteClipboard(event): void {\n    let copiedText = (event.clipboardData || (<any> window).clipboardData).getData('text');\n    let copiedTextIndex = 0;\n    const inputIndex = this._getFocusedInputIndex(event);\n\n    copiedText = this.type === 'number' ? this._formatNumberInput(copiedText) : copiedText;\n\n    for (let i = inputIndex; i < this.codeLength; i++) {\n      this._keyCode[i] = this._convertLetterSize(copiedText[copiedTextIndex]);\n      copiedTextIndex++;\n    }\n\n    this.propagateChange(this._keyCode.join(''));\n\n    if (inputIndex + copiedText.length < this.codeLength) {\n      this._el.nativeElement.children.item(inputIndex + copiedText.length).focus();\n    } else {\n      this._el.nativeElement.children.item(this.codeLength - 1).focus();\n    }\n\n    event.preventDefault();\n  }\n\n  /** Returns the index of the code input, which is currently focused. */\n  private _getFocusedInputIndex(event) {\n    let inputIndex;\n    for (let i = 0; i < this._el.nativeElement.children.length; i++) {\n      if (event.srcElement === this._el.nativeElement.children.item(i)) {\n        inputIndex = i;\n      }\n    }\n    return inputIndex;\n  }\n\n  /** Removes all characters from the input except for numbers [0-9]. */\n  private _formatNumberInput(copiedText: string) {\n    let formattedInput = '';\n    for (let i = 0; i < copiedText.length; i++) {\n      if (copiedText[i].match(/[0-9]{1}$/)) {\n        formattedInput += copiedText[i];\n      }\n    }\n\n    return formattedInput;\n  }\n\n  /** Triggers when an input field is blurred. */\n  _onBlur(): void {\n    this._focused = false;\n    setTimeout(() => {\n      if (!this._focused) {\n        this.propagateTouch(this._keyCode.join(''));\n      }\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Sets _focused state and makes valid. */\n  _setFocusState(): void {\n    this._focused = true;\n  }\n\n  /**\n   * Disables the code input. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Sets initial value, used by ControlValueAccessor. */\n  writeValue(value: string): void {\n    if (value) {\n      const valueAsArray = value.split('').slice(0, this.codeLength);\n\n      for (let i = 0; i < this.codeLength; i++) {\n        this._keyCode[i] = valueAsArray[i];\n      }\n    } else {\n      this.setInputLength();\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _trackByKeyCode(index: number, item: string): number {\n    return index;\n  }\n\n  /** Adds a gap to input fields when appropriate. */\n  _inputGap(index): string {\n    switch (this.codeLength) {\n      case 4:\n      case 6:\n      case 8:\n        if (index === this.codeLength / 2) {\n          return INPUT_FIELD_GAP;\n        }\n\n        break;\n      default:\n        return;\n    }\n  }\n\n  /** @docs-private */\n  propagateChange = (_: any) => {\n  }\n\n  /** @docs-private */\n  propagateTouch = (_: any) => {\n  }\n\n  registerOnChange(fn: any) {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.propagateTouch = fn;\n  }\n\n  /** @docs-private */\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const control = this._control ? this._control.control as FormControl : null;\n    const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n    }\n  }\n\n  getAriaLabel(keyIndex: number) {\n    return `${this._intl.inputFieldAriaLabel} ${keyIndex + 1} ${this._intl.ofLabel} ${this._keyCode.length}`;\n  }\n\n /** @docs-private\n  * Workaround preventing the selection error because the `setSelectionRange` is not supported on input['type=number']\n  * */\n selectInput(input: HTMLInputElement) {\n   input.focus();\n   try {\n     input.setSelectionRange(0, input.value.length);\n   } catch (err) {\n     if (err instanceof DOMException && err.name === 'InvalidStateError') {\n       // setSelectionRange does not apply\n     } else {\n       throw err;\n     }\n   }\n }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NxCodeInputIntl } from './code-input-intl';\n\nimport {NxCodeInputComponent} from './code-input.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  declarations: [\n    NxCodeInputComponent,\n  ],\n  exports: [\n    NxCodeInputComponent,\n  ],\n  providers: [NxCodeInputIntl],\n})\nexport class NxCodeInputModule {\n}\n"],"names":["Subject","Injectable","coerceBooleanProperty","SPACE","BACKSPACE","LEFT_ARROW","RIGHT_ARROW","DOWN_ARROW","UP_ARROW","Component","ChangeDetectionStrategy","ChangeDetectorRef","ElementRef","NgControl","Self","Optional","ErrorStateMatcher","NgForm","FormGroupDirective","Input","NgModule","CommonModule","FormsModule","ReactiveFormsModule"],"mappings":"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"}