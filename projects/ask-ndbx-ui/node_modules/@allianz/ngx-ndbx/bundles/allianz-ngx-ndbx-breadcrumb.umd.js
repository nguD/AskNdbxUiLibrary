(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operators'), require('rxjs'), require('@allianz/ngx-ndbx/icon')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/breadcrumb', ['exports', '@angular/core', 'rxjs/operators', 'rxjs', '@allianz/ngx-ndbx/icon'], factory) :
    (global = global || self, factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx'].breadcrumb = {}), global.ng.core, global.rxjs.operators, global.rxjs, global.allianz['ngx-ndbx'].icon));
}(this, (function (exports, core, operators, rxjs, icon) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: breadcrumb-item.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxBreadcrumbItemComponent = /** @class */ (function () {
        function NxBreadcrumbItemComponent(_renderer, _elemRef) {
            this._renderer = _renderer;
            this._elemRef = _elemRef;
        }
        /**@docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxBreadcrumbItemComponent.prototype.setAsLast = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            this._renderer.setAttribute(this._elemRef.nativeElement, 'aria-current', 'page');
        };
        /**@docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxBreadcrumbItemComponent.prototype.resetAriaLabel = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            this._renderer.removeAttribute(this._elemRef.nativeElement, 'aria-current');
        };
        // prevent location change when the user clicks on the chevron arrow
        // prevent location change when the user clicks on the chevron arrow
        /**
         * @param {?} event
         * @return {?}
         */
        NxBreadcrumbItemComponent.prototype._onIconClick = 
        // prevent location change when the user clicks on the chevron arrow
        /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            event.stopPropagation();
            event.preventDefault();
        };
        NxBreadcrumbItemComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'a[nxBreadcrumbItem]',
                        template: "\n<span class=\"nx-breadcrumb-item__text\"><ng-content></ng-content></span>\n<nx-icon\n    (click)=\"_onIconClick($event)\"\n    class=\"nx-breadcrumb-item__chevron\"\n    aria-hidden=\"true\"\n    name=\"chevron-right\"\n    size=\"xs\">\n</nx-icon>",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        host: {
                            'class': 'nx-breadcrumb-item',
                        },
                        styles: [":host{text-decoration:none;display:flex;align-items:center;cursor:auto;color:#414141;color:var(--breadcrumb-color,#414141);font-size:16px;font-size:var(--breadcrumb-font-size,16px);line-height:24px;line-height:var(--breadcrumb-line-height,24px);font-weight:400;font-weight:var(--breadcrumb-font-weight,400);letter-spacing:0;letter-spacing:var(--breadcrumb-letter-spacing,0)}.nx-breadcrumb-item__chevron{margin-left:4px}.nx-breadcrumb-item__text{cursor:pointer}:host-context([data-whatinput=keyboard]):focus .nx-breadcrumb-item__text{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]):focus .nx-breadcrumb-item__text{box-shadow:0 0 0 2px background,0 0 0 6px windowText}}"]
                    }] }
        ];
        /** @nocollapse */
        NxBreadcrumbItemComponent.ctorParameters = function () { return [
            { type: core.Renderer2 },
            { type: core.ElementRef }
        ]; };
        return NxBreadcrumbItemComponent;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NxBreadcrumbItemComponent.prototype._renderer;
        /**
         * @type {?}
         * @private
         */
        NxBreadcrumbItemComponent.prototype._elemRef;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: breadcrumb.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxBreadcrumbComponent = /** @class */ (function () {
        function NxBreadcrumbComponent(_cdr) {
            this._cdr = _cdr;
            this._destroyed = new rxjs.Subject();
            this._negative = false;
        }
        Object.defineProperty(NxBreadcrumbComponent.prototype, "negative", {
            get: /**
             * @return {?}
             */
            function () {
                return this._negative;
            },
            /** Whether the component uses the negative styling. */
            set: /**
             * Whether the component uses the negative styling.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._negative = value;
                this._cdr.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NxBreadcrumbComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.breadcrumbItems.length === 0) {
                console.warn('A breadcrumb needs NxBreadcrumbItemComponent children wrapped in <li>!');
            }
            this.breadcrumbItems.changes
                .pipe(operators.startWith(this.breadcrumbItems), operators.filter((/**
             * @param {?} items
             * @return {?}
             */
            function (items) { return items.length !== 0; })), operators.takeUntil(this._destroyed))
                .subscribe((/**
             * @param {?} items
             * @return {?}
             */
            function (items) {
                _this.breadcrumbItems.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.resetAriaLabel(); }));
                _this.breadcrumbItems.last.setAsLast();
            }));
        };
        /**
         * @return {?}
         */
        NxBreadcrumbComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this._destroyed.next();
            this._destroyed.complete();
        };
        NxBreadcrumbComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'ol[nxBreadcrumb]',
                        template: "<ng-content></ng-content>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        host: {
                            '[class.is-negative]': 'negative'
                        },
                        styles: [":host{display:flex;list-style:none;height:24px;padding:0}::ng-deep li:last-child ::ng-deep .nx-breadcrumb-item{font-weight:600;cursor:auto}::ng-deep li:last-child ::ng-deep .nx-breadcrumb-item__chevron{display:none}::ng-deep li+li ::ng-deep .nx-breadcrumb-item{margin-left:4px}:host(.is-negative) ::ng-deep .nx-breadcrumb-item{color:#fff}"]
                    }] }
        ];
        /** @nocollapse */
        NxBreadcrumbComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        NxBreadcrumbComponent.propDecorators = {
            negative: [{ type: core.Input }],
            breadcrumbItems: [{ type: core.ContentChildren, args: [NxBreadcrumbItemComponent, { descendants: true },] }]
        };
        return NxBreadcrumbComponent;
    }());
    if (false) {
        /** @type {?} */
        NxBreadcrumbComponent.prototype._destroyed;
        /**
         * @type {?}
         * @private
         */
        NxBreadcrumbComponent.prototype._negative;
        /**
         * \@docs-private
         * @type {?}
         */
        NxBreadcrumbComponent.prototype.breadcrumbItems;
        /**
         * @type {?}
         * @private
         */
        NxBreadcrumbComponent.prototype._cdr;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: breadcrumb.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxBreadcrumbModule = /** @class */ (function () {
        function NxBreadcrumbModule() {
        }
        NxBreadcrumbModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NxBreadcrumbItemComponent, NxBreadcrumbComponent],
                        exports: [NxBreadcrumbItemComponent, NxBreadcrumbComponent],
                        imports: [icon.NxIconModule]
                    },] }
        ];
        return NxBreadcrumbModule;
    }());

    exports.NxBreadcrumbComponent = NxBreadcrumbComponent;
    exports.NxBreadcrumbItemComponent = NxBreadcrumbItemComponent;
    exports.NxBreadcrumbModule = NxBreadcrumbModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=allianz-ngx-ndbx-breadcrumb.umd.js.map
