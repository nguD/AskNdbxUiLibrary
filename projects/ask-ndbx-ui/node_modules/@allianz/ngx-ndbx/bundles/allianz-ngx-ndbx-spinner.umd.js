(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/coercion'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/spinner', ['exports', '@angular/core', '@angular/cdk/coercion', '@angular/common'], factory) :
    (global = global || self, factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx'].spinner = {}), global.ng.core, global.ng.cdk.coercion, global.ng.common));
}(this, (function (exports, core, coercion, common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: spinner.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_SIZE = 'small';
    var NxSpinnerComponent = /** @class */ (function () {
        function NxSpinnerComponent(_changeDetectorRef) {
            this._changeDetectorRef = _changeDetectorRef;
            this._size = DEFAULT_SIZE;
            this._negative = false;
        }
        Object.defineProperty(NxSpinnerComponent.prototype, "size", {
            get: /**
             * @return {?}
             */
            function () {
                return this._size;
            },
            /** Sets the size of the spinner. Default is 'small'. */
            set: /**
             * Sets the size of the spinner. Default is 'small'.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value !== this._size) {
                    this._size = value;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSpinnerComponent.prototype, "negative", {
            get: /**
             * @return {?}
             */
            function () {
                return this._negative;
            },
            /** Whether the spinner should use a negative styling. */
            set: /**
             * Whether the spinner should use a negative styling.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value !== this._negative) {
                    this._negative = coercion.coerceBooleanProperty(value);
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        NxSpinnerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-spinner',
                        template: "<div class=\"nx-spinner__spin-block\">\n  <div class=\"nx-spinner__edge-left\"></div>\n  <div class=\"nx-spinner__edge-right\"></div>\n</div>",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        host: {
                            '[class.nx-spinner--small]': 'size === "small"',
                            '[class.nx-spinner--medium]': 'size === "medium"',
                            '[class.nx-spinner--large]': 'size === "large"',
                            '[class.nx-spinner--negative]': 'negative',
                            '[attr.role]': '"status"',
                            '[attr.aria-busy]': '"true"',
                            '[attr.aria-live]': '"assertive"',
                        },
                        styles: ["@-webkit-keyframes spin{0%{transform:rotate(45deg)}100%{transform:rotate(405deg)}}@keyframes spin{0%{transform:rotate(45deg)}100%{transform:rotate(405deg)}}:host{position:relative;display:block}:host(.nx-spinner--small){width:16px;height:16px}:host(.nx-spinner--medium){width:24px;height:24px}:host(.nx-spinner--large){width:40px;height:40px}.nx-spinner__spin-block{width:100%;height:100%;transform:rotate(45deg);border-style:solid;border-radius:50%;border-color:#007ab3 #ececec #ececec;border-color:var(--spinner-background-color,#ececec);border-top-color:var(--spinner-indicator-color,#007ab3);-webkit-animation-name:spin;animation-name:spin;-webkit-animation-duration:.8s;animation-duration:.8s;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-timing-function:linear;animation-timing-function:linear}:host(.nx-spinner--small) .nx-spinner__spin-block{border-width:calc(1.6px)}:host(.nx-spinner--medium) .nx-spinner__spin-block{border-width:calc(2.4px)}:host(.nx-spinner--large) .nx-spinner__spin-block{border-width:calc(4px)}.nx-spinner__edge-left,.nx-spinner__edge-right{width:12%;height:12%;border-radius:50%;background-color:#007ab3;background-color:var(--spinner-indicator-color,#007ab3);position:absolute;top:4%}.nx-spinner__edge-left{left:4%}.nx-spinner__edge-right{right:4%}:host(.nx-spinner--negative) .nx-spinner__spin-block{border-color:#fff rgba(250,247,239,.35) rgba(250,247,239,.35)}:host(.nx-spinner--negative) .nx-spinner__edge-left,:host(.nx-spinner--negative) .nx-spinner__edge-right{background-color:#fff}@media screen and (-ms-high-contrast:active){.nx-spinner__spin-block{border-color:window highlight highlight}}"]
                    }] }
        ];
        /** @nocollapse */
        NxSpinnerComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        NxSpinnerComponent.propDecorators = {
            size: [{ type: core.Input, args: ['nxSize',] }],
            negative: [{ type: core.Input }]
        };
        return NxSpinnerComponent;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NxSpinnerComponent.prototype._size;
        /**
         * @type {?}
         * @private
         */
        NxSpinnerComponent.prototype._negative;
        /**
         * @type {?}
         * @private
         */
        NxSpinnerComponent.prototype._changeDetectorRef;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: spinner.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxSpinnerModule = /** @class */ (function () {
        function NxSpinnerModule() {
        }
        NxSpinnerModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            NxSpinnerComponent
                        ],
                        imports: [
                            common.CommonModule
                        ],
                        exports: [
                            NxSpinnerComponent
                        ],
                        bootstrap: [],
                        providers: []
                    },] }
        ];
        return NxSpinnerModule;
    }());

    exports.NxSpinnerComponent = NxSpinnerComponent;
    exports.NxSpinnerModule = NxSpinnerModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=allianz-ngx-ndbx-spinner.umd.js.map
