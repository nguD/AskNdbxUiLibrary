{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@allianz/ngx-ndbx/datefield/adapter/native-date-formats.ts","ng://@allianz/ngx-ndbx/datefield/adapter/date-adapter.ts","ng://@allianz/ngx-ndbx/datefield/adapter/date-token.ts","ng://@allianz/ngx-ndbx/datefield/adapter/native-date-adapter.ts","ng://@allianz/ngx-ndbx/datefield/adapter/date-formats.ts","ng://@allianz/ngx-ndbx/datefield/adapter/index.ts","ng://@allianz/ngx-ndbx/datefield/datefield-errors.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/datepicker-intl.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/datepicker-errors.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/calendar-body.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/month-view.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/multi-year-view.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/year-view.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/calendar.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/datepicker.component.ts","ng://@allianz/ngx-ndbx/datefield/date-validators.ts","ng://@allianz/ngx-ndbx/datefield/datefield.directive.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/datepicker-toggle.ts","ng://@allianz/ngx-ndbx/datefield/datefield.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","NX_NATIVE_DATE_FORMATS","parse","dateInput","display","year","month","day","monthYearLabel","dateA11yLabel","monthYearA11yLabel","NxDateAdapter","locale","_localeChanges","Subject","defineProperty","deserialize","value","isDateInstance","isValid","invalid","sameDate","first","second","firstValid","secondValid","compareDate","getYear","getMonth","getDate","setLocale","next","getLocale","clampDate","date","min","max","NX_DATE_LOCALE","InjectionToken","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","long","short","narrow","DEFAULT_DATE_NAMES","range","String","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","valueFunction","valuesArray","NxNativeDateAdapter","_super","matDateLocale","platform","_this","useUtcForDisplay","TRIDENT","_clampDate","EDGE","__","constructor","create","tslib_1.__extends","getFullYear","getDayOfWeek","getDay","getMonthNames","style","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","getDateNames","dtf_2","getDayOfWeekNames","dtf_3","weekday","getYearName","dtf","getFirstDayOfWeek","getNumDaysInMonth","_createDateWithOverflow","clone","createDate","Error","result","today","format","displayFormat","setFullYear","Math","toDateString","addCalendarYears","years","addCalendarMonths","months","newDate","addCalendarDays","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","test","obj","isNaN","getTime","NaN","slice","str","replace","UTC","getHours","getMinutes","getSeconds","getMilliseconds","Injectable","Optional","type","Inject","args","Platform","NX_DATE_FORMATS","NX_DATE_LOCALE_PROVIDER","provide","useExisting","LOCALE_ID","NativeDateModule","NgModule","imports","PlatformModule","providers","useClass","NxNativeDateModule","useValue","Éµ0$1","createMissingDateImplError","provider","NxDatepickerIntl","changes","calendarHeader","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","displayValue","ariaLabel","enabled","NxCalendarBodyComponent","_elementRef","_ngZone","numCols","allowDisabledSelection","activeCell","previousItems","followingItems","selectedValueChange","EventEmitter","_cellClicked","cell","emit","rows","_isActiveCell","rowIndex","colIndex","cellNumber","_firstRowOffset","_focusActiveCell","runOutsideAngular","onStable","asObservable","pipe","take","subscribe","nativeElement","querySelector","focus","Component","selector","template","host","class","role","attr.aria-readonly","exportAs","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","NgZone","Input","Output","NxMonthViewComponent","_changeDetectorRef","_dateFormats","_dateAdapter","_dir","selectedChange","_userSelection","activeDateChange","_numCols","firstDayOfWeek","narrowWeekdays","weekdays","map","_weekdays","concat","_activeDate","oldActiveDate","validDate","_getValidDateOrNull","minDate","maxDate","_hasSameMonthAndYear","_init","_selected","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","ngAfterContentInit","_dateSelected","selectedYear","activeDate","selectedMonth","selectedDate","_handleCalendarBodyKeydown","event","isRtl","_isRtl","keyCode","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","HOME","END","PAGE_UP","altKey","PAGE_DOWN","ENTER","dateFilter","preventDefault","selected","_todayDate","_monthLabel","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","_createWeekCells","markForCheck","_nxCalendarBody","daysInMonth","dateNames","_weeks","push","_shouldEnableDate","NxCalendarCell","d1","d2","_getLastDaysOfPreviousMonth","firstDayOfMonth","firstDayOfPreviousItems","_getRowOfDays","_getFirstDaysOfFollowingMonth","followingDays","firstDayOfNextMonth","followingDaysCount","offsetItems","offsetRow","remainingDays","firstDayInRow","daysCount","nextRow","addDays","ChangeDetectorRef","decorators","Directionality","ViewChild","static","NxMultiYearViewComponent","yearSelected","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","row","_createCellForYear","_yearSelected","yearsPerPage","_getActiveCell","yearName","_shouldEnableYear","NxYearViewComponent","monthSelected","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","NxCalendarComponent","_intl","changeDetectorRef","startView","_intlChanges","_startAt","_clampedActiveDate","_currentView","multi-year","startAt","ngOnDestroy","unsubscribe","ngOnChanges","change","firstChange","view","monthView","yearView","multiYearView","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","_changeViewClicked","_previousClicked","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","date1","date2","datepickerUid","NX_DATEPICKER_SCROLL_STRATEGY","NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER","deps","Overlay","useFactory","DATEPICKER_DEFAULT_OPTIONS","NxDatepickerContentComponent","elementRef","NxDatepickerComponent","_overlay","_viewContainerRef","_scrollStrategy","_document","selectedChanged","openedStream","closedStream","_opened","id","_validSelected","_focusedElementBeforeOpen","_inputSubscription","Subscription","EMPTY","_disabledChange","_datepickerInput","undefined","_disabled","disabled","newValue","coerceBooleanProperty","open","close","_dateFilter","complete","_popupRef","dispose","_popupComponentRef","select","oldValue","selectYear","selectMonth","registerInput","input","_valueChange","registerToggle","toggle","_toggleButton","activeElement","_openAsPopup","hasAttached","detach","_calendarPortal","isAttached","completeClose","setTimeout","tabindex","_focus","ComponentPortal","_createPopup","attach","instance","datepicker","updatePosition","overlayConfig","OverlayConfig","positionStrategy","_createPopupPositionStrategy","hasBackdrop","backdropClass","direction","scrollStrategy","panelClass","merge","backdropClick","keydownEvents","filter","ESCAPE","position","flexibleConnectedTo","getConnectedOverlayOrigin","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","withPositions","originX","originY","overlayX","overlayY","ViewContainerRef","DOCUMENT","NxDateValidators","dateAdapter","dateFormats","strict","customParseFormat","parsedValue","nxDatefieldParse","text","control","controlValue","getValidDateOrNull","nxDatefieldMin","actual","nxDatefieldMax","nxDatefieldFilter","NX_DATEFIELD_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","NxDatefieldDirective","multi","NX_DATEFIELD_VALIDATORS","NG_VALIDATORS","target","targetElement","_formField","currentFormattedDate","_strict","dateChange","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","localeChanges","registerDatepicker","_datepicker","_value","oldDate","_formatValue","_min","_max","_onInput","_parseFormat","_displayFormat","blur","NxDatepickerInputEvent","registerOnValidatorChange","fn","validate","c","validator","Validators","compose","getValidators","getPopupConnectionElementRef","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","_onChange","_onBlur","Directive","NX_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","NxFormfieldComponent","NxDatepickerToggleIconComponent","NxDatepickerToggleComponent","_defaultOptions","_stateChanges","_tabindex","toggleIconTabindex","_watchStateChanges","_open","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","[class.nx-datepicker-toggle-active]","[class.nx-datepicker-toggle--disabled]","ContentChild","NxDatefieldModule","CommonModule","OverlayModule","A11yModule","NxIconModule","declarations","exports","entryComponents"],"mappings":"41CAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IASrB,IAAIO,EAAW,WAQlB,OAPAA,EAAWN,OAAOO,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIN,KADTK,EAAIG,UAAUF,GACOV,OAAOc,UAAUT,eAAeU,KAAKN,EAAGL,KAAII,EAAEJ,GAAKK,EAAEL,IAE9E,OAAOI,IAEKQ,MAAMC,KAAML;;;;;;;;AC3BhC,IAAaM,EAAwC,CACnDC,MAAO,CACLC,UAAW,MAEbC,QAAS,CACPD,UAAW,CAACE,KAAM,UAAWC,MAAO,UAAWC,IAAK,WACpDC,eAAgB,CAACH,KAAM,UAAWC,MAAO,SACzCG,cAAe,CAACJ,KAAM,UAAWC,MAAO,OAAQC,IAAK,WACrDG,mBAAoB,CAACL,KAAM,UAAWC,MAAO,uBCdjD,SAAAK,IACYX,KAAAY,OAAS,QACTZ,KAAAa,eAAiB,IAAIC,EAAAA,QAwEjC,OA3DE/B,OAAAgC,eAAIJ,EAAAd,UAAA,gBAAa,KAAjB,WAA0C,OAAOG,KAAKa,gDAEtDF,EAAAd,UAAAmB,YAAA,SAAYC,GACV,OAAa,MAATA,GAAiBjB,KAAKkB,eAAeD,IAAUjB,KAAKmB,QAAQF,GACvDA,EAEFjB,KAAKoB,WAGdT,EAAAd,UAAAwB,SAAA,SAASC,EAAiBC,GACxB,GAAID,GAASC,EAAQ,KACbC,EAAaxB,KAAKmB,QAAQG,GAC1BG,EAAczB,KAAKmB,QAAQI,GAEjC,OAAIC,GAAcC,GACRzB,KAAK0B,YAAYJ,EAAOC,GAE3BC,IAAeC,EAExB,OAAOH,IAAUC,GAGnBZ,EAAAd,UAAA6B,YAAA,SAAYJ,EAAUC,GACpB,OAAOvB,KAAK2B,QAAQL,GAAStB,KAAK2B,QAAQJ,IACtCvB,KAAK4B,SAASN,GAAStB,KAAK4B,SAASL,IACrCvB,KAAK6B,QAAQP,GAAStB,KAAK6B,QAAQN,IAGzCZ,EAAAd,UAAAiC,UAAA,SAAUlB,GACRZ,KAAKY,OAASA,EACdZ,KAAKa,eAAekB,KAAK/B,KAAKY,SAGhCD,EAAAd,UAAAmC,UAAA,WACE,OAAOhC,KAAKY,QAgBdD,EAAAd,UAAAoC,UAAA,SAAUC,EAASC,EAAgBC,GACjC,OAAID,GAAOnC,KAAK0B,YAAYQ,EAAMC,GAAO,EAChCA,EAELC,GAAOpC,KAAK0B,YAAYQ,EAAME,GAAO,EAChCA,EAEFF,GAEXvB,KC3EA,IAAa0B,EAAiB,IAAIC,EAAAA,eAAuB,kBCanDC,EAAoC,oBAATC,KAG3BC,EAAsB,CAC1BC,KAAQ,CACN,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAC1E,UAAW,WAAY,YAEzBC,MAAS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACvFC,OAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAI9DC,EAAqBC,EAAM,GAAI,SAAArD,GAAK,OAAAsD,OAAOtD,EAAI,KAG/CuD,EAA4B,CAChCN,KAAQ,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC3EC,MAAS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACpDC,OAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAQrCK,EACF,qFAGJ,SAASH,EAASlD,EAAgBsD,GAEhC,QADMC,EAAcjE,MAAMU,GACjBH,EAAI,EAAGA,EAAIG,EAAQH,IAC1B0D,EAAY1D,GAAKyD,EAAczD,GAEjC,OAAO0D,EAOT,IAAAC,EAAA,SAAAC,GAkBE,SAAAD,EAAgDE,EAAuBC,GAAvE,IAAAC,EACEH,EAAAvD,KAAAE,OAAOA,YAHTwD,EAAAC,kBAA4B,EAI1BJ,EAAAxD,UAAMiC,UAAShC,KAAA0D,EAACF,GAGhBE,EAAKC,kBAAoBF,EAASG,QAClCF,EAAKG,WAAaJ,EAASG,SAAWH,EAASK,OA6OnD,OJzSO,SAAmB/E,EAAGC,GAEzB,SAAS+E,IAAO7D,KAAK8D,YAAcjF,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEgB,UAAkB,OAANf,EAAaC,OAAOgF,OAAOjF,IAAM+E,EAAGhE,UAAYf,EAAEe,UAAW,IAAIgE,GIkC1CG,CAAAA,EAAAA,GA0BvCZ,EAAAvD,UAAA8B,QAAA,SAAQO,GACN,OAAOA,EAAK+B,eAGdb,EAAAvD,UAAA+B,SAAA,SAASM,GACP,OAAOA,EAAKN,YAGdwB,EAAAvD,UAAAgC,QAAA,SAAQK,GACN,OAAOA,EAAKL,WAGduB,EAAAvD,UAAAqE,aAAA,SAAahC,GACX,OAAOA,EAAKiC,UAGdf,EAAAvD,UAAAuE,cAAA,SAAcC,GAAd,IAAAb,EAAAxD,KACE,GAAIuC,EAAmB,KACf+B,EAAM,IAAI9B,KAAK+B,eAAevE,KAAKY,OAAQ,CAACN,MAAO+D,EAAOG,SAAU,QAC1E,OAAO1B,EAAM,GAAE,SAAErD,GACb,OAAA+D,EAAKiB,+BAA+BjB,EAAKkB,QAAQJ,EAAK,IAAIK,KAAK,KAAMlF,EAAG,OAE9E,OAAOgD,EAAoB4B,IAG7BjB,EAAAvD,UAAA+E,aAAA,WAAA,IAAApB,EAAAxD,KACE,GAAIuC,EAAmB,KACfsC,EAAM,IAAIrC,KAAK+B,eAAevE,KAAKY,OAAQ,CAACL,IAAK,UAAWiE,SAAU,QAC5E,OAAO1B,EAAM,GAAE,SAAErD,GAAK,OAAA+D,EAAKiB,+BACvBjB,EAAKkB,QAAQG,EAAK,IAAIF,KAAK,KAAM,EAAGlF,EAAI,OAE9C,OAAOoD,GAGTO,EAAAvD,UAAAiF,kBAAA,SAAkBT,GAAlB,IAAAb,EAAAxD,KACE,GAAIuC,EAAmB,KACfwC,EAAM,IAAIvC,KAAK+B,eAAevE,KAAKY,OAAQ,CAACoE,QAASX,EAAOG,SAAU,QAC5E,OAAO1B,EAAM,EAAC,SAAErD,GAAK,OAAA+D,EAAKiB,+BACtBjB,EAAKkB,QAAQK,EAAK,IAAIJ,KAAK,KAAM,EAAGlF,EAAI,OAE9C,OAAOuD,EAA0BqB,IAGnCjB,EAAAvD,UAAAoF,YAAA,SAAY/C,GACV,GAAIK,EAAmB,KACf2C,EAAM,IAAI1C,KAAK+B,eAAevE,KAAKY,OAAQ,CAACP,KAAM,UAAWmE,SAAU,QAC7E,OAAOxE,KAAKyE,+BAA+BzE,KAAK0E,QAAQQ,EAAKhD,IAE/D,OAAOa,OAAO/C,KAAK2B,QAAQO,KAG7BkB,EAAAvD,UAAAsF,kBAAA,WAEE,OAAO,GAGT/B,EAAAvD,UAAAuF,kBAAA,SAAkBlD,GAChB,OAAOlC,KAAK6B,QAAQ7B,KAAKqF,wBACrBrF,KAAK2B,QAAQO,GAAOlC,KAAK4B,SAASM,GAAQ,EAAG,KAGnDkB,EAAAvD,UAAAyF,MAAA,SAAMpD,GACJ,OAAOlC,KAAKuF,WAAWvF,KAAK2B,QAAQO,GAAOlC,KAAK4B,SAASM,GAAOlC,KAAK6B,QAAQK,KAG/EkB,EAAAvD,UAAA0F,WAAA,SAAWlF,EAAcC,EAAe4B,GAGtC,GAAI5B,EAAQ,GAAKA,EAAQ,GACvB,MAAMkF,MAAM,wBAAwBlF,EAAK,8CAG3C,GAAI4B,EAAO,EACT,MAAMsD,MAAM,iBAAiBtD,EAAI,yCAG7BuD,EAASzF,KAAKqF,wBAAwBhF,EAAMC,EAAO4B,GAEzD,GAAIuD,EAAO7D,aAAetB,EACxB,MAAMkF,MAAM,iBAAiBtD,EAAI,2BAA2B5B,EAAK,MAGnE,OAAOmF,GAGTrC,EAAAvD,UAAA6F,MAAA,WACE,OAAO,IAAIf,MAGbvB,EAAAvD,UAAAK,MAAA,SAAMe,GAGJ,MAAqB,iBAAVA,EACF,IAAI0D,KAAK1D,GAEXA,EAAQ,IAAI0D,KAAKA,KAAKzE,MAAMe,IAAU,MAG/CmC,EAAAvD,UAAA8F,OAAA,SAAOzD,EAAY0D,GACjB,IAAK5F,KAAKmB,QAAQe,GAChB,MAAMsD,MAAM,oDAGd,GAAIjD,EAAmB,CAGjBvC,KAAK2D,aAAezB,EAAK+B,cAAgB,GAAK/B,EAAK+B,cAAgB,QACrE/B,EAAOlC,KAAKsF,MAAMpD,IACb2D,YAAYC,KAAK1D,IAAI,EAAG0D,KAAK3D,IAAI,KAAMD,EAAK+B,iBAGnD2B,EAAavG,EAAA,GAAOuG,EAAa,CAAEpB,SAAU,YAEvCU,EAAM,IAAI1C,KAAK+B,eAAevE,KAAKY,OAAQgF,GACjD,OAAO5F,KAAKyE,+BAA+BzE,KAAK0E,QAAQQ,EAAKhD,IAE/D,OAAOlC,KAAKyE,+BAA+BvC,EAAK6D,iBAGlD3C,EAAAvD,UAAAmG,iBAAA,SAAiB9D,EAAY+D,GAC3B,OAAOjG,KAAKkG,kBAAkBhE,EAAc,GAAR+D,IAGtC7C,EAAAvD,UAAAqG,kBAAA,SAAkBhE,EAAYiE,OACxBC,EAAUpG,KAAKqF,wBACfrF,KAAK2B,QAAQO,GAAOlC,KAAK4B,SAASM,GAAQiE,EAAQnG,KAAK6B,QAAQK,IAUnE,OAJIlC,KAAK4B,SAASwE,OAAepG,KAAK4B,SAASM,GAAQiE,GAAU,GAAK,IAAM,KAC1EC,EAAUpG,KAAKqF,wBAAwBrF,KAAK2B,QAAQyE,GAAUpG,KAAK4B,SAASwE,GAAU,IAGjFA,GAGThD,EAAAvD,UAAAwG,gBAAA,SAAgBnE,EAAYoE,GAC1B,OAAOtG,KAAKqF,wBACRrF,KAAK2B,QAAQO,GAAOlC,KAAK4B,SAASM,GAAOlC,KAAK6B,QAAQK,GAAQoE,IAGpElD,EAAAvD,UAAA0G,UAAA,SAAUrE,GACR,MAAO,CACLA,EAAKsE,iBACLxG,KAAKyG,QAAQvE,EAAKwE,cAAgB,GAClC1G,KAAKyG,QAAQvE,EAAKyE,eAClBC,KAAK,MAQTxD,EAAAvD,UAAAmB,YAAA,SAAYC,GACV,GAAqB,iBAAVA,EAAoB,CAC7B,IAAKA,EACH,OAAO,KAIT,GAAIgC,EAAe4D,KAAK5F,GAAQ,KACxBiB,EAAO,IAAIyC,KAAK1D,GACtB,GAAIjB,KAAKmB,QAAQe,GACf,OAAOA,GAIb,OAAOmB,EAAAxD,UAAMmB,YAAWlB,KAAAE,KAACiB,IAG3BmC,EAAAvD,UAAAqB,eAAA,SAAe4F,GACb,OAAOA,aAAenC,MAGxBvB,EAAAvD,UAAAsB,QAAA,SAAQe,GACN,OAAQ6E,MAAM7E,EAAK8E,YAGrB5D,EAAAvD,UAAAuB,QAAA,WACE,OAAO,IAAIuD,KAAKsC,MAIV7D,EAAAvD,UAAAwF,wBAAR,SAAgChF,EAAcC,EAAe4B,OACrDuD,EAAS,IAAId,KAAKtE,EAAMC,EAAO4B,GAOrC,OAHI7B,GAAQ,GAAKA,EAAO,KACtBoF,EAAOI,YAAY7F,KAAK2B,QAAQ8D,GAAU,MAErCA,GAQDrC,EAAAvD,UAAA4G,QAAR,SAAgB/G,GACd,OAAQ,KAAOA,GAAGwH,OAAO,IAUnB9D,EAAAvD,UAAA4E,+BAAR,SAAuC0C,GACrC,OAAOA,EAAIC,QAAQ,kBAAmB,KAchChE,EAAAvD,UAAA6E,QAAR,SAAgBQ,EAA0BhD,OAClCrD,EAAI,IAAI8F,KAAKA,KAAK0C,IACpBnF,EAAK+B,cAAe/B,EAAKN,WAAYM,EAAKL,UAAWK,EAAKoF,WAC1DpF,EAAKqF,aAAcrF,EAAKsF,aAActF,EAAKuF,oBAC/C,OAAOvC,EAAIS,OAAO9G,wBAnQrB6I,EAAAA,+EAkBcC,EAAAA,UAAQ,CAAAC,KAAIC,EAAAA,OAAMC,KAAA,CAACzF,YArE1B0F,EAAAA,YAwTR3E,EArQA,CACyCzC,GC7CzC,IAAaqH,EAAkB,IAAI1F,EAAAA,eAA8B,mBCLpD2F,EAA0B,CAACC,QAAS7F,EAAgB8F,YAAaC,EAAAA,WAE9EC,EAAA,WAOA,SAAAA,KAO+B,2BAP9BC,EAAAA,SAAQR,KAAA,CAAC,CACRS,QAAS,CAACC,EAAAA,gBACVC,UAAW,CACT,CAACP,QAASvH,EAAe+H,SAAUtF,GACnC6E,OAG2BI,EAd/B,KAkBmDpI,EAFnD0I,EAAA,WAAA,SAAAA,KAIiC,2BAJhCL,EAAAA,SAAQR,KAAA,CAAC,CACRS,QAAS,CAACF,GACVI,UAAW,CAAC,CAACP,QAASF,EAAiBY,SAAQC,QAEhBF,EAJjC,GC5BA,SAAgBG,EAA2BC,GACzC,OAAOvD,MACH,uCAAuCuD,EAAQ,wJCUrD,IAAAC,EAAA,WAAA,SAAAA,IAMWhJ,KAAAiJ,QAAyB,IAAInI,EAAAA,QAKtCd,KAAAkJ,eAAyB,gBAGzBlJ,KAAAmJ,cAAwB,WAGxBnJ,KAAAoJ,kBAA4B,gBAG5BpJ,KAAAqJ,eAAyB,iBAGzBrJ,KAAAsJ,eAAyB,aAGzBtJ,KAAAuJ,cAAwB,gBAGxBvJ,KAAAwJ,cAAwB,YAGxBxJ,KAAAyJ,mBAA6B,oBAG7BzJ,KAAA0J,mBAA6B,gBAG7B1J,KAAA2J,uBAAiC,cAGjC3J,KAAA4J,2BAAqC,wBACvC,2BA1CClC,EAAAA,aA0CDsB,EA1CA;;;;;;;;ACHA,SAAgBF,EAA2BC,GACzC,OAAOvD,MACH,uCAAuCuD,EAAQ,wJCYrD,MACE,SAAmB9H,EACA4I,EACAC,EACAC,GAHA/J,KAAAiB,MAAAA,EACAjB,KAAA6J,aAAAA,EACA7J,KAAA8J,UAAAA,EACA9J,KAAA+J,QAAAA,GAOrB,IAAAC,EAAA,WA4CE,SAAAA,EAAoBC,EAAiCC,GAAjClK,KAAAiK,YAAAA,EAAiCjK,KAAAkK,QAAAA,EAjB5ClK,KAAAmK,QAAU,EAGVnK,KAAAoK,wBAAyB,EAGzBpK,KAAAqK,WAAa,EAGbrK,KAAAsK,cAAkC,GAGlCtK,KAAAuK,eAAqC,CAAC,IAG5BvK,KAAAwK,oBAA4C,IAAIC,EAAAA,aA+DrE,OA3DET,EAAAnK,UAAA6K,aAAA,SAAaC,IACN3K,KAAKoK,wBAA2BO,EAAKZ,UAG1C/J,KAAKwK,oBAAoBI,KAAKD,EAAK1J,QAIrClC,OAAAgC,eAAIiJ,EAAAnK,UAAA,kBAAe,KAAnB,WACE,OAAOG,KAAK6K,MAAQ7K,KAAK6K,KAAKjL,QAAUI,KAAK6K,KAAK,GAAGjL,OACjDI,KAAKmK,QAAUnK,KAAK6K,KAAK,GAAGjL,OAAS,mCAI3Cb,OAAAgC,eAAIiJ,EAAAnK,UAAA,iBAAc,KAAlB,WACE,OAAOG,KAAK6K,MAAQ7K,KAAK6K,KAAKjL,QAAUI,KAAK6K,KAAK7K,KAAK6K,KAAKjL,OAAS,GAAGA,OACpEI,KAAKmK,QAAUnK,KAAK6K,KAAK7K,KAAK6K,KAAKjL,OAAS,GAAGA,OAAS,mCAI9Db,OAAAgC,eAAIiJ,EAAAnK,UAAA,gBAAa,KAAjB,WACE,OAAOG,KAAK6K,MAAQ7K,KAAK6K,KAAKjL,OAC1BI,KAAK6K,KAAKjL,OAAS,EAAI,mCAM7Bb,OAAAgC,eAAIiJ,EAAAnK,UAAA,iBAAc,KAAlB,WACE,OAAIG,KAAKuK,gBAAkBvK,KAAKuK,eAAe3K,OAEzCI,KAAKuK,eAAe,GAAG3K,OAASI,KAAKmK,QAChCnK,KAAKuK,eAAerD,MAAM,EAAGlH,KAAKuK,eAAe3K,QAEnDI,KAAKuK,eAGP,oCAGTP,EAAAnK,UAAAiL,cAAA,SAAcC,EAAkBC,OAC1BC,EAAaF,EAAW/K,KAAKmK,QAAUa,EAO3C,OAJID,IACFE,GAAcjL,KAAKkL,iBAGdD,IAAejL,KAAKqK,YAI7BL,EAAAnK,UAAAsL,iBAAA,WAAA,IAAA3H,EAAAxD,KACEA,KAAKkK,QAAQkB,kBAAiB,WAC5B5H,EAAK0G,QAAQmB,SAASC,eAAeC,KAAKC,EAAAA,KAAK,IAAIC,UAAS,WAC1DjI,EAAKyG,YAAYyB,cAAcC,cAAc,4BAA4BC,iCArGhFC,EAAAA,UAAS/D,KAAA,CAAC,CAETgE,SAAU,qBACVC,SAAA,4wEAEAC,KAAM,CACJC,MAAS,mBACTC,KAAQ,OACRC,qBAAsB,QAExBC,SAAU,iBACVC,gBAAiBC,EAAAA,wBAAwBC,y/GAlCzCC,EAAAA,kBAIAC,EAAAA,yCAkCCC,EAAAA,oBAGAA,EAAAA,0BAGAA,EAAAA,6BAGAA,EAAAA,uBAGAA,EAAAA,sCAGAA,EAAAA,0BAGAA,EAAAA,6BAGAA,EAAAA,8BAGAA,EAAAA,mCAGAC,EAAAA,UA+DH3C,EAzGA;;;;;;;;;ICCA4C,EAAA,WAwFE,SAAAA,EAAoBC,EACqCC,EAC1BC,EACCC,GAC9B,GAJkBhN,KAAA6M,mBAAAA,EACqC7M,KAAA8M,aAAAA,EAC1B9M,KAAA+M,aAAAA,EACC/M,KAAAgN,KAAAA,EAtCbhN,KAAAiN,eAAyC,IAAIxC,EAAAA,aAG7CzK,KAAAkN,eAAqC,IAAIzC,EAAAA,aAGzCzK,KAAAmN,iBAAoC,IAAI1C,EAAAA,aA2B3DzK,KAAAoN,SAAmB,GAMZpN,KAAK+M,aACR,MAAMjE,EAA2B,eAEnC,IAAK9I,KAAK8M,aACR,MAAMhE,EAA2B,wBAG7BuE,EAAiBrN,KAAK+M,aAAa5H,oBACnCmI,EAAiBtN,KAAK+M,aAAajI,kBAAkB,UAIrDyI,EAHevN,KAAK+M,aAAajI,kBAAkB,QAG3B0I,IAAG,SAAE9K,EAAMjD,GACvC,MAAO,CAACiD,KAAIA,EAAEE,OAAQ0K,EAAe7N,MAEvCO,KAAKyN,UAAYF,EAASrG,MAAMmG,GAAgBK,OAAOH,EAASrG,MAAM,EAAGmG,IAEzErN,KAAK2N,YAAc3N,KAAK+M,aAAarH,QAgPzC,OAlVE3G,OAAAgC,eACI6L,EAAA/M,UAAA,aAAU,KADd,WACsB,OAAOG,KAAK2N,iBAClC,SAAe1M,OACP2M,EAAgB5N,KAAK2N,YACrBE,EACF7N,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,KAAWjB,KAAK+M,aAAarH,QACxF1F,KAAK2N,YAAc3N,KAAK+M,aAAa9K,UAAU4L,EAAW7N,KAAK+N,QAAS/N,KAAKgO,SACxEhO,KAAKiO,qBAAqBL,EAAe5N,KAAK2N,cACjD3N,KAAKkO,yCAMTnP,OAAAgC,eACI6L,EAAA/M,UAAA,WAAQ,KADZ,WAC2B,OAAOG,KAAKmO,eACvC,SAAalN,GACXjB,KAAKmO,UAAYnO,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,IACxEjB,KAAKoO,cAAgBpO,KAAKqO,uBAAuBrO,KAAKmO,4CAKxDpP,OAAAgC,eACI6L,EAAA/M,UAAA,UAAO,KADX,WAC0B,OAAOG,KAAKsO,cACtC,SAAYrN,GACVjB,KAAKsO,SAAWtO,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,qCAKzElC,OAAAgC,eACI6L,EAAA/M,UAAA,UAAO,KADX,WAC0B,OAAOG,KAAKuO,cACtC,SAAYtN,GACVjB,KAAKuO,SAAWvO,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,qCAmEzE2L,EAAA/M,UAAA2O,mBAAA,WACExO,KAAKkO,QACLlO,KAAKmL,oBAIPyB,EAAA/M,UAAA4O,cAAA,SAAcvM,GACZ,GAAIlC,KAAKoO,gBAAkBlM,EAAM,KACzBwM,EAAe1O,KAAK+M,aAAapL,QAAQ3B,KAAK2O,YAC9CC,EAAgB5O,KAAK+M,aAAanL,SAAS5B,KAAK2O,YAChDE,EAAe7O,KAAK+M,aAAaxH,WAAWmJ,EAAcE,EAAe1M,GAE/ElC,KAAKiN,eAAerC,KAAKiE,GAG3B7O,KAAKkN,eAAetC,QAItBgC,EAAA/M,UAAAiP,2BAAA,SAA2BC,OAKnBnB,EAAgB5N,KAAK2N,YAErBqB,EAAQhP,KAAKiP,SACnB,OAAQF,EAAMG,SACZ,KAAKC,EAAAA,WACHnP,KAAK2O,WAAa3O,KAAK+M,aAAa1G,gBAAgBrG,KAAK2N,YAAaqB,EAAQ,GAAK,GACnF,MACF,KAAKI,EAAAA,YACHpP,KAAK2O,WAAa3O,KAAK+M,aAAa1G,gBAAgBrG,KAAK2N,YAAaqB,GAAS,EAAI,GACnF,MACF,KAAKK,EAAAA,SACHrP,KAAK2O,WAAa3O,KAAK+M,aAAa1G,gBAAgBrG,KAAK2N,aAAc3N,KAAKoN,UAC5E,MACF,KAAKkC,EAAAA,WACHtP,KAAK2O,WAAa3O,KAAK+M,aAAa1G,gBAAgBrG,KAAK2N,YAAa3N,KAAKoN,UAC3E,MACF,KAAKmC,EAAAA,KACHvP,KAAK2O,WAAa3O,KAAK+M,aAAa1G,gBAAgBrG,KAAK2N,YACrD,EAAI3N,KAAK+M,aAAalL,QAAQ7B,KAAK2N,cACvC,MACF,KAAK6B,EAAAA,IACHxP,KAAK2O,WAAa3O,KAAK+M,aAAa1G,gBAAgBrG,KAAK2N,YACpD3N,KAAK+M,aAAa3H,kBAAkBpF,KAAK2N,aACxC3N,KAAK+M,aAAalL,QAAQ7B,KAAK2N,cACrC,MACF,KAAK8B,EAAAA,QACHzP,KAAK2O,WAAaI,EAAMW,OACpB1P,KAAK+M,aAAa/G,iBAAiBhG,KAAK2N,aAAc,GACtD3N,KAAK+M,aAAa7G,kBAAkBlG,KAAK2N,aAAc,GAC3D,MACF,KAAKgC,EAAAA,UACH3P,KAAK2O,WAAaI,EAAMW,OACpB1P,KAAK+M,aAAa/G,iBAAiBhG,KAAK2N,YAAa,GACrD3N,KAAK+M,aAAa7G,kBAAkBlG,KAAK2N,YAAa,GAC1D,MACF,KAAKiC,EAAAA,MAOH,YANK5P,KAAK6P,aAAc7P,KAAK6P,WAAW7P,KAAK2N,eAC3C3N,KAAKyO,cAAczO,KAAK+M,aAAalL,QAAQ7B,KAAK2N,cAClD3N,KAAKkN,eAAetC,OAEpBmE,EAAMe,mBAGV,QAEE,OAGA9P,KAAK+M,aAAarL,YAAYkM,EAAe5N,KAAK2O,aACpD3O,KAAKmN,iBAAiBvC,KAAK5K,KAAK2O,YAGlC3O,KAAKmL,mBAEL4D,EAAMe,kBAIRlD,EAAA/M,UAAAqO,MAAA,WACElO,KAAKoO,cAAgBpO,KAAKqO,uBAAuBrO,KAAK+P,UACtD/P,KAAKgQ,WAAahQ,KAAKqO,uBAAuBrO,KAAK+M,aAAarH,SAChE1F,KAAKiQ,YACDjQ,KAAK+M,aAAa3I,cAAc,SAASpE,KAAK+M,aAAanL,SAAS5B,KAAK2O,aACpEuB,wBAEHC,EAAenQ,KAAK+M,aAAaxH,WAAWvF,KAAK+M,aAAapL,QAAQ3B,KAAK2O,YAC7E3O,KAAK+M,aAAanL,SAAS5B,KAAK2O,YAAa,GACjD3O,KAAKoQ,kBAlNa,EAmNGpQ,KAAK+M,aAAa7I,aAAaiM,GAC/CnQ,KAAK+M,aAAa5H,qBApNL,EAsNlBnF,KAAKqQ,mBACLrQ,KAAK6M,mBAAmByD,gBAIlB1D,EAAA/M,UAAAsL,iBAAR,WACEnL,KAAKuQ,gBAAgBpF,oBAIfyB,EAAA/M,UAAAwQ,iBAAR,eACQG,EAAcxQ,KAAK+M,aAAa3H,kBAAkBpF,KAAK2O,YACvD8B,EAAYzQ,KAAK+M,aAAanI,eACpC5E,KAAK0Q,OAAS,CAAC,IACf,IAAK,IAAIjR,EAAI,EAAGkL,EAAO3K,KAAKoQ,iBAAkB3Q,EAAI+Q,EAAa/Q,IAAKkL,IAAQ,CApO1D,IAqOZA,IACF3K,KAAK0Q,OAAOC,KAAK,IACjBhG,EAAO,OAEHzI,EAAOlC,KAAK+M,aAAaxH,WACzBvF,KAAK+M,aAAapL,QAAQ3B,KAAK2O,YAC/B3O,KAAK+M,aAAanL,SAAS5B,KAAK2O,YAAalP,EAAI,GACjDsK,EAAU/J,KAAK4Q,kBAAkB1O,GACjC4H,EAAY9J,KAAK+M,aAAapH,OAAOzD,EAAMlC,KAAK8M,aAAa1M,QAAQK,eAC3ET,KAAK0Q,OAAO1Q,KAAK0Q,OAAO9Q,OAAS,GAC5B+Q,KAAK,IAAIE,EAAepR,EAAI,EAAGgR,EAAUhR,GAAIqK,EAAWC,MAKzD6C,EAAA/M,UAAA+Q,kBAAR,SAA0B1O,GACxB,QAASA,KACHlC,KAAK6P,YAAc7P,KAAK6P,WAAW3N,OACnClC,KAAK+N,SAAW/N,KAAK+M,aAAarL,YAAYQ,EAAMlC,KAAK+N,UAAY,MACrE/N,KAAKgO,SAAWhO,KAAK+M,aAAarL,YAAYQ,EAAMlC,KAAKgO,UAAY,IAOrEpB,EAAA/M,UAAAwO,uBAAR,SAA+BnM,GAC7B,OAAOA,GAAQlC,KAAKiO,qBAAqB/L,EAAMlC,KAAK2O,YAChD3O,KAAK+M,aAAalL,QAAQK,GAAQ,MAIhC0K,EAAA/M,UAAAoO,qBAAR,SAA6B6C,EAAcC,GACzC,SAAUD,IAAMC,GAAM/Q,KAAK+M,aAAanL,SAASkP,KAAQ9Q,KAAK+M,aAAanL,SAASmP,IAC1E/Q,KAAK+M,aAAapL,QAAQmP,KAAQ9Q,KAAK+M,aAAapL,QAAQoP,KAOhEnE,EAAA/M,UAAAiO,oBAAR,SAA4BhH,GAC1B,OAAQ9G,KAAK+M,aAAa7L,eAAe4F,IAAQ9G,KAAK+M,aAAa5L,QAAQ2F,GAAQA,EAAM,MAInF8F,EAAA/M,UAAAoP,OAAR,WACE,OAAOjP,KAAKgN,MAA4B,QAApBhN,KAAKgN,KAAK/L,OAOhC2L,EAAA/M,UAAAmR,4BAAA,eACQC,EAAqBjR,KAAK+M,aAAaxH,WAC3CvF,KAAK+M,aAAapL,QAAQ3B,KAAK2O,YAC/B3O,KAAK+M,aAAanL,SAAS5B,KAAK2O,YAChC,GAGIuC,EACJlR,KAAK+M,aAAa1G,gBAAgB4K,GAAmBjR,KAAKoQ,kBAE5D,OAAOpQ,KAAKmR,cAAcD,EAAyBlR,KAAKoQ,mBAS1DxD,EAAA/M,UAAAuR,8BAAA,eACQC,EAAoC,GAEpCC,EAAyBtR,KAAK+M,aAAa7G,kBAC/ClG,KAAK+M,aAAaxH,WAChBvF,KAAK+M,aAAapL,QAAQ3B,KAAK2O,YAC/B3O,KAAK+M,aAAanL,SAAS5B,KAAK2O,YAChC,GACF,GAII4C,EAzToB,GA0TAvR,KAAKoQ,iBAAmBpQ,KAAK+M,aAAa3H,kBAAkBpF,KAAK2O,YACrF6C,EAAcD,EAAqB,EAIzC,GAAIC,EAAc,EAAG,KACbC,EAAYzR,KAAKmR,cAAcG,EAAqBE,GAC1DH,EAAcV,KAAKc,GAOrB,QAJIC,EAAgBH,EAAqBC,EACrCG,EAAgB3R,KAAK+M,aAAa1G,gBAAgBiL,EAAqBE,GAGpEE,EAAgB,GACrBL,EAAcV,KACZ3Q,KAAKmR,cAAcQ,EAAe3R,KAAKoN,WAGzCuE,EAAgB3R,KAAK+M,aAAa1G,gBAAgBsL,EAAe3R,KAAKoN,UACtEsE,GAAiB1R,KAAKoN,SAGxB,OAAOiE,GAOTzE,EAAA/M,UAAAsR,cAAA,SAAcQ,EAAkBC,GAG9B,QAFMC,EAA4B,GAC5BpB,EAAYzQ,KAAK+M,aAAanI,eAC3BkN,EAAU,EAAGA,EAAUF,EAAWE,IAAW,KAC9CvR,EAAMP,KAAK+M,aAAalL,QAC5B7B,KAAK+M,aAAa1G,gBAAgBsL,EAAeG,IAEnDD,EAAQlB,KAAK,IAAIE,EAAetQ,EAAKkQ,EAAUlQ,EAAM,KAEvD,OAAOsR,uBA3VVhG,EAAAA,UAAS/D,KAAA,CAAC,CACTgE,SAAU,gBACVC,SAAA,0wBACAK,SAAU,cACVC,gBAAiBC,EAAAA,wBAAwBC,0gBAlCzCwF,EAAAA,kDAuHapK,EAAAA,UAAQ,CAAAC,KAAIC,EAAAA,OAAMC,KAAA,CAACE,YA7GzBrH,EAAaqR,WAAA,CAAA,CAAApK,KA8GPD,EAAAA,kBA7HNsK,EAAAA,eAAcD,WAAA,CAAA,CAAApK,KA8HRD,EAAAA,kDAhFZ+E,EAAAA,wBAcAA,EAAAA,uBASAA,EAAAA,uBAQAA,EAAAA,0BAQAA,EAAAA,8BAGAC,EAAAA,+BAGAA,EAAAA,iCAGAA,EAAAA,gCAGAuF,EAAAA,UAASpK,KAAA,CAACkC,EAAyB,CAAEmI,QAAQ,OA+RhDvF,EA7VA;;;;;;;;;ACTA,IAQAwF,EAAA,WAwEE,SAAAA,EAAoBvF,EACWE,EACCC,GAC9B,GAHkBhN,KAAA6M,mBAAAA,EACW7M,KAAA+M,aAAAA,EACC/M,KAAAgN,KAAAA,EAtBbhN,KAAAiN,eAAkC,IAAIxC,EAAAA,aAGtCzK,KAAAqS,aAAgC,IAAI5H,EAAAA,aAGpCzK,KAAAmN,iBAAoC,IAAI1C,EAAAA,cAiBpDzK,KAAK+M,aACR,MAAMjE,EAA2B,eAGnC9I,KAAK2N,YAAc3N,KAAK+M,aAAarH,QAiJzC,OAvNE3G,OAAAgC,eACIqR,EAAAvS,UAAA,aAAU,KADd,WACsB,OAAOG,KAAK2N,iBAClC,SAAe1M,OACP2M,EAAgB5N,KAAK2N,YACrBE,EACF7N,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,KAAWjB,KAAK+M,aAAarH,QACxF1F,KAAK2N,YAAc3N,KAAK+M,aAAa9K,UAAU4L,EAAW7N,KAAK+N,QAAS/N,KAAKgO,SACzElI,KAAKwM,MAAMtS,KAAK+M,aAAapL,QAAQiM,GAxBjB,MAyBpB9H,KAAKwM,MAAMtS,KAAK+M,aAAapL,QAAQ3B,KAAK2N,aAzBtB,KA0BtB3N,KAAKkO,yCAMTnP,OAAAgC,eACIqR,EAAAvS,UAAA,WAAQ,KADZ,WAC2B,OAAOG,KAAKmO,eACvC,SAAalN,GACXjB,KAAKmO,UAAYnO,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,IACxEjB,KAAKuS,cAAgBvS,KAAKmO,WAAanO,KAAK+M,aAAapL,QAAQ3B,KAAKmO,4CAKxEpP,OAAAgC,eACIqR,EAAAvS,UAAA,UAAO,KADX,WAC0B,OAAOG,KAAKsO,cACtC,SAAYrN,GACVjB,KAAKsO,SAAWtO,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,qCAKzElC,OAAAgC,eACIqR,EAAAvS,UAAA,UAAO,KADX,WAC0B,OAAOG,KAAKuO,cACtC,SAAYtN,GACVjB,KAAKuO,SAAWvO,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,qCAsCzEmR,EAAAvS,UAAA2O,mBAAA,WACExO,KAAKkO,QACLlO,KAAKmL,oBAIPiH,EAAAvS,UAAAqO,MAAA,WAAA,IAAA1K,EAAAxD,KACEA,KAAKwS,WAAaxS,KAAK+M,aAAapL,QAAQ3B,KAAK+M,aAAarH,aACxD+M,EAAazS,KAAK+M,aAAapL,QAAQ3B,KAAK2N,aAC5C+E,EAAeD,EAnGG,GAoGxBzS,KAAK2S,OAAS,GACd,IAAK,IAAIlT,EAAI,EAAGmT,EAAgB,GAAInT,EArGZ,GAqG8BA,IACpDmT,EAAIjC,KAAK8B,EAAaC,EAAejT,GApGhB,IAqGjBmT,EAAIhT,SACNI,KAAK2S,OAAOhC,KAAKiC,EAAIpF,IAAG,SAACnN,GAAQ,OAAAmD,EAAKqP,mBAAmBxS,MACzDuS,EAAM,IAGV5S,KAAK6M,mBAAmByD,gBAI1B8B,EAAAvS,UAAAiT,cAAA,SAAczS,GACZL,KAAKqS,aAAazH,KAAK5K,KAAK+M,aAAaxH,WAAWlF,EAAM,EAAG,QACvDC,EAAQN,KAAK+M,aAAanL,SAAS5B,KAAK2O,YACxC6B,EACFxQ,KAAK+M,aAAa3H,kBAAkBpF,KAAK+M,aAAaxH,WAAWlF,EAAMC,EAAO,IAClFN,KAAKiN,eAAerC,KAAK5K,KAAK+M,aAAaxH,WAAWlF,EAAMC,EACxDwF,KAAK3D,IAAInC,KAAK+M,aAAalL,QAAQ7B,KAAK2O,YAAa6B,MAI3D4B,EAAAvS,UAAAiP,2BAAA,SAA2BC,OAKnBnB,EAAgB5N,KAAK2N,YACrBqB,EAAQhP,KAAKiP,SAEnB,OAAQF,EAAMG,SACZ,KAAKC,EAAAA,WACHnP,KAAK2O,WAAa3O,KAAK+M,aAAa/G,iBAAiBhG,KAAK2N,YAAaqB,EAAQ,GAAK,GACpF,MACF,KAAKI,EAAAA,YACHpP,KAAK2O,WAAa3O,KAAK+M,aAAa/G,iBAAiBhG,KAAK2N,YAAaqB,GAAS,EAAI,GACpF,MACF,KAAKK,EAAAA,SACHrP,KAAK2O,WAAa3O,KAAK+M,aAAa/G,iBAAiBhG,KAAK2N,aAxIvC,GAyInB,MACF,KAAK2B,EAAAA,WACHtP,KAAK2O,WAAa3O,KAAK+M,aAAa/G,iBAAiBhG,KAAK2N,YA3IvC,GA4InB,MACF,KAAK4B,EAAAA,KACHvP,KAAK2O,WAAa3O,KAAK+M,aAAa/G,iBAAiBhG,KAAK2N,aACrD3N,KAAK+M,aAAapL,QAAQ3B,KAAK2N,aAjJhB,IAkJpB,MACF,KAAK6B,EAAAA,IACHxP,KAAK2O,WAAa3O,KAAK+M,aAAa/G,iBAAiBhG,KAAK2N,YApJtC,GAqJD3N,KAAK+M,aAAapL,QAAQ3B,KAAK2N,aArJ9B,GAqJ4D,GAChF,MACF,KAAK8B,EAAAA,QACHzP,KAAK2O,WACD3O,KAAK+M,aAAa/G,iBACdhG,KAAK2N,YAAaoB,EAAMW,QAAS,KA1JrB,IA2JpB,MACF,KAAKC,EAAAA,UACH3P,KAAK2O,WACD3O,KAAK+M,aAAa/G,iBACdhG,KAAK2N,YAAaoB,EAAMW,OAASqD,IA/JrB,IAgKpB,MACF,KAAKnD,EAAAA,MACH5P,KAAK8S,cAAc9S,KAAK+M,aAAapL,QAAQ3B,KAAK2N,cAClD,MACF,QAEE,OAGA3N,KAAK+M,aAAarL,YAAYkM,EAAe5N,KAAK2O,aACpD3O,KAAKmN,iBAAiBvC,KAAK5K,KAAK2O,YAGlC3O,KAAKmL,mBAEL4D,EAAMe,kBAGRsC,EAAAvS,UAAAmT,eAAA,WACE,OAAOhT,KAAK+M,aAAapL,QAAQ3B,KAAK2O,YAnLd,IAuLlByD,EAAAvS,UAAAsL,iBAAR,WACEnL,KAAKuQ,gBAAgBpF,oBAIfiH,EAAAvS,UAAAgT,mBAAR,SAA2BxS,OACnB4S,EAAWjT,KAAK+M,aAAa9H,YAAYjF,KAAK+M,aAAaxH,WAAWlF,EAAM,EAAG,IACrF,OAAO,IAAIwQ,EAAexQ,EAAM4S,EAAUA,EAAUjT,KAAKkT,kBAAkB7S,KAIrE+R,EAAAvS,UAAAqT,kBAAR,SAA0B7S,GAExB,GAAIA,MAAAA,GACCL,KAAKgO,SAAW3N,EAAOL,KAAK+M,aAAapL,QAAQ3B,KAAKgO,UACtDhO,KAAK+N,SAAW1N,EAAOL,KAAK+M,aAAapL,QAAQ3B,KAAK+N,SACzD,OAAO,EAIT,IAAK/N,KAAK6P,WACR,OAAO,EAMT,QAAS3N,EAHWlC,KAAK+M,aAAaxH,WAAWlF,EAAM,EAAG,GAG7BL,KAAK+M,aAAapL,QAAQO,KAAU7B,EAC/D6B,EAAOlC,KAAK+M,aAAa1G,gBAAgBnE,EAAM,GAC/C,GAAIlC,KAAK6P,WAAW3N,GAClB,OAAO,EAIX,OAAO,GAODkQ,EAAAvS,UAAAiO,oBAAR,SAA4BhH,GAC1B,OAAQ9G,KAAK+M,aAAa7L,eAAe4F,IAAQ9G,KAAK+M,aAAa5L,QAAQ2F,GAAQA,EAAM,MAInFsL,EAAAvS,UAAAoP,OAAR,WACE,OAAOjP,KAAKgN,MAA4B,QAApBhN,KAAKgN,KAAK/L,2BA9NjC4K,EAAAA,UAAS/D,KAAA,CAAC,CACTgE,SAAU,qBACVC,SAAA,2ZACAK,SAAU,kBACVC,gBAAiBC,EAAAA,wBAAwBC,4yBAjCzCwF,EAAAA,yBASOpR,EAAaqR,WAAA,CAAA,CAAApK,KA6FPD,EAAAA,kBA3GNsK,EAAAA,eAAcD,WAAA,CAAA,CAAApK,KA4GRD,EAAAA,kDAjEZ+E,EAAAA,wBAeAA,EAAAA,uBASAA,EAAAA,uBAQAA,EAAAA,0BAQAA,EAAAA,8BAGAC,EAAAA,6BAGAA,EAAAA,iCAGAA,EAAAA,gCAGAuF,EAAAA,UAASpK,KAAA,CAACkC,EAAyB,CAAEmI,QAAQ,OAmKhDC,EAhOA;;;;;;;;ACHA,IAAAe,EAAA,WA+EE,SAAAA,EAAoBtG,EACqCC,EAC1BC,EACCC,GAC9B,GAJkBhN,KAAA6M,mBAAAA,EACqC7M,KAAA8M,aAAAA,EAC1B9M,KAAA+M,aAAAA,EACC/M,KAAAgN,KAAAA,EA/BbhN,KAAAiN,eAAkC,IAAIxC,EAAAA,aAGtCzK,KAAAoT,cAAiC,IAAI3I,EAAAA,aAGrCzK,KAAAmN,iBAAoC,IAAI1C,EAAAA,aAoB3DzK,KAAAoN,SAAmB,GAMZpN,KAAK+M,aACR,MAAMjE,EAA2B,eAEnC,IAAK9I,KAAK8M,aACR,MAAMhE,EAA2B,oBAGnC9I,KAAK2N,YAAc3N,KAAK+M,aAAarH,QAsLzC,OAvQE3G,OAAAgC,eACIoS,EAAAtT,UAAA,aAAU,KADd,WACsB,OAAOG,KAAK2N,iBAClC,SAAe1M,OACP2M,EAAgB5N,KAAK2N,YACrBE,EACF7N,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,KAAWjB,KAAK+M,aAAarH,QACxF1F,KAAK2N,YAAc3N,KAAK+M,aAAa9K,UAAU4L,EAAW7N,KAAK+N,QAAS/N,KAAKgO,SACzEhO,KAAK+M,aAAapL,QAAQiM,KAAmB5N,KAAK+M,aAAapL,QAAQ3B,KAAK2N,cAC9E3N,KAAKkO,yCAMTnP,OAAAgC,eACIoS,EAAAtT,UAAA,WAAQ,KADZ,WAC2B,OAAOG,KAAKmO,eACvC,SAAalN,GACXjB,KAAKmO,UAAYnO,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,IACxEjB,KAAKqT,eAAiBrT,KAAKsT,uBAAuBtT,KAAKmO,4CAKzDpP,OAAAgC,eACIoS,EAAAtT,UAAA,UAAO,KADX,WAC0B,OAAOG,KAAKsO,cACtC,SAAYrN,GACVjB,KAAKsO,SAAWtO,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,qCAKzElC,OAAAgC,eACIoS,EAAAtT,UAAA,UAAO,KADX,WAC0B,OAAOG,KAAKuO,cACtC,SAAYtN,GACVjB,KAAKuO,SAAWvO,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,qCAkDzEkS,EAAAtT,UAAA2O,mBAAA,WACExO,KAAKkO,QACLlO,KAAKmL,oBAIPgI,EAAAtT,UAAA0T,eAAA,SAAejT,OACPkT,EACAxT,KAAK+M,aAAaxH,WAAWvF,KAAK+M,aAAapL,QAAQ3B,KAAK2O,YAAarO,EAAO,GAEtFN,KAAKoT,cAAcxI,KAAK4I,OAElBhD,EAAcxQ,KAAK+M,aAAa3H,kBAAkBoO,GAExDxT,KAAKiN,eAAerC,KAAK5K,KAAK+M,aAAaxH,WACvCvF,KAAK+M,aAAapL,QAAQ3B,KAAK2O,YAAarO,EAC5CwF,KAAK3D,IAAInC,KAAK+M,aAAalL,QAAQ7B,KAAK2O,YAAa6B,MAI3D2C,EAAAtT,UAAAiP,2BAAA,SAA2BC,OAKnBnB,EAAgB5N,KAAK2N,YACrBqB,EAAQhP,KAAKiP,SAEnB,OAAQF,EAAMG,SACZ,KAAKC,EAAAA,WACHnP,KAAK2O,WAAa3O,KAAK+M,aAAa7G,kBAAkBlG,KAAK2N,YAAaqB,EAAQ,GAAK,GACrF,MACF,KAAKI,EAAAA,YACHpP,KAAK2O,WAAa3O,KAAK+M,aAAa7G,kBAAkBlG,KAAK2N,YAAaqB,GAAS,EAAI,GACrF,MACF,KAAKK,EAAAA,SACHrP,KAAK2O,WAAa3O,KAAK+M,aAAa7G,kBAAkBlG,KAAK2N,aAAc3N,KAAKoN,UAC9E,MACF,KAAKkC,EAAAA,WACHtP,KAAK2O,WAAa3O,KAAK+M,aAAa7G,kBAAkBlG,KAAK2N,YAAa3N,KAAKoN,UAC7E,MACF,KAAKmC,EAAAA,KACHvP,KAAK2O,WAAa3O,KAAK+M,aAAa7G,kBAAkBlG,KAAK2N,aACtD3N,KAAK+M,aAAanL,SAAS5B,KAAK2N,cACrC,MACF,KAAK6B,EAAAA,IACHxP,KAAK2O,WAAa3O,KAAK+M,aAAa7G,kBAAkBlG,KAAK2N,YACvD,GAAK3N,KAAK+M,aAAanL,SAAS5B,KAAK2N,cACzC,MACF,KAAK8B,EAAAA,QACHzP,KAAK2O,WACD3O,KAAK+M,aAAa/G,iBAAiBhG,KAAK2N,YAAaoB,EAAMW,QAAU,IAAM,GAC/E,MACF,KAAKC,EAAAA,UACH3P,KAAK2O,WACD3O,KAAK+M,aAAa/G,iBAAiBhG,KAAK2N,YAAaoB,EAAMW,OAAS,GAAK,GAC7E,MACF,KAAKE,EAAAA,MACH5P,KAAKuT,eAAevT,KAAK+M,aAAanL,SAAS5B,KAAK2N,cACpD,MACF,QAEE,OAGA3N,KAAK+M,aAAarL,YAAYkM,EAAe5N,KAAK2O,aACpD3O,KAAKmN,iBAAiBvC,KAAK5K,KAAK2O,YAGlC3O,KAAKmL,mBAEL4D,EAAMe,kBAIRqD,EAAAtT,UAAAqO,MAAA,WAAA,IAAA1K,EAAAxD,KACEA,KAAKqT,eAAiBrT,KAAKsT,uBAAuBtT,KAAK+P,UACvD/P,KAAKyT,YAAczT,KAAKsT,uBAAuBtT,KAAK+M,aAAarH,SACjE1F,KAAK0T,WAAa1T,KAAK+M,aAAa9H,YAAYjF,KAAK2O,gBAE/CgF,EAAa3T,KAAK+M,aAAa3I,cAAc,SACnDpE,KAAK4T,QAAU,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,KAAKpG,IAAG,SAACoF,GAAO,OAAAA,EAAIpF,IAAG,SAC5ElN,GAAS,OAAAkD,EAAKqQ,oBAAoBvT,EAAOqT,EAAWrT,QACxDN,KAAK6M,mBAAmByD,gBAIlB6C,EAAAtT,UAAAsL,iBAAR,WACEnL,KAAKuQ,gBAAgBpF,oBAOfgI,EAAAtT,UAAAyT,uBAAR,SAA+BpR,GAC7B,OAAOA,GAAQlC,KAAK+M,aAAapL,QAAQO,KAAUlC,KAAK+M,aAAapL,QAAQ3B,KAAK2O,YAC9E3O,KAAK+M,aAAanL,SAASM,GAAQ,MAIjCiR,EAAAtT,UAAAgU,oBAAR,SAA4BvT,EAAewT,OACnChK,EAAY9J,KAAK+M,aAAapH,OAChC3F,KAAK+M,aAAaxH,WAAWvF,KAAK+M,aAAapL,QAAQ3B,KAAK2O,YAAarO,EAAO,GAChFN,KAAK8M,aAAa1M,QAAQM,oBAC9B,OAAO,IAAImQ,EACPvQ,EAAOwT,EAAWhK,EAAW9J,KAAK+T,mBAAmBzT,KAInD6S,EAAAtT,UAAAkU,mBAAR,SAA2BzT,OAEnBmS,EAAazS,KAAK+M,aAAapL,QAAQ3B,KAAK2O,YAElD,GAAIrO,MAAAA,GACAN,KAAKgU,4BAA4BvB,EAAYnS,IAC7CN,KAAKiU,6BAA6BxB,EAAYnS,GAChD,OAAO,EAGT,IAAKN,KAAK6P,WACR,OAAO,EAMT,QAAS3N,EAHYlC,KAAK+M,aAAaxH,WAAWkN,EAAYnS,EAAO,GAGvCN,KAAK+M,aAAanL,SAASM,KAAU5B,EAC9D4B,EAAOlC,KAAK+M,aAAa1G,gBAAgBnE,EAAM,GAClD,GAAIlC,KAAK6P,WAAW3N,GAClB,OAAO,EAIX,OAAO,GAODiR,EAAAtT,UAAAmU,4BAAR,SAAoC3T,EAAcC,GAChD,GAAIN,KAAKgO,QAAS,KACVkG,EAAUlU,KAAK+M,aAAapL,QAAQ3B,KAAKgO,SACzCmG,EAAWnU,KAAK+M,aAAanL,SAAS5B,KAAKgO,SAEjD,OAAO3N,EAAO6T,GAAY7T,IAAS6T,GAAW5T,EAAQ6T,EAGxD,OAAO,GAODhB,EAAAtT,UAAAoU,6BAAR,SAAqC5T,EAAcC,GACjD,GAAIN,KAAK+N,QAAS,KACVqG,EAAUpU,KAAK+M,aAAapL,QAAQ3B,KAAK+N,SACzCsG,EAAWrU,KAAK+M,aAAanL,SAAS5B,KAAK+N,SAEjD,OAAO1N,EAAO+T,GAAY/T,IAAS+T,GAAW9T,EAAQ+T,EAGxD,OAAO,GAODlB,EAAAtT,UAAAiO,oBAAR,SAA4BhH,GAC1B,OAAQ9G,KAAK+M,aAAa7L,eAAe4F,IAAQ9G,KAAK+M,aAAa5L,QAAQ2F,GAAQA,EAAM,MAInFqM,EAAAtT,UAAAoP,OAAR,WACE,OAAOjP,KAAKgN,MAA4B,QAApBhN,KAAKgN,KAAK/L,2BA9QjC4K,EAAAA,UAAS/D,KAAA,CAAC,CACTgE,SAAU,eACVC,SAAA,sdACAK,SAAU,aACVC,gBAAiBC,EAAAA,wBAAwBC,syBA9BzCwF,EAAAA,kDA0GapK,EAAAA,UAAQ,CAAAC,KAAIC,EAAAA,OAAMC,KAAA,CAACE,YAhGRrH,EAAaqR,WAAA,CAAA,CAAApK,KAiGxBD,EAAAA,kBAhHNsK,EAAAA,eAAcD,WAAA,CAAA,CAAApK,KAiHRD,EAAAA,kDAzEZ+E,EAAAA,wBAcAA,EAAAA,uBASAA,EAAAA,uBAQAA,EAAAA,0BAQAA,EAAAA,8BAGAC,EAAAA,8BAGAA,EAAAA,iCAGAA,EAAAA,gCAGAuF,EAAAA,UAASpK,KAAA,CAACkC,EAAyB,CAAEmI,QAAQ,OAoNhDgB,EAhRA;;;;;;;;;ICOAmB,EAAA,WAgIE,SAAAA,EAAoBC,EACYxH,EACyBD,EAC7C0H,GAEV,GALkBxU,KAAAuU,MAAAA,EACYvU,KAAA+M,aAAAA,EACyB/M,KAAA8M,aAAAA,EA5GhD9M,KAAAyU,UAA6C,QA8BnCzU,KAAAiN,eAAkC,IAAIxC,EAAAA,aAMtCzK,KAAAqS,aAAgC,IAAI5H,EAAAA,aAMpCzK,KAAAoT,cAAiC,IAAI3I,EAAAA,aAGrCzK,KAAAkN,eAAqC,IAAIzC,EAAAA,cAkErDzK,KAAK+M,aACR,MAAMjE,EAA2B,eAGnC,IAAK9I,KAAK8M,aACR,MAAMhE,EAA2B,oBAGnC9I,KAAK0U,aAAeH,EAAMtL,QAAQwC,UAAS,WAAO,OAAA+I,EAAkBlE,iBA0GxE,OAzOEvR,OAAAgC,eACIuT,EAAAzU,UAAA,UAAO,KADX,WAC0B,OAAOG,KAAK2U,cACtC,SAAY1T,GACVjB,KAAK2U,SAAW3U,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,qCAQzElC,OAAAgC,eACIuT,EAAAzU,UAAA,WAAQ,KADZ,WAC2B,OAAOG,KAAKmO,eACvC,SAAalN,GACXjB,KAAKmO,UAAYnO,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,qCAK1ElC,OAAAgC,eACIuT,EAAAzU,UAAA,UAAO,KADX,WAC0B,OAAOG,KAAKsO,cACtC,SAAYrN,GACVjB,KAAKsO,SAAWtO,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,qCAKzElC,OAAAgC,eACIuT,EAAAzU,UAAA,UAAO,KADX,WAC0B,OAAOG,KAAKuO,cACtC,SAAYtN,GACVjB,KAAKuO,SAAWvO,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,qCAoCzElC,OAAAgC,eAAIuT,EAAAzU,UAAA,cAAW,KAAf,WAAuB,OAAOG,KAAK4U,wBACnC,SAAgB3T,GACdjB,KAAK4U,mBAAqB5U,KAAK+M,aAAa9K,UAAUhB,EAAOjB,KAAK+N,QAAS/N,KAAKgO,0CAQlFjP,OAAAgC,eAAIuT,EAAAzU,UAAA,oBAAiB,KAArB,WACE,GAA0B,UAAtBG,KAAK6U,aACP,OAAO7U,KAAK+M,aAAapH,OAAO3F,KAAK2N,YAAa3N,KAAK8M,aAAa1M,QAAQI,gBAE9E,GAA0B,SAAtBR,KAAK6U,aACP,OAAO7U,KAAK+M,aAAa9H,YAAYjF,KAAK2N,iBAEtC8E,EAAazS,KAAK+M,aAAapL,QAAQ3B,KAAK2N,aAKlD,OAJwB3N,KAAK+M,aAAa9H,YACtCjF,KAAK+M,aAAaxH,WAAWkN,EAAaA,EAzG7B,GAyGwD,EAAG,IAGnD,MAFFzS,KAAK+M,aAAa9H,YACrCjF,KAAK+M,aAAaxH,WAAWkN,EA3GhB,GA2G4C,EAAIA,EA3GhD,GA2G2E,EAAG,qCAIjG1T,OAAAgC,eAAIuT,EAAAzU,UAAA,qBAAkB,KAAtB,WACE,MAA6B,UAAtBG,KAAK6U,aACR7U,KAAKuU,MAAM3K,2BAA6B5J,KAAKuU,MAAM5K,wDAIzD5K,OAAAgC,eAAIuT,EAAAzU,UAAA,mBAAgB,KAApB,WACE,MAAO,CACLS,MAASN,KAAKuU,MAAMlL,eACpBhJ,KAAQL,KAAKuU,MAAMhL,cACnBuL,aAAc9U,KAAKuU,MAAM9K,oBACzBzJ,KAAK6U,+CAIT9V,OAAAgC,eAAIuT,EAAAzU,UAAA,mBAAgB,KAApB,WACE,MAAO,CACLS,MAASN,KAAKuU,MAAMjL,eACpBjJ,KAAQL,KAAKuU,MAAM/K,cACnBsL,aAAc9U,KAAKuU,MAAM7K,oBACzB1J,KAAK6U,+CAmBTP,EAAAzU,UAAA2O,mBAAA,WACExO,KAAK2N,YAAc3N,KAAK+U,SAAW/U,KAAK+M,aAAarH,QACrD1F,KAAK6U,aAAe7U,KAAKyU,WAG3BH,EAAAzU,UAAAmV,YAAA,WACEhV,KAAK0U,aAAaO,eAGpBX,EAAAzU,UAAAqV,YAAA,SAAYjM,OACJkM,EAASlM,EAAQ8E,SAAW9E,EAAQ+E,SAAW/E,EAAQ4G,WAE7D,GAAIsF,IAAWA,EAAOC,YAAa,KAC3BC,EAAOrV,KAAKsV,WAAatV,KAAKuV,UAAYvV,KAAKwV,cAEjDH,GACFA,EAAKnH,UAMXoG,EAAAzU,UAAA4O,cAAA,SAAcvM,GACPlC,KAAK+M,aAAa1L,SAASa,EAAMlC,KAAK+P,WACzC/P,KAAKiN,eAAerC,KAAK1I,IAK7BoS,EAAAzU,UAAA4V,6BAAA,SAA6BC,GAC3B1V,KAAKqS,aAAazH,KAAK8K,IAIzBpB,EAAAzU,UAAA8V,yBAAA,SAAyBC,GACvB5V,KAAKoT,cAAcxI,KAAKgL,IAG1BtB,EAAAzU,UAAAgW,cAAA,WACE7V,KAAKkN,eAAetC,QAItB0J,EAAAzU,UAAAiW,gBAAA,SAAgB5T,EAASmT,GACvBrV,KAAK2N,YAAczL,EACnBlC,KAAK6U,aAAeQ,GAItBf,EAAAzU,UAAAkW,mBAAA,WACE/V,KAAK6U,aAAqC,UAAtB7U,KAAK6U,aAA2B,aAAe,SAIrEP,EAAAzU,UAAAmW,iBAAA,WACEhW,KAAK2N,YAAoC,UAAtB3N,KAAK6U,aACpB7U,KAAK+M,aAAa7G,kBAAkBlG,KAAK2N,aAAc,GACvD3N,KAAK+M,aAAa/G,iBACdhG,KAAK2N,YAAmC,SAAtB3N,KAAK6U,cAA2B,GAhNzC,KAoNnBP,EAAAzU,UAAAoW,aAAA,WACEjW,KAAK2N,YAAoC,UAAtB3N,KAAK6U,aACpB7U,KAAK+M,aAAa7G,kBAAkBlG,KAAK2N,YAAa,GACtD3N,KAAK+M,aAAa/G,iBACdhG,KAAK2N,YAAmC,SAAtB3N,KAAK6U,aAA0B,EAxNxC,KA4NnBP,EAAAzU,UAAAqW,iBAAA,WACE,OAAKlW,KAAK+N,WAGF/N,KAAK+N,UAAY/N,KAAKmW,YAAYnW,KAAK2N,YAAa3N,KAAK+N,WAInEuG,EAAAzU,UAAAuW,aAAA,WACE,OAAQpW,KAAKgO,UAAYhO,KAAKmW,YAAYnW,KAAK2N,YAAa3N,KAAKgO,UAI3DsG,EAAAzU,UAAAsW,YAAR,SAAoBE,EAAUC,GAC5B,MAA0B,UAAtBtW,KAAK6U,aACA7U,KAAK+M,aAAapL,QAAQ0U,KAAWrW,KAAK+M,aAAapL,QAAQ2U,IAClEtW,KAAK+M,aAAanL,SAASyU,KAAWrW,KAAK+M,aAAanL,SAAS0U,GAE7C,SAAtBtW,KAAK6U,aACA7U,KAAK+M,aAAapL,QAAQ0U,KAAWrW,KAAK+M,aAAapL,QAAQ2U,GAGjExQ,KAAKwM,MAAMtS,KAAK+M,aAAapL,QAAQ0U,GAlP3B,MAmPbvQ,KAAKwM,MAAMtS,KAAK+M,aAAapL,QAAQ2U,GAnPxB,KA0PXhC,EAAAzU,UAAAiO,oBAAR,SAA4BhH,GAC1B,OAAQ9G,KAAK+M,aAAa7L,eAAe4F,IAAQ9G,KAAK+M,aAAa5L,QAAQ2F,GAAQA,EAAM,0BArP5F+E,EAAAA,UAAS/D,KAAA,CAAC,CACTgE,SAAU,cACVC,SAAA,4+DAEAC,KAAM,CACJC,MAAS,eAEXG,SAAU,aACVC,gBAAiBC,EAAAA,wBAAwBC,67EA3BlCvD,SAFiBrI,EAAaqR,WAAA,CAAA,CAAApK,KAsJxBD,EAAAA,2CACAA,EAAAA,UAAQ,CAAAC,KAAIC,EAAAA,OAAMC,KAAA,CAACE,YArKhC+J,EAAAA,sDAiDCrF,EAAAA,yBAQAA,EAAAA,wBAGAA,EAAAA,uBAQAA,EAAAA,uBAQAA,EAAAA,0BAQAA,EAAAA,8BAGAC,EAAAA,6BAMAA,EAAAA,8BAMAA,EAAAA,+BAGAA,EAAAA,0BAGAuF,EAAAA,UAASpK,KAAA,CAAC8E,EAAsB,CAAEuF,QAAQ,sBAE1CD,EAAAA,UAASpK,KAAA,CAACqL,EAAqB,CAAEhB,QAAQ,2BAGzCD,EAAAA,UAASpK,KAAA,CAACsK,EAA0B,CAAED,QAAQ,OA4KjDmC,EAvPA,OCWIiC,EAAgB,EAGPC,EACT,IAAIlU,EAAAA,eAAqC,iCAG7C,SAAgBmU,EAA+CC,GAE7D,OAAA,WAAa,OAAAA,EAAQC,iBAAiBC,cAIxC,IAAaC,EAAyC,CACpD3O,QAASsO,EACTM,KAAM,CAACC,EAAAA,SACPC,WAAYP,GAQd,IAAaQ,EACX,IAAI3U,EAAAA,eAAyC,8BAS/C4U,EAAA,WAeE,SAAAA,EACS3C,EACA4C,EAAgCjN,GADhClK,KAAAuU,MAAAA,EACAvU,KAAAmX,WAAAA,EAAgCnX,KAAAkK,QAAAA,EAc3C,OAZEgN,EAAArX,UAAA2O,mBAAA,WACExO,KAAKmL,oBAIC+L,EAAArX,UAAAsL,iBAAR,WAAA,IAAA3H,EAAAxD,KACEA,KAAKkK,QAAQkB,kBAAiB,WAC5B5H,EAAK0G,QAAQmB,SAASC,eAAeC,KAAKC,EAAAA,KAAK,IAAIC,UAAS,WAC1DjI,EAAK2T,WAAWzL,cAAcC,cAAc,4BAA4BC,iCA3B/EC,EAAAA,UAAS/D,KAAA,CAAC,CACTgE,SAAU,wBACVC,SAAA,utBAEAC,KAAM,CACJC,MAAS,yBAEXG,SAAU,sBACVC,gBAAiBC,EAAAA,wBAAwBC,0iCA3FlCvD,SA4BPwD,EAAAA,kBAKAC,EAAAA,6CA+DCyF,EAAAA,UAASpK,KAAA,CAACwM,EAAqB,CAAEnC,QAAQ,OAkB5C+E,EA/BA,GAqCA,IAAAE,EAAA,WA8HE,SAAAA,EAAoBC,EACAnN,EACAoN,EACuCC,EAC3BxK,EACAC,EACkBwK,GAEhD,GARkBxX,KAAAqX,SAAAA,EACArX,KAAAkK,QAAAA,EACAlK,KAAAsX,kBAAAA,EACuCtX,KAAAuX,gBAAAA,EAC3BvX,KAAA+M,aAAAA,EACA/M,KAAAgN,KAAAA,EACkBhN,KAAAwX,UAAAA,EAhHzCxX,KAAAyU,UAA6C,QAmBtDzU,KAAAyX,gBAAmC,IAAIhN,EAAAA,aAMpBzK,KAAAqS,aAAgC,IAAI5H,EAAAA,aAMpCzK,KAAAoT,cAAiC,IAAI3I,EAAAA,aAMtCzK,KAAA0X,aAAmC,IAAIjN,EAAAA,aAGvCzK,KAAA2X,aAAmC,IAAIlN,EAAAA,aAMjDzK,KAAA4X,SAAU,EAMlB5X,KAAA6X,GAAa,iBAAiBtB,IAQtBvW,KAAA8X,eAA2B,KAiC3B9X,KAAA+X,0BAAgD,KAGhD/X,KAAAgY,mBAAqBC,EAAAA,aAAaC,MAQjClY,KAAAmY,gBAAkB,IAAIrX,EAAAA,SAUxBd,KAAK+M,aACR,MAAMjE,EAA2B,eA2NvC,OA1VE/J,OAAAgC,eACIqW,EAAAvX,UAAA,UAAO,KADX,WAIE,OAAOG,KAAK2U,WAAa3U,KAAKoY,iBAAmBpY,KAAKoY,iBAAiBnX,MAAQ,WAEjF,SAAYA,GACVjB,KAAK2U,SAAW3U,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,qCAQzElC,OAAAgC,eACIqW,EAAAvX,UAAA,WAAQ,KADZ,WAEE,YAA0BwY,IAAnBrY,KAAKsY,WAA2BtY,KAAKoY,iBACxCpY,KAAKoY,iBAAiBG,WAAavY,KAAKsY,eAE9C,SAAarX,OACLuX,EAAWC,EAAAA,sBAAsBxX,GAEnCuX,IAAaxY,KAAKsY,YACpBtY,KAAKsY,UAAYE,EACjBxY,KAAKmY,gBAAgBpW,KAAKyW,qCA8B9BzZ,OAAAgC,eACIqW,EAAAvX,UAAA,SAAM,KADV,WACwB,OAAOG,KAAK4X,aACpC,SAAW3W,GAAkBA,EAAQjB,KAAK0Y,OAAS1Y,KAAK2Y,yCAaxD5Z,OAAAgC,eAAIqW,EAAAvX,UAAA,WAAQ,KAAZ,WAA2B,OAAOG,KAAK8X,oBACvC,SAAa7W,GAAmBjB,KAAK8X,eAAiB7W,mCAOtDlC,OAAAgC,eAAIqW,EAAAvX,UAAA,UAAO,KAAX,WACE,OAAOG,KAAKoY,kBAAoBpY,KAAKoY,iBAAiBjW,qCAOxDpD,OAAAgC,eAAIqW,EAAAvX,UAAA,UAAO,KAAX,WACE,OAAOG,KAAKoY,kBAAoBpY,KAAKoY,iBAAiBhW,qCAIxDrD,OAAAgC,eAAIqW,EAAAvX,UAAA,aAAU,KAAd,WACE,OAAOG,KAAKoY,kBAAoBpY,KAAKoY,iBAAiBQ,6CAuCxDxB,EAAAvX,UAAAmV,YAAA,WACEhV,KAAK2Y,QACL3Y,KAAKgY,mBAAmB/C,cACxBjV,KAAKmY,gBAAgBU,WAEjB7Y,KAAK8Y,YACP9Y,KAAK8Y,UAAUC,UACf/Y,KAAKgZ,mBAAqB,OAQ9B5B,EAAAvX,UAAAoZ,OAAA,SAAO/W,OACCgX,EAAWlZ,KAAK+P,SACtB/P,KAAK+P,SAAW7N,EACXlC,KAAK+M,aAAa1L,SAAS6X,EAAUlZ,KAAK+P,WAC7C/P,KAAKyX,gBAAgB7M,KAAK1I,IAQ9BkV,EAAAvX,UAAAsZ,WAAA,SAAWzD,GACT1V,KAAKqS,aAAazH,KAAK8K,IAOzB0B,EAAAvX,UAAAuZ,YAAA,SAAYxD,GACV5V,KAAKoT,cAAcxI,KAAKgL,IAQ1BwB,EAAAvX,UAAAwZ,cAAA,SAAcC,GAAd,IAAA9V,EAAAxD,KACE,GAAIA,KAAKoY,iBACP,MAAM5S,MAAM,8DAEdxF,KAAKoY,iBAAmBkB,EACxBtZ,KAAKgY,mBACDhY,KAAKoY,iBAAiBmB,aAAa9N,UAAS,SAAExK,GAAoB,OAAAuC,EAAKuM,SAAW9O,KAOxFmW,EAAAvX,UAAA2Z,eAAA,SAAeC,GACb,GAAIzZ,KAAK0Z,cACP,MAAMlU,MAAM,sEAEdxF,KAAK0Z,cAAgBD,GAOvBrC,EAAAvX,UAAA6Y,KAAA,WACE,IAAI1Y,KAAK4X,UAAW5X,KAAKuY,SAAzB,CAGA,IAAKvY,KAAKoY,iBACR,MAAM5S,MAAM,+DAEVxF,KAAKwX,YACPxX,KAAK+X,0BAA4B/X,KAAKwX,UAAUmC,eAGlD3Z,KAAK4Z,eAEL5Z,KAAK4X,SAAU,EACf5X,KAAK0X,aAAa9M,SAOpBwM,EAAAvX,UAAA8Y,MAAA,WAAA,IAAAnV,EAAAxD,KACE,GAAKA,KAAK4X,QAAV,CAII5X,KAAK8Y,WAAa9Y,KAAK8Y,UAAUe,eACnC7Z,KAAK8Y,UAAUgB,SAGb9Z,KAAK+Z,iBAAmB/Z,KAAK+Z,gBAAgBC,YAC/Cha,KAAK+Z,gBAAgBD,aAGjBG,EAAa,WAGbzW,EAAKoU,UACPpU,EAAKoU,SAAU,EACfpU,EAAKmU,aAAa/M,OAClBpH,EAAKuU,0BAA4B,OAIjC/X,KAAK+X,2BACyC,mBAAzC/X,KAAK+X,0BAA0BnM,OAMtC5L,KAAK+X,0BAA0BnM,QAC/BsO,WAAWD,IAEXA,IAIEja,KAAK0Z,eAAiB1Z,KAAK0Z,cAAcS,SAAW,GACtDna,KAAKoY,iBAAiBgC,WAKlBhD,EAAAvX,UAAA+Z,aAAR,WAAA,IAAApW,EAAAxD,KACOA,KAAK+Z,kBACR/Z,KAAK+Z,gBAAkB,IAAIM,EAAAA,gBAAiDnD,EACRlX,KAAKsX,oBAGtEtX,KAAK8Y,WACR9Y,KAAKsa,eAGFta,KAAK8Y,UAAUe,gBAClB7Z,KAAKgZ,mBAAqBhZ,KAAK8Y,UAAUyB,OAAOva,KAAK+Z,iBACrD/Z,KAAKgZ,mBAAmBwB,SAASC,WAAaza,KAG9CA,KAAKkK,QAAQmB,SAASC,eAAeC,KAAKC,EAAAA,KAAK,IAAIC,UAAS,WAC1DjI,EAAKsV,UAAU4B,qBAMbtD,EAAAvX,UAAAya,aAAR,WAAA,IAAA9W,EAAAxD,KACQ2a,EAAgB,IAAIC,EAAAA,cAAc,CACtCC,iBAAkB7a,KAAK8a,+BACvBC,aAAa,EACbC,cAAe,kCACfC,UAAWjb,KAAKgN,KAAOhN,KAAKgN,KAAK/L,MAAQ,MACzCia,eAAgBlb,KAAKuX,kBACrB4D,WAAY,wBAGdnb,KAAK8Y,UAAY9Y,KAAKqX,SAAStT,OAAO4W,GAEtCS,EAAAA,MACEpb,KAAK8Y,UAAUuC,gBACfrb,KAAK8Y,UAAUwC,gBAAgB/P,KAAKgQ,EAAAA,OAAM,SAACxM,GAAS,OAAAA,EAAMG,UAAYsM,EAAAA,WACtE/P,UAAS,WAAO,OAAAjI,EAAKmV,WAIjBvB,EAAAvX,UAAAib,6BAAR,WACE,OAAO9a,KAAKqX,SAASoE,WAClBC,oBAAoB1b,KAAKoY,iBAAiBuD,6BAC1CC,sBAAsB,0BACtBC,wBAAuB,GACvBC,mBAAmB,GACnBC,qBACAC,cAAc,CACb,CACEC,QAAS,QACTC,QAAS,SACTC,SAAU,QACVC,SAAU,OAEZ,CACEH,QAAS,QACTC,QAAS,MACTC,SAAU,QACVC,SAAU,UAEZ,CACEH,QAAS,MACTC,QAAS,SACTC,SAAU,MACVC,SAAU,OAEZ,CACEH,QAAS,MACTC,QAAS,MACTC,SAAU,MACVC,SAAU,aASVhF,EAAAvX,UAAAiO,oBAAR,SAA4BhH,GAC1B,OAAQ9G,KAAK+M,aAAa7L,eAAe4F,IAAQ9G,KAAK+M,aAAa5L,QAAQ2F,GAAQA,EAAM,0BAhW5F+E,EAAAA,UAAS/D,KAAA,CAAC,CACTgE,SAAU,gBACVC,SAAU,GACVK,SAAU,eACVC,gBAAiBC,EAAAA,wBAAwBC,oDA9GzCwK,EAAAA,eAmBAtK,EAAAA,cAKA4P,EAAAA,iDAmNaxU,EAAAA,OAAMC,KAAA,CAAC0O,YA7Mb7V,EAAaqR,WAAA,CAAA,CAAApK,KA8MPD,EAAAA,kBAhPPsK,EAAAA,eAAcD,WAAA,CAAA,CAAApK,KAiPPD,EAAAA,2CACAA,EAAAA,UAAQ,CAAAC,KAAIC,EAAAA,OAAMC,KAAA,CAACwU,EAAAA,gDA5H/B5P,EAAAA,yBAYAA,EAAAA,wBAGAA,EAAAA,4BAsBAC,EAAAA,8BAMAA,EAAAA,2BAGAD,EAAAA,4BAGAC,EAAAA,OAAM7E,KAAA,CAAC,gCAGP6E,EAAAA,OAAM7E,KAAA,CAAC,0BAGP4E,EAAAA,SAmSH0K,EAlWA,GCjHA,iBAAA,SAAAmF,KA+CA,OA5CSA,EAAArc,MAAP,SACEsc,EACAC,EACAnD,EACAoD,EACAC,GACA,YADA,IAAAA,IAAAA,EAAA,MACA,eACQC,EAAcJ,EAAYtc,MAAMoZ,EAAMrY,MAAO0b,GAAqBF,EAAYvc,MAAMC,UAAWuc,GAErG,OADeE,GAAeJ,EAAYrb,QAAQyb,GACnC,KAAO,CAACC,iBAAoB,CAACC,KAAQxD,MAKjDiD,EAAApa,IAAP,SAAcqa,EAA+Bra,GAC3C,OAAA,SAAQ4a,OACAC,EAAeC,EAAmBT,EAAaA,EAAYxb,YAAY+b,EAAQ9b,QACrF,OAASkB,IAAQ6a,GACbR,EAAY9a,YAAYS,EAAK6a,IAAiB,EAC9C,KAAO,CAACE,eAAkB,CAAC/a,IAAOA,EAAKgb,OAAUH,MAKlDT,EAAAna,IAAP,SAAcoa,EAA+Bpa,GAC3C,OAAA,SAAQ2a,OACFC,EAAeC,EAAmBT,EAAaA,EAAYxb,YAAY+b,EAAQ9b,QACrF,OAASmB,IAAQ4a,GACbR,EAAY9a,YAAYU,EAAK4a,IAAiB,EAC9C,KAAO,CAACI,eAAkB,CAAChb,IAAOA,EAAK+a,OAAUH,MAKhDT,EAAAhB,OAAP,SACIiB,EACA3M,GAEF,OAAA,SAAQkN,OACAC,EAAeC,EAAmBT,EAAaA,EAAYxb,YAAY+b,EAAQ9b,QACrF,OAAQ4O,GAAemN,IAAgBnN,EAAWmN,GACvC,CAACK,mBAAqB,GAA7B,OAGVd,KAEA,SAASU,EAAsBT,EAA+B1V,GAC5D,OAAQ0V,EAAYtb,eAAe4F,IAAQ0V,EAAYrb,QAAQ2F,GAAQA,EAAM;;;;;;;;OCf/E,IAAawW,EAAmC,CAC9CpV,QAASqV,EAAAA,kBACTpV,YAAaqV,EAAAA,WAAU,WAAO,OAAAC,KAC9BC,OAAO,GAGIC,EAA+B,CAC1CzV,QAAS0V,EAAAA,cACTzV,YAAaqV,EAAAA,WAAU,WAAO,OAAAC,KAC9BC,OAAO,KAYP,SAESG,EAEAC,GAFA9d,KAAA6d,OAAAA,EAEA7d,KAAA8d,cAAAA,EACP9d,KAAKiB,MAAQjB,KAAK6d,OAAO5c,OAO7B,IAAAwc,GAAA,WAsKE,SAAAA,EACYxT,EACW8C,EAC0BD,EACzBiR,GAJxB,IAAAva,EAAAxD,KAKE,GAJUA,KAAAiK,YAAAA,EACWjK,KAAA+M,aAAAA,EAC0B/M,KAAA8M,aAAAA,EACzB9M,KAAA+d,WAAAA,EAjJjB/d,KAAAge,qBAAuB,KAkEtBhe,KAAAie,SAAmB,EA0CRje,KAAAke,WACf,IAAIzT,EAAAA,aAGWzK,KAAAG,UACf,IAAIsK,EAAAA,aAGRzK,KAAAuZ,aAAe,IAAI9O,EAAAA,aAGnBzK,KAAAmY,gBAAkB,IAAI1N,EAAAA,aAEtBzK,KAAAme,WAAU,aAEFne,KAAAoe,aAAY,aAEZpe,KAAAqe,mBAAkB,aAElBre,KAAAse,wBAA0BrG,EAAAA,aAAaC,MAEvClY,KAAAue,oBAAsBtG,EAAAA,aAAaC,OAiBpClY,KAAK+M,aACR,MAAMjE,EAA2B,eAEnC,IAAK9I,KAAK8M,aACR,MAAMhE,EAA2B,mBAInC9I,KAAKue,oBAAsBxR,EAAayR,cAAc/S,UAAS,WAC7DjI,EAAKvC,MAAQuC,EAAKvC,QA8IxB,OAtSElC,OAAAgC,eACI0c,EAAA5d,UAAA,aAAU,KADd,SACeoB,GACbjB,KAAKye,mBAAmBxd,oCAIlBwc,EAAA5d,UAAA4e,mBAAR,SAA2Bxd,GACrBA,IACFjB,KAAK0e,YAAczd,EACnBjB,KAAK0e,YAAYrF,cAAcrZ,QAKnCjB,OAAAgC,eACI0c,EAAA5d,UAAA,kBAAe,KADnB,SACoBoB,GAClBjB,KAAK4Y,YAAc3X,EACnBjB,KAAKqe,sDAMPtf,OAAAgC,eACI0c,EAAA5d,UAAA,QAAK,KADT,WACwB,OAAOG,KAAK2e,YACpC,SAAU1d,GACRA,EAAQjB,KAAK+M,aAAa/L,YAAYC,GACtCA,EAAQjB,KAAK8N,oBAAoB7M,OAC3B2d,EAAU5e,KAAKiB,MACrBjB,KAAK2e,OAAS1d,EACdjB,KAAK6e,aAAa7e,KAAKiB,OAClBjB,KAAK+M,aAAa1L,SAASud,EAAS3d,IACvCjB,KAAKuZ,aAAa3O,KAAK3J,oCAM3BlC,OAAAgC,eACI0c,EAAA5d,UAAA,MAAG,KADP,WACsB,OAAOG,KAAK8e,UAClC,SAAQ7d,GACNjB,KAAK8e,KAAO9e,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,IACnEjB,KAAKqe,sDAKPtf,OAAAgC,eACI0c,EAAA5d,UAAA,MAAG,KADP,WACsB,OAAOG,KAAK+e,UAClC,SAAQ9d,GACNjB,KAAK+e,KAAO/e,KAAK8N,oBAAoB9N,KAAK+M,aAAa/L,YAAYC,IACnEjB,KAAKqe,sDAKPtf,OAAAgC,eACI0c,EAAA5d,UAAA,SAAM,KADV,WACe,OAAOG,KAAKie,aAC3B,SAAWhd,GACTjB,KAAKie,QAAUxF,EAAAA,sBAAsBxX,GAErCjB,KAAKgf,SAAShf,KAAKiK,YAAYyB,cAAczK,wCAK/ClC,OAAAgC,eACI0c,EAAA5d,UAAA,cAAW,KADf,WACoB,OAAOG,KAAKif,kBAChC,SAAgBhe,GACdjB,KAAKif,aAAehe,EAEpBjB,KAAKgf,SAAShf,KAAKiK,YAAYyB,cAAczK,wCAK/ClC,OAAAgC,eACI0c,EAAA5d,UAAA,gBAAa,KADjB,WACsB,OAAOG,KAAKkf,oBAClC,SAAkBje,GAChBjB,KAAKkf,eAAiBje,EACtBjB,KAAK6e,aAAa7e,KAAKiB,wCAKzBlC,OAAAgC,eACI0c,EAAA5d,UAAA,WAAQ,KADZ,WAC0B,QAASG,KAAKsY,eACxC,SAAarX,OACLuX,EAAWC,EAAAA,sBAAsBxX,GAEnCjB,KAAKsY,YAAcE,IACrBxY,KAAKsY,UAAYE,EACjBxY,KAAKmY,gBAAgBvN,KAAK4N,IAGxBA,GAIFxY,KAAKiK,YAAYyB,cAAcyT,wCAmC5B1B,EAAA5d,UAAA8F,OAAP,WACE3F,KAAKiB,MAAQjB,KAAKiB,OAqBpBwc,EAAA5d,UAAA2O,mBAAA,WAAA,IAAAhL,EAAAxD,KACMA,KAAK0e,cACP1e,KAAKse,wBACDte,KAAK0e,YAAYjH,gBAAgBhM,UAAS,SAAEsE,GAC1CvM,EAAKvC,MAAQ8O,EACbvM,EAAK4a,aAAarO,GAClBvM,EAAK2a,aACL3a,EAAKrD,UAAUyK,KAAK,IAAIwU,EAAuB5b,EAAMA,EAAKyG,YAAYyB,gBACtElI,EAAK0a,WAAWtT,KAAK,IAAIwU,EAAuB5b,EAAMA,EAAKyG,YAAYyB,oBAKjF+R,EAAA5d,UAAAmV,YAAA,WACEhV,KAAKse,wBAAwBrJ,cAC7BjV,KAAKue,oBAAoBtJ,cACzBjV,KAAKuZ,aAAaV,WAClB7Y,KAAKmY,gBAAgBU,YAIvB4E,EAAA5d,UAAAwf,0BAAA,SAA0BC,GACxBtf,KAAKqe,mBAAqBiB,GAI5B7B,EAAA5d,UAAA0f,SAAA,SAASC,OACDC,EAAYC,EAAAA,WAAWC,QAAQ3f,KAAK4f,iBAC1C,OAAOH,EAAYA,EAAUD,GAAK,MAQpC/B,EAAA5d,UAAAggB,6BAAA,WACE,OAAO7f,KAAK2b,6BASd8B,EAAA5d,UAAA8b,0BAAA,WAGE,OAAO3b,KAAK+d,WAAa/d,KAAK+d,WAAWpC,4BAA8B3b,KAAKiK,aAI9EwT,EAAA5d,UAAAigB,WAAA,SAAW7e,GACTjB,KAAKiB,MAAQA,GAIfwc,EAAA5d,UAAAkgB,iBAAA,SAAiBT,GACftf,KAAKoe,aAAekB,GAItB7B,EAAA5d,UAAAmgB,kBAAA,SAAkBV,GAChBtf,KAAKme,WAAamB,GAIpB7B,EAAA5d,UAAAogB,iBAAA,SAAiBC,GACflgB,KAAKuY,SAAW2H,GAGlBzC,EAAA5d,UAAAsgB,WAAA,SAAWpR,GACLA,EAAMW,QAAUX,EAAMG,UAAYI,EAAAA,aACpCtP,KAAK0e,YAAYhG,OACjB3J,EAAMe,mBAIV2N,EAAA5d,UAAAmf,SAAA,SAAS/d,OACHiB,EAAOlC,KAAK+M,aAAa7M,MAAMe,EAAOjB,KAAKif,cAAgBjf,KAAK8M,aAAa5M,MAAMC,UAAWH,KAAK0c,QACvGxa,EAAOlC,KAAK8N,oBAAoB5L,GAChClC,KAAK2e,OAASzc,EAGZlC,KAAKge,qBADH9b,EAC0BlC,KAAK+M,aAAapH,OAC5CzD,EACAlC,KAAKkf,gBAAkBlf,KAAK8M,aAAa1M,QAAQD,WAGvB,KAG9BH,KAAKoe,aAAalc,GAClBlC,KAAKuZ,aAAa3O,KAAK1I,GAEvBlC,KAAKG,UAAUyK,KAAK,IAAIwU,EAAuBpf,KAAMA,KAAKiK,YAAYyB,iBAGxE+R,EAAA5d,UAAAugB,UAAA,WACEpgB,KAAKke,WAAWtT,KAAK,IAAIwU,EAAuBpf,KAAMA,KAAKiK,YAAYyB,iBAGzE+R,EAAA5d,UAAAua,OAAA,WACEpa,KAAKiK,YAAYyB,cAAcE,SAGjC6R,EAAA5d,UAAAwgB,QAAA,WAEMrgB,KAAKiB,OACPjB,KAAK6e,aAAa7e,KAAKiB,OAEzBjB,KAAKme,cAIPV,EAAA5d,UAAA+f,cAAA,WACE,MAAO,CACLrD,EAAiBrc,MAAMF,KAAK+M,aAAc/M,KAAK8M,aAAc9M,KAAKiK,YAAYyB,cAAe1L,KAAKie,QAASje,KAAKif,cAChH1C,EAAiBpa,IAAInC,KAAK+M,aAAc/M,KAAKmC,KAC7Coa,EAAiBna,IAAIpC,KAAK+M,aAAc/M,KAAKoC,KAC7Cma,EAAiBhB,OAAOvb,KAAK+M,aAAc/M,KAAK4Y,eAK5C6E,EAAA5d,UAAAgf,aAAR,SAAqB5d,GACnBjB,KAAKiK,YAAYyB,cAAczK,MAAQA,EACrCjB,KAAK+M,aAAapH,OAAO1E,EAAOjB,KAAKkf,gBAAkBlf,KAAK8M,aAAa1M,QAAQD,WAAa,IAO1Fsd,EAAA5d,UAAAiO,oBAAR,SAA4BhH,GAC1B,OAAQ9G,KAAK+M,aAAa7L,eAAe4F,IAAQ9G,KAAK+M,aAAa5L,QAAQ2F,GAAQA,EAAM,0BAhU5FwZ,EAAAA,UAASxY,KAAA,CAAC,CACTgE,SAAU,qBACVrD,UAAW,CACT6U,EACAK,EAEA,CAAEzV,QAASqY,EAAAA,wBAAyBpY,YAAasV,IAEnDzR,KAAM,CACJwU,uBAAwB,OACxBC,mBAAoB,kDACpBC,aAAc,2CACdC,aAAc,2CACdC,aAAc,WACdC,UAAW,gCACXC,WAAY,cACZC,SAAU,YACVC,YAAa,sBAEf5U,SAAU,2DAvFVI,EAAAA,kBAqBwB7L,EAAaqR,WAAA,CAAA,CAAApK,KAuNhCD,EAAAA,2CACAA,EAAAA,UAAQ,CAAAC,KAAIC,EAAAA,OAAMC,KAAA,CAACE,YApPjBiZ,EAAAA,qBAAoBjP,WAAA,CAAA,CAAApK,KAqPtBD,EAAAA,kDA9IJ+E,EAAAA,MAAK5E,KAAA,CAAC,yCAcN4E,EAAAA,MAAK5E,KAAA,CAAC,oCASN4E,EAAAA,mBAeAA,EAAAA,MAAK5E,KAAA,CAAC,sBASN4E,EAAAA,MAAK5E,KAAA,CAAC,yBASN4E,EAAAA,MAAK5E,KAAA,CAAC,iCAUN4E,EAAAA,MAAK5E,KAAA,CAAC,wCAUN4E,EAAAA,MAAK5E,KAAA,CAAC,qCASN4E,EAAAA,0BAoBAC,EAAAA,0BAIAA,EAAAA,UAyLH8Q,EAlUA,GC/CA,IAAAyD,GAAA,WAAA,SAAAA,KAI8C,2BAJ7CZ,EAAAA,UAASxY,KAAA,CAAC,CACTgE,SAAU,+BAGkCoV,EAJ9C,GAMAC,GAAA,WA0DE,SAAAA,EAAmB5M,EAAiC1H,EACMuU,GADvCphB,KAAAuU,MAAAA,EAAiCvU,KAAA6M,mBAAAA,EACM7M,KAAAohB,gBAAAA,EA9ClDphB,KAAAqhB,cAAgBpJ,EAAAA,aAAaC,MAG7BlY,KAAAshB,UAAoB,EA4CpBthB,KAAKohB,iBAAmBphB,KAAKohB,gBAAgBG,qBAC/CvhB,KAAKshB,UAAYthB,KAAKohB,gBAAgBG,oBAyC9C,OAhFExiB,OAAAgC,eACIogB,EAAAthB,UAAA,aAAU,KAGd,WACE,OAAOG,KAAK0e,iBALd,SACezd,GACbjB,KAAKye,mBAAmBxd,oCAOlBkgB,EAAAthB,UAAA4e,mBAAR,SAA2Bxd,GACrBA,IACFjB,KAAK0e,YAAczd,EACnBjB,KAAK0e,YAAYlF,eAAexZ,QAKpCjB,OAAAgC,eACIogB,EAAAthB,UAAA,WAAQ,KADZ,WAEE,YAA0BwY,IAAnBrY,KAAKsY,UAA0BtY,KAAKya,WAAWlC,WAAavY,KAAKsY,eAE1E,SAAarX,GACXjB,KAAKsY,UAAYG,EAAAA,sBAAsBxX,oCAIzClC,OAAAgC,eACIogB,EAAAthB,UAAA,WAAQ,KAKZ,WACE,OAAOG,KAAKshB,eAPd,SACargB,GACPjB,KAAKshB,YAAcrgB,IACrBjB,KAAKshB,UAAYrgB,oCAcrBkgB,EAAAthB,UAAAqV,YAAA,SAAYjM,GACNA,EAAQwR,YACVza,KAAKwhB,sBAITL,EAAAthB,UAAAmV,YAAA,WACEhV,KAAKqhB,cAAcpM,eAGrBkM,EAAAthB,UAAA2O,mBAAA,WACExO,KAAKwhB,sBAGPL,EAAAthB,UAAA4hB,MAAA,SAAM1S,GACA/O,KAAKya,aAAeza,KAAKuY,WAC3BvY,KAAKya,WAAW/B,OAChB3J,EAAM2S,oBAIFP,EAAAthB,UAAA2hB,mBAAR,WAAA,IAAAhe,EAAAxD,KACQ2hB,EAAqB3hB,KAAKya,WAAaza,KAAKya,WAAWtC,gBAAkByJ,EAAAA,KACzEC,EAAgB7hB,KAAKya,YAAcza,KAAKya,WAAWrC,iBACrDpY,KAAKya,WAAWrC,iBAAiBD,gBAAkByJ,EAAAA,KACjDE,EAAoB9hB,KAAKya,WAC3BW,EAAAA,MAAMpb,KAAKya,WAAW/C,aAAc1X,KAAKya,WAAW9C,cACpDiK,EAAAA,KAEJ5hB,KAAKqhB,cAAcpM,cACnBjV,KAAKqhB,cAAgBjG,EAAAA,MACnBpb,KAAKuU,MAAMtL,QACX0Y,EACAE,EACAC,GACArW,UAAS,WAAO,OAAAjI,EAAKqJ,mBAAmByD,sCApG7CzE,EAAAA,UAAS/D,KAAA,CAAC,CACTgE,SAAU,uBACVC,SAAA,2zCAEAC,KAAM,CACJC,MAAS,uBACT8V,sCAAuC,kCACvCC,yCAA0C,YAE5C5V,SAAU,qBACVC,gBAAiBC,EAAAA,wBAAwBC,m9BApBlCvD,SAbP+I,EAAAA,kDAkFGpK,EAAAA,UAAQ,CAAAC,KAAIC,EAAAA,OAAMC,KAAA,CAACmP,6CAxCrBgL,EAAAA,aAAYna,KAAA,CAACoZ,GAAiC,CAAC/O,QAAQ,wBAGvDzF,EAAAA,MAAK5E,KAAA,CAAC,yBAiBN4E,EAAAA,wBASAA,EAAAA,SAsDHyU,EAtGA,GClCA,IAAAe,GAAA,WAqBA,SAAAA,KAwCiC,2BAxChC5Z,EAAAA,SAAQR,KAAA,CAAC,CACRS,QAAS,CACP4Z,EAAAA,aACAC,EAAAA,cACAC,EAAAA,WACAC,EAAAA,cAEF7Z,UAAW,CAETR,EACAe,EACA6N,GAEF0L,aAAc,CACZ9E,GACArG,EACA8J,GACAC,GACAjK,EACA5C,EACAtK,EACA4C,EACAwF,EACAe,GAEFqP,QAAS,CACP/E,GACArG,EACA8J,GACAC,GACA7M,EACAtK,EACA4C,EACAwF,EACAe,GAEFsP,gBAAiB,CACfvL,OAG6BgL,EA7DjC","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NxDateFormats} from './date-formats';\n\nexport const NX_NATIVE_DATE_FORMATS: NxDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","import { Observable ,  Subject } from 'rxjs';\nimport { NgModule } from '@angular/core';\n\n/** @docs-private */\nexport abstract class NxDateAdapter<D> {\n  protected locale = 'de-DE';\n  protected _localeChanges = new Subject<string>();\n  abstract toIso8601(date: D): string;\n  abstract format(date: D, displayFormat: any): string;\n  abstract parse(value: any, format: string|string[], strict: boolean): D | null;\n  abstract isValid(date: D): boolean;\n  abstract clone(date: D): D;\n  abstract isDateInstance(obj: any): boolean;\n  abstract invalid(): D;\n\n  abstract getYear(date: D): number;\n  abstract getMonth(date: D): number;\n  abstract getDate(date: D): number;\n\n  get localeChanges(): Observable<string> { return this._localeChanges; }\n\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      const firstValid = this.isValid(first);\n      const secondValid = this.isValid(second);\n\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid === secondValid;\n    }\n    return first === second;\n  }\n\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  setLocale(locale: string) {\n    this.locale = locale;\n    this._localeChanges.next(this.locale);\n  }\n\n  getLocale(): string {\n    return this.locale;\n  }\n\n  abstract getYearName(date: D): string;\n  abstract createDate(year: number, month: number, date: number): D;\n  abstract getNumDaysInMonth(date: D): number;\n  abstract getDateNames(): string[];\n  abstract getDayOfWeek(date: D): number;\n  abstract getFirstDayOfWeek(): number;\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n  abstract today(): D;\n  abstract addCalendarMonths(date: D, months: number): D;\n  abstract addCalendarYears(date: D, years: number): D;\n  abstract addCalendarDays(date: D, days: number): D;\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","import {InjectionToken, LOCALE_ID} from '@angular/core';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const NX_DATE_LOCALE = new InjectionToken<string>('nx-date-locale');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\n\nimport { NxDateAdapter } from './date-adapter';\nimport { NX_DATE_LOCALE } from './date-token';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl !== 'undefined';\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/**\n * @docs-private\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\n@Injectable()\nexport class NxNativeDateAdapter extends NxDateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(NX_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    const result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() !== month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value === 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NxNativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) !== ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        const date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/** @docs-private */\nexport type NxDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any\n  }\n};\n\nexport const NX_DATE_FORMATS = new InjectionToken<NxDateFormats>('nx-date-formats');\n","import { NX_NATIVE_DATE_FORMATS } from './native-date-formats';\nimport { NxNativeDateAdapter } from './native-date-adapter';\nimport { NX_DATE_FORMATS } from './date-formats';\nimport { NgModule } from '@angular/core';\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport { NxDateAdapter } from './date-adapter';\nimport { NX_DATE_LOCALE } from './date-token';\n\nimport { PlatformModule } from '@angular/cdk/platform';\n\nexport const NX_DATE_LOCALE_PROVIDER = {provide: NX_DATE_LOCALE, useExisting: LOCALE_ID};\n\nexport * from './date-token';\nexport * from './date-adapter';\nexport * from './date-formats';\n\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: NxDateAdapter, useClass: NxNativeDateAdapter},\n    NX_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: NX_DATE_FORMATS, useValue: NX_NATIVE_DATE_FORMATS}],\n})\nexport class NxNativeDateModule {}\n","export function createMissingDateImplError(provider: string) {\n  return Error(\n      `NxDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: NxNativeDateModule, NxMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","import { Subject } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class NxDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (visible in UI). */\n  /** @deprecated Use `switchToMultiYearViewLabel` instead\n  */\n  calendarHeader: string = 'Choose a date';\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `NxDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: NxNativeDateModule, NxMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class NxCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel?: string,\n              public enabled?: boolean) {}\n}\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: '[nx-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.scss'],\n  host: {\n    'class': 'nx-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'nxCalendarBody',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxCalendarBodyComponent {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: NxCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /** The items to display in the first row in the offset space. */\n  @Input() previousItems: NxCalendarCell[] = [];\n\n  /** The items to display in the last row in the offset space. */\n  @Input() followingItems: NxCalendarCell[][] = [[]];\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: NxCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  /** The number of blank cells to put at the end of the last filled row. */\n  get _lastRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[this.rows.length - 1].length ?\n        this.numCols - this.rows[this.rows.length - 1].length : 0;\n  }\n\n  /** The index of the last row. */\n  get _lastRowIndex(): number {\n    return this.rows && this.rows.length ?\n        this.rows.length - 1 : 0;\n  }\n\n  /**\n   * The following full rows to display and fill up the calendar.\n   */\n  get _followingRows(): NxCalendarCell[][] {\n    if (this.followingItems && this.followingItems.length) {\n      // if first row is not a full row => display them in offset space\n      if (this.followingItems[0].length < this.numCols) {\n        return this.followingItems.slice(1, this.followingItems.length);\n      }\n      return this.followingItems;\n    }\n\n    return [];\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber === this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.nx-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport { NxDateAdapter, NxDateFormats } from '../adapter/index';\nimport { NX_DATE_FORMATS } from './../adapter/date-formats';\nimport { NxCalendarBodyComponent, NxCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst DAYS_PER_WEEK = 7;\nconst TOTAL_DAYS_TO_DISPLAY = 6 * DAYS_PER_WEEK;\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'nx-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'nxMonthView',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['month-view.scss']\n})\nexport class NxMonthViewComponent<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(NxCalendarBodyComponent, { static: true }) _nxCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: NxCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  /** Number of days that should be displayed in one row. */\n  _numCols: number = 7;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(NX_DATE_FORMATS) private _dateFormats: NxDateFormats,\n              @Optional() public _dateAdapter: NxDateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    const weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate !== date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -this._numCols);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._numCols);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    const firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._nxCalendarBody._focusActiveCell();\n  }\n\n  /** Creates NxCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell === DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new NxCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) === this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) === this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /**\n   * The last days of the previous month that should be displayed\n   * in the first row of the calendar.\n   */\n  _getLastDaysOfPreviousMonth(): NxCalendarCell[] {\n    const firstDayOfMonth: D = this._dateAdapter.createDate(\n      this._dateAdapter.getYear(this.activeDate),\n      this._dateAdapter.getMonth(this.activeDate),\n      1\n    );\n\n    const firstDayOfPreviousItems =\n      this._dateAdapter.addCalendarDays(firstDayOfMonth, - this._firstWeekOffset);\n\n    return this._getRowOfDays(firstDayOfPreviousItems, this._firstWeekOffset);\n  }\n\n  /**\n   * The first days of the following month that should be displayed\n   * after the days of the current month. After filling up the last\n   * row of the current month, additional rows are added, so that a\n   * total of 42 days (6 rows/weeks) is displayed.\n   */\n  _getFirstDaysOfFollowingMonth(): NxCalendarCell[][] {\n    const followingDays: NxCalendarCell[][] = [];\n\n    const firstDayOfNextMonth: D = this._dateAdapter.addCalendarMonths(\n      this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate),\n        1),\n      1\n    );\n\n    // there should be displayed a total of 7 * 6 items\n    const followingDaysCount =\n      TOTAL_DAYS_TO_DISPLAY - this._firstWeekOffset - this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const offsetItems = followingDaysCount % 7;\n\n    // add a non-full row to following rows.\n    // These items will fill up the last incomplete row of the current month.\n    if (offsetItems > 0) {\n      const offsetRow = this._getRowOfDays(firstDayOfNextMonth, offsetItems);\n      followingDays.push(offsetRow);\n    }\n\n    let remainingDays = followingDaysCount - offsetItems;\n    let firstDayInRow = this._dateAdapter.addCalendarDays(firstDayOfNextMonth, offsetItems);\n\n    // fill remaining rows if needed\n    while (remainingDays > 0) {\n      followingDays.push(\n        this._getRowOfDays(firstDayInRow, this._numCols)\n      );\n\n      firstDayInRow = this._dateAdapter.addCalendarDays(firstDayInRow, this._numCols);\n      remainingDays -= this._numCols;\n    }\n\n    return followingDays;\n  }\n\n  /**\n   * Returns a row with days, beginning with the date of `firstDayInRow`-parameter.\n   * The returned row contains `daysCount` elements.\n   */\n  _getRowOfDays(firstDayInRow: D, daysCount: number): NxCalendarCell[] {\n    const nextRow: NxCalendarCell[] = [];\n    const dateNames = this._dateAdapter.getDateNames();\n    for (let addDays = 0; addDays < daysCount; addDays++) {\n      const day = this._dateAdapter.getDate(\n        this._dateAdapter.addCalendarDays(firstDayInRow, addDays)\n      );\n      nextRow.push(new NxCalendarCell(day, dateNames[day - 1]));\n    }\n    return nextRow;\n  }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport { NxDateAdapter } from '../adapter/index';\nimport { NxCalendarBodyComponent, NxCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const yearsPerPage = 20;\n\nexport const yearsPerRow = 4;\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'nx-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'nxMultiYearView',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['multi-year-view.scss']\n})\nexport class NxMultiYearViewComponent<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(NxCalendarBodyComponent, { static: true }) _nxCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: NxCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: NxDateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length === yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    const month = this._dateAdapter.getMonth(this.activeDate);\n    const daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._nxCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an NxCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    const yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new NxCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) === year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport { NX_DATE_FORMATS, NxDateAdapter, NxDateFormats } from '../adapter/index';\nimport { NxCalendarBodyComponent, NxCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'nx-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'nxYearView',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['year-view.scss']\n})\nexport class NxYearViewComponent<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(NxCalendarBodyComponent, { static: true }) _nxCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: NxCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  _numCols: number = 3;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(NX_DATE_FORMATS) private _dateFormats: NxDateFormats,\n              @Optional() public _dateAdapter: NxDateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._numCols);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, this._numCols);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    const monthNames = this._dateAdapter.getMonthNames('short');\n    this._months = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._nxCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) === this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an NxCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    const ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new NxCalendarCell(\n        month, monthName, ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) === month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { NX_DATE_FORMATS, NxDateAdapter, NxDateFormats } from './../adapter/index';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { NxDatepickerIntl } from './datepicker-intl';\nimport { NxMonthViewComponent } from './month-view';\nimport { NxMultiYearViewComponent } from './multi-year-view';\nimport { NxYearViewComponent } from './year-view';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst yearsPerPage = 20;\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'nx-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.scss'],\n  host: {\n    'class': 'nx-calendar',\n  },\n  exportAs: 'nxCalendar',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxCalendarComponent<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(NxMonthViewComponent, { static: false }) monthView: NxMonthViewComponent<D>;\n  /** Reference to the current year view component. */\n  @ViewChild(NxYearViewComponent, { static: false }) yearView: NxYearViewComponent<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(NxMultiYearViewComponent, { static: false }) multiYearView: NxMultiYearViewComponent<D>;\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView === 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel);\n    }\n    if (this._currentView === 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % yearsPerPage, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % yearsPerPage, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView === 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _intl: NxDatepickerIntl,\n              @Optional() private _dateAdapter: NxDateAdapter<D>,\n              @Optional() @Inject(NX_DATE_FORMATS) private _dateFormats: NxDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _changeViewClicked(): void {\n    this._currentView = this._currentView === 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView === 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView === 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView === 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView === 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView === 'month') {\n      return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) === this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView === 'year') {\n      return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ===\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","import { NxDatepickerIntl } from './datepicker-intl';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject, Subscription, merge} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {NxCalendarComponent} from './calendar';\nimport { NxDateAdapter } from '../adapter/date-adapter';\nimport { NxDatefieldDirective } from './../datefield.directive';\nimport { NxDatepickerToggleComponent } from './datepicker-toggle';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const NX_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('nx-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: NX_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\nexport interface DatepickerDefaultOptions {\n  /** Sets the focus on toggle behavior. (optional) */\n  toggleIconTabindex?: number;\n}\n\nexport const DATEPICKER_DEFAULT_OPTIONS =\n  new InjectionToken<DatepickerDefaultOptions>('DATEPICKER_DEFAULT_OPTIONS');\n\n/**\n * @docs-private\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * NxCalendarComponent directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n */\n@Component({\n  selector: 'nx-datepicker-content',\n  templateUrl: 'datepicker-content.component.html',\n  styleUrls: ['datepicker-content.component.scss'],\n  host: {\n    'class': 'nx-datepicker-content'\n  },\n  exportAs: 'nxDatepickerContent',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxDatepickerContentComponent<D> implements AfterContentInit {\n  datepicker: NxDatepickerComponent<D>;\n\n  @ViewChild(NxCalendarComponent, { static: true }) _calendar: NxCalendarComponent<D>;\n\n  constructor(\n    public _intl: NxDatepickerIntl,\n    public elementRef: ElementRef, private _ngZone: NgZone) {}\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this.elementRef.nativeElement.querySelector('.nx-calendar-body-active').focus();\n      });\n    });\n  }\n}\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"nxDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  selector: 'nx-datepicker',\n  template: '',\n  exportAs: 'nxDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxDatepickerComponent<D> implements OnDestroy {\n  /** The date to open the calendar initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** @docs-private */\n  selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /**\n   * @docs-private\n   * The id for the datepicker calendar.\n   */\n  id: string = `nx-datepicker-${datepickerUid++}`;\n\n  /**\n   * @docs-private\n   * The currently selected date.\n   */\n  get selected(): D | null { return this._validSelected; }\n  set selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /**\n   * @docs-private\n   * The minimum selectable date.\n   */\n  get minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /**\n   * @docs-private\n   * The maximum selectable date.\n   */\n  get maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  /** @docs-private */\n  get dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<NxDatepickerContentComponent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<NxDatepickerContentComponent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: NxDatefieldDirective<D>;\n\n  _toggleButton: NxDatepickerToggleComponent<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(NX_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: NxDateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /**\n   * @docs-private\n   * Selects the given date\n   */\n  select(date: D): void {\n    const oldValue = this.selected;\n    this.selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this.selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * @docs-private\n   * Emits the selected year in multiyear view\n   */\n  selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /**\n   * @docs-private\n   * Emits selected month in year view\n   */\n  selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * @docs-private\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  registerInput(input: NxDatefieldDirective<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A NxDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this.selected = value);\n  }\n\n  /**\n   * @docs-private\n   * Register an input toggle with this datepicker.\n   */\n  registerToggle(toggle: NxDatepickerToggleComponent<D>) {\n    if (this._toggleButton) {\n      throw Error('A NxDatepicker can only be associated with a single toggle button.');\n    }\n    this._toggleButton = toggle;\n  }\n\n  /**\n   * @docs-private\n   * Open the calendar.\n   */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an NxDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this._openAsPopup();\n\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /**\n   * @docs-private\n   * Close the calendar.\n   */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n\n    // if the datepicker toggle button is not focusable, focus the associated input.\n    if (this._toggleButton && this._toggleButton.tabindex < 0) {\n      this._datepickerInput._focus();\n    }\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<NxDatepickerContentComponent<D>>(NxDatepickerContentComponent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'nx-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'nx-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.nx-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","import { ValidatorFn, ValidationErrors, AbstractControl } from '@angular/forms';\nimport { NxDateAdapter, NxDateFormats } from './adapter';\n\n/**\n * Provides a set of date validators that can be used by form controls.\n * @dynamic\n */\nexport class NxDateValidators {\n\n  /** The form control validator for whether the input parses. */\n  static parse<D>(\n    dateAdapter: NxDateAdapter<D>,\n    dateFormats: NxDateFormats,\n    input: HTMLInputElement,\n    strict: boolean,\n    customParseFormat: string | string[] = null): ValidatorFn {\n    return (): ValidationErrors | null => {\n      const parsedValue = dateAdapter.parse(input.value, customParseFormat || dateFormats.parse.dateInput, strict);\n      const valid = !parsedValue || dateAdapter.isValid(parsedValue);\n      return valid ? null : {'nxDatefieldParse': {'text': input}};\n    };\n  }\n\n  /** The form control validator for the min date. */\n  static min<D>(dateAdapter: NxDateAdapter<D>, min: D): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const controlValue = getValidDateOrNull(dateAdapter, dateAdapter.deserialize(control.value));\n      return (!min || !controlValue ||\n          dateAdapter.compareDate(min, controlValue) <= 0) ?\n          null : {'nxDatefieldMin': {'min': min, 'actual': controlValue}};\n    };\n  }\n\n  /** The form control validator for the max date. */\n  static max<D>(dateAdapter: NxDateAdapter<D>, max: D): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = getValidDateOrNull(dateAdapter, dateAdapter.deserialize(control.value));\n    return (!max || !controlValue ||\n        dateAdapter.compareDate(max, controlValue) >= 0) ?\n        null : {'nxDatefieldMax': {'max': max, 'actual': controlValue}};\n    };\n  }\n\n  /** The form control validator for the date filter. */\n  static filter<D>(\n      dateAdapter: NxDateAdapter<D>,\n      dateFilter: (date: D | null) => boolean): ValidatorFn {\n\n    return (control: AbstractControl): ValidationErrors | null => {\n      const controlValue = getValidDateOrNull(dateAdapter, dateAdapter.deserialize(control.value));\n      return !dateFilter || !controlValue || dateFilter(controlValue) ?\n          null : {'nxDatefieldFilter': true};\n    };\n  }\n}\n\nfunction getValidDateOrNull<D>(dateAdapter: NxDateAdapter<D>, obj: any): D | null {\n  return (dateAdapter.isDateInstance(obj) && dateAdapter.isValid(obj)) ? obj : null;\n}\n","import { NxFormfieldComponent } from '@allianz/ngx-ndbx/formfield';\nimport { NX_INPUT_VALUE_ACCESSOR } from '@allianz/ngx-ndbx/input';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOWN_ARROW } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { NX_DATE_FORMATS, NxDateAdapter, NxDateFormats } from './adapter/index';\nimport { createMissingDateImplError } from './datefield-errors';\nimport { NxDatepickerComponent } from './datepicker/datepicker.component';\nimport { NxDateValidators } from './date-validators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// tslint:disable:member-ordering\nexport const NX_DATEFIELD_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NxDatefieldDirective),\n  multi: true\n};\n\nexport const NX_DATEFIELD_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NxDatefieldDirective),\n  multi: true\n};\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use NxDatepickerInputEvent instead.\n */\nexport class NxDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: NxDatefieldDirective<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n/**\n * Directive used to provide date processing functionality to an input.\n */\n@Directive({\n  selector: 'input[nxDatefield]',\n  providers: [\n    NX_DATEFIELD_VALUE_ACCESSOR,\n    NX_DATEFIELD_VALIDATORS,\n    // {provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxDatefieldDirective},\n    { provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxDatefieldDirective }\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'nxDatefield',\n})\nexport class NxDatefieldDirective<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n\n  /** @docs-private */\n  public currentFormattedDate = null;\n\n  /** The datepicker that this input is associated with. */\n  @Input('nxDatepicker')\n  set datepicker(value: NxDatepickerComponent<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: NxDatepickerComponent<D>;\n\n  private registerDatepicker(value: NxDatepickerComponent<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker.registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker and invalidate values in the datefield. */\n  @Input('nxDatefieldFilter')\n  set datefieldFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n\n  _dateFilter: (date: D | null) => boolean;\n\n  /** Provide or read the current date. It's type <D> depends on the chosen date implementation */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(this.value);\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** Sets the minimum valid date. */\n  @Input('nxMin')\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** Sets the maximum valid date. */\n  @Input('nxMax')\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** If supported by the date implementation enable strict parsing (applies to Moment's parse function here) */\n  @Input('nxStrict')\n  get strict() { return this._strict; }\n  set strict(value: any) {\n    this._strict = coerceBooleanProperty(value);\n    // parse given text value again\n    this._onInput(this._elementRef.nativeElement.value);\n  }\n  private _strict: boolean = true;\n\n  /** Override the parse format given with parse.dateInput with the token NX_DATE_FORMATS  */\n  @Input('nxParseFormat')\n  get parseFormat() { return this._parseFormat; }\n  set parseFormat(value: string | string[]) {\n    this._parseFormat = value;\n    // parse given text value again\n    this._onInput(this._elementRef.nativeElement.value);\n  }\n  private _parseFormat: string | string[];\n\n  /** Override the display format given with display.dateInput with the token NX_DATE_FORMATS  */\n  @Input('nxDisplayFormat')\n  get displayFormat() { return this._displayFormat; }\n  set displayFormat(value: string) {\n    this._displayFormat = value;\n    this._formatValue(this.value);\n  }\n  private _displayFormat: string;\n\n/** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    if (newValue) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      this._elementRef.nativeElement.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<NxDatepickerInputEvent<D>> =\n      new EventEmitter<NxDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<NxDatepickerInputEvent<D>> =\n      new EventEmitter<NxDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /**\n   * @deprecated\n   * @deletion-target 9.0.0\n   * This will force the current value to be parsed again by the given DateAdapter.\n   * That's a convenience method so you can trigger it manually.\n   */\n  public format() {\n    this.value = this.value;\n  }\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: NxDateAdapter<D>,\n      @Optional() @Inject(NX_DATE_FORMATS) private _dateFormats: NxDateFormats,\n      @Optional() private _formField: NxFormfieldComponent) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('NX_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    const validator = Validators.compose(this.getValidators());\n    return validator ? validator(c) : null;\n  }\n\n  /**\n   * @docs-private\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * @docs-private\n   *\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    // formfield not yet accessible as we don't have them in a secondary entry point to import yet.\n    // return this._elementRef;\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._parseFormat || this._dateFormats.parse.dateInput, this.strict);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n\n    if (date) {\n      this.currentFormattedDate = this._dateAdapter.format(\n        date,\n        this._displayFormat || this._dateFormats.display.dateInput\n      );\n    } else {\n      this.currentFormattedDate = null;\n    }\n\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n\n    this.dateInput.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _focus() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n    this._onTouched();\n  }\n\n  /** Returns the validators of the datefield. */\n  getValidators(): ValidatorFn[] {\n    return [\n      NxDateValidators.parse(this._dateAdapter, this._dateFormats, this._elementRef.nativeElement, this._strict, this._parseFormat),\n      NxDateValidators.min(this._dateAdapter, this.min),\n      NxDateValidators.max(this._dateAdapter, this.max),\n      NxDateValidators.filter(this._dateAdapter, this._dateFilter)\n    ];\n  }\n\n  /** Formats a value and sets it on the input native element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value = value ?\n      this._dateAdapter.format(value, this._displayFormat || this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport { merge ,  of as observableOf ,  Subscription } from 'rxjs';\n\nimport { NxDatepickerIntl } from './datepicker-intl';\nimport { NxDatepickerComponent, DATEPICKER_DEFAULT_OPTIONS, DatepickerDefaultOptions } from './datepicker.component';\n\n/** Can be used to override the icon of a `nxDatepickerToggle`. */\n@Directive({\n  selector: '[nxDatepickerToggleIcon]'\n})\n// tslint:disable-next-line:directive-class-suffix\nexport class NxDatepickerToggleIconComponent {}\n\n@Component({\n  selector: 'nx-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.scss'],\n  host: {\n    'class': 'nx-datepicker-toggle',\n    '[class.nx-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.nx-datepicker-toggle--disabled]': 'disabled'\n  },\n  exportAs: 'nxDatepickerToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxDatepickerToggleComponent<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  private _disabled: boolean;\n  private _tabindex: number = 0;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(NxDatepickerToggleIconComponent, {static: false}) _customIcon: NxDatepickerToggleIconComponent;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for')\n  set datepicker(value: NxDatepickerComponent<D>) {\n    this.registerDatepicker(value);\n  }\n  get datepicker(): NxDatepickerComponent<D> {\n    return this._datepicker;\n  }\n  _datepicker: NxDatepickerComponent<D>;\n\n  private registerDatepicker(value: NxDatepickerComponent<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker.registerToggle(this);\n    }\n  }\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Sets the tabindex for the toggle button. Default: 0. */\n  @Input()\n  set tabindex(value: number) {\n    if (this._tabindex !== value) {\n      this._tabindex = value;\n    }\n  }\n  get tabindex(): number {\n    return this._tabindex;\n  }\n\n  constructor(public _intl: NxDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DATEPICKER_DEFAULT_OPTIONS) private _defaultOptions: DatepickerDefaultOptions) {\n      if (this._defaultOptions && this._defaultOptions.toggleIconTabindex) {\n        this._tabindex = this._defaultOptions.toggleIconTabindex;\n      }\n    }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","import { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NX_DATE_LOCALE_PROVIDER } from './adapter/index';\nimport { NxDatefieldDirective } from './datefield.directive';\nimport { NxCalendarComponent } from './datepicker/calendar';\nimport { NxCalendarBodyComponent } from './datepicker/calendar-body';\nimport { NxDatepickerIntl } from './datepicker/datepicker-intl';\nimport { NxDatepickerToggleComponent, NxDatepickerToggleIconComponent } from './datepicker/datepicker-toggle';\nimport {\n  NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  NxDatepickerComponent,\n  NxDatepickerContentComponent,\n} from './datepicker/datepicker.component';\nimport { NxMonthViewComponent } from './datepicker/month-view';\nimport { NxMultiYearViewComponent } from './datepicker/multi-year-view';\nimport { NxYearViewComponent } from './datepicker/year-view';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    A11yModule,\n    NxIconModule\n  ],\n  providers: [\n    // Provide our NX_DATE_LOCALE to determine the current language\n    NX_DATE_LOCALE_PROVIDER,\n    NxDatepickerIntl,\n    NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER\n  ],\n  declarations: [\n    NxDatefieldDirective,\n    NxDatepickerComponent,\n    NxDatepickerToggleIconComponent,\n    NxDatepickerToggleComponent,\n    NxDatepickerContentComponent,\n    NxCalendarComponent,\n    NxCalendarBodyComponent,\n    NxMonthViewComponent,\n    NxMultiYearViewComponent,\n    NxYearViewComponent\n  ],\n  exports: [\n    NxDatefieldDirective,\n    NxDatepickerComponent,\n    NxDatepickerToggleIconComponent,\n    NxDatepickerToggleComponent,\n    NxCalendarComponent,\n    NxCalendarBodyComponent,\n    NxMonthViewComponent,\n    NxMultiYearViewComponent,\n    NxYearViewComponent\n  ],\n  entryComponents: [\n    NxDatepickerContentComponent\n  ]\n})\nexport class NxDatefieldModule { }\n"]}