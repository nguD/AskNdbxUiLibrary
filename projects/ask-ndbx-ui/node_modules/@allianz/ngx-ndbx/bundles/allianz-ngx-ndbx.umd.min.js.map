{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@allianz/ngx-ndbx/ndbx.module.ts","ng://@allianz/ngx-ndbx/button/button-base.ts","ng://@allianz/ngx-ndbx/button/button.component.ts","ng://@allianz/ngx-ndbx/button/icon-button.component.ts","ng://@allianz/ngx-ndbx/button/button.module.ts","ng://@allianz/ngx-ndbx/checkbox/checkbox.component.ts","ng://@allianz/ngx-ndbx/checkbox/checkbox.module.ts","ng://@allianz/ngx-ndbx/radio-button/radio-button.ts","ng://@allianz/ngx-ndbx/radio-button/radio-button.module.ts","ng://@allianz/ngx-ndbx/copytext/copytext.component.ts","ng://@allianz/ngx-ndbx/copytext/copytext.module.ts","ng://@allianz/ngx-ndbx/headline/headline.component.ts","ng://@allianz/ngx-ndbx/headline/headline.module.ts","ng://@allianz/ngx-ndbx/link/link.component.ts","ng://@allianz/ngx-ndbx/link/link.module.ts","ng://@allianz/ngx-ndbx/circle-toggle/circle-toggle/toggle-button.ts","ng://@allianz/ngx-ndbx/circle-toggle/circle-toggle-group/circle-toggle-group.component.ts","ng://@allianz/ngx-ndbx/circle-toggle/mobile-toggle-button/mobile-toggle-button.component.ts","ng://@allianz/ngx-ndbx/circle-toggle/circle-toggle/circle-toggle.component.ts","ng://@allianz/ngx-ndbx/circle-toggle/icon-toggle-button/icon-toggle-button.component.ts","ng://@allianz/ngx-ndbx/circle-toggle/circle-toggle.module.ts","ng://@allianz/ngx-ndbx/list/list.component.ts","ng://@allianz/ngx-ndbx/list/list-icon.component.ts","ng://@allianz/ngx-ndbx/list/list.module.ts","ng://@allianz/ngx-ndbx/radio-toggle/radio-toggle-button-base.component.ts","ng://@allianz/ngx-ndbx/radio-toggle/radio-toggle.component.ts","ng://@allianz/ngx-ndbx/radio-toggle/radio-toggle-button.component.ts","ng://@allianz/ngx-ndbx/radio-toggle/radio-toggle.module.ts","ng://@allianz/ngx-ndbx/spinner/spinner.component.ts","ng://@allianz/ngx-ndbx/spinner/spinner.module.ts","ng://@allianz/ngx-ndbx/modal/modal.service.ts","ng://@allianz/ngx-ndbx/modal/animations.ts","ng://@allianz/ngx-ndbx/modal/modal.component.ts","ng://@allianz/ngx-ndbx/modal/modal-open-on-click.directive.ts","ng://@allianz/ngx-ndbx/modal/modal.module.ts","ng://@allianz/ngx-ndbx/switcher/switcher.component.ts","ng://@allianz/ngx-ndbx/switcher/switcher.module.ts","ng://@allianz/ngx-ndbx/popover/popover-content.ts","ng://@allianz/ngx-ndbx/popover/popover.component.ts","ng://@allianz/ngx-ndbx/popover/popover-trigger.directive.ts","ng://@allianz/ngx-ndbx/popover/popover.module.ts","ng://@allianz/ngx-ndbx/taglist/tag.component.ts","ng://@allianz/ngx-ndbx/taglist/taglist.component.ts","ng://@allianz/ngx-ndbx/taglist/taglist.module.ts","ng://@allianz/ngx-ndbx/image/image.directive.ts","ng://@allianz/ngx-ndbx/image/figure.component.ts","ng://@allianz/ngx-ndbx/image/image.module.ts","ng://@allianz/ngx-ndbx/video/video.component.ts","ng://@allianz/ngx-ndbx/video/video.module.ts","ng://@allianz/ngx-ndbx/dropdown/dropdown-errors.ts","ng://@allianz/ngx-ndbx/dropdown/dropdown.control.ts","ng://@allianz/ngx-ndbx/dropdown/group/dropdown-group.ts","ng://@allianz/ngx-ndbx/dropdown/item/dropdown-item.ts","ng://@allianz/ngx-ndbx/dropdown/closed-label.directive.ts","ng://@allianz/ngx-ndbx/dropdown/dropdown.ts","ng://@allianz/ngx-ndbx/dropdown/dropdown.module.ts","ng://@allianz/ngx-ndbx/autocomplete/autocomplete-option.component.ts","ng://@allianz/ngx-ndbx/autocomplete/autocomplete.component.ts","ng://@allianz/ngx-ndbx/autocomplete/autocomplete-trigger.directive.ts","ng://@allianz/ngx-ndbx/autocomplete/autocomplete.module.ts","ng://@allianz/ngx-ndbx/natural-language-form/word.component.ts","ng://@allianz/ngx-ndbx/natural-language-form/natural-language-form.component.ts","ng://@allianz/ngx-ndbx/natural-language-form/natural-language-form.module.ts","ng://@allianz/ngx-ndbx/message/message/message.component.ts","ng://@allianz/ngx-ndbx/message/message-toast/message-toast-animations.ts","ng://@allianz/ngx-ndbx/message/message-toast/message-toast-config.ts","ng://@allianz/ngx-ndbx/message/message-toast/message-toast.component.ts","ng://@allianz/ngx-ndbx/message/message.module.ts","ng://@allianz/ngx-ndbx/message/message-toast/message-toast-ref.ts","ng://@allianz/ngx-ndbx/message/message-toast/message-toast.service.ts","ng://@allianz/ngx-ndbx/page-search/page-search.component.ts","ng://@allianz/ngx-ndbx/page-search/page-search.module.ts","ng://@allianz/ngx-ndbx/rating/rating.component.ts","ng://@allianz/ngx-ndbx/rating/rating.module.ts","ng://@allianz/ngx-ndbx/number-stepper/number-stepper-intl.ts","ng://@allianz/ngx-ndbx/number-stepper/auto-resize.directive.ts","ng://@allianz/ngx-ndbx/number-stepper/number-stepper.component.ts","ng://@allianz/ngx-ndbx/number-stepper/number-stepper-prefix.directive.ts","ng://@allianz/ngx-ndbx/number-stepper/number-stepper-suffix.directive.ts","ng://@allianz/ngx-ndbx/number-stepper/number-stepper.module.ts","ng://@allianz/ngx-ndbx/pagination/pagination-texts.ts","ng://@allianz/ngx-ndbx/pagination/pagination-utils.ts","ng://@allianz/ngx-ndbx/pagination/pagination.component.ts","ng://@allianz/ngx-ndbx/pagination/pagination.module.ts","ng://@allianz/ngx-ndbx/dynamic-table/tabledata-source.ts","ng://@allianz/ngx-ndbx/dynamic-table/dynamic-table.component.ts","ng://@allianz/ngx-ndbx/dynamic-table/dynamic-table.module.ts","ng://@allianz/ngx-ndbx/accordion/accordion.ts","ng://@allianz/ngx-ndbx/accordion/accordion-animations.ts","ng://@allianz/ngx-ndbx/accordion/expansion-panel-body.ts","ng://@allianz/ngx-ndbx/accordion/expansion-panel.ts","ng://@allianz/ngx-ndbx/accordion/expansion-panel-header.ts","ng://@allianz/ngx-ndbx/accordion/accordion.module.ts","ng://@allianz/ngx-ndbx/tabs/tab-group-base.ts","ng://@allianz/ngx-ndbx/tabs/tab-header-outlet.ts","ng://@allianz/ngx-ndbx/tabs/tab-label.ts","ng://@allianz/ngx-ndbx/tabs/tab-content.ts","ng://@allianz/ngx-ndbx/tabs/tab.ts","ng://@allianz/ngx-ndbx/tabs/tab-body.ts","ng://@allianz/ngx-ndbx/tabs/tab-label-wrapper.ts","ng://@allianz/ngx-ndbx/tabs/tab-header.ts","ng://@allianz/ngx-ndbx/tabs/tab-group.ts","ng://@allianz/ngx-ndbx/tabs/tab-nav-bar.ts","ng://@allianz/ngx-ndbx/tabs/tabs.module.ts","ng://@allianz/ngx-ndbx/core/mapped-styles.ts","ng://@allianz/ngx-ndbx/card/card.component.ts","ng://@allianz/ngx-ndbx/card/card.module.ts","ng://@allianz/ngx-ndbx/card/selectable-card.ts","ng://@allianz/ngx-ndbx/card/selectable-card-change-event.ts","ng://@allianz/ngx-ndbx/card/selectable-card.component.ts","ng://@allianz/ngx-ndbx/card/card-header.component.ts","ng://@allianz/ngx-ndbx/card/card-footer.component.ts","ng://@allianz/ngx-ndbx/card/selectable-card.module.ts","ng://@allianz/ngx-ndbx/core/breakpoints.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","NdbxModule","forRoot","ngModule","NgModule","args","DEFAULT_SIZE","DEFAULT_TYPE","NxButtonBase","_changeDetectorRef","_elementRef","type","size","negative","block","defineProperty","_classNames","_b","match","_d","test","markForCheck","HostBinding","NxButtonComponent","changeDetectorRef","elementRef","_super","tslib_1.__extends","Component","template","selector","changeDetection","ChangeDetectionStrategy","OnPush","inputs","ChangeDetectorRef","ElementRef","NxIconButtonComponent","NxButtonModule","declarations","exports","nextId","NxCheckboxChangeEvent","checked","checkbox","NxCheckboxGroupComponent","ngControl","_stateChanges","Subject","selectionChange","EventEmitter","_id","_disabled","_negative","_onChange","_onTouched","valueAccessor","_name","coerceBooleanProperty","_label","disabled","_labelSize","_required","ngAfterContentInit","_this","_value","_updateSelectedCheckboxFromValue","_checkboxes","filter","map","cb","changes","subscribe","control","setValue","ngOnDestroy","complete","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","indexOf","change","emit","host","[class.nx-checkbox-group]","[class.nx-checkbox-group--negative]","[attr.id]","[attr.required]","[attr.disabled]","[attr.aria-labelledby]","[attr.role]","NgControl","decorators","Optional","Self","ContentChildren","forwardRef","NxCheckboxComponent","descendants","ContentChild","NxLabelComponent","static","Output","Input","_errorStateMatcher","checkboxGroup","_parentForm","_parentFormGroup","toString","_checked","_indeterminate","indeterminateChange","checkedChange","checkboxChange","onChangeCallback","_","onTouchedCallback","name","newValue","labelSize","_setIndeterminate","_setChecked","_checkboxLabelWrapper","nativeElement","innerHTML","trim","labelContentChanged","detectChanges","_controlInvalid","parent","isErrorState","ngOnInit","_parentChangeSubscription","unsubscribe","toggle","onChange","onTouched","touch","_onInputClick","event","stopPropagation","_createChangeEvent","checkedValue","[class.nx-checkbox]","[class.disabled]","[class.nx-checkbox--label-large]","[class.nx-checkbox--label-small]","[class.nx-checkbox--negative]","[class.has-error]","[attr.aria-invalid]","ErrorStateMatcher","NgForm","FormGroupDirective","ViewChild","NxCheckboxModule","NxLabelModule","NxErrorModule","imports","CommonModule","NxIconModule","ObserversModule","source","NxRadioGroupComponent","groupValueChange","_selected","_updateSelectedRadioFromValue","_checkSelectedRadioButton","NxRadioChange","isAlreadySelected","_radios","forEach","radio","role","[class.nx-radio-group--negative]","NxRadioComponent","radioGroup","valueChange","id","_radioLabelWrapper","required","_onInputChange","form","invalid","touched","submitted","providers","provide","NG_VALUE_ACCESSOR","useExisting","multi","[class.nx-radio-button--small-label]","[class.nx-radio-button--big-label]","[class.nx-radio--negative]","NxRadioModule","NxCopytextComponent","DEFAULT_TYPE$1","[class.nx-copy]","[class.nx-copy--small]","[class.nx-copy--medium]","[class.nx-copy--normal]","[class.nx-copy--large]","[class.nx-copy--negative]","NxCopytextModule","NxHeadlineComponent","DEFAULT_TYPE$2","[class.nx-heading--page]","[class.nx-heading--page-bold-caps]","[class.nx-heading--section]","[class.nx-heading--subsection-large]","[class.nx-heading--subsection-medium]","[class.nx-heading--subsection-small]","[class.nx-heading--subsection-xsmall]","[class.nx-heading--negative]","NxHeadlineModule","MAPPING","black","text","icon-right","DEFAULT_CLASSES","NxLinkComponent","_renderer","_size","icons","querySelectorAll","addClass","[class.nx-link--small]","[class.nx-link--large]","Renderer2","NxIconComponent","MappedStyles","NxLinkModule","NxCircleToggleGroupComponent","_destroyed","_responsive","updateToggleButtonsNames","buttons","button","responsive","notifySelectedChild","ngAfterViewInit","subscribeToSelectionChanges","pipe","startWith","toggles","tap","Promise","resolve","then","toggleButton","resetClasses","first","setFirstButton","last","setLastButton","takeUntil","changedOrDestroyed","merge","selected","find","setGroupSelection","_buttons","[class.is-responsive]","[class.is-disabled]","[attr.aria-disabled]","[attr.name]","[class.nx-circle-toggle-group]","ToggleButton","NxMobileToggleButtonComponent","isFirst","isLast","[class.is-negative]","[class.is-first]","[class.is-last]","[class.is-flipped]","NxCircleToggleComponent","toggleGroup","_checkedDispatcher","inGroup","_iconName","_svg","_svgChecked","_circleText","_hint","_hover","_touched","_removeUniqueSelectionListener","src","onMouseEnter","onMouseLeave","onTouchStart","attachListenerForGroup","listen","groupId","buttonId","preventDefault","ToggleChangeEvent","notify","svg","svgChecked","useFilledSvg","handleEnterKey","[class.nx-toggle-circle]","[class.in-group]","UniqueSelectionDispatcher","HostListener","NxIconToggleButtonComponent","[class.nx-circle-button]","[class.has-checkmark]","[class.is-touched]","NxCircleToggleModule","NxListComponent","orderedCircle","[class.nx-list--xsmall]","[class.nx-list--small]","[class.nx-list--normal]","[class.nx-list--negative]","[class.nx-list--ordered-circle]","NxListIconComponent","read","ViewContainerRef","NxListModule","bootstrap","NxRadioToggleButtonBaseComponent","renderer","toggleButtonId","triggerInputClick","toggleInput","click","labelContainer","removeClasses","small","NxRadioToggleComponent","_toggleId","errorState","_disableChange","toggleButtons","QueryList","option","coerced","subscribeToToggleButtonsChange","onChecked","_selection","ngDoCheck","updateErrorState","selection","setTimeout","select","correspondingButton","mapClassNames","split","className","toggleContainer","oldState","newState","NxRadioToggleButtonComponent","radioToggle","_toggleDispatcher","radioToggleId","_notifySiblings","_emitCheckedEvent","toggleId","NxRadioToggleButtonChange","onKeyupSpace","Inject","NxRadioToggleModule","FormsModule","NxSpinnerComponent","[class.nx-spinner--small]","[class.nx-spinner--medium]","[class.nx-spinner--large]","[class.nx-spinner--negative]","[attr.aria-busy]","[attr.aria-live]","NxSpinnerModule","NxModalService","subject","close$","asObservable","close","Injectable","fadeIn","animation","style","opacity","animate","fadeOut","scaleUp","transform","scaleDown","NxModalActionsDirective","Directive","[class.nx-modal__actions]","NxModalContentDirective","[class.nx-modal__content]","NxModalComponent","modalService","eventManager","_closeButtonLabel","hideOnEsc","hideOnClickOutside","showCloseIcon","closeEvent","closeSubscription","Subscription","EMPTY","removeEventListener","undefined","addGlobalEventListener","clickOutsideModal","closeButtonClick","cancelClick","evt","animations","trigger","transition","useAnimation","query","animateChild","[@fadeInOut]","[class.nx-modal--fixed-width]","EventManager","NxOpenModalOnClickDirective","templateRef","viewContainer","clickHandler","clear","createEmbeddedView","subscription","elements","el","addEventListener","console","warn","TemplateRef","NxModalModule","A11yModule","NxSwitcherComponent","_labelPosition","_big","_switcherLabelWrapper","[class.is-checked]","[class.is-big]","[class.nx-switcher--small-label]","[class.nx-switcher--large-label]","[class.is-swapped]","NxSwitcherModule","NxPopoverContentDirective","_template","NxPopoverComponent","closed","showCloseButton","arrowStyle","emitCloseButtonClick","_onCloseKeyup","$event","keyCode","ENTER","SPACE","emitClosedEvent","direction","_onClick","exportAs","fallbacks","originX","originY","overlayX","overlayY","offsetX","offsetY","NxPopoverTriggerDirective","overlay","viewContainerRef","_focusTrapFactory","_focusMonitor","_ngZone","_platform","_document","_show","_closeable","_elementFocusedBeforePopoverWasOpened","_manualListeners","Map","changeShow","_closeOnClickOutside","popoverInitialVisible","visibleChange","modal","scrollStrategy","_documentClickObservable","fromEvent","document","element","IOS","ANDROID","set","show","handleClick","listener","monitor","origin","run","openPopover","closePopover","popover","isCloseable","isOpen","overlayRef","createOverlay","hasAttached","updatePosition","_positionStrategy","open","_embeddedViewRef","attach","portal","rootNodes","_focusTrap","_autoFocusFirstTabbableElement","shouldReactOnClickOutside","waitForClose","focusInitialElementWhenReady","hasMovedFocus","focus","closeOnClickOutside","_returnFocusAfterPopover","detach","destroy","TemplatePortal","overlayState","OverlayConfig","positionStrategy","getPosition","scrollStrategies","reposition","enable","hasBackdrop","subscribeToPositions","_subscribeToAttach","_subscribeToDetach","_subscribeToBackdropClick","position","positionChanges","pair","connectionPair","positionOverlay","positionArrow","destroyed","backdropClick","detachments","data","attachments","target","contains","targetPosition","getBoundingClientRect","left","width","overlayElement","parentElement","offsetLeft","top","positions","flexibleConnectedTo","withPositions","withDefaultOffsetX","withDefaultOffsetY","toFocus","(click)","aria-haspopup","[attr.aria-expanded]","[attr.aria-describedby]","Overlay","FocusTrapFactory","FocusMonitor","NgZone","Platform","DOCUMENT","NxPopoverModule","OverlayModule","NxTagComponent","_tabindex","clicked","removed","_removable","removable","coerceNumberProperty","removeClickHandler","removeKeyHandler","DELETE","BACKSPACE","tagClickHandler","(keydown)","[attr.tabindex]","NxTaglistComponent","tagsChange","tagClickEvent","_tags","_allowTagDeletion","_isKeywordList","_labelProperty","_valueFormatterFn","allowTagDeletion","_ariaLabelledBy","delete","index","tags","slice","tagChildren","toArray","addTag","tag","labelProp","clearTags","renderTag","tagStr","valueFormatter","tagClick","[class.nx-taglist--keyword]","ViewChildren","NxTaglistModule","NxImageDirective","NxFigureComponent","rounded","[class.nx-image--auto]","[class.nx-image--1by1]","[class.nx-image--1dot8by1]","[class.nx-image--1dot2by1]","[class.nx-image--1by1dot1]","[class.nx-image--2dot6by1]","[class.nx-image--rounded]","NxImageModule","NxVideoComponent","sanitizer","_videoId","_altText","_playButtonAriaLabel","_previewImageSrc","_showPlayerControls","_allowFullScreen","_interfaceLanguage","showPlayer","url","videoId","showPlayerControls","allowFullScreen","interfaceLanguage","bypassSecurityTrustResourceUrl","previewImageSrc","defaultLabel","altText","nxPlayButtonAriaLabel","DomSanitizer","NxVideoModule","getNxDropdownNonFunctionValueError","Error","NxDropdownControl","isMultiSelect","NxFormfieldControl","NxDropdownGroupComponent","NxDropdownItemChange","item","isUserInput","NxDropdownItemComponent","_dropdown","group","_hidden","_mostRecentViewValue","_destroy","onSelectionChange","filterChanges","_showOrHideByFilter","_closedStream","_active","ngAfterViewChecked","viewValue","_selectViaInteraction","multiselect","_emitSelectionChangeEvent","hide","search","constraint","filterFn","textContent","deselect","setActiveStyles","setInactiveStyles","getLabel","_isContentEmpty","children","_onLabelChange","[id]","[attr.aria-selected]","[class.nx-hidden]","[class.nx-dropdown-item--active]","[class.nx-selected]","[class.nx-multiselect]","NxDropdownClosedLabelDirective","NxDropdownComponent","tabIndex","formFieldComponent","readonly","_focused","_panelOpen","isStable","controlType","_overlayViewportMargin","stateChanges","_optionIds","_tabIndex","currentFilter","_ariaLabel","_style","showFilter","filterPlaceholder","openedChange","_openedStream","optionSelectionChanges","defer","options","onStable","take","switchMap","_compareWith","o1","o2","_filterFn","itemValue","toLocaleLowerCase","_positions","parseInt","_closedDropdownLabel","_selectionModel","label","_initializeSelection","panelOpen","SelectionModel","_customClosedDropdownLabel","_defaultClosedDropdownLabel","_initKeyManager","changed","added","_resetOptions","_keyManager","ActiveDescendantKeyManager","withTypeAhead","withWrap","withVerticalOrientation","withHorizontalOrientation","skipPredicate","tabOut","closePanel","panel","_scrollActiveOptionIntoView","activeItem","_onSelect","_setOptionIds","join","wasSelected","isSelected","setActiveItem","_sortValues","_propagateChanges","_setSelectionByValue","isArray","currentValue","_selectValue","correspondingOption","isDevMode","fallbackValue","valueToEmit","NxDropdownSelectChange","options_1","sort","a","_updatePositionOffset","offset","formFieldRect","dropdownRect","panelHeader","overlayDir","querySelector","panelHeaderPaddingTop","getComputedStyle","paddingTop","openPanel","_triggerRect","_highlightCorrectOption","_calculateScrollTop","panelBody","scrollTop","empty","_getItemOffset","panelHeight","offsetHeight","middleOfPanel","containerElement","panelOffset","offsetTop","panelTopScrollPosition","clientHeight","itemTop","itemBottom","height","itemRect","setDescribedByIds","ids","ariaDescribedby","setAriaLabel","_getAriaLabel","appearance","isEmpty","hasValue","focused","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","altKey","onKeydown","HOME","END","SHIFT","TAB","manager","allHidden","every","Boolean","setFirstItemActive","setLastItemActive","previouslyFocusedIndex","activeItemIndex","delay","shiftKey","formatValue","_onFilter","_onAttached","positionChange","getConfig","filterInput","_onFocus","_onBlur","_clearFilter","_getAriaActiveDescendant","[class.nx-dropdown]","[class.is-filled]","[class.has-focus]","[class.nx-dropdown--negative]","[class.nx-dropdown--disabled]","[attr.aria-required]","[attr.aria-label]","(focus)","(blur)","Attribute","NxFormfieldComponent","CdkConnectedOverlay","NxDropdownModule","NxFormfieldModule","_uniqueIdCounter","NxAutocompleteOptionComponent","_getTabIndex","NxAutocompleteOptionSelected","[class.nx-active]","[class.nx-disabled]","[style.display]","_uniqueAutocompleteIdCounter","NxAutocompleteComponent","showPanel","_isOpen","_items","_hasItems","optionSelected","opened","_classList","val","Observable","_itemsSubscription","itms","_setVisibility","hasItems","_vOptions","_cOptions","_setScrollTop","_getScrollTop","_emitSelectEvent","NxAutocompleteSelectedEvent","class","NX_AUTOCOMPLETE_VALUE_ACCESSOR","NxAutocompleteTriggerDirective","getNxAutocompleteMissingPanelError","_element","_overlay","_viewContainerRef","_zone","_dir","_nxFormField","_nxWordField","_viewportRuler","_componentDestroyed","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","_valueChanges","_itemsCb","_debounce","_autocompleteDisabled","_overlayAttached","optionSelections","autocomplete","_bindAutocompleteItems","clickTarget","formField","_formField","_overlayRef","of","_destroyPanel","_controlValueChangesSubscription","ngOnChanges","autocompleteDisabled","itemsSubject_1","items","valueChanges","_control","debounceTime","input","result","err","_attachOverlay","_floatLabel","_resetLabel","_closingActionsSubscription","_outsideClickStream","_setTriggerValue","ESCAPE","_resetActiveItem","activeOption","prevActiveItem","_isFieldEnabled","_scrollToOption","_handleInput","parseFloat","_previousValue","activeElement","_handleFocus","floatLabel","optionOffset","optionHeight","newScrollPosition","currentScrollPosition","Math","max","_getOptionScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","panelClosingActions","_setValueAndClose","dispose","toDisplay","inputValue","_clearPreviousSelectedOption","skip","updateSize","minWidth","_getHostWidth","_portal","_getOverlayConfig","wasOpen","_getOverlayPosition","_scrollStrategy","_getConnectedElement","withViewportMargin","withPush","getConnectedOverlayOrigin","readOnly","aria-autocomplete","[attr.aria-activedescendant]","[attr.aria-owns]","(focusin)","(input)","Directionality","Host","NxWordComponent","ViewportRuler","NxAutocompleteModule","_overlayPositionBuilder","subscriptionValues","inputChanges","_hasErrors","currentTextWidth","setupErrorPopover","_validateControlChild","updateErrorPopoverState","updateCurrentTextWidth","measureCanvas","createElement","ctx","getContext","inputRef","styles","window","font","getFontShorthand","newWidth","measureText","paddingRight","paddingLeft","parentMeasurement","min","_overlayState","repositionError","_errorChildren","showPopover","hidePopover","withLockedPosition","withFlexibleDimensions","_popover","tooltipPortal","[class.size-short]","[class.size-regular]","[class.size-long]","[class.is-focused]","[class.has-dropdown]","OverlayPositionBuilder","NxFormfieldErrorDirective","NxNaturalLanguageFormComponent","resizeEvent$","updatePopoversSubscription","onResize","subjects","_words","word","updatePositionPopovers","resizeObservable","throttleTime","resizeWords","[class.nx-natural-language-form--small]","[class.nx-natural-language-form--large]","NxNaturalLanguageFormModule","NxInputModule","ICONS","NxMessageComponent","_context","_showIcon","_closable","_icon","getIconName","_emitCloseEvent","[class.context-info]","[class.context-error]","[class.context-success]","[class.context-warning]","[class.nx-message--closable]","messageToastAnimations","toastState","state","politeness","announcementMessage","duration","context","NxMessageToastComponent","config","_onExit","_onEnter","_animationState","_setAriaLabels","attachComponentPortal","_assertNotAttached","_portalOutlet","attachTemplatePortal","onAnimationEnd","fromState","toState","_completeExit","onEnter_1","enter","exit","onMicrotaskEmpty","_getIconName","_role","[@state]","(@state.done)","NxMessageToastConfig","NxMessageToastData","CdkPortalOutlet","BasePortalOutlet","NxMessageModule","PortalModule","entryComponents","MAX_TIMEOUT","pow","NxMessageToastRef","toastInstance","_afterDismissed","_afterOpened","_finishDismiss","dismiss","clearTimeout","_durationTimeoutId","_dismissAfter","_open","afterDismissed","afterOpened","NX_MESSAGE_TOAST_DEFAULT_CONFIG","InjectionToken","NxMessageToastService","_injector","_live","_parentMessageToastService","_defaultConfig","_toastRefAtThisLevel","_oldToastMessageRef","currentConfig","_createOverlay","injector","_createInjector","componentPortal","ComponentPortal","componentRef","toastRef","instance","_animateToast","openFromTemplate","container","_attachToastComponent","containerPortal","containerRef","overlayConfig","global","bottom","centerHorizontally","announce","tokens","WeakMap","PortalInjector","providedIn","Injector","LiveAnnouncer","SkipSelf","NxPageSearchComponent","buttonClick","_buttonLabel","_hideSearchButton","_buttonLayout","_contentLayout","hideSearchButton","onButtonClick","NxPageSearchModule","NxGridModule","NxRatingComponent","_startLabel","_endLabel","newAriaLabels","setSelection","handleKeyUp","rating","callback","getAriaLabel","ariaLabel","[class.nx-rating--negative]","[class.nx-rating--disabled]","NxRatingModule","NxNumberStepperIntl","decrementAriaLabel","incrementAriaLabel","NxAutoResizeDirective","_cdr","_resize","updateInputWidth","bind","_addEventListener","_removeEventListener","resize","metrics","padding","sumStyles","border","borderLeftWidth","borderRightWidth","parsed","Number","isNaN","right","SIZE_MAPPING","big","normal","INPUT_CLASSES","ALLOWED_CHARACTERS","RegExp","CUSTOM_VALUE_ACCESSOR","NxNumberStepperComponent","CUSTOM_VALIDATOR","NG_VALIDATORS","nextUniqueId","_intl","_step","_min","_max","_leadingZero","inputClassNames","inputId","ariaDescribedBy","_intlSubscription","setInputValue","ngContentWrapper","leadingZero","numberInputValue","pad","triggerResize","onInputChange","validateUserInput","incrementOnClick","_increment","incrementOnKey","isBetweenLimits","getNextGreaterValue","enforceLimits","autoResize","decrementOnClick","_decrement","decrementOnKey","getNextLowerValue","start","isValidStep","Decimal","minus","toNumber","toNearest","ROUND_DOWN","plus","ROUND_UP","isMinimum","isMaximum","valueDec","checkValue","mod","userInputToNumber","_validateFn","nxNumberStepperFormatError","nxNumberStepperStepError","validate","c","NxNumberStepperPrefixDirective","NxNumberStepperSuffixDirective","NxNumberStepperModule","DefaultPaginationTexts","previous","ofLabel","NX_PAGINATION_TEXTS","NxPaginationUtils","_pagesMobile","_elipsisText","_classExpanded","getPages","currentPage","totalPages","getStartArray","getMiddleArray","getEndArray","pageNumber","middle","createPaginationItem","end","currentItemToShow","showEllipsis","endItem","counterPages","startItem","getMobilePages","from","keys","classExpanded","NxPaginationComponent","paginationTexts","paginationUtilsService","_type","totalNumberPages","nxGoPrev","nxGoNext","nxGoPage","_page","_count","calculateTotalPages","_perPage","getMin","getMax","ceil","onPage","onPrev","_isPaginationPreviousDisabled","onNext","_isPaginationNextDisabled","onFirst","onLast","lastPage","getPaginationItemClasses","page","is-ellipsis","nx-pagination__item--expanded-view","getPaginationNumberClasses","is-active","nx-pagination__ellipsis","nx-pagination__link","isPaginationVisible","count","isPaginationCompactVisible","includes","isPaginationContainerVisible","NxPaginationModule","TableDataSource","_datachange","connect","disconnect","DataSource","NxDynamicTableComponent","_dataChange","BehaviorSubject","nxRowClick","_data","_displayedColumns","keys_1","cArray_1","key","title","_columnKeys","column","_dataSource","handleRowClick","row","isNumeric","NxDynamicTableModule","CdkTableModule","ScrollingModule","NxAccordionDirective","[class.nx-accordion]","CdkAccordion","nxAccordionAnimations","bodyExpansion","visibility","indicatorRotate","NxExpansionPanelBodyDirective","NxExpansionPanelComponent","accordion","_expansionDispatcher","_accordionStyle","_headerId","_inputChanges","DEFAULT_TYPE$5","lazyContent","expanded","getOpenState","[class.nx-expanded]","[class.nx-expansion-panel--light]","[class.nx-expansion-panel--regular]","[class.nx-expansion-panel--negative]","useValue","CdkAccordionItem","NxExpansionPanelHeaderComponent","hideToggle","isExpanded","_getPanelId","keydown","[attr.aria-controls]","NxExpansionPanelDescriptionDirective","NxExpansionPanelTitleDirective","NxAccordionModule","NxTabHeaderOutletComponent","_tabGroup","_appearanceSubscription","_appearanceChange","_outlet","insert","content","NxTabGroupBase","NxTabLabelDirective","CdkPortal","NxTabContentDirective","NxTabComponent","isActive","_templateLabel","_headerViewRef","_contentViewRef","contentTemplate","_explicitContent","_implicitContent","templateLabel","NxTabBodyComponent","tab","contentViewRef","NxTabLabelWrapperDirective","NxTabHeaderComponent","_selectedIndex","_autoselect","selectFocusedIndex","indexFocused","updateActiveItem","_isValidIndex","focusIndex","FocusKeyManager","labels","idx","handleKeydown","autoselect","NxTabGroupComponent","_indexToSelect","_mobileAccordion","_showAccordion","selectedIndexChange","selectedTabChange","focusChange","_tabsSubscription","_tabLabelSubscription","_disabledTabsCache","_groupId","_switchAppearance","innerWidth","_subscribeToTabLabels","tabs","_clampTabIndex","ngAfterContentChecked","indexToSelect","nextFocusable","selectedIndex","isFirstRun_1","focusChanged","NxTabChangeEvent","clickedTab","tabHeader","getTabIndex","_getTabLabelId","_getTabContentId","viewPortWidth","_showMobileVersion","_showDesktopVersion","_panelOpened","NxTabNavBarComponent","NxTabLinkDirective","_tabNavBar","[class.nx-tab-link]","[class.is-active]","[attr.aria-current]","NxTabsModule","mapping","baseClasses","classNames","_classNamesSanitized","appendClasses","NxCardComponent","tabindex","selectedChange","_selectable","_toggleSelected","selectable","_getTabindex","[class.is-selectable]","[class.is-selected]","(keydown.enter)","NxCardModule","NxSelectableCardChangeEvent","card","NxSelectableCardComponent","_errorListIds","_errorList","errorItem","_emitChangeEvent","_onInteractionEvent","SelectableCard","[attr.aria-checked]","NxErrorComponent","NxCardHeaderComponent","NxCardFooterComponent","NxSelectableCardModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\n@NgModule({\n})\nexport class NdbxModule {\n\n  public static forRoot(): ModuleWithProviders {\n\n    return {\n      ngModule: NdbxModule\n    };\n  }\n}\n","import {\n  ElementRef,\n  ChangeDetectorRef,\n  HostBinding\n} from '@angular/core';\n\n/** Type of a button. */\nexport type NxButtonType = 'primary' | 'secondary' | 'tertiary' | 'cta' | 'emphasis';\n\n/** Size of a button. */\nexport type NxButtonSize = 'small' | 'small-medium' | 'medium' | 'large' ;\n\nconst DEFAULT_SIZE = 'medium';\nconst DEFAULT_TYPE = 'primary';\n\n/** @docs-private */\nexport class NxButtonBase {\n  private _classNames: string;\n\n  /** @docs-private */\n  @HostBinding('class.nx-button--primary') get isPrimary(): boolean { return this.type === 'primary'; }\n  /** @docs-private */\n  @HostBinding('class.nx-button--secondary') get isSecondary(): boolean { return this.type === 'secondary'; }\n  /** @docs-private */\n  @HostBinding('class.nx-button--tertiary') get isTertiary(): boolean { return this.type === 'tertiary'; }\n  /** @docs-private */\n  @HostBinding('class.nx-button--cta') get isCta(): boolean { return this.type === 'cta'; }\n  /** @docs-private */\n  @HostBinding('class.nx-button--emphasis') get isEmphasis(): boolean { return this.type === 'emphasis'; }\n\n  /** @docs-private */\n  @HostBinding('class.nx-button--large') get isLarge(): boolean { return this.size === 'large'; }\n  /** @docs-private */\n  @HostBinding('class.nx-button--medium') get isMedium(): boolean { return this.size === 'medium'; }\n  /** @docs-private */\n  @HostBinding('class.nx-button--small-medium') get isSmallMedium(): boolean { return this.size === 'small-medium'; }\n  /** @docs-private */\n  @HostBinding('class.nx-button--small') get isSmall(): boolean { return this.size === 'small'; }\n\n  /** @docs-private */\n  @HostBinding('class.nx-button--block') get isBlock(): boolean { return this.block; }\n  /** @docs-private */\n  @HostBinding('class.nx-button--negative') get isNegative(): boolean { return this.negative; }\n\n  /** @docs-private */\n  type: NxButtonType = DEFAULT_TYPE;\n\n  /** @docs-private */\n  size: NxButtonSize = DEFAULT_SIZE;\n\n  negative: boolean = false;\n  block: boolean = false;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) { }\n\n  public set classNames(value: string) {\n    if (this._classNames === value) {\n      return;\n    }\n\n    this._classNames = value;\n\n    const [type = null] = this._classNames.match(/primary|secondary|tertiary|cta|emphasis/) || [DEFAULT_TYPE];\n    this.type = type as NxButtonType;\n\n    const [size = null] = this._classNames.match(/small-medium|small|medium|large/) || [DEFAULT_SIZE];\n    this.size = size as NxButtonSize;\n\n    this.negative = /negative/.test(this._classNames);\n    this.block = /block/.test(this._classNames);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  public get classNames(): string {\n    return this._classNames;\n  }\n\n  /**\n   * @docs-private\n   * getter used for the modal component as a quickfix\n   * since button got changed from directive to component the reference used by the ngOpenModelOnClick directive\n   * for nxButtons is a reference to component instance instead of an element reference. As a workaround we need a\n   * way to reach the elementRef of the component until the modal gets refactored.\n   */\n  get elementRef() {\n    return this._elementRef;\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { NxButtonBase } from './button-base';\n\n@Component({\n  templateUrl: './button.html',\n  styleUrls: ['button.scss'],\n  // tslint:disable-next-line:component-selector\n  selector: 'button[nxButton]',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['classNames:nxButton']\n})\n\nexport class NxButtonComponent extends NxButtonBase {\n  constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef) {\n    super(changeDetectorRef, elementRef);\n  }\n}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { NxButtonBase } from './button-base';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[nxIconButton]',\n  templateUrl: './button.html',\n  styleUrls: ['button.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['classNames:nxIconButton']\n})\nexport class NxIconButtonComponent extends NxButtonBase {\n  constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef) {\n    super(changeDetectorRef, elementRef);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NxButtonComponent } from './button.component';\nimport { NxIconButtonComponent } from './icon-button.component';\n\n@NgModule({\n  declarations: [ NxButtonComponent, NxIconButtonComponent ],\n  exports: [ NxButtonComponent, NxIconButtonComponent ]\n})\nexport class NxButtonModule { }\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ChangeDetectorRef,\n  AfterContentInit,\n  OnDestroy,\n  ContentChildren,\n  QueryList,\n  Optional,\n  Self,\n  OnInit,\n  ContentChild,\n  ViewChild,\n  ElementRef,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NgControl,\n  NgForm,\n  FormGroupDirective,\n  FormControl,\n} from '@angular/forms';\nimport { Subject, Subscription } from 'rxjs';\nimport { NxLabelComponent } from '@allianz/ngx-ndbx/base';\nimport { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';\n\nlet nextId = 0;\n\nexport class NxCheckboxChangeEvent {\n  constructor(\n  /** The checked value of the checkbox. */\n  public checked: boolean,\n  /** The value of the checkbox. */\n  public value: string,\n  /** The component instance of the checkbox which emitted the change event. */\n  public checkbox: NxCheckboxComponent\n  ) {}\n}\n\n/** Size of the label. */\nexport type NxCheckboxLabelSize = 'small' | 'large';\n\n@Component({\n  selector: 'nx-checkbox-group',\n  templateUrl: 'checkbox-group.component.html',\n  styleUrls: ['checkbox-group.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.nx-checkbox-group]': 'true',\n    '[class.nx-checkbox-group--negative]': 'negative',\n    '[attr.id]': 'id',\n    '[attr.required]': 'required',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-labelledby]': 'this._label?.id  || null',\n    '[attr.role]': '\"group\"',\n  }\n})\nexport class NxCheckboxGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy {\n  @ContentChildren(forwardRef(() => NxCheckboxComponent), {descendants: true})\n  _checkboxes: QueryList<NxCheckboxComponent>;\n\n  @ContentChild(forwardRef(() => NxLabelComponent), {static: false})\n   _label: NxLabelComponent;\n\n  readonly _stateChanges = new Subject<void>();\n  @Output() selectionChange: EventEmitter<NxCheckboxChangeEvent> = new EventEmitter<NxCheckboxChangeEvent>();\n\n  private _id: string = `nx-checkbox-group-${nextId++}`;\n  /** Sets the Id of the checkbox group. */\n  @Input()\n  set id(value: string) {\n    if (this._id !== value) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get id(): string {\n    return this._id;\n  }\n\n  private _name: string;\n  /** Sets the name of the checkboxes inside the nx-checkbox-group. */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get name(): string {\n    return this._name;\n  }\n\n  private _disabled: boolean = false;\n\n  /** Disables all checkboxes inside the nx-checkbox-group. */\n  @Input()\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this._label) {\n      this._label.disabled = this._disabled;\n    }\n    this._stateChanges.next();\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  private _negative: boolean = false;\n  /** Set the negative styles for all the checkboxes inside the nx-checkbox-group */\n  @Input()\n  set negative(value: boolean) {\n    this._negative = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n    this._stateChanges.next();\n  }\n\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _labelSize: NxCheckboxLabelSize;\n  /** Sets the label size of the checkboxes inside the group */\n  @Input()\n  set labelSize(value: NxCheckboxLabelSize) {\n    this._labelSize = value;\n    this._stateChanges.next();\n  }\n\n  get labelSize(): NxCheckboxLabelSize {\n    return this._labelSize;\n  }\n\n  /** Whether the nx-checkbox-group are required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  private _required: boolean;\n\n  private _value: any;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Self() public ngControl: NgControl) {\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    if (this.ngControl) {\n      if (!!this._value) {\n        this._updateSelectedCheckboxFromValue();\n      }\n\n      this._value = this._checkboxes\n                        .filter(checkbox => checkbox.checked)\n                        .map(cb => cb.value);\n    }\n\n    this._updateSelectedCheckboxFromValue();\n    this._checkboxes.changes.subscribe(() => {\n      this._value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);\n      if (this.ngControl) {\n        this.ngControl.control.setValue(this._value);\n      }\n      this._updateSelectedCheckboxFromValue();\n    });\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  writeValue(value: any): void {\n    if (this._value !== value) {\n      this._value = value;\n      this._updateSelectedCheckboxFromValue();\n    }\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  private _onChange: (value: any) => void = () => {};\n\n  private _onTouched: () => any = () => {};\n\n  private _updateSelectedCheckboxFromValue(): void {\n    if (this._checkboxes && this._checkboxes.length && !!this._value && this._value.length) {\n      this._checkboxes.map(checkbox => {\n        checkbox.checked = this._value.indexOf(checkbox.value) !== -1;\n      });\n    }\n  }\n\n  /** @docs-private */\n  change(value) {\n    value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);\n    this._onChange(value);\n    if (this._onTouched) {\n      this._onTouched();\n    }\n    this.selectionChange.emit(new NxCheckboxChangeEvent(value.checked, value.value, value));\n  }\n}\n\n@Component({\n  selector: 'nx-checkbox',\n  templateUrl: 'checkbox.component.html',\n  styleUrls: ['checkbox.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.nx-checkbox]': 'true',\n    '[class.disabled]': 'disabled',\n    '[class.nx-checkbox--label-large]': 'labelSize === \"large\"',\n    '[class.nx-checkbox--label-small]': 'labelSize === \"small\"',\n    '[class.nx-checkbox--negative]': 'negative',\n    '[class.has-error]': '_controlInvalid() || null',\n    '[attr.required]': 'required',\n    '[attr.aria-invalid]': '_controlInvalid() || null',\n  }\n})\n\nexport class NxCheckboxComponent implements ControlValueAccessor, OnDestroy, OnInit {\n  private _parentChangeSubscription: Subscription;\n  private _id: string = (nextId++).toString();\n  private _disabled: boolean = false;\n  private _negative: boolean = false;\n  private _labelSize: NxCheckboxLabelSize = 'small';\n  private _checked = false;\n  private _name: string = null;\n\n  /** @docs-private */\n  @ViewChild('checkboxLabelWrapper', { static: true }) _checkboxLabelWrapper: ElementRef;\n\n  /**\n   * Id of the checkbox.\n   *\n   * If not set, the checkbox gets an incremented value by default.\n   */\n  @Input()\n  set id(value: string) {\n    if (value !== this._id) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get id() {\n    return `nx-checkbox-${this._id}`;\n  }\n\n  /** Name of the checkbox. */\n  @Input()\n  set name(name: string) {\n    this._name = name;\n  }\n\n  get name(): string {\n    return (this.checkboxGroup && this.checkboxGroup.name) ? this.checkboxGroup.name : this._name;\n  }\n\n  /** Whether the checkbox is disabled. */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get disabled(): boolean {\n    return (this.checkboxGroup && this.checkboxGroup.disabled) ? this.checkboxGroup.disabled : this._disabled;\n  }\n\n  /**\n   * Sets the label size of the checkbox. Default value: small\n   */\n  @Input()\n  set labelSize(value: NxCheckboxLabelSize) {\n    this._labelSize = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get labelSize(): NxCheckboxLabelSize {\n    return (this.checkboxGroup && this.checkboxGroup.labelSize) ? this.checkboxGroup.labelSize : this._labelSize;\n  }\n\n  /**\n   * Whether the checkbox has negative styling.\n   */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._negative) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get negative(): boolean {\n    return (this.checkboxGroup && this.checkboxGroup.negative) ? this.checkboxGroup.negative : this._negative;\n  }\n\n  /** Whether the checkbox is checked. */\n  @Input()\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._checked) {\n      if (this._indeterminate) {\n        this._setIndeterminate(false);\n      }\n      this._setChecked(newValue);\n    }\n  }\n\n  get checked() {\n    return this._checked;\n  }\n\n  private _indeterminate = false;\n\n  /** Whether the checkbox is indeterminated. */\n  @Input()\n  set indeterminate(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._indeterminate !== newValue) {\n      if (this._checked) {\n        this._setChecked(false);\n      }\n      this._setIndeterminate(newValue);\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get indeterminate() {\n    return this._indeterminate;\n  }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  private _required: boolean;\n\n  /** Sets the value of the checkbox. Default value is the checked status. */\n  @Input()\n  get value(): string {\n    return this._value ? this._value : this.checked.toString();\n  }\n\n  set value(value: string) {\n    this._value = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _value: string;\n\n  /** An event emitted when the indeterminate value has changed */\n  @Output()\n  indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n  /** An event emitted when the checked value has changed.\n   *\n   * Emits the boolean checked value of the changed checkbox.\n   */\n  @Output()\n  checkedChange = new EventEmitter<boolean>(false);\n\n  /** An event emitted when the checked value has changed.\n   *\n   * Emits a NxCheckboxChangeEvent.\n   */\n  @Output()\n  checkboxChange: EventEmitter<NxCheckboxChangeEvent> = new EventEmitter<NxCheckboxChangeEvent>();\n\n  /** @docs-private */\n  get labelHasContent() {\n    return !!this._checkboxLabelWrapper.nativeElement.innerHTML.trim();\n  }\n\n  /** @docs-private\n   * Callback for when the content of the label has changed.\n   */\n  labelContentChanged() {\n    this._changeDetectorRef.detectChanges();\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() public checkboxGroup: NxCheckboxGroupComponent,\n              @Self() @Optional() public ngControl: NgControl,\n              @Optional() private _parentForm: NgForm,\n              @Optional() private _parentFormGroup: FormGroupDirective\n  ) {\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n  }\n\n  /** @docs-private */\n  _controlInvalid(): boolean {\n\n    const parent = this._parentFormGroup || this._parentForm;\n    let control = null;\n\n    if (this.checkboxGroup && this.checkboxGroup.ngControl) {\n      control = this.checkboxGroup.ngControl;\n    } else {\n      control = this.ngControl ? this.ngControl.control as FormControl : null;\n    }\n\n    return this._errorStateMatcher.isErrorState(control, parent);\n  }\n\n  ngOnInit() {\n    if (this.checkboxGroup) {\n      this.name = this.checkboxGroup.name;\n      // when relevant properties of the parent like name and disabled change\n      // we need to let change detection know that the template needs an update\n      this._parentChangeSubscription = this.checkboxGroup._stateChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._parentChangeSubscription) {\n      this._parentChangeSubscription.unsubscribe();\n    }\n  }\n\n  private _setIndeterminate(value: boolean) {\n    this._indeterminate = value;\n    this.indeterminateChange.emit(this._indeterminate);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _setChecked(value: boolean) {\n    this._checked = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Toggles the checked state of the checkbox. */\n  public toggle() {\n    this.checked = !this.checked;\n    this.onChangeCallback(this.checked);\n    if (this.checkboxGroup !== null) {\n      this.checkboxGroup.change(this);\n    }\n  }\n\n  writeValue(value: any): void {\n    if (value === null) {\n      value = false;\n    }\n    if (value !== this.checked) {\n      this.checked = value;\n    }\n  }\n\n  private onChangeCallback = (_: any) => {};\n\n  registerOnChange(onChange: any): void {\n    this.onChangeCallback = onChange;\n  }\n\n  private onTouchedCallback = () => {};\n\n  registerOnTouched(onTouched: any): void {\n    this.onTouchedCallback = onTouched;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  touch() {\n    this.onTouchedCallback();\n  }\n\n  /** @docs-private */\n  _onInputClick(event): void {\n    // stop the propagation of the native click on the checkbox input so that a click is not triggered twice\n    event.stopPropagation();\n    if (!this.disabled) {\n      this.toggle();\n      this.checkedChange.emit(this._checked);\n      this.checkboxChange.emit(this._createChangeEvent(this._checked));\n    }\n  }\n\n  /**@docs-private */\n  private _createChangeEvent(checkedValue: boolean): NxCheckboxChangeEvent {\n    const event = new NxCheckboxChangeEvent(checkedValue, this.value, this);\n    event.checked = checkedValue;\n    event.value = this.value;\n    event.checkbox = this;\n    return event;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxCheckboxComponent } from './checkbox.component';\nimport { NxCheckboxGroupComponent } from './checkbox.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxErrorModule, NxLabelModule } from '@allianz/ngx-ndbx/base';\nimport {ObserversModule} from '@angular/cdk/observers';\n\n@NgModule({\n  declarations: [\n    NxCheckboxComponent,\n    NxCheckboxGroupComponent\n  ],\n  exports: [\n    NxCheckboxComponent,\n    NxCheckboxGroupComponent,\n    NxLabelModule,\n    NxErrorModule\n  ],\n  imports: [\n    CommonModule,\n    NxIconModule,\n    ObserversModule\n  ]\n})\nexport class NxCheckboxModule { }\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component, ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewChild\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NG_VALUE_ACCESSOR,\n  NgControl, NgForm,\n} from '@angular/forms';\nimport { Subject, Subscription } from 'rxjs';\nimport { NxLabelComponent } from '@allianz/ngx-ndbx/base';\n\n/** The change event object emitted by the radio group and radio button. */\nexport class NxRadioChange {\n  source: NxRadioComponent;\n  value: any;\n\n  /** The NxRadioComponent that emits the change event. NxRadioChange object can be instantiated with source radio component and a value. */\n  constructor(source: NxRadioComponent, value: any) {\n    this.source = source;\n    this.value = value;\n  }\n}\n\n/** Label Size Types */\nexport type LabelSize  = 'small' | 'big';\n\nlet nextId = 0;\n\n@Component({\n  selector: 'nx-radio-group',\n  templateUrl: './radio-group.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'radiogroup',\n    '[attr.id]': 'id',\n    '[attr.required]': 'required',\n    '[class.nx-radio-group--negative]': 'negative',\n    '[attr.aria-labelledby]': 'this._label?.id  || null'\n  },\n  styleUrls: [ 'radio-button-group.scss' ]\n})\nexport class NxRadioGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy {\n\n  @ContentChild(forwardRef(() => NxLabelComponent), {static: false})\n  _label: NxLabelComponent;\n\n  // emits when the internal state changes on properties which are relevant\n  // for the radio buttons so that they can mark themself for check\n  readonly _stateChanges = new Subject<void>();\n\n  private _id: string = `nx-radio-group-${nextId++}`;\n  /** Sets the Id of the radio group. */\n  @Input('id')\n  set id(value: string) {\n    if (this._id !== value) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get id(): string {\n    return this._id;\n  }\n  private _disabled: boolean = false;\n\n  /** Whether every radio button in this group should be disabled. */\n  @Input('nxDisabled')\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    // inform childs about the change where CD should be triggered\n    this._stateChanges.next();\n  }\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  private _negative: boolean = false;\n  /** Whether the radio group should have negative styling. */\n  @Input()\n  set negative(value: boolean) {\n    this._negative = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _required: boolean = false;\n  /** Sets if at least an option should be selected. */\n  @Input()\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._stateChanges.next();\n  }\n  get required(): boolean {\n    return this._required;\n  }\n\n  /** An event is dispatched on each group value change. */\n  @Output('nxGroupValueChange') groupValueChange: EventEmitter<NxRadioChange> = new EventEmitter<NxRadioChange>();\n  private _name: string = `nx-radio-group-${nextId++}`;\n  private _value: any = null;\n  // The currently selected radio button; should match _value\n  private _selected: NxRadioComponent | null = null;\n\n  @ContentChildren(forwardRef(() => NxRadioComponent), {descendants: true})\n  _radios: QueryList<NxRadioComponent>;\n\n  private _onChange: (value: any) => void = () => {};\n  private _onTouched: () => any = () => {};\n\n  get name(): string {\n    return this._name;\n  }\n\n  // this is also the name attribute, which is mandatory in conjunction with ngModel, hence no nx prefix\n  /** Sets the name of this radio group, which is mandatory in conjunction with ngModel (Default: null). */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this._stateChanges.next();\n  }\n\n  get value(): any { return this._value; }\n\n  /** Sets the value of the selected radion button in this group (Default: null). */\n  @Input('nxValue')\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() public _parentForm: NgForm,\n              @Optional() public _parentFormGroup: FormGroupDirective) {\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._updateSelectedRadioFromValue();\n    this._checkSelectedRadioButton();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** @docs-private this is meant to be called by the radio buttons in this group */\n  change(value) {\n    this.value = value;\n    this._onChange(value);\n    this.groupValueChange.emit(new NxRadioChange(this._selected, this._value));\n  }\n\n  /** @docs-private this is meant to be called by the radio buttons in this group. */\n  touch() {\n    if (this._onTouched) {\n      this._onTouched();\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value === this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  private _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n}\n\n@Component({\n  selector: 'nx-radio',\n  templateUrl: 'radio-button.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ 'radio-button.scss' ],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxRadioComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[attr.required]': 'required',\n    '[class.nx-radio-button--small-label]': 'labelSize === \"small\"',\n    '[class.nx-radio-button--big-label]': 'labelSize === \"big\"',\n    '[class.nx-radio--negative]': 'negative',\n    '[class.has-error]': '_controlInvalid() || null',\n    '[attr.aria-invalid]': '_controlInvalid() || null',\n  }\n})\nexport class NxRadioComponent implements ControlValueAccessor, OnInit, OnDestroy {\n  /** @docs-private */\n  @ViewChild('radioLabelWrapper', { static: true }) _radioLabelWrapper: ElementRef;\n  private _parentChangeSubscription: Subscription;\n\n  private _id: string = `nx-radio-${nextId++}`;\n  /** Sets the id of the radio component. */\n  @Input('id')\n  set id(value: string) {\n    if (this._id !== value) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get id(): string {\n    return this._id;\n  }\n\n  /** @docs-private */\n  get inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  /** @docs-private */\n  get labelId(): string {\n    return `${this.id}-label`;\n  }\n\n  private _name: string = null;\n  // this is also the name attribute, which is mandatory in conjunction with ngModel, hence no nx prefix\n  /** Sets the name of this radio component, which is mandatory in conjunction with ngModel (Default: null). */\n  @Input('name')\n  set name(value: string) {\n    if (this._name !== value) {\n      this._name = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get name(): string {\n    return (this.radioGroup && this.radioGroup.name) ? this.radioGroup.name : this._name;\n  }\n\n  private _labelSize: LabelSize = 'big';\n  /** Sets the label size of the radio button.\n   * The default value is `big`.\n  */\n  @Input()\n  set labelSize(value: LabelSize) {\n    if (this._labelSize !== value) {\n      this._labelSize = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get labelSize(): LabelSize {\n    return this._labelSize;\n  }\n\n  private _negative:  boolean = false;\n  /**\n   * Whether the negative set of styles should be used.\n   *\n   * If the radio button is placed in a radio group, the negative value\n   * is overwritten by the group's negative value.\n   */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._negative !== newValue) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get negative(): boolean {\n    return this.radioGroup ? this.radioGroup.negative : this._negative;\n  }\n\n  /** An event is dispatched on each value change. */\n  @Output('nxValueChange') valueChange: EventEmitter<NxRadioChange> = new EventEmitter<NxRadioChange>();\n  private _value: any = null;\n  private _checked: boolean = false;\n  private _disabled: boolean = false;\n  private _required: boolean = false;\n\n  get value(): any {\n    return this._value;\n  }\n\n  /** @docs-private */\n  get labelHasContent(): boolean {\n    return !!this._radioLabelWrapper.nativeElement.innerHTML.trim();\n  }\n\n  /** @docs-private\n   * Callback for when the content of the label has changed.\n   */\n  labelContentChanged() {\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Sets the value of the form control element (Default: null). */\n  @Input('nxValue')\n  set value(value: any) {\n    if (value !== this._value) {\n      this._value = value;\n      this.onChangeCallback(value);\n    }\n  }\n\n  /** @docs-private */\n  get checked(): boolean {\n    return this._checked;\n  }\n\n  /** Whether the radio component is selected. */\n  @Input('nxChecked')\n  set checked(value: boolean) {\n    if (this._checked !== value) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** @docs-private */\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup && this.radioGroup.disabled);\n  }\n\n  /** Whether the radio button should be disabled or not. */\n  @Input('nxDisabled')\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** @docs-private */\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n\n  /** Sets if at least a radio button should be selected. */\n  @Input()\n  set required(value: boolean) {\n    this._required = value;\n    // needed when the outer component is set to onPush because it is a native property\n    // on the host element\n    this._changeDetectorRef.markForCheck();\n  }\n\n  constructor(@Optional() public radioGroup: NxRadioGroupComponent,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      this.name = this.radioGroup.name;\n      // when relevant properties of the parent like name and disabled change\n      // we need to let change detection know that the template needs an update\n      this._parentChangeSubscription = this.radioGroup._stateChanges.subscribe(()  => {\n        this._changeDetectorRef.markForCheck();\n      });\n\n      if (this.radioGroup.value === this._value) {\n        this._checked = true;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._parentChangeSubscription) {\n      this._parentChangeSubscription.unsubscribe();\n    }\n  }\n\n  writeValue(value: any): void {\n    if (value === this._value) {\n      this._checked = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  private onChangeCallback = (_: any) => {};\n\n  registerOnChange(onChange: any): void {\n    this.onChangeCallback = onChange;\n  }\n\n  private onTouchedCallback = () => {};\n\n  registerOnTouched(onTouched: any): void {\n    this.onTouchedCallback = onTouched;\n  }\n\n  /** @docs-private */\n  touch() {\n    this.onTouchedCallback();\n\n    if (this.radioGroup) {\n      this.radioGroup.touch();\n    }\n  }\n\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n    this._checked = true;\n    this.valueChange.emit(new NxRadioChange(this, this._value));\n    this.onChangeCallback(this.value);\n\n    if (this.radioGroup && this.value !== this.radioGroup.value) {\n      this.radioGroup.change(this.value);\n    }\n  }\n\n  _onInputClick(event: Event) {\n    // make sure click event propagation on the visually hidden input\n    // are stopped to prevent multiple events bubbling up.\n    event.stopPropagation();\n  }\n\n  /** @docs-private */\n  _controlInvalid(): boolean {\n    const form = this.radioGroup && (this.radioGroup._parentFormGroup || this.radioGroup._parentForm);\n    return !!(this.radioGroup && this.radioGroup.ngControl && this.radioGroup.ngControl.invalid\n      && (this.radioGroup.ngControl.touched || (form && form.submitted)));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxRadioComponent } from './radio-button';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxRadioGroupComponent } from './radio-button';\nimport { NxErrorModule, NxLabelModule } from '@allianz/ngx-ndbx/base';\nimport {ObserversModule} from '@angular/cdk/observers';\n\n@NgModule({\n  declarations: [\n    NxRadioComponent,\n    NxRadioGroupComponent\n  ],\n  exports: [\n    NxRadioComponent,\n    NxRadioGroupComponent,\n    NxErrorModule,\n    NxLabelModule\n  ],\n  imports: [\n    CommonModule,\n    NxIconModule,\n    ObserversModule\n  ]\n})\nexport class NxRadioModule { }\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n/** A type that specifies the font size of a copytext. */\nexport type NxCopytextType = 'small' | 'medium' | 'normal' | 'large';\n\nconst DEFAULT_TYPE = 'normal';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'p[nxCopytext]',\n  styleUrls: ['copytext.component.scss'],\n  template: `<ng-content></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.nx-copy]': 'true',\n    '[class.nx-copy--small]': 'type === \"small\"',\n    '[class.nx-copy--medium]': 'type === \"medium\"',\n    '[class.nx-copy--normal]': 'type === \"normal\"',\n    '[class.nx-copy--large]': 'type === \"large\"',\n    '[class.nx-copy--negative]': 'negative',\n  }\n})\nexport class NxCopytextComponent {\n  private _classNames: string;\n\n  /** @docs-private */\n  type: NxCopytextType = DEFAULT_TYPE;\n\n  /** @docs-private */\n  negative: boolean = false;\n\n  /**\n   * Sets the type and whether the negative set of styling should be used.\n   *\n   * You can combine the values of type NxCopytextType and 'negative'.\n   *\n   * Default type: 'normal'\n   */\n  @Input('nxCopytext')\n  set classNames(value: string) {\n    if (this._classNames === value) {\n      return;\n    }\n    this._classNames = value;\n    const [type = null] = this._classNames.match(/small|medium|normal|large/) || [DEFAULT_TYPE];\n    this.type = type as NxCopytextType;\n\n    this.negative = !!this._classNames.match(/negative/);\n  }\n\n  get classNames(): string {\n    return this._classNames;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NxCopytextComponent } from './copytext.component';\n\n@NgModule({\n  declarations: [ NxCopytextComponent ],\n  exports: [ NxCopytextComponent ]\n})\nexport class NxCopytextModule { }\n","import { Component } from '@angular/core';\nimport { Input } from '@angular/core';\n\n/** Types of headlines */\nexport type HeadlineType = 'page' | 'page-bold-caps' | 'section' | 'subsection-large'\n                    | 'subsection-medium' | 'subsection-small' | 'subsection-xsmall';\n\nconst DEFAULT_TYPE = 'section';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: '[nxHeadline]',\n  template: `<ng-content></ng-content>`,\n  styleUrls: ['headline.component.scss'],\n  host: {\n    '[class.nx-heading--page]': 'type === \"page\"',\n    '[class.nx-heading--page-bold-caps]': 'type === \"page-bold-caps\"',\n    '[class.nx-heading--section]': 'type === \"section\"',\n    '[class.nx-heading--subsection-large]': 'type === \"subsection-large\"',\n    '[class.nx-heading--subsection-medium]': 'type === \"subsection-medium\"',\n    '[class.nx-heading--subsection-small]': 'type === \"subsection-small\"',\n    '[class.nx-heading--subsection-xsmall]': 'type === \"subsection-xsmall\"',\n\n    '[class.nx-heading--negative]': 'negative',\n  }\n})\n\nexport class NxHeadlineComponent {\n  private _classNames: string;\n  /** @docs-private */\n  public type: HeadlineType = DEFAULT_TYPE;\n  /** @docs-private */\n  public negative: boolean = false;\n\n  /** Changes the type of the headline which affects the visual appearance.\n   * You can combine a HeadlineType and 'negative'. */\n  @Input('nxHeadline')\n  set classNames(value: string) {\n    if (this._classNames === value) {\n      return;\n    }\n\n    this._classNames = value;\n    const typeRegex = /page-bold-caps|page|section|subsection-large|subsection-medium|subsection-small|subsection-xsmall/;\n    const [type = null] = this._classNames.match(typeRegex) || [DEFAULT_TYPE];\n    this.type = type as any;\n\n    this.negative = !!this._classNames.match(/negative/);\n  }\n\n  get classNames(): string {\n    return this._classNames;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NxHeadlineComponent } from './headline.component';\n\n@NgModule({\n  declarations: [ NxHeadlineComponent ],\n  exports: [ NxHeadlineComponent ]\n})\nexport class NxHeadlineModule { }\n","import { NxIconComponent } from '@allianz/ngx-ndbx/icon';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ElementRef,\n  Renderer2,\n  Input,\n  ChangeDetectorRef\n} from '@angular/core';\n\nimport { MappedStyles } from '@allianz/ngx-ndbx/core';\n\n/** The size of the link. */\nexport type NxLinkSize = 'small' | 'large';\n\nconst MAPPING = {\n  'black': 'nx-link--black',\n  'negative': 'nx-link--negative',\n  'text': 'nx-link--text',\n  'block': 'nx-link--block',\n  'icon-right': 'nx-link--icon-right'\n};\n\nconst DEFAULT_CLASSES = [ 'nx-link' ];\n\n@Component({\n  selector: 'nx-link',\n  styleUrls: [ './link.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '<ng-content></ng-content>',\n  inputs: ['classNames: nxStyle'],\n  host: {\n    '[class.nx-link--small]': 'this.size === \"small\"',\n    '[class.nx-link--large]': 'this.size === \"large\"'\n  }\n})\n\nexport class NxLinkComponent extends MappedStyles implements AfterContentInit {\n  private _size: NxLinkSize = 'small';\n\n  /** @docs-private */\n  @ContentChild(NxIconComponent, {static: false}) icon: NxIconComponent;\n\n  /**\n   * Sets the style of the link, thereby altering the visual appearance.\n   *\n   * You can use any combination of 'black', 'icon-right', 'negative', 'text' and 'block' (deprecated).\n   */\n  classNames;\n\n  /** Sets the size of the link. Default: 'small'. */\n  @Input()\n  set size(value: NxLinkSize) {\n    if (this._size !== value) {\n      this._size = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get size(): NxLinkSize {\n    return this._size;\n  }\n\n  constructor(_elementRef: ElementRef,\n              protected _renderer: Renderer2,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    super(MAPPING, DEFAULT_CLASSES, _elementRef, _renderer);\n  }\n\n  ngAfterContentInit() {\n    // Add a specific link class that the css gets more specific than the nx-icon css\n    const icons = this.elementRef.nativeElement.querySelectorAll('nx-icon');\n    for (let i = 0; i < icons.length; i++) {\n      this._renderer.addClass(icons[i], 'nx-link__icon');\n    }\n  }\n\n  /**\n   * @docs-private\n   * getter used for the modal component as a quickfix\n   * since button got changed from directive to component the reference used by the ngOpenModelOnClick directive\n   * for nxButtons is a reference to component instance instead of an element reference. As a workaround we need a\n   * way to reach the elementRef of the component until the modal gets refactored.\n   */\n  get elementRef() {\n    return this._elementRef;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NxLinkComponent } from './link.component';\n\n@NgModule({\n  declarations: [ NxLinkComponent ],\n  exports: [ NxLinkComponent ]\n})\nexport class NxLinkModule {\n}\n","/** @docs-private */\nexport abstract class ToggleButton {\n  id;\n  value;\n  checked;\n  name;\n  negative;\n  disabled;\n  tabIndex;\n  checkedChange;\n  selectionChange;\n  toggleButton;\n  abstract toggle(event);\n  abstract setGroupSelection();\n\n}\n","import {\n  Component,\n  ContentChildren,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  QueryList,\n  AfterViewInit,\n  ChangeDetectorRef,\n  OnDestroy,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { takeUntil, tap, startWith, filter } from 'rxjs/operators';\nimport { merge, Subject } from 'rxjs';\n\nimport { ToggleButton } from '../circle-toggle/toggle-button';\nimport { ToggleChangeEvent } from '../circle-toggle/circle-toggle.component';\n\nlet nextId = 0;\n\n@Component({\n  selector: 'nx-circle-toggle-group',\n  template: `<ng-content></ng-content>`,\n  styleUrls: ['./circle-toggle-group.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxCircleToggleGroupComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.is-responsive]': 'responsive',\n    '[class.is-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-labelledby]': 'name',\n    '[attr.name]': 'name',\n    '[attr.id]': 'id',\n    '[class.nx-circle-toggle-group]': 'true',\n    'role': 'radiogroup'\n  }\n})\nexport class NxCircleToggleGroupComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {\n\n  @ContentChildren(ToggleButton) private _buttons: QueryList<ToggleButton>;\n\n  private _id = `nx-circle-toggle-group-${nextId++}`;\n\n  /**\n   * Id of the circle toggle group.\n   *\n   * If not set, the circle toggle group gets an incremented value by default.\n   */\n  set id(value: string) {\n    this._id = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get id(): string {\n    return this._id;\n  }\n  private _destroyed: Subject<void> = new Subject();\n\n  /** An event emitted when the selection changes. Outputs the value of the currently selected button. */\n  @Output()\n  valueChange: EventEmitter<any> = new EventEmitter();\n\n  private _name: string = `toggle-group-${nextId++}`;\n\n  /** Name that is used for accessibility. */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this.updateToggleButtonsNames();\n    this._changeDetectorRef.markForCheck();\n  }\n  get name(): string {\n    return this._name;\n  }\n\n  private _disabled: boolean;\n\n  /** Whether the circle toggle group is disabled. */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n    if (this.buttons) {\n      this.buttons.forEach(button => button.disabled = value);\n    }\n  }\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  _negative: boolean = false;\n  /** Whether the circle toggle group uses the negative styling. */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this.negative !== newValue) {\n      this._negative = newValue;\n    }\n    if (this.buttons) {\n      this.buttons.forEach(button => button.negative = value);\n    }\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _value;\n  /** The value of the selected circle toggle in the circle toggle group. */\n  @Input()\n  set value(value: string) {\n    this.writeValue(value);\n  }\n\n  get value(): string {\n    return this._value;\n  }\n\n  private _responsive: boolean = true;\n  /** Whether the circle toggle group has a responsive behavior. */\n  @Input()\n  set responsive(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this.responsive) {\n      this._responsive = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get responsive(): boolean {\n    return this._responsive;\n  }\n\n  private onChangeCallback = (value: string) => { };\n  private onTouchedCallback = () => { };\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  writeValue(value: any) {\n    if (this.value !== value) {\n      this._value = value;\n      this.notifySelectedChild(value);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  ngAfterViewInit() {\n\n    this.subscribeToSelectionChanges();\n\n    // react if a content child is deleted, added etc.\n    this.buttons.changes\n      .pipe(\n        startWith(this.buttons),\n        filter(toggles => toggles.length > 0),\n        tap(toggles =>\n          Promise.resolve().then(() => {\n            toggles.forEach(toggle => toggle.toggleButton.resetClasses());\n            this.buttons.first.toggleButton.setFirstButton();\n            this.buttons.last.toggleButton.setLastButton();\n          })\n        ),\n        takeUntil(this._destroyed))\n      .subscribe(() => this.subscribeToSelectionChanges());\n  }\n\n  /** @docs-private */\n  subscribeToSelectionChanges() {\n    const changedOrDestroyed = merge(this.buttons.changes, this._destroyed);\n\n    merge(...this.buttons.map(button => button.selectionChange))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe((change: ToggleChangeEvent) => {\n        this.onChangeCallback(change.value);\n        this.valueChange.emit(change.value);\n      });\n  }\n\n  /**\n   * @docs-private\n   * inform the selected button if the group selection is set programattically at the beginning\n   */\n  notifySelectedChild(newValue: string) {\n    if (this.buttons) {\n      const selected = this.buttons.find((button) => button.value === newValue);\n      if (selected) {\n        selected.setGroupSelection();\n      }\n    }\n  }\n\n  /** @docs-private */\n  updateToggleButtonsNames(): void {\n    if (this.buttons) {\n      this.buttons.forEach(button => button.name = this.name);\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChangeCallback = fn;\n  }\n  registerOnTouched(fn: any): void {\n    this.onTouchedCallback = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  get selectedButton(): ToggleButton {\n    return this.buttons ? this.buttons.find(button => button.checked) : null;\n  }\n\n  /** @docs-private */\n  get buttons() {\n    return this._buttons;\n  }\n}\n","import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\n\n/** @docs-private */\n@Component({\n  selector: 'nx-mobile-toggle-button',\n  templateUrl: 'mobile-toggle-button.component.html',\n  styleUrls: ['mobile-toggle-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.is-disabled]': 'disabled',\n    '[class.is-negative]': 'negative',\n    '[class.is-first]': 'isFirst',\n    '[class.is-last]': 'isLast',\n    '[class.is-flipped]': 'checked'\n  }\n})\nexport class NxMobileToggleButtonComponent {\n\n  @Input()\n  checked: boolean = false;\n\n  @Input()\n  negative: boolean = false;\n\n  @Input()\n  disabled: boolean = false;\n\n  @Input()\n  hint: string;\n\n  @Input()\n  label: string;\n\n  @Input()\n  circleText: string;\n\n  /** @docs-private */\n  isFirst: boolean;\n\n  /** @docs-private */\n  isLast: boolean;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** @docs-private */\n  setFirstButton() {\n    this.isFirst = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** @docs-private */\n  setLastButton() {\n    this.isLast = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** @docs-private */\n  resetClasses() {\n    this.isFirst = false;\n    this.isLast = false;\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input, Output, ViewChild, Optional, OnInit, OnDestroy, AfterViewInit, HostListener, ChangeDetectorRef, ChangeDetectionStrategy\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n\nimport { ToggleButton } from './toggle-button';\nimport { NxCircleToggleGroupComponent } from '../circle-toggle-group/circle-toggle-group.component';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NxMobileToggleButtonComponent } from '../mobile-toggle-button/mobile-toggle-button.component';\n\nexport class ToggleChangeEvent {\n  /** A toggle button */\n  button: ToggleButton;\n\n  /** The value of the toggle button that is sent with the event. */\n  value: string;\n\n  constructor(button, value) {\n    this.button = button;\n    this.value = value;\n  }\n}\n\nlet nextId = 0;\n\n@Component({\n  selector: 'nx-circle-toggle',\n  templateUrl: 'circle-toggle.component.html',\n  styleUrls: ['circle-toggle.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: ToggleButton,\n      useExisting: forwardRef(() => NxCircleToggleComponent)\n    },\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxCircleToggleComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.nx-toggle-circle]': 'true',\n    '[class.in-group]': 'inGroup',\n    '[class.is-disabled]': 'disabled',\n    '[class.is-responsive]': 'responsive'\n  }\n})\nexport class NxCircleToggleComponent extends ToggleButton implements\nOnInit, OnDestroy, AfterViewInit, ControlValueAccessor {\n\n  private _id: string = `toggle-button-${nextId++}`;\n\n  /** @docs-private */\n  inGroup: boolean = false;\n\n  /**\n   * Id of the circle toggle.\n   *\n   * If not set, the circle toggle gets an incremented value by default.\n   */\n  set id(value: string) {\n    this._id = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get id(): string {\n    return this._id;\n  }\n\n  private _name: string = null;\n\n  /** Name that is used for accessibility. */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get name(): string {\n    return this._name;\n  }\n\n  /**\n   * An event that is emitted when the checked state fo the circle toggle changes.\n   */\n  @Output()\n  checkedChange = new EventEmitter<boolean>();\n\n  /**\n   * An event that is emitted when the checked state of the circle toggle changes.\n   * The event object contains the circle toggle itself and its value (see ToggleChangeEvent).\n   */\n  @Output()\n  selectionChange = new EventEmitter<ToggleChangeEvent>();\n\n  _checked: boolean = false;\n  /** Whether the circle toggle is checked. */\n  @Input()\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this.checked !== newValue) {\n      this._checked = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get checked(): boolean {\n    return this._checked;\n  }\n\n  private _value: string = null;\n\n  /** The value that is used in the model. */\n  @Input()\n  set value(newValue: string) {\n    this._value = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get value(): string {\n    return this._value;\n  }\n\n  private _iconName: string = null;\n  /** Id of the icon that should be displayed. */\n  @Input('icon')\n  set iconName(name: string) {\n    this._iconName = name;\n    this._changeDetectorRef.markForCheck();\n  }\n  get iconName(): string {\n    return this._iconName;\n  }\n\n  private _svg: string = null;\n\n  /** SVG that is displayed if the circle toggle is unchecked. */\n  @Input()\n  set svg(src: string) {\n    this._svg = src;\n    this._changeDetectorRef.markForCheck();\n  }\n  get svg(): string {\n    return this._svg;\n  }\n\n  private _svgChecked: string = null;\n\n  /** SVG that is displayed if the circle toggle is checked. */\n  @Input()\n  set svgChecked(src: string) {\n    this._svgChecked = src;\n    this._changeDetectorRef.markForCheck();\n  }\n  get svgChecked(): string {\n    return this._svgChecked;\n  }\n\n  private _circleText: string = null;\n\n  /** A text that is displayed inside the circle toggle. */\n  @Input()\n  set circleText(value: string) {\n    if (value !== this._circleText) {\n      this._circleText = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get circleText(): string {\n    return this._circleText;\n  }\n\n  private _label: string = null;\n\n  /** Label displayed below the circle. */\n  @Input()\n  set label(value: string) {\n    this._label = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get label(): string {\n    return this._label;\n  }\n\n  private _hint: string = null;\n\n  /** Additional hint displayed below the label. */\n  @Input()\n  set hint(value: string) {\n    this._hint = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get hint(): string {\n    return this._hint;\n  }\n\n  private _negative;\n\n  /** Whether the circle toggle uses the negative set of styling. */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this.negative !== newValue) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get negative() {\n    return this._negative;\n  }\n\n  private _responsive;\n\n  /** Whether the circle toggle has a responsive behavior. */\n  @Input()\n  set responsive(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this.responsive !== newValue) {\n      this._responsive = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get responsive() {\n    return this._responsive;\n  }\n\n  private _disabled: boolean;\n\n  /** Whether the circle toggle is disabled. */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this.disabled !== newValue) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  /** @docs-private */\n  @ViewChild(NxMobileToggleButtonComponent, { static: true })\n  toggleButton: NxMobileToggleButtonComponent;\n\n  private _hover: boolean = false;\n\n  /** touched is set to true on touch devices. */\n  _touched: boolean = false;\n\n  /** @docs-private */\n  @HostListener('mouseenter') onMouseEnter() {\n    if (!this._touched) {\n      this._hover = true;\n    }\n  }\n\n  /** @docs-private */\n  @HostListener('mouseleave') onMouseLeave() {\n    if (!this._touched) {\n      this._hover = false;\n    }\n  }\n\n  /** @docs-private */\n  @HostListener('touchstart') onTouchStart() {\n    this._touched = true;\n  }\n\n  _removeUniqueSelectionListener: () => void = () => { };\n\n  private onChangeCallback = (checked: boolean) => { };\n  private onTouchedCallback = () => { };\n\n  constructor(/** @docs-private */ @Optional() public toggleGroup: NxCircleToggleGroupComponent,\n    private _checkedDispatcher: UniqueSelectionDispatcher, private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n\n    if (this.toggleGroup) {\n      this.name = this.toggleGroup.name;\n    }\n  }\n\n  ngOnInit() {\n    if (this.toggleGroup) {\n      this.attachListenerForGroup();\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.toggleGroup) {\n      Promise.resolve().then(() => {\n        this.inGroup = true;\n        this.negative = this.toggleGroup.negative;\n        this.disabled = this.toggleGroup.disabled;\n        this.responsive = this.toggleGroup.responsive;\n        this.id = this.toggleGroup.id + `-button-${nextId++}`;\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    // function returned by the listener\n    this._removeUniqueSelectionListener();\n  }\n\n  /** @docs-private */\n  attachListenerForGroup() {\n    this._removeUniqueSelectionListener =\n      this._checkedDispatcher.listen((groupId: string, buttonId: string) => {\n        if (this.id !== buttonId && groupId === this.toggleGroup.id) {\n          this.checked = false;\n        }\n      });\n  }\n\n  writeValue(newValue): void {\n    this.checked = newValue;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouchedCallback = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  toggle(event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if ((this.toggleGroup && this.checked) || this.disabled) {\n      return;\n    } else {\n      this.checked = !this.checked;\n      this.onChangeCallback(this.checked);\n      this.checkedChange.emit(this.checked);\n      this.selectionChange.emit(new ToggleChangeEvent(this, this.value));\n      if (this.toggleGroup) {\n        this._checkedDispatcher.notify(this.toggleGroup.id, this.id);\n      }\n    }\n  }\n\n  /**\n   * @docs-private\n   *\n   * method called by the group if the internal value of the group is changed programatically,\n   * does not trigger change emission\n   */\n  setGroupSelection() {\n    // propagate changes only if the value in the group is different than the button checked value\n    if (!this.checked) {\n      this.checked = !this.checked;\n      this.onChangeCallback(this.checked);\n      this._checkedDispatcher.notify(this.toggleGroup.id, this.id);\n    }\n  }\n\n  /** @docs-private */\n  get svgButton(): boolean {\n    return !!this.svg && !!this.svgChecked;\n  }\n\n  /** @docs-private */\n  get svgUrl(): string {\n    let useFilledSvg = this.checked || (!this.disabled && this._hover);\n    if (this.negative) {\n      useFilledSvg = !useFilledSvg;\n    }\n    return useFilledSvg ? this.svgChecked : this.svg;\n  }\n\n  /** @docs-private */\n  get type() {\n    return this.toggleGroup ? 'radio' : 'checkbox';\n  }\n\n  /** @docs-private */\n  handleEnterKey(event) {\n    if (!this.toggleGroup) {\n      this.toggle(event);\n    }\n  }\n}\n","\nimport { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n/** @docs-private */\n@Component({\n  selector: 'nx-icon-toggle-button',\n  templateUrl: 'icon-toggle-button.component.html',\n  styleUrls: ['icon-toggle-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.nx-circle-button]': 'true',\n    '[class.is-flipped]': 'checked',\n    '[class.has-checkmark]': '!inGroup',\n    '[class.is-disabled]': 'disabled',\n    '[class.is-negative]': 'negative',\n    '[class.is-touched]': 'touched'\n  }\n})\nexport class NxIconToggleButtonComponent {\n\n  @Input()\n  inGroup: boolean = true;\n\n  @Input()\n  hint: string;\n\n  @Input()\n  label: string;\n\n  @Input()\n  checked: boolean;\n\n  @Input()\n  icon: string;\n\n  @Input('svg')\n  svgUrl: string;\n\n  @Input()\n  disabled: boolean;\n\n  @Input()\n  negative: boolean;\n\n  @Input()\n  touched: boolean;\n\n  @Input()\n  circleText: string;\n}\n","import { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport { NxCircleToggleGroupComponent } from './circle-toggle-group/circle-toggle-group.component';\nimport { NxCircleToggleComponent } from './circle-toggle/circle-toggle.component';\nimport { NxIconToggleButtonComponent } from './icon-toggle-button/icon-toggle-button.component';\nimport { NxMobileToggleButtonComponent } from './mobile-toggle-button/mobile-toggle-button.component';\n\n@NgModule({\n  declarations: [\n    NxCircleToggleGroupComponent,\n    NxCircleToggleComponent,\n    NxIconToggleButtonComponent,\n    NxMobileToggleButtonComponent\n  ],\n  exports: [\n    NxCircleToggleGroupComponent,\n    NxIconToggleButtonComponent,\n    NxCircleToggleComponent,\n    NxMobileToggleButtonComponent\n  ],\n  imports: [\n    CommonModule,\n    NxIconModule\n  ]\n})\nexport class NxCircleToggleModule { }\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nconst DEFAULT_TYPE = 'normal';\n\n/** Size of the list */\nexport type NxListSize = 'xsmall' | 'small' | 'normal';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ul[nxList], ol[nxList]',\n  template: '<ng-content></ng-content>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['list.component.scss'],\n  host: {\n    '[class.nx-list--xsmall]' : 'type === \"xsmall\"',\n    '[class.nx-list--small]' : 'type === \"small\"',\n    '[class.nx-list--normal]' : 'type === \"normal\"',\n    '[class.nx-list--negative]' : 'negative',\n    '[class.nx-list--ordered-circle]' : 'orderedCircle',\n  }\n})\n\nexport class NxListComponent {\n  private _classNames;\n\n  /** @docs-private */\n  type: NxListSize;\n\n  /** @docs-private */\n  negative: boolean = false;\n\n  /** @docs-private */\n  orderedCircle: boolean = false;\n\n  /**\n   * Sets the visual appearance of the list. You can combine different values:\n   *\n   * xsmall | small | normal: The listed input values are expanded to the underlying BEM conform styles based\n   * on modifiers. Defaults to normal.\n   *\n   * negative: Display the list with a negative set of styling.\n   *\n   * ordered-circle: Display the list item numbers in a color filled circle.\n   */\n  @Input('nxList')\n  set classNames(value: string) {\n    if (this._classNames === value) {\n      return;\n    }\n\n    this._classNames = value;\n\n    const [type = null] = this._classNames.match(/xsmall|small|normal/) || [DEFAULT_TYPE];\n    this.type = type as any;\n\n    this.negative = !!this._classNames.match(/negative/);\n    this.orderedCircle = !!this._classNames.match(/ordered-circle/);\n  }\n\n  get classNames(): string {\n    return this._classNames;\n  }\n}\n","import { Component, Input, ViewChild, ViewContainerRef } from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'li[nxListIcon]',\n  template: `\n    <span class=\"nx-list__icon\">\n      <nx-icon [name]='name'></nx-icon>\n    </span>\n    <ng-content></ng-content>`\n})\n\nexport class NxListIconComponent {\n  /** @docs-private */\n  @ViewChild('viewRefPrefix', { read: ViewContainerRef, static: false }) viewRefPrefix: ViewContainerRef;\n\n  /** Sets the name of the icon to be displayed. */\n  @Input('nxListIcon') name: string;\n}\n","import { NgModule } from '@angular/core';\nimport { NxListComponent } from './list.component';\nimport { NxListIconComponent } from './list-icon.component';\nimport { NxIconModule, NxIconComponent } from '@allianz/ngx-ndbx/icon';\n\n@NgModule({\n  declarations: [ NxListComponent, NxListIconComponent ],\n  imports: [ NxIconModule ],\n  exports: [ NxListComponent, NxListIconComponent ],\n  bootstrap: [NxIconComponent]\n})\nexport class NxListModule {\n}\n","import {ElementRef, Input, Renderer2, ViewChild} from '@angular/core';\nimport { removeClasses } from '@allianz/ngx-ndbx/utils';\n\nlet nextId = 0;\n\n/** @docs-private */\nexport class NxRadioToggleButtonBaseComponent {\n  /** @docs-private */\n  toggleButtonId: string = 'nx-radio-toggle-button-' + nextId++;\n\n  /** @docs-private */\n  @Input('nxValue')\n  value: any;\n\n  /** @docs-private */\n  @ViewChild('toggleButtonLabelContainer', { static: true })\n  labelContainer: ElementRef;\n\n  /** @docs-private */\n  @ViewChild('toggleInput', { static: true })\n  toggleInput: ElementRef;\n\n  constructor(\n    /** @docs-private */\n    protected renderer: Renderer2) {\n  }\n\n  /** @docs-private */\n  triggerInputClick(event) {\n    event.stopPropagation();\n    this.toggleInput.nativeElement.click();\n  }\n\n  /** @docs-private */\n  setFirstButton() {\n    this.renderer.addClass(this.labelContainer.nativeElement, 'nx-radio-toggle__label-container--first');\n  }\n\n  /** @docs-private */\n  setLastButton() {\n    this.renderer.addClass(this.labelContainer.nativeElement, 'nx-radio-toggle__label-container--last');\n  }\n\n  /** @docs-private */\n  resetClasses() {\n    removeClasses(this.renderer, this.labelContainer, 'nx-radio-toggle__label-container--first nx-radio-toggle__label-container--last');\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mapClassNames } from '@allianz/ngx-ndbx/utils';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  OnDestroy,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ChangeDetectorRef,\n  Optional,\n  Self,\n  DoCheck\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject, merge } from 'rxjs';\nimport { filter, startWith, takeUntil } from 'rxjs/operators';\nimport { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';\nimport { NxRadioToggleButtonBaseComponent } from './radio-toggle-button-base.component';\nimport { NxRadioToggleButtonChange, NxRadioToggleButtonComponent } from './radio-toggle-button.component';\n\nlet nextId = 0;\n\nconst MAPPING = {\n  'negative': 'nx-radio-toggle--negative',\n  'small': 'nx-radio-toggle--small',\n};\n\n@Component({\n  selector: 'nx-radio-toggle',\n  templateUrl: 'radio-toggle.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['radio-toggle.component.scss']\n})\nexport class NxRadioToggleComponent implements ControlValueAccessor, AfterViewInit, OnDestroy,\n  AfterContentInit, DoCheck  {\n\n  private _toggleId: string = (nextId++).toString();\n\n  private _selection: any;\n\n  private _destroyed: Subject<void> = new Subject();\n\n  private _disabled: boolean = false;\n  /** @docs-private */\n  errorState: boolean = false;\n  // emits to signal children to run change detection\n  _disableChange = new Subject<void>();\n\n  /** Sets the component to the disabled state.*/\n  @Input('nxDisabled')\n  set disabled(value: boolean) {\n    const coerced = coerceBooleanProperty(value);\n    if (this._disabled !== coerced) {\n      this._disabled = coerced;\n      this._disableChange.next();\n    }\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  @ViewChild('toggleContainer', { static: true })\n  private toggleContainer: ElementRef;\n\n  private _name: string;\n\n  /** Sets the name used for accessibility. */\n  @Input('nxName')\n  set name(value: string) {\n    if (this._name !== value) {\n      this._name = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get name(): string {\n    return this._name;\n  }\n\n  /** @docs-private */\n  @ContentChildren(NxRadioToggleButtonBaseComponent)\n  toggleButtons: QueryList<NxRadioToggleButtonBaseComponent> = new QueryList();\n\n  private onTouchedCallback = () => { };\n\n  private onChangeCallback = (option: any) => { };\n\n  constructor(private renderer: Renderer2,\n              private _changeDetectorRef: ChangeDetectorRef,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() private _parentForm: NgForm,\n              @Optional() private _parentFormGroup: FormGroupDirective) {\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterViewInit() {\n    this.subscribeToToggleButtonsChange();\n  }\n\n  ngAfterContentInit() {\n    const changedOrDestroyed = merge(this.toggleButtons.changes, this._destroyed);\n\n    merge(...this.toggleButtons.map((button: any) => button.onChecked))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe((change: NxRadioToggleButtonChange) => {\n        this._selection = change.value;\n        this.onChangeCallback(this._selection);\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._disableChange.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  /** @docs-private */\n  subscribeToToggleButtonsChange(): void {\n    this.toggleButtons.changes\n      .pipe(\n        startWith(this.toggleButtons),\n        filter(toggles => toggles.length > 0),\n        takeUntil(this._destroyed)\n      ).subscribe((toggles) => {\n        toggles.forEach(toggle => {\n          toggle.resetClasses();\n          if (toggle.value === this.selection) {\n            // We need to defer the selection for the edge case that the button with the value of this.selection\n            // didn't exist yet but was added afterwards to prevent changed after checked errors\n            setTimeout(() => toggle.select());\n          }\n        });\n        toggles.first.setFirstButton();\n        toggles.last.setLastButton();\n      });\n  }\n\n  registerOnChange(onChangeCallback: any): void {\n    this.onChangeCallback = onChangeCallback;\n  }\n\n  registerOnTouched(onTouchedCallback: any): void {\n    this.onTouchedCallback = onTouchedCallback;\n  }\n\n  /** Preselects the respective options. */\n  @Input('nxSelection')\n  writeValue(value: string): void {\n    this._selection = value;\n    const correspondingButton =\n      this.toggleButtons.find((button: NxRadioToggleButtonComponent) => button.value === this._selection);\n    if (correspondingButton) {\n      (correspondingButton as NxRadioToggleButtonComponent).select();\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  get id(): string {\n    return `nx-radio-toggle-${this._toggleId}`;\n  }\n\n  /** Sets the modifiers for the component. */\n  @Input('nxStyle')\n  set style(value: string) {\n    const modifierClasses = mapClassNames(value, [], MAPPING);\n    modifierClasses.split(' ')\n      .forEach(className => this.renderer.addClass(this.toggleContainer.nativeElement, className));\n  }\n\n  /** @docs-private */\n  set selection(selection: any) {\n    this._selection = selection;\n    this.onChangeCallback(selection);\n  }\n\n  get selection(): any {\n    return this._selection;\n  }\n\n  /** @docs-private */\n  change(value) {\n    this.onChangeCallback(value);\n    if (this.onTouchedCallback) {\n      this.onTouchedCallback();\n    }\n  }\n\n  /** @docs-private */\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const control = this.ngControl ? this.ngControl.control as FormControl : null;\n    const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n    }\n  }\n}\n","import { takeUntil } from 'rxjs/operators';\nimport {Subject } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef, Component, forwardRef, Inject, Input, Renderer2,\n  OnDestroy, HostListener\n} from '@angular/core';\n\nimport { NxRadioToggleButtonBaseComponent } from './radio-toggle-button-base.component';\nimport { NxRadioToggleComponent } from './radio-toggle.component';\n\n/** @docs-private */\nexport class NxRadioToggleButtonChange {\n  constructor(\n    public source: NxRadioToggleButtonComponent,\n    public value: any\n  ) {}\n}\n\n@Component({\n  selector: 'nx-radio-toggle-button',\n  styleUrls: ['radio-toggle-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'radio-toggle-button.component.html',\n  providers: [\n    {\n      provide: NxRadioToggleButtonBaseComponent, useExisting: forwardRef(() => NxRadioToggleButtonComponent)\n    }\n  ],\n  host: {\n    '[class.has-error]': '_controlInvalid() || null',\n    '[attr.aria-invalid]': '_controlInvalid() || null'\n  }\n})\nexport class NxRadioToggleButtonComponent extends NxRadioToggleButtonBaseComponent implements OnDestroy {\n\n  /** @docs-private */\n  // emits when the button is checked to notify the group\n  readonly onChecked = new Subject<NxRadioToggleButtonChange>();\n\n  private _destroyed: Subject<void> = new Subject();\n  private _disabled: boolean = false;\n  private _selected: boolean = false;\n\n  /** @docs-private */\n  @Input('nxDisabled')\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get disabled(): boolean {\n    return this._disabled || (this.radioToggle && this.radioToggle.disabled);\n  }\n\n  /** Sets the checked state and notify siblings and the parent group about the change */\n  // Only use this if you want the onChecked event to be fired, this will inform the parent about the change!\n  // To select a button without firing the event use the select() function\n  @Input('nxSelected')\n  set selected(value: boolean) {\n    if (this._selected !== value) {\n      this._selected = value;\n      if (this._selected) {\n        this._notifySiblings();\n        this._emitCheckedEvent();\n\n        if (this.radioToggle !== null) {\n          this.radioToggle.change(this.value);\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => { };\n\n  constructor(\n    @Inject(forwardRef(() => NxRadioToggleComponent)) private radioToggle: NxRadioToggleComponent,\n    /** @docs-private */\n    renderer: Renderer2,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _toggleDispatcher: UniqueSelectionDispatcher) {\n    super(renderer);\n\n    this._removeUniqueSelectionListener = this._toggleDispatcher.listen((id: string, radioToggleId: string) => {\n      if (this.radioToggle && this.radioToggle.id === radioToggleId && this.id !== id) {\n        this._selected = false;\n        // need to let change detector know in case that the select() function was called on another button\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n\n    this.radioToggle._disableChange.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** @docs-private */\n  get toggleId(): string {\n    return this.radioToggle.id;\n  }\n\n  /** @docs-private */\n  get id(): string {\n    return this.toggleButtonId;\n  }\n\n  private _notifySiblings() {\n    const toggleId = this.radioToggle ? this.radioToggle.id : this.id;\n    this._toggleDispatcher.notify(this.id, toggleId);\n  }\n\n  private _emitCheckedEvent() {\n    this.onChecked.next(new NxRadioToggleButtonChange(this, this.value));\n  }\n\n  // Does NOT emit the onChecked event. Useful when you need to set initial\n  // state. Used by the parent to set checked states on initialization and during\n  // writeValue() changes.\n  /** @docs-private */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._notifySiblings();\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** @docs-private */\n  @HostListener('keyup.space')\n  onKeyupSpace(): void {\n    this._selected = false;\n    this._notifySiblings();\n  }\n\n  /** @docs-private */\n  _controlInvalid(): boolean {\n    return !!(this.radioToggle && this.radioToggle.errorState);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NxRadioToggleComponent } from './radio-toggle.component';\nimport { FormsModule } from '@angular/forms';\nimport { NxRadioToggleButtonComponent } from './radio-toggle-button.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\n\n@NgModule({\n  declarations: [ NxRadioToggleComponent, NxRadioToggleButtonComponent ],\n  exports: [ NxRadioToggleComponent, NxRadioToggleButtonComponent ],\n  imports: [ CommonModule, FormsModule, NxIconModule ]\n})\nexport class NxRadioToggleModule { }\n","import { ChangeDetectionStrategy, Component, Input, ChangeDetectorRef } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** Options for sizing of the spinner. */\nexport type SpinnerSize = 'small' | 'medium' | 'large';\n\nconst DEFAULT_SIZE = 'small';\n\n@Component({\n  selector: 'nx-spinner',\n  templateUrl: './spinner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./spinner.component.scss'],\n  host: {\n    '[class.nx-spinner--small]': 'size === \"small\"',\n    '[class.nx-spinner--medium]': 'size === \"medium\"',\n    '[class.nx-spinner--large]': 'size === \"large\"',\n    '[class.nx-spinner--negative]': 'negative',\n    '[attr.role]': '\"status\"',\n    '[attr.aria-busy]': '\"true\"',\n    '[attr.aria-live]': '\"assertive\"',\n  }\n})\nexport class NxSpinnerComponent {\n  private _size: SpinnerSize = DEFAULT_SIZE;\n\n  /** Sets the size of the spinner. Default is 'small'. */\n  @Input('nxSize')\n  set size(value: SpinnerSize) {\n    if (value !== this._size) {\n      this._size = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get size(): SpinnerSize {\n    return this._size;\n  }\n\n  private _negative: boolean = false;\n\n  /** Whether the spinner should use a negative styling. */\n  @Input()\n  set negative(value: boolean) {\n    if (value !== this._negative) {\n      this._negative = coerceBooleanProperty(value);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule  } from '@angular/core';\n\nimport { NxSpinnerComponent } from './spinner.component';\n\n@NgModule({\n  declarations: [\n    NxSpinnerComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    NxSpinnerComponent\n  ],\n  bootstrap: [],\n  providers: []\n})\nexport class NxSpinnerModule { }\n","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** @docs-private */\n@Injectable()\nexport class NxModalService {\n\n  private subject = new Subject();\n  close$: Observable<any> = this.subject.asObservable();\n\n  close() {\n    this.subject.next();\n  }\n}\n","import { animate, animation, AnimationReferenceMetadata, style } from '@angular/animations';\n\nexport const fadeIn: AnimationReferenceMetadata = animation([\n    style({opacity: 0}),\n    animate('300ms', style({opacity: 1}))\n  ]);\n\nexport const fadeOut: AnimationReferenceMetadata = animation(\n  animate('300ms', style({opacity: 0}))\n);\n\nexport const scaleUp: AnimationReferenceMetadata = animation([\n    style({transform: 'scale(1)', opacity: 1}),\n    animate('250ms', style({transform: 'scale(1.3)', opacity: 0}))\n  ]);\n\nexport const scaleDown: AnimationReferenceMetadata = animation([\n    style({transform: 'scale(1.3)', opacity: 0}),\n    animate('250ms', style({transform: 'scale(1)', opacity: 1}))\n  ]);\n","import { OnDestroy, ChangeDetectionStrategy, Directive, ChangeDetectorRef } from '@angular/core';\nimport { Component, Input, OnInit, TemplateRef, Output, EventEmitter } from '@angular/core';\nimport { NxModalService } from './modal.service';\nimport { EventManager } from '@angular/platform-browser';\nimport { fadeIn, fadeOut, scaleDown, scaleUp } from './animations';\nimport { animateChild, query, transition, trigger, useAnimation } from '@angular/animations';\nimport { Subscription } from 'rxjs';\n\n/** Container for the action buttons in a modal. Has a fixed position at the bottom of the modal on scroll. */\n@Directive({\n  selector: '[nxModalActions]',\n  host: {\n    '[class.nx-modal__actions]': 'true'\n  }\n})\nexport class NxModalActionsDirective {}\n\n/** Scrollable container for the content of a modal. */\n@Directive({\n  selector: '[nxModalContent]',\n  host: {\n    '[class.nx-modal__content]': 'true'\n  }\n})\nexport class NxModalContentDirective {}\n\n@Component({\n  selector: 'nx-modal',\n  templateUrl: 'modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ './modal.component.scss' ],\n  animations: [\n    trigger('fadeInOut', [\n      transition(':enter', [\n        useAnimation(fadeIn),\n        query('@scaleUpDown', [\n          animateChild()\n        ])\n      ]),\n      transition(':leave', [\n        query('@scaleUpDown', [\n          animateChild()\n        ]),\n        useAnimation(fadeOut)\n      ])\n    ]),\n    trigger('scaleUpDown', [\n      transition(':enter', useAnimation(scaleDown)),\n      transition(':leave', useAnimation(scaleUp))\n    ])\n  ],\n  host: {\n    '[@fadeInOut]': '',\n    '[class.nx-modal--fixed-width]': 'size === \"fixed\"'\n  }\n})\n\nexport class NxModalComponent implements OnInit, OnDestroy {\n\n  private _closeButtonLabel: string = 'Close dialog';\n\n  /** Sets the 'aria-label' of the modal close button needed for accessibility.\n   *\n   * Default value is 'Close dialog'.\n   */\n  @Input()\n  set closeButtonLabel(value: string) {\n    if (value !== this._closeButtonLabel) {\n      this._closeButtonLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get closeButtonLabel(): string {\n    return this._closeButtonLabel;\n  }\n\n  /**\n   * A template reference variable pointing to the template\n   * which contains the content of the modal view.\n   */\n  @Input('nxBody') body: TemplateRef<any>;\n\n  /**\n   * Whether the modal view should close when the user hits the escape key.\n   * Default is true.\n   */\n  @Input('nxHideOnEsc') hideOnEsc: boolean = true;\n\n  /**\n   * Whether the modal view should close when the user clicks on the backdrop.\n   * Default is true.\n   */\n  @Input('nxHideOnClickOutside') hideOnClickOutside: boolean = true;\n\n  /**\n   * Whether the modal view should have a close icon in the upper right corner.\n   * Default is true.\n   */\n  @Input('nxShowCloseIcon') showCloseIcon: boolean = true;\n\n  /**\n   * Controls the width of the dialog.\n   * On `auto` the width is controlled by the content width,\n   * on `fixed` the dialog gets a fixed width of 736px if the viewport is big enough. */\n  @Input('nxSize') size: 'fixed' | 'auto';\n\n  /**\n   * An event emitted when the user clicks on the backdrop or uses the built-in close button.\n   * This event can be applied in conjunction with the custom open state handling\n   * of a modal to close it when requested by the user.\n   */\n  @Output('nxClose') closeEvent = new EventEmitter<void>();\n\n  private closeSubscription: Subscription = Subscription.EMPTY;\n  private removeEventListener: Function = undefined;\n\n  constructor(private modalService: NxModalService, private eventManager: EventManager, private _changeDetectorRef: ChangeDetectorRef) {\n  }\n\n  ngOnInit() {\n    this.closeSubscription = this.modalService.close$.subscribe(() => this.closeEvent.emit());\n\n    this.removeEventListener = this.eventManager.addGlobalEventListener('window', 'keyup.esc', () => {\n      if (this.hideOnEsc) {\n        this.modalService.close();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.removeEventListener();\n    this.closeSubscription.unsubscribe();\n  }\n\n  /** @docs-private */\n  clickOutsideModal() {\n    if (this.hideOnClickOutside) {\n      this.modalService.close();\n    }\n  }\n\n  /** @docs-private */\n  closeButtonClick() {\n    this.modalService.close();\n  }\n\n  /** @docs-private */\n  cancelClick(evt: KeyboardEvent) {\n    evt.stopPropagation();\n  }\n}\n","import { Directive, Input, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { SubscriptionLike as ISubscription } from 'rxjs';\n\nimport { NxModalService } from './modal.service';\n\n@Directive({selector: '[nxOpenModalOnClick]'})\nexport class NxOpenModalOnClickDirective implements OnInit, OnDestroy {\n\n  /** @docs-private */\n  elements: Array<any>;\n\n  private subscription: ISubscription;\n\n  constructor(private templateRef: TemplateRef<any>,\n              private viewContainer: ViewContainerRef,\n              private modalService: NxModalService) {\n  }\n\n  ngOnInit() {\n    this.subscription = this.modalService.close$.subscribe(() => this.viewContainer.clear());\n  }\n\n  ngOnDestroy() {\n    this.elements.forEach(el => {\n      if (el.removeEventListener) {\n        el.removeEventListener('click', this.clickHandler);\n      }\n    });\n\n    this.subscription.unsubscribe();\n  }\n\n  /** @docs-private */\n  clickHandler = (event: any) => {\n    this.viewContainer.clear();\n    // instantiate the template onto which this directive is applied\n    const viewRef = this.viewContainer.createEmbeddedView(this.templateRef);\n    // we need to mark the viewRef explicitly if the modal is used inside another\n    // component that is using onPush change detection\n    viewRef.markForCheck();\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /**\n   * One or multiple template reference variables pointing to elements\n   * which should trigger opening the modal on click.\n   *\n   * Value: A single template reference variable or an array of template reference variables.\n   */\n  @Input()\n  set nxOpenModalOnClick(elements) {\n    // also support the case where only one element is passed, check for the length property to be sure elements is an array\n    if (elements.length) {\n      this.elements = elements;\n    } else {\n      this.elements = [ elements ];\n    }\n    // add a click event listener to any element passed as property to this directive\n    this.elements.forEach(el => {\n      if (el.addEventListener) {\n        el.addEventListener('click', this.clickHandler);\n      // workaround until refactoring: if the reference is a component\n      // reference the component has to implement a getter to its own elementRef\n      } else if (el.elementRef) {\n        el.elementRef.nativeElement.addEventListener('click', this.clickHandler);\n      } else {\n        console.warn(`nxOpenModalOnClick: Given Element doesn't appear to be an ElementRef.`, el);\n      }\n    });\n  }\n\n}\n","import { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport {NxModalComponent, NxModalActionsDirective, NxModalContentDirective} from './modal.component';\nimport { CommonModule } from '@angular/common';\nimport { NxOpenModalOnClickDirective } from './modal-open-on-click.directive';\nimport { NxModalService } from './modal.service';\nimport { A11yModule } from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [ CommonModule, A11yModule, NxIconModule ],\n  declarations: [\n    NxModalComponent,\n    NxOpenModalOnClickDirective,\n    NxModalActionsDirective,\n    NxModalContentDirective\n  ],\n  exports: [\n    NxModalComponent,\n    NxOpenModalOnClickDirective,\n    NxModalActionsDirective,\n    NxModalContentDirective\n  ],\n})\n\nexport class NxModalModule {\n  // define the modal service on root level as an application wide singleton,\n  // assuming that we only display one modal at a time, which seems quite reasonable\n  // this is static and named \"forRoot\" by convention\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NxModalModule,\n      providers: [NxModalService]\n    };\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Optional,\n  Self,\n  DoCheck,\n  ViewChild,\n  ElementRef\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';\n\nlet nextId = 0;\n/** Options for placement of the label */\nexport type POSITION = 'left' | 'right';\n/** Options for sizing of the label */\nexport type LABEL_SIZE = 'small' | 'large';\n\n@Component({\n  selector: 'nx-switcher',\n  templateUrl: 'switcher.component.html',\n  styleUrls: ['./switcher.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    /* the host id should be set to null, otherwise nx-switcher and its <input> get the same id\n    and on label click the input click is not triggered (double id problem) */\n    '[attr.id]': 'null',\n    '[class.is-negative]': 'negative',\n    '[class.is-checked]': 'checked',\n    '[class.is-big]': 'big',\n    '[class.nx-switcher--small-label]': 'labelSize === \"small\"',\n    '[class.nx-switcher--large-label]': 'labelSize === \"large\"',\n    '[class.is-disabled]': 'disabled',\n    '[class.is-swapped]': 'labelPosition === \"left\"',\n    '[class.has-error]': 'errorState',\n    '[attr.aria-invalid]': 'errorState'\n  }\n})\n\nexport class NxSwitcherComponent implements ControlValueAccessor, DoCheck {\n\n  private _id: string = `nx-switcher-${nextId++}`;\n  /** @docs-private */\n  errorState: boolean = false;\n\n  /** @docs-private */\n  @ViewChild('switcherLabelWrapper', { static: true }) _switcherLabelWrapper: ElementRef;\n\n  /** Sets the id of the switcher */\n  @Input()\n  set id(value: string) {\n    this._id = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get id(): string {\n    return this._id;\n  }\n\n  private _labelPosition: POSITION = 'right';\n  /** Specifies the placement of the label */\n  @Input()\n  set labelPosition(value: POSITION) {\n    this._labelPosition = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get labelPosition(): POSITION {\n    return this._labelPosition;\n  }\n\n  private _name: string = null;\n  /** Sets the label text of the switcher */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get name(): string {\n    return this._name;\n  }\n\n  private _checked: boolean = false;\n  /** Whether the switcher is checked (on) or unchecked (off) */\n  @Input()\n  set checked(value: boolean) {\n    this._checked = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get checked(): boolean {\n    return this._checked;\n  }\n\n  private _big: boolean = false;\n  /** Whether the big switcher is used */\n  @Input('nxBig')\n  set big(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    this._big = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get big(): boolean {\n    return this._big;\n  }\n\n  private _labelSize: LABEL_SIZE = 'large';\n  /** Sets the size of the label */\n  @Input()\n  set labelSize(value: LABEL_SIZE) {\n    this._labelSize = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get labelSize(): LABEL_SIZE {\n    return this._labelSize;\n  }\n\n  private _negative: boolean = false;\n  /** Whether the style for a dark background is used */\n  @Input('nxNegative')\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    this._negative = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _disabled: boolean = false;\n  /** Whether the switcher is in the disabled state */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    this._disabled = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  /** An event is dispatched each time the switcher value is changed */\n  @Output('checkedChange') checkedChange = new EventEmitter<boolean>();\n\n  private onChangeCallback = (_: any) => {};\n  private onTouchedCallback = () => {};\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Self() public ngControl: NgControl,\n              private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() private _parentForm: NgForm,\n              @Optional() private _parentFormGroup: FormGroupDirective\n  ) {\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  /** Allows to toggle between the states */\n  toggle() {\n    if (!this.disabled) {\n      this.checked = !this.checked;\n      this.onChangeCallback(this.checked);\n      this.checkedChange.emit(this.checked);\n      if (this.onTouchedCallback) {\n        this.onTouchedCallback();\n      }\n    }\n  }\n\n  writeValue(value: any): void {\n    if (value === null) {\n      value = false;\n    }\n    if (value !== this.checked) {\n      this.checked = value;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouchedCallback = fn;\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  touch() {\n    this.onTouchedCallback();\n  }\n\n  /** @docs-private */\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const control = this.ngControl ? this.ngControl.control as FormControl : null;\n    const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n    }\n  }\n\n  /** @docs-private */\n  get labelHasContent() {\n    return !!this._switcherLabelWrapper.nativeElement.innerHTML.trim();\n  }\n\n  /** @docs-private\n   * Callback for when the content of the label has changed.\n   */\n  labelContentChanged() {\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NxSwitcherComponent } from './switcher.component';\nimport { CommonModule } from '@angular/common';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport {ObserversModule} from '@angular/cdk/observers';\n\n@NgModule({\n  declarations: [ NxSwitcherComponent ],\n  exports: [ NxSwitcherComponent ],\n  imports: [ CommonModule, NxIconModule, ObserversModule ]\n})\nexport class NxSwitcherModule {}\n","import {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Popover content that will be rendered lazily\n * after the popover is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[nxPopoverContent]'\n})\nexport class NxPopoverContentDirective {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport {NxPopoverContentDirective} from './popover-content';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\n\n@Component({\n  selector: 'nx-popover',\n  templateUrl: './popover.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./popover.component.scss'],\n  exportAs: 'nxPopover',\n})\nexport class NxPopoverComponent implements OnDestroy {\n  /** @docs-private */\n  @ViewChild(TemplateRef, { static: false })\n  templateRef: TemplateRef<any>;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(NxPopoverContentDirective, {static: false}) _lazyContent: NxPopoverContentDirective;\n\n  /** Event emitted when the popover is closed. */\n  @Output('nxClosed')\n  closed = new EventEmitter<void>();\n\n  /** @docs-private */\n  closeButtonClick = new Subject<void>();\n\n  /** @docs-private */\n  id: string;\n\n  /** @docs-private */\n  direction;\n\n  /** @docs-private */\n  showCloseButton: boolean = false;\n\n  /** @docs-private */\n  arrowStyle = {};\n\n  constructor() {\n  }\n\n  ngOnDestroy() {\n    this.closed.complete();\n  }\n\n  // emit to notify the popover trigger directive that the close button was clicked\n  /** @docs-private */\n  emitCloseButtonClick() {\n    this.closeButtonClick.next();\n  }\n\n  /** @docs-private */\n  _onCloseKeyup($event) {\n    if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {\n      this.emitCloseButtonClick();\n    }\n    $event.preventDefault();\n  }\n\n  /** @docs-private */\n  emitClosedEvent() {\n    this.closed.emit();\n  }\n\n  /** @docs-private */\n  get classList(): string[] {\n    if (this.direction) {\n      return [`nx-popover--${this.direction}`];\n    }\n  }\n\n  /** Prevent the popover from closing when the user clicks on the popover content. */\n  _onClick(event) {\n    event.stopPropagation();\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  ConnectedPosition,\n  ConnectionPositionPair,\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy\n} from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewContainerRef,\n  NgZone\n} from '@angular/core';\nimport { EventManager } from '@angular/platform-browser';\nimport { fromEvent, Observable, Subject } from 'rxjs';\nimport { filter, map, takeUntil } from 'rxjs/operators';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { NxPopoverComponent } from './popover.component';\nimport { FocusTrapFactory, FocusTrap } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport { Platform } from '@angular/cdk/platform';\nimport { SPACE, ENTER } from '@angular/cdk/keycodes';\n\nexport declare type PopoverDirection = 'left' | 'top' | 'right' | 'bottom';\nexport declare type PopoverTriggerType = 'click' | 'hover' | 'manual';\nexport declare type PopoverTriggerScrollStrategy = 'close' | 'reposition';\nlet nextId = 0;\n\nconst fallbacks: ConnectionPositionPair[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top',\n    offsetX: 0,\n    offsetY: 16\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom',\n    offsetX: 0,\n    offsetY: -16\n  },\n  {\n    originX: 'center',\n    originY: 'bottom',\n    overlayX: 'center',\n    overlayY: 'top',\n    offsetX: 0,\n    offsetY: 16\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top',\n    offsetX: 0,\n    offsetY: 16\n  },\n  {\n    originX: 'end',\n    originY: 'center',\n    overlayX: 'start',\n    overlayY: 'center',\n    offsetX: 16,\n    offsetY: 0\n  },\n  {\n    originX: 'start',\n    originY: 'center',\n    overlayX: 'end',\n    overlayY: 'center',\n    offsetX: -16,\n    offsetY: 0\n  },\n  {\n    originX: 'center',\n    originY: 'top',\n    overlayX: 'center',\n    overlayY: 'bottom',\n    offsetX: 0,\n    offsetY: -16\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom',\n    offsetX: 0,\n    offsetY: -16\n  }\n];\n\n@Directive({\n  selector: '[nxPopoverTriggerFor]',\n  exportAs: 'nxPopoverTrigger',\n  host: {\n    '(click)': 'handleClick()',\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'isOpen',\n    '[attr.aria-describedby]': 'isOpen ? id : null'\n  }\n})\nexport class NxPopoverTriggerDirective implements AfterViewInit, OnDestroy, OnInit {\n  private overlayRef: OverlayRef;\n  private portal: TemplatePortal<any>;\n  private _destroyed = new Subject<void>();\n  private _show: boolean = false;\n  private _closeable: boolean = null;\n  private _positionStrategy: PositionStrategy;\n  private _embeddedViewRef: EmbeddedViewRef<any>;\n  private _documentClickObservable: Observable<MouseEvent>;\n  /** The class that traps and manages focus within the popover. */\n  private _focusTrap: FocusTrap;\n  /** Element that was focused before the Popover was opened. Save this to restore upon close. */\n  private _elementFocusedBeforePopoverWasOpened: HTMLElement | null = null;\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n  /** @docs-private */\n  id = 'nx-popover-' + nextId++;\n\n  /** An event is emitted if the visibility status of the popover changes. */\n  @Output('nxPopoverShowChange')\n  changeShow: EventEmitter<boolean> = new EventEmitter();\n\n  /** Whether to show or hide the popover. */\n  @Input('nxPopoverShow')\n  set show(value: boolean) {\n    value = coerceBooleanProperty(value);\n    if (this._show !== value) {\n      this._show = value;\n      if (this._show) {\n        this.openPopover();\n      } else {\n        this.closePopover();\n      }\n    }\n  }\n\n  get show() {\n    return this._show;\n  }\n\n  /** Whether to show a close button. By default a close icon is only shown for trigger type click. */\n  @Input('nxPopoverCloseable')\n  set closeable(value: boolean) {\n    this._closeable = coerceBooleanProperty(value);\n\n    if (this.popover) {\n      this.popover.showCloseButton = this.isCloseable();\n    }\n  }\n  get closeable(): boolean {\n    return this._closeable;\n  }\n\n  /** Whether the popover should be closed on click outside of the popover in the trigger modes 'manual' and 'click'. */\n  @Input()\n  set closeOnClickOutside(value: boolean) {\n    this._closeOnClickOutside = coerceBooleanProperty(value);\n  }\n  get closeOnClickOutside(): boolean {\n    return this._closeOnClickOutside;\n  }\n\n  private _closeOnClickOutside: boolean = true;\n\n  /** Links the trigger with the popover to open. */\n  @Input('nxPopoverTriggerFor')\n  popover: NxPopoverComponent;\n\n  /** Sets the desired direction to open the popover. E.g., right, left, bottom, top */\n  @Input('nxPopoverDirection')\n  direction: PopoverDirection = 'right';\n\n  /** Whether the popover will be opened automatically. */\n  @Input('nxPopoverInitialVisible')\n  popoverInitialVisible: boolean = false;\n\n  /** An event is emitted when the visibility of the popopver changes. */\n  @Input('nxPopoverVisibleChange')\n  visibleChange: EventEmitter<boolean> = new EventEmitter();\n\n  /** Whether the popover opens in modal state. */\n  @Input('nxPopoverModal')\n  modal: boolean = false;\n\n  // If nxPopoverTrigger equals to 'hover' the popover opens on mouseenter and closes on mouseout.\n  // If nxPopoverTrigger equals to 'click' the popover opens on click and closes on a click of the close icon or pressing ESC key.\n  // If nxPopoverTrigger equals to 'manual' the popover opens only when programatically requested.\n  /** Sets the way to trigger the popover. Options are hover, click, manual */\n  @Input('nxPopoverTrigger')\n  trigger: PopoverTriggerType = 'click';\n\n  /** Sets the scroll strategy. 'close' closes the popover on scroll while 'reposition' scrolls the popover with the origin. */\n  @Input('nxPopoverScrollStrategy')\n  scrollStrategy: PopoverTriggerScrollStrategy = 'close';\n\n  constructor(private overlay: Overlay,\n              private elementRef: ElementRef,\n              private viewContainerRef: ViewContainerRef,\n              private eventManager: EventManager,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    this._documentClickObservable = fromEvent<MouseEvent>(document, 'click');\n    const element: HTMLElement = elementRef.nativeElement;\n    if (!this._platform.IOS && !this._platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => {\n          if (this.trigger === 'hover') {\n            this.show = true;\n          }\n        })\n        .set('mouseleave', () => {\n          if (this.trigger === 'hover') {\n            this.show = false;\n          }\n        })\n        .set('keydown', (event: KeyboardEvent) => {\n          switch (event.keyCode) {\n            case SPACE:\n            case ENTER:\n              this.handleClick();\n              break;\n            default:\n              return;\n          }\n        });\n    } else {\n      this._manualListeners.set('touchstart', () => {\n        if (this.trigger === 'hover') {\n          this.show = true;\n        }\n      });\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    this._focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      if (origin === 'keyboard' && this.trigger === 'hover') {\n        this._ngZone.run(() => this.show = true);\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.popover.showCloseButton = this.isCloseable();\n  }\n\n  ngAfterViewInit(): void {\n    this.popover.id = this.id;\n\n    this.eventManager.addGlobalEventListener('window', 'keyup.esc', () => {\n      if (this.isOpen) {\n        this.show = false;\n      }\n    });\n\n    this.popover.closeButtonClick.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this.show = false;\n    });\n\n    if (this.popoverInitialVisible || this._show) {\n      this.show = true;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.show = false;\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this.elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** @docs-private */\n  get isOpen() {\n    return this.overlayRef && this.createOverlay().hasAttached();\n  }\n\n  /** @docs-private */\n  isCloseable() {\n    return (this.trigger === 'click' && this._closeable === null) || this._closeable;\n  }\n\n  /** Update the popover with the given position strategy. */\n  updatePosition() {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n\n  /** @docs-private */\n  handleClick() {\n    if (this.trigger === 'click') {\n      this.show = !this.isOpen;\n    } else if (this.trigger === 'hover') {\n      this.show = true;\n    }\n  }\n\n  /** Open the popover instance. */\n  open(): void {\n    this.show = true;\n  }\n\n  /** Close the popover instance. */\n  close(): void {\n    this.show = false;\n  }\n\n  /** Toggle the popover instance. */\n  toggle(): void {\n    this.show = !this.show;\n  }\n\n  private openPopover(): void {\n    if (!this.createOverlay().hasAttached()) {\n      this._embeddedViewRef = this.createOverlay().attach(this.portal);\n\n      const element = this._embeddedViewRef.rootNodes[0] as HTMLElement;\n      this._focusTrap = this._focusTrapFactory.create(element);\n      this._elementFocusedBeforePopoverWasOpened = this.elementRef.nativeElement;\n      this._autoFocusFirstTabbableElement(element);\n\n      // attach a close click listener only if it makes sense (ignore it on hover e.g.)\n      if (this.shouldReactOnClickOutside()) {\n        this.waitForClose();\n      }\n    }\n  }\n\n  /**\n   * Autofocus the first tabbable element inside of the popover, if there is not a tabbable element,\n   * focus the popover instead.\n   */\n  private _autoFocusFirstTabbableElement(element: HTMLElement) {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If we didn't find any focusable elements inside the popover, focus the\n      // container so the user can't tab into other elements behind it.\n      if (!hasMovedFocus) {\n        element.focus();\n      }\n    });\n  }\n\n  private shouldReactOnClickOutside() {\n    return (!this.modal && this.closeOnClickOutside);\n  }\n\n  // detaches the overlay\n  // we are listening to the detachments observable which will then emit the nxClosed event\n  // on the popover component\n  private closePopover(): void {\n    if (this.overlayRef) {\n      this._returnFocusAfterPopover();\n      this.overlayRef.detach();\n      this._embeddedViewRef = null;\n      this._focusTrap.destroy();\n    }\n  }\n\n  private createOverlay(): OverlayRef {\n    if (!this.overlayRef) {\n      this.portal = new TemplatePortal(this.popover.templateRef, this.viewContainerRef);\n      const overlayState = new OverlayConfig();\n      overlayState.positionStrategy = this.getPosition();\n      this._positionStrategy = overlayState.positionStrategy;\n\n      if (this.scrollStrategy === 'reposition') {\n        overlayState.scrollStrategy = this.overlay.scrollStrategies.reposition();\n      } else {\n        overlayState.scrollStrategy = this.overlay.scrollStrategies.close();\n      }\n\n      overlayState.scrollStrategy.enable();\n\n      if (this.modal && this.trigger === 'click') {\n        overlayState.hasBackdrop = true;\n      }\n\n      this.overlayRef = this.overlay.create(overlayState);\n      this.subscribeToPositions(overlayState.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._subscribeToAttach();\n      this._subscribeToDetach();\n      if (this.modal) {\n        this._subscribeToBackdropClick();\n      }\n    }\n    return this.overlayRef;\n  }\n\n  private subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    position.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      const pair = change.connectionPair;\n      this.positionOverlay(pair);\n      this.positionArrow(pair);\n\n      // These position changes arrive too late,\n      // We have to trigger the change detection manually\n      // as it's detached from any render hierarchy\n      // and only updated by the overlay when attached.\n      if (this._embeddedViewRef && !this._embeddedViewRef.destroyed) {\n        this._embeddedViewRef.detectChanges();\n      }\n    });\n  }\n\n  // for modal popovers close the popover on backdrop clicks\n  private _subscribeToBackdropClick() {\n    this.overlayRef.backdropClick().pipe(takeUntil(this._destroyed)).subscribe((event) => {\n      this.show = false;\n    });\n  }\n\n  // Emit the nxClosed and the show status change event on the popover component when the overlay detaches\n  private _subscribeToDetach() {\n    this.overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(data => {\n      // This is an exception: when the popover is closed by a scrolling event,\n      // then only the detached method is called but the show state variable remains unchanged.\n      if (this.show) {\n        this.show = false;\n      }\n      this.changeShow.emit(this._show);\n      this.popover.emitClosedEvent();\n    });\n  }\n\n  private _subscribeToAttach() {\n    this.overlayRef.attachments().pipe(takeUntil(this._destroyed)).subscribe(data => {\n      this.changeShow.emit(this._show);\n    });\n  }\n\n  // subscribe to document clicks when trigger='click' to close the popover on clicks on the background\n  private waitForClose() {\n    return this._documentClickObservable\n      .pipe(\n        map(event => event.target),\n        filter(target => !this.elementRef.nativeElement.contains(target)),\n        takeUntil(this.popover.closed))\n      .subscribe(() => {\n        this.show = false;\n      });\n  }\n\n  private positionOverlay(pair: ConnectionPositionPair) {\n    if (pair.originX === 'end' && pair.overlayX === 'start') {\n      this.popover.direction = 'right';\n    } else if (pair.originY === 'bottom' && pair.overlayY === 'top') {\n      this.popover.direction = 'bottom';\n    } else if (pair.originX === 'start' && pair.overlayX === 'end') {\n      this.popover.direction = 'left';\n    } else if (pair.originY === 'top' && pair.overlayY === 'bottom') {\n      this.popover.direction = 'top';\n    }\n  }\n\n  private positionArrow(pair: ConnectionPositionPair) {\n\n    const parentElementPositionX = this.elementRef.nativeElement.getBoundingClientRect().left;\n    const parentElementWidth = this.elementRef.nativeElement.getBoundingClientRect().width / 2;\n    const parentElementLeftOffset = this.overlayRef.overlayElement.parentElement.offsetLeft;\n    const overlayElementLeftOffset = this.overlayRef.overlayElement.offsetLeft;\n\n    // calculation for x position of the parent element. In this case, overlay left offset is the one thing to consider.\n    const targetPosition = (parentElementPositionX + parentElementWidth) - (parentElementLeftOffset + overlayElementLeftOffset);\n    if (pair.originX === pair.overlayX) {\n      const direction = 'left';\n      const arrowStyle = {};\n\n      arrowStyle[direction] = targetPosition + 'px';\n      this.popover.arrowStyle = arrowStyle;\n    }\n    if ((pair.originY === 'bottom' || pair.originY === 'top') && pair.overlayX === 'center') {\n      this.popover.arrowStyle = { left: targetPosition + 'px' };\n    }\n\n    if ((pair.originX === 'end' || pair.originX === 'start') && pair.overlayY === 'center') {\n      this.popover.arrowStyle = { top: '50%' };\n    }\n  }\n\n  private getPosition(): FlexibleConnectedPositionStrategy {\n    let positions: ConnectedPosition[];\n    let offsetX = 0;\n    let offsetY = 0;\n    if (this.direction === 'top') {\n      positions = [{\n        overlayX: 'center',\n        overlayY: 'bottom',\n        originX: 'center',\n        originY: 'top'\n      }];\n      offsetX = 0;\n      offsetY = -20;\n    } else if (this.direction === 'right') {\n      positions = [{\n        overlayX: 'start',\n        overlayY: 'center',\n        originX: 'end',\n        originY: 'center'\n      }];\n      offsetX = 20;\n      offsetY = 0;\n    } else if (this.direction === 'bottom') {\n      positions = [{\n        overlayX: 'center',\n        overlayY: 'top',\n        originX: 'center',\n        originY: 'bottom'\n      }];\n      offsetX = 0;\n      offsetY = 20;\n    } else if (this.direction === 'left') {\n      positions = [{\n        overlayX: 'end',\n        overlayY: 'center',\n        originX: 'start',\n        originY: 'center'\n      }];\n      offsetX = -20;\n      offsetY = 0;\n    }\n    return this.overlay.position().flexibleConnectedTo(this.elementRef)\n      .withPositions([...positions, ...fallbacks])\n      .withDefaultOffsetX(offsetX)\n      .withDefaultOffsetY(offsetY);\n  }\n\n  /** Returns the focus to the element focused before the Popover was open. */\n  private _returnFocusAfterPopover() {\n    const toFocus = this._elementFocusedBeforePopoverWasOpened;\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {NxPopoverTriggerDirective} from './popover-trigger.directive';\nimport {NxPopoverComponent} from './popover.component';\nimport {NxPopoverContentDirective} from './popover-content';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NxIconModule} from '@allianz/ngx-ndbx/icon';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    NxIconModule\n  ],\n  declarations: [\n    NxPopoverTriggerDirective,\n    NxPopoverComponent,\n    NxPopoverContentDirective\n  ],\n  exports: [\n    NxPopoverTriggerDirective,\n    NxPopoverComponent,\n    NxPopoverContentDirective\n  ]\n})\nexport class NxPopoverModule {\n\n}\n","import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { DELETE, BACKSPACE, ENTER } from '@angular/cdk/keycodes';\n\n@Component({\n  selector: 'nx-tag',\n  templateUrl: 'tag.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['tag.component.scss'],\n  host: {\n    '(click)': 'tagClickHandler()',\n    '(keydown)': 'removeKeyHandler($event)',\n    '[attr.tabindex]': 'tabindex'\n  }\n})\nexport class NxTagComponent {\n  private _removable: boolean;\n\n  /** Whether the tag is removeable. */\n  @Input()\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get removable() {\n    return this._removable;\n  }\n\n  private _tabindex: number = -1;\n  /**\n   * Sets the tab-index of a tag. Default value: -1.\n   *\n   * If `nxAllowTagDeletion` of the taglist is set to true, the default value is 0.\n   */\n  @Input()\n  set tabindex(value: number) {\n    this._tabindex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get tabindex(): number {\n    return this.removable ? 0 : this._tabindex;\n  }\n\n  private _value: string;\n  /** Sets the value of the tag. */\n  @Input()\n  set value(value: string) {\n    if (this._value !== value) {\n      this._value = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get value(): string {\n    return this._value;\n  }\n\n  /** An event is dispatched each time when the tag is clicked. */\n  @Output() readonly clicked: EventEmitter<any> = new EventEmitter<any>();\n  /** An event is dispatched each time when the tag is removed. */\n  @Output() readonly removed: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef) { }\n\n  /** @docs-private */\n  // Emit the removed event that the parent can remove the value\n  removeClickHandler(event: MouseEvent) {\n    event.stopPropagation();\n    this.removed.emit(this.value);\n  }\n\n  /** @docs-private */\n  removeKeyHandler(event: KeyboardEvent) {\n    if (this.removable && (event.keyCode === DELETE || event.keyCode === BACKSPACE)) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.removed.emit(this.value);\n    }\n\n    if (event.keyCode === ENTER) {\n      this.clicked.emit(this.value);\n    }\n  }\n\n  /** @docs-private */\n  tagClickHandler() {\n    this.clicked.emit(this.value);\n  }\n}\n","import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Component, EventEmitter, forwardRef, Input, Output, ChangeDetectionStrategy,\n  ChangeDetectorRef, ViewChildren, ElementRef, QueryList, AfterContentInit } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { NxTagComponent } from './tag.component';\n\n@Component({\n  selector: 'nx-taglist',\n  templateUrl: 'taglist.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ './taglist.component.scss' ],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxTaglistComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.nx-taglist--keyword]': 'isKeywordList',\n    '[attr.aria-labelledby]': 'labelledby || null',\n    '[attr.tabindex]': '-1'\n  }\n})\n\nexport class NxTaglistComponent implements ControlValueAccessor {\n\n  /** An event is dispatched each time when the list of tags changed. */\n  @Output('nxTagsChange') tagsChange: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n  /** An event is dispatched each time when a tag is clicked. */\n  @Output('nxTagClick') tagClickEvent: EventEmitter<any> = new EventEmitter<any>();\n\n  /** @docs-private */\n  @ViewChildren(NxTagComponent, {read: ElementRef}) tagChildren: QueryList<ElementRef>;\n\n  private _tags: Array<any> = [];\n  /** Sets the list of tags. */\n  @Input('nxTags')\n  set tags(value: Array<any>) {\n    this._tags = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get tags(): Array<any> {\n    return this._tags;\n  }\n\n  private _tabindex: number = -1;\n  /** Sets the tabindex of the contained tags. Default value: -1. */\n  @Input()\n  set tabindex(value: number) {\n    this._tabindex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get tabindex(): number {\n    return this.allowTagDeletion ? 0 : this._tabindex;\n  }\n\n  private _allowTagDeletion: boolean = true;\n  /** Whether the tags can be removed from the list. Default: true. */\n  @Input('nxAllowTagDeletion')\n  set allowTagDeletion(value: boolean) {\n    this._allowTagDeletion = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get allowTagDeletion(): boolean {\n    return this._allowTagDeletion;\n  }\n\n  private _isKeywordList: boolean = false;\n  /** Whether the tags can be styled as keywords. */\n  @Input('nxIsKeywordList')\n  set isKeywordList(value: boolean) {\n    this._isKeywordList = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get isKeywordList(): boolean {\n    return this._isKeywordList;\n  }\n\n  private _labelProperty: string = 'nxTaglistLabel';\n    /** Sets the label property, in case tags represent objects. */\n  @Input('nxLabelProperty')\n  set labelProp(value: string) {\n    if (this._labelProperty !== value) {\n      this._labelProperty = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get labelProp(): string {\n    return this._labelProperty;\n  }\n\n  private _ariaLabelledBy: string;\n  /** Sets the label property to improve accessibility. */\n  @Input('aria-labelledby')\n  set labelledby(value: string) {\n    if (this._ariaLabelledBy !== value) {\n      this._ariaLabelledBy = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get labelledby(): string {\n    return this._ariaLabelledBy;\n  }\n\n  private _valueFormatterFn: (value: any) => string = (value) => value;\n  /** Sets the customization function for tag value.  */\n  @Input('nxValueFormatter')\n  set valueFormatter(fn: (value: any) => string) {\n    this._valueFormatterFn = fn;\n    this._changeDetectorRef.markForCheck();\n  }\n  get valueFormatter(): (value: any) => string {\n    return this._valueFormatterFn;\n  }\n\n  private _onChange: (value: any) => void = () => {};\n  private _onTouched: () => any = () => {};\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  /** Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter */\n  delete(index: number, value: any) {\n\n    if (this.allowTagDeletion) {\n      this.tags = [\n        ...this.tags.slice(0, index),\n        ...this.tags.slice(index + 1)\n      ];\n\n      // focus next element after deletion\n      if (this.tagChildren.toArray()[index + 1]) {\n        this.tagChildren.toArray()[index + 1].nativeElement.focus();\n      }\n\n      this._onChange(this.tags);\n\n      this.tagsChange.emit(this.tags);\n    }\n  }\n\n  /** Allows to add a tag. Takes tag object as an input */\n  addTag(tag: any) {\n    if (!tag) {\n      return;\n    }\n\n    // make sure tag is either string or has the configured label prop and is not yet in the list\n    if ((typeof tag === 'string' && this.tags.indexOf(tag) === -1) ||\n      (tag[ this.labelProp ] && this.tags.filter((t) => t[ this.labelProp ] === tag[ this.labelProp ]).length < 1)) {\n\n      this.tags = [ ...this.tags, tag ];\n      this._onChange(this.tags);\n      this.tagsChange.emit(this.tags);\n    }\n  }\n\n  /** Allows to clear the tag list. */\n  clearTags() {\n    this.tags = [];\n    this._onChange(this.tags);\n    this.tagsChange.emit(this.tags);\n  }\n\n  /** @docs-private */\n  writeValue(tags: any): void {\n    this.tags = tags;\n  }\n\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** @docs-private */\n  renderTag(tag: any) {\n    const tagStr: string = typeof tag === 'string' ? tag : tag[ this.labelProp ];\n    return this.valueFormatter(tagStr);\n  }\n\n  /** @docs-private */\n  tagClick(index, value: any) {\n    this.tagClickEvent.emit(this.tags[index]);\n  }\n}\n","import { NxTagComponent } from './tag.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NgModule } from '@angular/core';\nimport { NxTaglistComponent } from './taglist.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [ NxTaglistComponent, NxTagComponent ],\n  exports: [ NxTaglistComponent, NxTagComponent ],\n  imports: [ CommonModule, NxIconModule ]\n})\nexport class NxTaglistModule {}\n","import { Directive } from '@angular/core';\n\n@Directive({\n  selector: 'img[nxImg]'\n})\nexport class NxImageDirective {\n  constructor() {\n    console.warn('Directive nxImg which was used together with nxFigure ' +\n    'is now deprecated and not required anymore. Please remove it from your ' +\n    'tag. Check the documentation for more details.');\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n/** Types of figures. */\nexport type FigureType = 'auto' | '1by1' | '1dot8by1' | '1dot2by1' | '1by1dot1' | '2dot6by1' | 'rounded';\n/** @docs-private */\nexport type figureSizes = 'auto' | '1by1' | '1dot8by1' | '1dot2by1' | '1by1dot1' | '2dot6by1';\n\nconst DEFAULT_SIZE = 'auto';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'figure[nxFigure]',\n  template: '<ng-content></ng-content>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./figure.component.scss'],\n  host: {\n    '[class.nx-image--auto]': 'size === \"auto\" && !rounded',\n    '[class.nx-image--1by1]': 'size === \"1by1\"',\n    '[class.nx-image--1dot8by1]': 'size === \"1dot8by1\"',\n    '[class.nx-image--1dot2by1]': 'size === \"1dot2by1\"',\n    '[class.nx-image--1by1dot1]': 'size === \"1by1dot1\"',\n    '[class.nx-image--2dot6by1]': 'size === \"2dot6by1\"',\n    '[class.nx-image--rounded]': 'rounded'\n  }\n})\nexport class NxFigureComponent {\n  private _classNames: FigureType;\n\n  /** @docs-private */\n  rounded: boolean;\n\n  /** @docs-private */\n  size: figureSizes;\n\n  /**\n   * Sets the type of the visual appearance of the image.\n   * The default value  is 'auto'.\n   */\n  @Input('nxFigure')\n  set classNames(value: FigureType) {\n    if (this._classNames === value) {\n      return;\n    }\n\n    this._classNames = value;\n    const sizeRegex = /^(auto|1by1|1dot8by1|1dot2by1|1by1dot1|2dot6by1)$/;\n    const [size = null] = this._classNames.match(sizeRegex) || [DEFAULT_SIZE];\n    this.size = size as any;\n\n    this.rounded = !!this._classNames.match(/rounded/);\n  }\n\n  get classNames(): FigureType {\n    return this._classNames;\n  }\n}\n","import { NxImageDirective } from './image.directive';\nimport { NgModule } from '@angular/core';\nimport { NxFigureComponent } from './figure.component';\n\n@NgModule({\n  declarations: [ NxFigureComponent, NxImageDirective ],\n  exports: [ NxFigureComponent, NxImageDirective ]\n})\nexport class NxImageModule {\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\n\n@Component({\n  selector: 'nx-video',\n  templateUrl: 'video.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ './video.component.scss' ],\n})\n\n// note that this currently only supports youtube videos\nexport class NxVideoComponent {\n\n  private _videoId: string = null;\n\n  /** Sets the id of the YouTube video. */\n  @Input('nxVideoId')\n  set videoId(value: string) {\n    if (this._videoId !== value) {\n      this._videoId = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get videoId(): string {\n    return this._videoId;\n  }\n\n  private _altText: string = '';\n\n  /** Sets the value of the alt attribute for the preview image. */\n  @Input('nxAltText')\n  set altText(value: string) {\n    if (this._altText !== value) {\n      this._altText = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get altText(): string {\n    return this._altText;\n  }\n\n  private _playButtonAriaLabel: string = '';\n\n  /** Sets the value of the aria-label attribute on the play button (Default: Play Video). */\n  @Input('nxPlayButtonAriaLabel')\n  set nxPlayButtonAriaLabel(value: string) {\n    if (this._playButtonAriaLabel !== value) {\n      this._playButtonAriaLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get nxPlayButtonAriaLabel(): string {\n    return this._playButtonAriaLabel;\n  }\n\n  private _previewImageSrc: string = null;\n\n  /** Sets the preview image. If this is not provided, an image from YouTube will be used as default. */\n  @Input('nxPreviewImageSrc')\n  set previewImageSrc(value: string) {\n    if (this._previewImageSrc !== value) {\n      this._previewImageSrc = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get previewImageSrc(): string {\n    return this._previewImageSrc;\n  }\n\n  private _showPlayerControls: boolean = true;\n\n  /** Sets player controls. If set to false, player controls are not available. */\n  @Input('nxShowPlayerControls')\n  set showPlayerControls(value: boolean) {\n    this._showPlayerControls = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get showPlayerControls(): boolean {\n    return this._showPlayerControls;\n  }\n\n  private _allowFullScreen: boolean = true;\n\n  /** Sets fullscreen option. If set to false, fullscreen option is not available. */\n  @Input('nxAllowFullScreen')\n  set allowFullScreen(value: boolean) {\n    this._allowFullScreen = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get allowFullScreen(): boolean {\n    return this._allowFullScreen;\n  }\n\n  private _interfaceLanguage: string = null;\n\n  /** Sets interface language. Can be used to override the interface language determined by YouTube. */\n  @Input('nxInterfaceLanguage')\n  set interfaceLanguage(value: string) {\n    if (this._interfaceLanguage !== value) {\n      this._interfaceLanguage = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get interfaceLanguage(): string {\n    return this._interfaceLanguage;\n  }\n\n  /** @docs-private */\n  showPlayer = false;\n\n  constructor(private sanitizer: DomSanitizer, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** @docs-private */\n  select(): void {\n    this.showPlayer = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n   /** Returns the safe resource URL of the YouTube video, given video id.  */\n  get videoSrc(): SafeResourceUrl {\n    let url = `https://www.youtube.com/embed/${this.videoId}?rel=0&showinfo=0&autoplay=1`;\n    if (!this.showPlayerControls) {\n      url += '&controls=0';\n    }\n    if (!this.allowFullScreen) {\n      url += '&fs=0';\n    }\n    if (this.interfaceLanguage) {\n      url += `&hl=${this.interfaceLanguage}`;\n    }\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\n  }\n\n  /** Returns the preview image source URL, given video id. */\n  get imgSrc() {\n    return this.previewImageSrc ? this.previewImageSrc : `https://img.youtube.com/vi/${this.videoId}/sddefault.jpg`;\n  }\n\n  /** Returns the labels for the control buttons. */\n  get playButtonAriaLabel() {\n    const defaultLabel = this.altText ? `${this.altText} - Play Video` : 'Play Video';\n    return this.nxPlayButtonAriaLabel ? this.nxPlayButtonAriaLabel : defaultLabel;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NxVideoComponent } from './video.component';\nimport { CommonModule } from '@angular/common';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\n\n@NgModule({\n  declarations: [ NxVideoComponent ],\n  exports: [ NxVideoComponent ],\n  imports: [ CommonModule, NxIconModule ]\n})\nexport class NxVideoModule {}\n","\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getNxDropdownDynamicMultipleError(): Error {\n  return Error('Cannot change `multiselect` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiselect` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getNxDropdownNonArrayValueError(): Error {\n  return Error('Value must be an array in multiselect mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getNxDropdownNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","import { NxFormfieldControl } from '@allianz/ngx-ndbx/formfield';\nimport { Input } from '@angular/core';\n\nexport abstract class NxDropdownControl extends NxFormfieldControl<any> {\n  /**\n   * Whether the dropdown should allow multi selection and additional checkboxes are shown.\n   *\n   * Note: Please make sure the value you bind is an array. If not an error is thrown! */\n  @Input('nxIsMultiselect') isMultiSelect: boolean = false;\n\n  /** @docs-private */\n  abstract formatValue?(value): string;\n\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'nx-dropdown-group',\n  templateUrl: 'dropdown-group.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['dropdown-group.scss']\n})\nexport class NxDropdownGroupComponent {\n  /** Label displayed in the group. */\n  @Input('nxLabel') label: string;\n}\n","import { Highlightable } from '@angular/cdk/a11y';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxDropdownComponent } from '../dropdown';\nimport { NxDropdownControl } from '../dropdown.control';\nimport { NxDropdownGroupComponent } from './../group/dropdown-group';\n\nexport class NxDropdownItemChange {\n\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public item: NxDropdownItemComponent,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/** the unique id counter */\nlet nextId = 0;\n\n@Component({\n  selector: 'nx-dropdown-item',\n  templateUrl: 'dropdown-item.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [\n    'dropdown-item.scss'\n  ],\n  host: {\n    '[id]': 'id',\n    'role': 'option',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[class.nx-hidden]': '_hidden',\n    '[class.nx-dropdown-item--active]': 'active',\n    '[class.nx-selected]': 'selected',\n    '[class.nx-multiselect]': 'multiselect',\n    '(click)': '_onClick($event)'\n  }\n})\nexport class NxDropdownItemComponent implements Highlightable, OnDestroy, AfterViewChecked {\n  _hidden = false;\n\n  private _mostRecentViewValue = '';\n\n  private _id = `nx-dropdown-item-${nextId++}`;\n\n  /**\n   * The value of the dropdown item.\n   * You can't use undefined, null and '' (empty strings)\n   * as they are sentinel values signalling empty data.\n   */\n  @Input('nxValue') value;\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  private _selected: boolean = false;\n\n  /** Whether the item is selected. */\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  private _active: boolean;\n\n  /** Whether the item is active. */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * @docs-private\n   * Whether the parent dropdown is in multiselect mode.\n   */\n  get multiselect(): boolean {\n    return this._dropdown && this._dropdown.isMultiSelect;\n  }\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<NxDropdownItemChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * @docs-private\n   * The wrapping div in the template. Used by dropdown to use the container height for scrolling.\n   */\n  @ViewChild('container', { static: true }) containerElement;\n\n  constructor(\n    @Inject(NxDropdownControl) private _dropdown: NxDropdownControl,\n    /** @docs-private */\n    @Optional() readonly group: NxDropdownGroupComponent,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef) {\n    (this._dropdown as NxDropdownComponent).filterChanges.pipe(takeUntil(this._destroy)).subscribe((value) => {\n      this._showOrHideByFilter(value);\n    });\n    // reset the hidden state when dropdown closes that on next open the user is seeing the full list again\n    (this._dropdown as NxDropdownComponent)._closedStream.pipe(takeUntil(this._destroy)).subscribe(() => {\n      this._hidden = false;\n    });\n  }\n\n  ngAfterViewChecked() {\n    // Since the parent dropdown component could be using the item's label to display the selected values\n    // and it doesn't have a way of knowing if the item's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._destroy.next();\n    this._destroy.complete();\n  }\n\n  _onClick(event) {\n    /* preventDefault to stop triggering the event twice when you click on the checkbox or the label inside the item */\n    event.preventDefault();\n    event.stopPropagation();\n    this._selectViaInteraction();\n  }\n\n  /**\n  * `Selects the option while indicating the selection came from the user. Used to\n  * determine if the select's view -> model callback should be invoked.`\n  */\n  _selectViaInteraction(): void {\n    this._selected = this.multiselect ? !this._selected : true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent(true);\n  }\n\n  /** @docs-private */\n  show() {\n    this._hidden = false;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** @docs-private */\n  hide() {\n    this._hidden = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _showOrHideByFilter(search) {\n    const constraint = (this._dropdown as NxDropdownComponent).filterFn(search, this.viewValue);\n    this._hidden = constraint ? false : true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get _formattedValue() {\n    return (this._dropdown as NxDropdownComponent).valueFormatter(this.value);\n  }\n\n  /** @docs-private */\n  get viewValue() {\n    return (this._elementRef.nativeElement.textContent || '').trim();\n  }\n\n  /** @docs-private */\n  get elementRef() {\n    return this._elementRef;\n  }\n\n  select() {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** @docs-private */\n  deselect() {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** @docs-private */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  private _emitSelectionChangeEvent(isUserInput: boolean = false) {\n    this.onSelectionChange.emit(new NxDropdownItemChange(this, isUserInput));\n  }\n\n  /** @docs-private */\n  setActiveStyles(): void {\n    this._active = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** @docs-private */\n  setInactiveStyles(): void {\n    this._active = false;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the ListKeyManagerOption.\n   * @docs-private */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  _isContentEmpty(element) {\n    return element.children.length === 0 && !element.textContent.trim();\n  }\n\n  _onLabelChange() {\n    // trigger change detection when the label content changes for the case that ng-content was empty before.\n    // this is also important when the label comes in deferred, e.g. by a delayed observable,\n    // then first the default label derived from the value is shown\n    // and after the value from the async observable is ready we need to trigger change detection that the derived label\n    // gets hidden again.\n    // Notice(!): the event of (cdkObserveContent) is run outside of the ngZone\n    // We run detectChanges directly here as markForCheck wasn't enough to always trigger change detection correctly\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n// This Directive solely purpose is to mark given ng-template and project it into the required destination.\n@Directive({\n  selector: '[nxClosedLabel]'\n})\nexport class NxDropdownClosedLabelDirective {\n  constructor(public templateRef: TemplateRef<any>) {}\n}\n","import { NxFormfieldComponent, NxFormfieldControl } from '@allianz/ngx-ndbx/formfield';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, SHIFT, TAB } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, ConnectionPositionPair, FlexibleConnectedPositionStrategy } from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  isDevMode,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  Self,\n  ViewChild,\n  TemplateRef,\n  ContentChild,\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {delay, filter, map, startWith, switchMap, take, takeUntil} from 'rxjs/operators';\n\nimport { getNxDropdownNonArrayValueError, getNxDropdownNonFunctionValueError } from './dropdown-errors';\nimport { NxDropdownControl } from './dropdown.control';\nimport { NxDropdownGroupComponent } from './group/dropdown-group';\nimport { NxDropdownItemChange, NxDropdownItemComponent } from './item/dropdown-item';\nimport { NxDropdownClosedLabelDirective } from './closed-label.directive';\n\n/** Change event object that is emitted when the select value has changed. */\nexport class NxDropdownSelectChange<T = any> {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: NxDropdownComponent,\n    /** Current value of the select that emitted the event. */\n    public value: T) { }\n}\n\nfunction getPositions(): ConnectionPositionPair[] {\n  return [{\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'top'\n  }, {\n    originX: 'start',\n    originY: 'center',\n    overlayX: 'start',\n    overlayY: 'center'\n  }, {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'bottom'\n  }];\n}\n\n@Component({\n  selector: 'nx-dropdown',\n  templateUrl: 'dropdown.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['dropdown.scss'],\n  providers: [\n    { provide: NxDropdownControl, useExisting: NxDropdownComponent },\n    { provide: NxFormfieldControl, useExisting: NxDropdownComponent },\n  ],\n  host: {\n    'role': 'button',\n    '[class.nx-dropdown]': 'true',\n    '[class.is-filled]': 'hasValue',\n    '[class.has-focus]': 'focused',\n    '[class.nx-dropdown--negative]': '_negative',\n    '[class.nx-dropdown--disabled]': 'disabled',\n    '[attr.aria-describedby]': 'ariaDescribedby || null',\n    '[attr.aria-required]': 'required',\n    '[attr.aria-label]': '_getAriaLabel()',\n    'aria-haspopup': 'listbox',\n    '[attr.aria-expanded]': 'panelOpen',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.tabindex]': 'tabIndex',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': 'openPanel()'\n  }\n})\nexport class NxDropdownComponent extends NxDropdownControl implements ControlValueAccessor,\n  OnInit, AfterContentInit, OnDestroy, DoCheck {\n\n  // The dropdown currently doesn't support readonly of the NxFormfieldControl so we hardcode it here\n  readonly readonly: boolean = false;\n\n  private _selectionModel: SelectionModel<NxDropdownItemComponent>;\n\n  protected _disabled: boolean = false;\n\n  private _focused: boolean = false;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** @docs-private */\n  errorState: boolean = false;\n\n  /** @docs-private */\n  isStable: boolean = false;\n\n  /**\n   * Name of this control that is used inside the formfield component\n   * @docs-private\n   */\n  controlType = 'nx-dropdown';\n\n  /** Holds the value from nxValue. */\n  private _value: any;\n\n  /** The minimal space between the viewport and the overlay */\n  _overlayViewportMargin: number = 16;\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** Holds the panelWidth after panel was attached. */\n  _panelWidth: number;\n\n  /**\n   * @docs-private\n   * Emits when internal state changes to inform formfield about it.\n   */\n  readonly stateChanges = new Subject<any>();\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** @docs-private */\n  ariaDescribedby: string;\n\n  private _tabIndex: number = 0;\n\n  /** @docs-private */\n  currentFilter: string = '';\n\n  @Input()\n  get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n\n  /** Label to describe the component. */\n  @Input('nxAriaLabel') _ariaLabel: string = '';\n\n  /** Selected value */\n  @Input('nxValue')\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n      this._onChange(newValue);\n    }\n  }\n\n  /** Whether the dropdown is disabled. */\n  @Input('nxDisabled')\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n  }\n\n  /** Whether the component is required. This adds an aria-required label to the component. */\n  @Input('nxRequired') required: boolean;\n\n  private _style: string = '';\n  /** Whether the dropdown should render in its negative style or not. */\n  _negative: boolean = false;\n\n  /** If set to 'negative', the component is displayed with the negative set of styles. */\n  @Input('nxStyle')\n  set styles(value: string) {\n\n    if (this._style === value) {\n      return;\n    }\n\n    this._style = value;\n    this._negative = !!this._style.match(/negative/);\n  }\n\n  /** Whether the dropdown should be shown with an additional filter input. */\n  @Input('nxShowFilter') showFilter: boolean = false;\n\n  /** Text displayed as placeholder for the filter. */\n  @Input('nxFilterPlaceholder') filterPlaceholder: string = '';\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n    this.openedChange.pipe(filter(o => o), map(() => { }));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n    this.openedChange.pipe(filter(o => !o), map(() => { }));\n\n  /** Event emitted when the user types in the filter input. */\n  @Output('filterInput') readonly filterChanges: Subject<any> = new Subject<any>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output('nxValueChange') readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** Event emitted when the selected value has been changed. */\n  @Output() readonly selectionChange: EventEmitter<NxDropdownSelectChange> =\n    new EventEmitter<NxDropdownSelectChange>();\n\n  /** @docs-private */\n  readonly optionSelectionChanges: Observable<NxDropdownItemChange> = defer<Observable<NxDropdownItemChange>>(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions:  ConnectionPositionPair[];\n\n  /**\n   * @docs-private\n   * Panel containing the select options.\n   */\n  @ViewChild('panel', { static: false }) panel: ElementRef;\n\n  /** @docs-private */\n  @ViewChild('panelBody', { static: false }) panelBody: ElementRef;\n\n  /** @docs-private */\n  @ViewChild('trigger', { static: true }) trigger: ElementRef;\n\n  /** @docs-private */\n  @ViewChild('filterInput', { static: false }) filterInput: ElementRef;\n\n  /**\n   * @docs-private\n   * Overlay pane containing the options.\n   */\n  @ViewChild(CdkConnectedOverlay, { static: true }) overlayDir: CdkConnectedOverlay;\n\n  /** @docs-private */\n  @ContentChildren(NxDropdownItemComponent, { descendants: true }) options;\n\n  /** @docs-private */\n  @ContentChildren(NxDropdownGroupComponent) groups;\n\n  @ContentChild(NxDropdownClosedLabelDirective, {static: false})\n  _customClosedDropdownLabel: NxDropdownClosedLabelDirective;\n\n  @ViewChild('defaultClosedDropdownLabel', { static: true })\n  private _defaultClosedDropdownLabel: TemplateRef<any>;\n\n  /** @docs-private */\n  get closedDropdownLabel(): TemplateRef<any> {\n    return this._closedDropdownLabel;\n  }\n  private _closedDropdownLabel: TemplateRef<any>;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /**\n   * @docs-private\n   * The currently selected option.\n   */\n  get selected(): NxDropdownItemComponent | NxDropdownItemComponent[] {\n    return this.isMultiSelect ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  private _keyManager: ActiveDescendantKeyManager<NxDropdownItemComponent>;\n\n  /** @docs-private */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n  set panelOpen(value: boolean) {\n    this._panelOpen = value;\n  }\n\n  /**\n   * Function that transforms the value into a string.\n   * This function is used for displaying and filtering the content\n   * ( Default: (value) => value ? value.toString() : null; ).\n   */\n  @Input('nxValueFormatter') valueFormatter = (value) => {\n    return value == null ? '' : value.toString();\n  }\n\n  /** @docs-private */\n  get label(): string {\n    return this.formFieldComponent ? this.formFieldComponent.label : '';\n  }\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getNxDropdownNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  private _filterFn = (search: string, itemValue: string) => {\n    return itemValue.toLocaleLowerCase().indexOf(search.toLocaleLowerCase()) >= 0;\n  }\n\n  /**\n   * Function to be used when the user types into the search filter. The first argument is the user input,\n   * the second argument is the dropdown item value. The dropdown items will use this function to set their\n   * visibility state.\n   * A boolean should be returned.\n   */\n  @Input()\n  get filterFn() { return this._filterFn; }\n  set filterFn(fn: (search: string, itemValue: string) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getNxDropdownNonFunctionValueError();\n    }\n    this._filterFn = fn;\n  }\n\n  /**\n   * @docs-private\n   * Whether the select is focused.\n   */\n  get focused(): boolean {\n    return this._focused || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => { };\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => { };\n\n  /** @docs-private */\n  get elementRef(): ElementRef {\n    return this._elementRef;\n  }\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Attribute('tabindex') tabIndex: string,\n    @Optional() private formFieldComponent: NxFormfieldComponent,\n    /** @docs-private */\n    @Self() @Optional() public ngControl: NgControl,\n    @Optional() private _parentForm: NgForm,\n    @Optional() private _parentFormGroup: FormGroupDirective) {\n    super();\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._positions = getPositions();\n    this.tabIndex = parseInt(tabIndex, 10) || 0;\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<NxDropdownItemComponent>(this.isMultiSelect);\n  }\n\n  ngAfterContentInit() {\n    this._closedDropdownLabel =\n      this._customClosedDropdownLabel && this._customClosedDropdownLabel.templateRef || this._defaultClosedDropdownLabel;\n    this._initKeyManager();\n\n    this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n  }\n\n  /** @docs-private */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n\n  /** @docs-private */\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const control = this.ngControl ? this.ngControl.control as FormControl : null;\n    const newState = this.isErrorState(control, parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<NxDropdownItemComponent>(this.options)\n      .withTypeAhead()\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation('ltr')\n      .skipPredicate(item => item._hidden);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.closePanel();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        // Delay the auto scrolling until all items have settled otherwise the item containers might\n        // not exist yet\n        this._ngZone.onStable\n          .asObservable()\n          .pipe(take(1)).subscribe(() => {\n            this._scrollActiveOptionIntoView();\n          });\n      } else if (!this._panelOpen && !this.isMultiSelect && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.item, event.isUserInput);\n\n      if (event.isUserInput && !this.isMultiSelect && this._panelOpen) {\n        this.closePanel();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        // defer it for the next cycle to not run in changed after checked errors\n        // the combination of dropdown-item notifying parent and when the parent\n        // tries to fetch the triggerValue from the child throws these errors\n        setTimeout(() => {\n          this._changeDetectorRef.markForCheck();\n          this.stateChanges.next();\n        });\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: NxDropdownItemComponent, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this.isMultiSelect) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.isMultiSelect) {\n        this._sortValues();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.isMultiSelect && value) {\n      if (!Array.isArray(value)) {\n        throw getNxDropdownNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): NxDropdownItemComponent | undefined {\n    const correspondingOption = this.options.find((option: NxDropdownItemComponent) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value, value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n    return correspondingOption;\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.isMultiSelect) {\n      valueToEmit = (this.selected as NxDropdownItemComponent[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as NxDropdownItemComponent).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new NxDropdownSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.isMultiSelect) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Adds a offset to the overlay position, so the formfield label and the dropdown panel header are vertically aligned. */\n  private _updatePositionOffset() {\n    let offset = 0;\n\n    if (this.formFieldComponent !== null) {\n      const formFieldRect = this.formFieldComponent.elementRef.nativeElement.getBoundingClientRect();\n      const dropdownRect = this._elementRef.nativeElement.getBoundingClientRect();\n      const panelHeader = this.overlayDir.overlayRef.overlayElement.querySelector('.nx-dropdown__panel-header');\n      const panelHeaderPaddingTop = panelHeader ? parseInt(getComputedStyle(panelHeader).paddingTop, 10) : 0;\n      offset = formFieldRect.top - dropdownRect.top - panelHeaderPaddingTop;\n    }\n\n    this._positions[0].offsetY = offset;\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Opens the panel of the dropdown. */\n  openPanel() {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n    this._panelOpen = true;\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    this._keyManager.withHorizontalOrientation(null);\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Closes the panel of the dropdown. */\n  closePanel() {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this.isStable = false;\n      this._keyManager.withHorizontalOrientation('ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n      this.openedChange.emit(false);\n      // defer the focus if the dropdown triggers actions that detach\n      // a template/view from the DOM to prevent changed after checked errors\n      setTimeout(() => this.focus());\n    }\n  }\n\n  // calculate inital scrollTop when the dropdown opens\n  // scrolls the selected item to the middle of the panel if possible\n  private _calculateScrollTop() {\n    // reset the scrolltop to make calculation easier\n    this.panelBody.nativeElement.scrollTop = 0;\n\n    if (!this.empty) {\n      const offset = this._getItemOffset(this._keyManager.activeItem);\n      const panelHeight = this.panelBody.nativeElement.offsetHeight;\n      const panelRect = this.panelBody.nativeElement.getBoundingClientRect();\n      const middleOfPanel = panelRect.top + panelHeight / 2;\n\n      if (offset > middleOfPanel) {\n        // because we reset the scrollTop to 0 at the top we can simply take the middleOfPanel which is our\n        // target position for the item and subtract it from the offset (which is now always relative to the viewport)\n        this.panelBody.nativeElement.scrollTop = offset - middleOfPanel;\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    if (!this.panelOpen || !this._keyManager.activeItem) {\n      return;\n    }\n\n    const activeItem = this._keyManager.activeItem.containerElement.nativeElement;\n    const panel = this.panelBody.nativeElement;\n    const panelOffset = panel.offsetTop;   // how much the overlay is repositioned on the page\n    const panelTopScrollPosition = panel.scrollTop;\n    const panelHeight = panel.clientHeight;\n    const itemTop = activeItem.offsetTop - panelOffset;\n    const itemBottom = activeItem.offsetTop - panelOffset + activeItem.getBoundingClientRect().height;\n\n    // item half or less visible on top\n    if (itemTop < panelTopScrollPosition) {\n      this.panelBody.nativeElement.scrollTop = itemTop;\n      // item half or less visible on bottom\n    } else if (itemBottom > (panelTopScrollPosition + panelHeight)) {\n      this.panelBody.nativeElement.scrollTop = itemBottom - panelHeight;\n    }\n  }\n\n  /** @docs-private */\n  private _getItemOffset(item) {\n    const itemRect = item.containerElement.nativeElement.getBoundingClientRect();\n\n    return itemRect.top + (itemRect.height / 2); // get position of the item's center\n  }\n\n  /**\n   * @docs-private\n   * Formfield Implementation\n   */\n  setDescribedByIds(ids: string[]): void {\n    this.ariaDescribedby = ids.join(' ');\n  }\n\n  /** @docs-private */\n  setAriaLabel(value: string) {\n    this._ariaLabel = value;\n  }\n\n  _getAriaLabel() {\n    return this._ariaLabel || (this.formFieldComponent ? this.formFieldComponent.label : null);\n  }\n\n  get _isInOutlineField(): boolean {\n    return this.formFieldComponent !== null\n      && this.formFieldComponent.appearance === 'outline';\n  }\n\n  /**\n   * @docs-private\n   * Whether the select has a value.\n   */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  /** @docs-private */\n  get hasValue() {\n    return this._selectionModel.hasValue();\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean {\n    return this.focused || !this.empty;\n  }\n  /** End Formfield */\n\n  /** ControlValueAccessor */\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n  /** End ControlValueAccessor */\n\n  _handleKeydown(event: KeyboardEvent) {\n    this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n  }\n\n  private _handleClosedKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n      keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.isMultiSelect || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.openPanel();\n    } else if (!this.isMultiSelect && !this.disabled) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  private _handleOpenKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    // if has filter all events other than the listed ones should be ignored or handled in _onFilter()\n    if (!([DOWN_ARROW, UP_ARROW, HOME, END, ENTER, LEFT_ARROW, RIGHT_ARROW, SHIFT, SPACE, TAB].indexOf(keyCode) >= 0)\n         && this.showFilter) {\n      return;\n    }\n\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    const allHidden = this.options.map(option => option._hidden).every(option => Boolean(option));\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.closePanel();\n    } else if (keyCode === ENTER && manager.activeItem && !allHidden) {\n      event.preventDefault();\n\n      manager.activeItem._selectViaInteraction();\n    } else if (keyCode === ENTER && allHidden) {\n      event.preventDefault();\n\n      this.closePanel();\n    } else if (!this.showFilter && keyCode === SPACE && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (keyCode === TAB) {\n      this.closePanel();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n      manager.onKeydown(event);\n\n      this._ngZone.onStable\n        .asObservable()\n      .pipe(\n        take(1),\n        delay(251) // we need to defer to get the new activeItemIndex. delay > debouncing of the typeAhead\n       ).subscribe(() => {\n          this.isStable = true;\n          this._changeDetectorRef.detectChanges();\n        });\n\n      if (this.isMultiSelect && isArrowKey && event.shiftKey && manager.activeItem &&\n        manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /** @docs-private */\n  formatValue(value): string {\n    return this.valueFormatter(value);\n  }\n\n  /** Called when the user types in the filter input */\n  _onFilter(event) {\n    event.preventDefault();\n    this.currentFilter = event.target.value;\n    this.filterChanges.next(event.target.value);\n    const allHidden = this.options.map(option => option._hidden).every(option => Boolean(option));\n    if (allHidden) {\n      this._keyManager.setActiveItem(null);\n    } else {\n      this._keyManager.setFirstItemActive();\n    }\n  }\n\n  /**\n   * @docs-private\n   * The value displayed in the trigger.\n   */\n  get triggerValue(): string {\n\n    if (this.empty) {\n      return '';\n    }\n\n    if (this.isMultiSelect) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      return selectedOptions.join(', ');\n    }\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      const overlayRef = this.overlayDir.overlayRef;\n      const positionStrategy = overlayRef.getConfig()\n        .positionStrategy as FlexibleConnectedPositionStrategy;\n\n      this._updatePositionOffset();\n      positionStrategy.withPositions(this._positions.slice());\n      overlayRef.updatePosition();\n\n      if (this._keyManager.activeItem) {\n        this._calculateScrollTop();\n      }\n\n      this._changeDetectorRef.markForCheck();\n      this.openedChange.emit(true);\n\n      // If there is no item selected, the filter takes the focus.\n      if (this.showFilter && !this._value) {\n        this.filterInput.nativeElement.focus();\n      } else {\n        this.panelBody.nativeElement.focus();\n      }\n    });\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (this.filterInput && this.showFilter) {\n      this._clearFilter();\n    }\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /** @docs-private */\n  get isFilterEmpty() {\n    return this.currentFilter.length === 0;\n  }\n\n  /** @docs-private */\n  _clearFilter() {\n    this.filterInput.nativeElement.value = '';\n    this.currentFilter = '';\n    this.filterChanges.next('');\n  }\n\n  /** @docs-private determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n}\n","import { NxFormfieldModule } from '@allianz/ngx-ndbx/formfield';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxCheckboxModule } from '@allianz/ngx-ndbx/checkbox';\nimport { NxDropdownComponent } from './dropdown';\nimport { NxDropdownGroupComponent } from './group/dropdown-group';\nimport { NxDropdownItemComponent } from './item/dropdown-item';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { NxDropdownClosedLabelDirective } from './closed-label.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxFormfieldModule,\n    NxCheckboxModule,\n    OverlayModule,\n    A11yModule,\n    NxIconModule,\n    ObserversModule\n  ],\n  declarations: [\n    NxDropdownComponent,\n    NxDropdownItemComponent,\n    NxDropdownGroupComponent,\n    NxDropdownClosedLabelDirective\n  ],\n  exports: [\n    NxDropdownComponent,\n    NxDropdownItemComponent,\n    NxDropdownGroupComponent,\n    NxDropdownClosedLabelDirective\n  ]\n})\nexport class NxDropdownModule {\n\n}\n","import { Component, Input, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Output, EventEmitter } from '@angular/core';\n\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** Option selected event */\nexport class NxAutocompleteOptionSelected {\n  constructor(\n    /** The option that is selected or deselected. */\n    public source: NxAutocompleteOptionComponent,\n    /** Whether the input was triggered by the user. */\n    public isUserInput = false) { }\n}\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n@Component({\n  selector: 'nx-autocomplete-option',\n  templateUrl: 'autocomplete-option.component.html',\n  styleUrls: ['autocomplete-option.component.scss'],\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    '[class.nx-active]': 'active',\n    '[class.nx-disabled]': 'disabled',\n    '[style.display]': '\\'block\\'' // needed for to be able to calculate offset height\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxAutocompleteOptionComponent {\n\n  /** Id of the autocomplete option. By default it is set to an incremented value. */\n  public get id(): string {\n    return this._id;\n  }\n  private _id = `nx-autocomplete-option-${_uniqueIdCounter++}`;\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n  private _selected = false;\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n  private _active = false;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n    }\n  }\n  private _disabled = false;\n\n  /** The value of the autocomplete option. */\n  @Input() value: any;\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<NxAutocompleteOptionSelected>();\n\n  constructor(\n    /** @docs-private */ public elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new NxAutocompleteOptionSelected(this, isUserInput));\n  }\n\n  /** @docs-private */\n  get viewValue(): string {\n    return (this.elementRef.nativeElement.textContent || '').trim();\n  }\n\n  /**\n   * @docs-private\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * @docs-private\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * @docs-private\n   * Gets the label to be used when determining whether the option should be focused.\n   */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /**\n   * @docs-private\n   * Sets focus onto this option.\n   */\n  focus(): void {\n    const element = this.elementRef.nativeElement;\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n}\n","\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewChild,\n  ViewChildren,\n  ContentChildren,\n  QueryList,\n  ChangeDetectionStrategy, ChangeDetectorRef, OnDestroy,\n  Optional\n} from '@angular/core';\n\nimport { NxAutocompleteOptionComponent } from './autocomplete-option.component';\nimport { NxFormfieldComponent } from '@allianz/ngx-ndbx/formfield';\nimport { Observable, Subscription } from 'rxjs';\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class NxAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: NxAutocompleteComponent,\n    /** Option that was selected. */\n    public option: NxAutocompleteOptionComponent\n    ) { }\n}\n\n@Component({\n  selector: 'nx-autocomplete',\n  templateUrl: 'autocomplete.component.html',\n  styleUrls: ['autocomplete.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'nxAutocomplete',\n  host: {\n    'class': 'nx-autocomplete'\n  }\n})\nexport class NxAutocompleteComponent implements AfterViewInit, OnDestroy {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<NxAutocompleteOptionComponent>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, { static: false }) template: TemplateRef<any>;\n\n  /**\n   * @docs-private\n   * Element for the panel containing the autocomplete options.\n   */\n  @ViewChild('panel', { static: false }) panel: ElementRef;\n\n  /** Items observable. If given, autocomplete takes care of the options and ng-content is discarderd */\n  @Input()\n  set items(val: Array<string> | Observable<Array<string>>) {\n    this._hasItems = true;\n    if (Array.isArray(val)) {\n      this._items = val;\n    } else if (val instanceof Observable) {\n      if (this._itemsSubscription) {\n        this._itemsSubscription.unsubscribe();\n      }\n      this._itemsSubscription = val.subscribe((itms) => {\n        this._items = itms;\n        this._changeDetectorRef.markForCheck();\n        // and check visibility in next cycle, when options are set\n        setTimeout(() => this._setVisibility());\n      });\n    } else if (val === null) {\n      this._items = val;\n    } else {\n      throw new Error('Invalid argument for autocomplete items. It has to be Array<string> or Observable<Array<string>>');\n    }\n  }\n  get items(): Array<string> | Observable<Array<string>> {\n    return this._items;\n  }\n  private _items: Array<string> = null;\n  private _itemsSubscription: Subscription;\n\n  /**\n   * @docs-private\n   * Is items observable set\n   */\n  public get hasItems(): boolean {\n    return this._hasItems;\n  }\n  private _hasItems = false;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<NxAutocompleteSelectedEvent> =\n      new EventEmitter<NxAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Autocomplete options in view - ie from items */\n  @ViewChildren(NxAutocompleteOptionComponent)\n  private _vOptions: QueryList<NxAutocompleteOptionComponent>;\n\n  /** Autocomplete options in content - ie user provided */\n  @ContentChildren(NxAutocompleteOptionComponent, { descendants: true})\n  private _cOptions: QueryList<NxAutocompleteOptionComponent>;\n\n  /** Autocomplete options */\n  public get options(): QueryList<NxAutocompleteOptionComponent> {\n    return this.hasItems ? this._vOptions : this._cOptions;\n  }\n\n  /**\n   * Takes classes set on the host nx-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `nx-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  // As autocomplete option can hold any value, we might need a converter\n  // to get a string representation, which can be stored in input. Default value ? value.toString() : null.\n  /**\n   * Value to string converter.\n   */\n  @Input('nxValueFormatter')\n  public valueFormatter: (value: any) => string = (value: any) => value ? value.toString() : null\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Optional() private formFieldComponent: NxFormfieldComponent) {\n  }\n\n  ngAfterViewInit(): void {\n    this._keyManager = new ActiveDescendantKeyManager<NxAutocompleteOptionComponent>(this.options).withWrap();\n    this._setVisibility();\n  }\n\n  ngOnDestroy(): void {\n    if (this._itemsSubscription) {\n      this._itemsSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!(this.options && this.options.length);\n    this._classList['nx-autocomplete-visible'] = this.showPanel;\n    this._classList['nx-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: NxAutocompleteOptionComponent): void {\n    const event = new NxAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  get _isInOutlineField(): boolean {\n    return this.formFieldComponent !== null\n      && this.formFieldComponent.appearance === 'outline';\n  }\n}\n","import { NxFormfieldComponent } from '@allianz/ngx-ndbx/formfield';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Observable, Subject, Subscription, defer, of, merge, fromEvent } from 'rxjs';\nimport { delay, filter, switchMap, take, tap, debounceTime, first } from 'rxjs/operators';\n\nimport { NxWordComponent } from '@allianz/ngx-ndbx/natural-language-form';\nimport { NxAutocompleteOptionComponent, NxAutocompleteOptionSelected } from './autocomplete-option.component';\nimport { NxAutocompleteComponent } from './autocomplete.component';\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const NX_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NxAutocompleteTriggerDirective),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getNxAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `nx-autocomplete`. ' +\n               'Make sure that the id passed to the `nxAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[nxAutocomplete], textarea[nxAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'nxAutocompleteTrigger',\n  providers: [NX_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class NxAutocompleteTriggerDirective implements ControlValueAccessor, OnDestroy, OnChanges, AfterViewInit {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Subscription to control value changes */\n  private _controlValueChangesSubscription: Subscription;\n\n  /** Subscription to items observable */\n  private _itemsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** Value changes */\n  private readonly _valueChanges: Subject<any> = new Subject<any>();\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('nxAutocomplete') autocomplete: NxAutocompleteComponent;\n\n  /** The items callback. Called with input value, must return Observable of Array of strings */\n  @Input('nxAutocompleteItems')\n  set itemsCb(val: (val: string) => Observable<Array<string>>) {\n    if (typeof val === 'function') {\n      this._itemsCb = val;\n    } else {\n      throw new Error('Wrong value type for nxAutocompleteItems');\n    }\n  }\n  get itemsCb() {\n    return this._itemsCb;\n  }\n  private _itemsCb: (val: string) => Observable<Array<string>> = null;\n\n  /** Debounce in ms before items callback is triggered. Defaults to 400 */\n  @Input('nxAutocompleteDebounce')\n  set debounce(val: number) {\n    this._debounce = coerceNumberProperty(val);\n  }\n  private _debounce: number = 400;\n\n  /** Whether autocomplete functionality is disabled. */\n  @Input('nxAutocompleteDisabled')\n  set autocompleteDisabled(val: boolean) {\n    this._autocompleteDisabled = val;\n    this._bindAutocompleteItems();\n  }\n  get autocompleteDisabled() {\n    return this._autocompleteDisabled;\n  }\n  private _autocompleteDisabled = false;\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<NxAutocompleteOptionSelected> = defer<Observable<NxAutocompleteOptionSelected>>(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to NxAutocompleteOptionComponent type. */\n  get activeOption(): NxAutocompleteOptionComponent | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return of(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField.elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = (val) => {\n    this._valueChanges.next(val);\n  }\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  private get _formField(): NxFormfieldComponent | NxWordComponent {\n    if (this._nxFormField) {\n      return this._nxFormField;\n    } else if (this._nxWordField) {\n      return this._nxWordField;\n    }\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _nxFormField: NxFormfieldComponent,\n              @Optional() @Host() private _nxWordField: NxWordComponent,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n    if (this._controlValueChangesSubscription) { this._controlValueChangesSubscription.unsubscribe(); }\n    if (this._itemsSubscription) { this._itemsSubscription.unsubscribe(); }\n  }\n\n  ngOnChanges() {\n    this._bindAutocompleteItems();\n  }\n\n  ngAfterViewInit() {\n    this._bindAutocompleteItems();\n  }\n\n  /**\n   * Binds or rebinds the autocomplete items. Prerequisites:\n   * - items callback has to be defined\n   * - autocomplete panel has to be bound\n   */\n  private _bindAutocompleteItems() {\n    if (this._controlValueChangesSubscription) {\n      this._controlValueChangesSubscription.unsubscribe();\n    }\n\n    if (typeof this._itemsCb === 'function' && this.autocomplete && !this.autocompleteDisabled) {\n\n      const itemsSubject = new Subject<string[]>();\n\n      this.autocomplete.items = itemsSubject;\n\n      const valueChanges =\n        this._formField &&\n        this._formField._control &&\n        this._formField._control.ngControl &&\n        this._formField._control.ngControl.valueChanges ?\n          this._formField._control.ngControl.valueChanges : this._valueChanges;\n\n      this._controlValueChangesSubscription = valueChanges.pipe(debounceTime(this._debounce))\n        .subscribe((input) => {\n          if (this._itemsSubscription) {\n            this._itemsSubscription.unsubscribe();\n          }\n          this._itemsSubscription = this._itemsCb(input).pipe(first()).subscribe(\n            (result) => {\n              itemsSubject.next(result);\n            },\n            (err) => {\n              // On error reset\n              // TODO: Log error?\n              itemsSubject.next([]);\n            }\n          );\n        });\n    }\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    if (!this.autocompleteDisabled) {\n      this._attachOverlay();\n      this._floatLabel();\n    }\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<NxAutocompleteOptionSelected> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          of()\n    );\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._isFieldEnabled()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    const target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value === '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._isFieldEnabled() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._isFieldEnabled()) {\n      this._previousValue = this._element.nativeElement.value;\n      this.openPanel();\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(): void {\n    if (this._nxFormField && this._nxFormField.floatLabel === 'auto') {\n      this._nxFormField.floatLabel = 'always';\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._nxFormField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n\n    if (this.autocomplete.options.length === 0) {\n      return;\n    }\n    let optionOffset = 0;\n    const optionHeight = this.autocomplete.options.first.elementRef.nativeElement.offsetHeight;\n    if (this.autocomplete._keyManager.activeItem) {\n      optionOffset = this.autocomplete._keyManager.activeItem.elementRef.nativeElement.offsetTop;\n    }\n\n    const newScrollPosition = _getOptionScrollPosition(\n      optionOffset,\n      optionHeight,\n      this.autocomplete._getScrollTop(),\n      this.autocomplete.panel.nativeElement.offsetHeight\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() =>  this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n\n    const toDisplay = this.autocomplete && this.autocomplete.valueFormatter ?\n      this.autocomplete.valueFormatter(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `NxFormField` or `NxWord`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: NxAutocompleteOptionSelected | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: NxAutocompleteOptionComponent) {\n    this.autocomplete.options.forEach(option => {\n      if (option !== skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getNxAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({minWidth: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({minWidth: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      minWidth: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withViewportMargin(16)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _scrollStrategy() {\n    return this._overlay.scrollStrategies.reposition();\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel min-width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _isFieldEnabled(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Option offset\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nfunction _getOptionScrollPosition(optionOffset: number, optionHeight: number,\n  currentScrollPosition: number, panelHeight: number): number {\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxAutocompleteComponent } from './autocomplete.component';\nimport { NxAutocompleteOptionComponent } from './autocomplete-option.component';\nimport { NxAutocompleteTriggerDirective } from './autocomplete-trigger.directive';\n\n@NgModule({\n  declarations: [NxAutocompleteComponent, NxAutocompleteOptionComponent, NxAutocompleteTriggerDirective],\n  exports: [NxAutocompleteComponent, NxAutocompleteOptionComponent, NxAutocompleteTriggerDirective],\n  imports: [CommonModule, OverlayModule, A11yModule]\n})\nexport class NxAutocompleteModule { }\n","import { NxFormfieldControl, NxFormfieldErrorDirective } from '@allianz/ngx-ndbx/formfield';\nimport { getFontShorthand } from '@allianz/ngx-ndbx/utils';\nimport { Overlay, OverlayConfig, OverlayPositionBuilder,\n  OverlayRef, FlexibleConnectedPositionStrategy, ConnectionPositionPair } from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewContainerRef,\n  EmbeddedViewRef,\n  OnInit\n} from '@angular/core';\nimport { startWith } from 'rxjs/operators';\nimport { Subject ,  Subscription } from 'rxjs';\n\nimport { NxPopoverComponent } from '@allianz/ngx-ndbx/popover';\nimport { NxDropdownComponent } from '@allianz/ngx-ndbx/dropdown';\nimport { TemplatePortal } from '@angular/cdk/portal';\n\n/** Type to determine the minimal width of a word. */\nexport type SIZES = 'regular' | 'short' | 'long';\n\n@Component({\n  selector: 'nx-word',\n  templateUrl: 'word.component.html',\n  styleUrls: [\n    'word.component.scss'\n  ],\n  host: {\n    '[class.size-short]': 'size == \"short\"',\n    '[class.size-regular]': 'size == \"regular\"',\n    '[class.size-long]': 'size == \"long\"',\n    '[class.has-error]': '_hasErrors',\n    '[class.is-focused]': 'isFocused',\n    '[class.is-filled]': 'isFilled',\n    '[class.has-dropdown]': 'hasDropdown',\n\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class NxWordComponent implements AfterContentInit, OnDestroy, OnInit {\n  private subscription: Subscription = Subscription.EMPTY;\n  private subscriptionValues: Subscription = Subscription.EMPTY;\n  private measureCanvas: HTMLCanvasElement;\n\n  /** @docs-private */\n  inputChanges = new Subject<any>();\n\n  _hasErrors: boolean = false;\n  private _overlayRef: OverlayRef;\n  private _embeddedViewRef: EmbeddedViewRef<any>;\n  private _overlayState: OverlayConfig;\n\n  @ContentChild(NxFormfieldControl, {static: false}) _control: NxFormfieldControl<any>;\n  @ContentChildren(NxFormfieldErrorDirective) _errorChildren: QueryList<NxFormfieldErrorDirective>;\n  @ViewChild('popover', { static: true }) _popover: NxPopoverComponent;\n  @ContentChild(NxDropdownComponent, {static: false}) _dropdown: NxDropdownComponent;\n\n  /** @docs-private */\n  @HostBinding('style.width.px')\n  currentTextWidth: number = 0;\n\n  // this will apply different min-widths to our component through our styles\n  /** Provide a hint for a minimal width. The actual size will be determined for inputs for each change. */\n  @Input('nxSize') size: SIZES = 'regular';\n\n  /**\n   * A word doesn't have a set place to show labels.\n   * In order to be accessible, you have to provide a label with this property.\n   * It will be attached to the given input through `aria-label`.\n   */\n  @Input('nxLabel') label: string;\n\n  constructor(\n    /** @docs-private */\n    public elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _renderer: Renderer2,\n    private _overlay: Overlay,\n    private _viewContainerRef: ViewContainerRef,\n    private _overlayPositionBuilder: OverlayPositionBuilder\n  ) { }\n\n  ngOnInit() {\n    this.setupErrorPopover();\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    this.subscription = this._control.stateChanges.pipe(startWith(null)).subscribe(() => {\n      this._hasErrors = this._control.errorState;\n      this.updateErrorPopoverState();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // if we have a ngcontrol available stick to its valueChanges subject\n    if (this._control.ngControl) {\n      this.subscriptionValues = this._control.ngControl.valueChanges.subscribe(value => {\n        this.updateCurrentTextWidth();\n        this.inputChanges.next();\n      });\n    // in any other case it is a bre input and input changes are signaled through simple state changes\n    } else {\n      this.subscriptionValues = this._control.stateChanges.subscribe(value => {\n        this.updateCurrentTextWidth();\n        this.inputChanges.next();\n      });\n    }\n\n    this._control.setAriaLabel(this.label);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n    @docs-private\n    Calculate the width of the full text given by the input,\n    that value is bound to this component so it can grow.\n\n    The involved input is known to have a width of 100% an will fit the additional space given\n    which completes the auto growing behavior.\n  */\n  updateCurrentTextWidth() {\n    // provide the canvas only lazy\n    if (!this.measureCanvas) {\n      this.measureCanvas = this._renderer.createElement('canvas');\n    }\n\n    const ctx = this.measureCanvas.getContext('2d');\n    const inputRef = this._control.elementRef;\n    const styles = window.getComputedStyle(inputRef.nativeElement);\n    ctx.font = getFontShorthand(styles);\n\n    const metrics = ctx.measureText(this._control.value);\n    // add 1px (cursor width) to prevent jumping of the text on blur.\n    const newWidth = metrics.width + parseInt(styles.paddingRight, 10) + parseInt(styles.paddingLeft, 10) + 1;\n\n    // This should be injected via @Host to get an exact reference to NxNaturalLanguageFormComponent\n    // Works as promised as long as there is not other tag around the word. Not expected but possible.\n    const parent: HTMLElement = this.elementRef.nativeElement.parentElement;\n    const parentMeasurement = parent.getBoundingClientRect();\n\n    // Limit to own given minimal width\n    this.currentTextWidth = Math.max(parseInt(styles.minWidth, 10), newWidth);\n\n    // Limit to container width\n    this.currentTextWidth = Math.min(this.currentTextWidth, parentMeasurement.width);\n\n    if (this._overlayRef.hasAttached()) {\n      this._overlayState.positionStrategy.apply();\n    }\n  }\n\n  /** @docs-private */\n  repositionError() {\n    if (this._overlayRef.hasAttached()) {\n      this._overlayState.positionStrategy.apply();\n    }\n  }\n\n  // Fail if the required control is missing.\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw new Error('NxWordComponent requires an NxFormfieldControl compatible input.');\n    }\n  }\n\n  /** @docs-private */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this.elementRef;\n  }\n\n  /** @docs-private */\n  get isFocused(): boolean {\n    return this._control.focused;\n  }\n\n  /** @docs-private */\n  get isFilled(): boolean {\n    return !this._control.empty;\n  }\n\n  /** @docs-private */\n  get hasDropdown(): boolean {\n    return Boolean(this._dropdown);\n  }\n\n  updateErrorPopoverState() {\n    if (this._hasErrors && this._errorChildren.length > 0) {\n        this.showPopover();\n      } else {\n        this.hidePopover();\n    }\n  }\n\n  setupErrorPopover() {\n    const positionStrategy = this._overlayPositionBuilder\n      .flexibleConnectedTo(this.elementRef)\n      .withLockedPosition(true)\n      .withFlexibleDimensions(false)\n      .withPush(true)\n      .withPositions([{\n        originX: 'center',\n        originY: 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n      },\n      {\n        originX: 'center',\n        originY: 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n      }])\n      .withDefaultOffsetY(-8);\n\n    this._overlayState = new OverlayConfig();\n    this._overlayState.positionStrategy = positionStrategy;\n    this._overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\n    this._overlayRef = this._overlay.create(this._overlayState);\n\n    (this._overlayState.positionStrategy as FlexibleConnectedPositionStrategy).positionChanges.subscribe(change => {\n      const pair = change.connectionPair;\n      this.positionArrow(pair);\n\n      // These position changes arrive too late,\n      // We have to trigger the change detection manually\n      // as it's detached from any render hierarchy\n      // and only updated by the overlay when attached.\n      if (this._embeddedViewRef && !this._embeddedViewRef.destroyed) {\n        this._embeddedViewRef.detectChanges();\n      }\n    }\n    );\n  }\n\n  private positionArrow(pair: ConnectionPositionPair) {\n    const parentElementPositionX = this.elementRef.nativeElement.getBoundingClientRect().left;\n    const parentElementWidth = this.elementRef.nativeElement.getBoundingClientRect().width / 2;\n    const parentElementLeftOffset = this._overlayRef.overlayElement.parentElement.offsetLeft;\n    const overlayElementLeftOffset = this._overlayRef.overlayElement.offsetLeft;\n\n    // calculation for x position of the parent element. In this case, overlay left offset is the one thing to consider.\n    const targetPosition = (parentElementPositionX + parentElementWidth) - (parentElementLeftOffset + overlayElementLeftOffset);\n\n    if (pair.originY === 'top' && pair.overlayY === 'bottom') {\n      this._popover.direction = 'top';\n    } else {\n      this._popover.direction = 'bottom';\n    }\n\n    this._popover.arrowStyle = {left: targetPosition + 'px'};\n  }\n\n  showPopover() {\n    if (!this._overlayRef.hasAttached()) {\n      const tooltipPortal = new TemplatePortal(this._popover.templateRef, this._viewContainerRef);\n      this._embeddedViewRef = this._overlayRef.attach(tooltipPortal);\n    }\n  }\n\n  hidePopover() {\n    this._overlayRef.detach();\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  HostListener,\n  Input,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { delay, throttleTime } from 'rxjs/operators';\n\nimport { NxWordComponent } from './word.component';\n\n/** Size of the NLF. */\nexport type NxNaturalLanguageFormSize = 'small' | 'large';\n\nconst DEFAULT_SIZE = 'large';\n\n@Component({\n  selector: 'nx-natural-language-form',\n  templateUrl: 'natural-language-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['natural-language-form.scss'],\n  host: {\n    '[class.is-negative]': 'negative',\n    '[class.nx-natural-language-form--small]' : 'size === \"small\"',\n    '[class.nx-natural-language-form--large]' : 'size === \"large\"',\n  }\n})\n\nexport class NxNaturalLanguageFormComponent implements AfterContentInit, OnDestroy {\n  private _negative = false;\n\n  /** @docs-private */\n  resizeEvent$: Subject<void> = new Subject<void>();\n\n  /** @docs-private */\n  resizeObservable: Observable<void>;\n\n  @ContentChildren(NxWordComponent) _words: QueryList<NxWordComponent>;\n\n  /** @docs-private */\n  updatePopoversSubscription: Subscription = Subscription.EMPTY;\n\n  /** @docs-private */\n  private _size: NxNaturalLanguageFormSize = DEFAULT_SIZE;\n\n  /** Whether the negative set of stylings should be used. */\n  @Input('nxNegative')\n  set negative(value) {\n    this._negative = coerceBooleanProperty(value);\n  }\n\n  get negative() {\n    return this._negative;\n  }\n\n  /**\n   * Sets the size of the NLF. Default value: large\n   */\n  @Input()\n  set size(value: NxNaturalLanguageFormSize) {\n    this._size = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get size(): NxNaturalLanguageFormSize {\n    return this._size;\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  /** @docs-private */\n  @HostListener('window:orientationchange', ['$event'])\n  @HostListener('window:resize', ['$event'])\n  onResize(event) {\n    this.resizeEvent$.next();\n  }\n\n  ngAfterContentInit() {\n    // Collect all words and listen for changes so we can update any open error popover\n    // which would otherwise get wrongly positioned.\n    const subjects = this._words.map((word: NxWordComponent) => word.inputChanges);\n    const source = merge(...subjects);\n\n    this.updatePopoversSubscription = source.subscribe( () => {\n      this.updatePositionPopovers();\n    });\n\n    this.resizeObservable = this.resizeEvent$.pipe(throttleTime(500), delay(100));\n    this.resizeObservable.subscribe(() => this.resizeWords());\n  }\n\n  /** @docs-private */\n  resizeWords() {\n    this._words.forEach((word: NxWordComponent) => {\n      word.updateCurrentTextWidth();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.updatePopoversSubscription.unsubscribe();\n  }\n\n  /** @docs-private */\n  updatePositionPopovers() {\n    if (this._words) {\n      this._words.forEach((word: NxWordComponent) => {\n        word.repositionError();\n      });\n    }\n  }\n}\n","import { NxPopoverModule } from '@allianz/ngx-ndbx/popover';\nimport { NxInputModule } from '@allianz/ngx-ndbx/input';\nimport { NxWordComponent } from './word.component';\nimport { NxNaturalLanguageFormComponent } from './natural-language-form.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxInputModule,\n    NxPopoverModule\n  ],\n  declarations: [\n    NxNaturalLanguageFormComponent,\n    NxWordComponent\n  ],\n  exports: [\n    NxNaturalLanguageFormComponent,\n    NxWordComponent\n  ]\n})\nexport class NxNaturalLanguageFormModule {}\n","import { ChangeDetectionStrategy, Component, Input, ChangeDetectorRef, Output, EventEmitter } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** The contextual type of a message. */\nexport type CONTEXT = 'regular' | 'info' | 'error' | 'success' | 'warning';\n\nconst ICONS = {\n  info: 'info-circle',\n  error: 'exclamation-triangle',\n  success: 'check-circle',\n  warning: 'exclamation-circle'\n};\n\n@Component({\n  selector: 'nx-message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'nxMessage',\n  host: {\n    '[class.context-info]': 'context === \"info\"',\n    '[class.context-error]': 'context === \"error\"',\n    '[class.context-success]': 'context === \"success\"',\n    '[class.context-warning]': 'context === \"warning\"',\n    '[class.nx-message--closable]': 'closable'\n\n  }\n})\nexport class NxMessageComponent {\n\n  private _context: CONTEXT = 'regular';\n\n  /**\n   * Sets the context of the message.\n   * The message box will color accordingly. Default: 'regular' */\n  @Input('nxContext')\n  set context(value: CONTEXT) {\n    if (value !== this._context) {\n      this._context = value;\n      this._icon = this.getIconName();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get context(): CONTEXT {\n    return this._context;\n  }\n\n  private _showIcon: boolean = false;\n\n  /**\n   * Whether an icon that belongs to the context of the message should be displayed.\n   *\n   * **Important:** The `showIcon` attribute should always be set to `true` due to deprecation.\n   *\n   * @deprecated The `showIcon` attribute should be always true in future. Messages without an icon are deprecated.\n   * @deletion-target 9.0.0\n   * */\n  @Input()\n  set showIcon(value: boolean) {\n    this._showIcon = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get showIcon(): boolean {\n    return this._showIcon;\n  }\n\n  private _closable: boolean = false;\n\n  /** Whether a message should have a close icon in order to be dismissed. */\n  @Input()\n  set closable(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._closable) {\n      this._closable = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get closable(): boolean {\n    return this._closable;\n  }\n\n  private _icon: string;\n\n  /** @docs-private */\n  get icon(): string {\n    return this._icon;\n  }\n\n  private _closeButtonLabel: string = 'Close dialog';\n\n  /** Sets the label of the close button of the message. */\n  @Input()\n  set closeButtonLabel(value: string) {\n    if (value !== this._closeButtonLabel) {\n      this._closeButtonLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get closeButtonLabel(): string {\n    return this._closeButtonLabel;\n  }\n\n  /** Event emitted when the close icon of the message has been clicked. */\n  @Output('close') closeEvent = new EventEmitter<void>();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  /** @docs-private */\n  _emitCloseEvent() {\n    this.closeEvent.emit();\n  }\n\n  /** @docs-private */\n  getIconName(): string {\n    if (this._context === 'info') {\n      return ICONS.info;\n    } else if (this._context === 'error') {\n      return ICONS.error;\n    } else if (this._context === 'success') {\n      return ICONS.success;\n    } else if (this._context === 'warning') {\n      return ICONS.warning;\n    }\n    return '';\n  }\n}\n","import {\n  AnimationTriggerMetadata,\n  trigger,\n  state,\n  transition,\n  style,\n  animate,\n} from '@angular/animations';\n\n/**\n * Animations used by the Message Toast.\n * @docs-private\n */\nexport const messageToastAnimations: {\n   toastState: AnimationTriggerMetadata\n} = {\n  toastState: trigger('state', [\n    state('initial, void, hidden', style({ opacity: 0, transform: 'translateY(100%)' })),\n    state('visible', style({ opacity: 1 })),\n    transition('* => visible', animate('300ms cubic-bezier(0, 0, 0.2, 1)',\n      style({ opacity: 1, transform: 'translateY(0)' })\n    )),\n    transition('* => hidden', animate('300ms cubic-bezier(0, 0, 0.2, 1)',\n      style({ opacity: 0, transform: 'translateY(200%)' }))),\n  ])\n};\n\n/** @docs-private */\nexport type NxMessageToastAnimationState = 'void' | 'visible' | 'hidden';\n","\nimport { AriaLivePoliteness } from '@angular/cdk/a11y';\n\n/** The contextual type of a message. */\nexport type NxMessageToastContext = 'info' | 'success';\n\n/**\n * Configuration used when opening a message toast.\n */\nexport class NxMessageToastConfig {\n  /** The politeness level for the LiveAnnouncer announcement.\n   *\n   *  Default value: 'polite'.\n   */\n  politeness?: AriaLivePoliteness = 'polite';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a toast message without a custom\n   * component or template, the announcement message will default to the specified message.\n   *\n   * Default value: ''.\n   */\n  announcementMessage?: string = '';\n\n  /** The length of time in milliseconds to wait before automatically dismissing the message toast.\n   *\n   * Default value: 3000.\n   */\n  duration?: number = 3000;\n\n  /** Context of the message toast.\n   *\n   * Default value: 'info'. */\n  context?: NxMessageToastContext = 'info';\n}\n\n/**\n * @docs-private\n * Needed so that the user text data can be injected in the message toastcomponent\n */\nexport class NxMessageToastData {\n  constructor(public data: string) { }\n}\n","import { Component, OnDestroy, ViewChild, NgZone, ChangeDetectorRef, ComponentRef, EmbeddedViewRef } from '@angular/core';\nimport { messageToastAnimations } from './message-toast-animations';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { NxMessageToastConfig, NxMessageToastData } from './message-toast-config';\nimport { take } from 'rxjs/operators';\nimport { AnimationEvent } from '@angular/animations';\n\nconst ICONS = {\n  info: 'info-circle',\n  success: 'check-circle',\n};\n\n/**\n * Internal component that wraps user-provided message toastcontent.\n * @docs-private\n */\n@Component({\n  selector: 'nx-message-toast',\n  templateUrl: './message-toast.component.html',\n  styleUrls: ['./message-toast.component.scss'],\n  host: {\n    '[attr.role]': '_role',\n    '[class.context-info]': '_context === \"info\"',\n    '[class.context-success]': '_context === \"success\"',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [messageToastAnimations.toastState]\n})\nexport class NxMessageToastComponent extends BasePortalOutlet implements OnDestroy {\n\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the message toastcontent will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the message toasthas exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the message toasthas finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the message toastanimations. */\n  _animationState = 'void';\n\n  /** ARIA role for the message toastcontainer. */\n  _role: 'alert' | 'status' | null;\n\n  _context;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The message toastconfiguration. */\n    public config: NxMessageToastConfig,\n    /** Injected data into the notifciation. */\n    public data?: NxMessageToastData\n  ) {\n    super();\n\n    this._context = this.config.context;\n    this._setAriaLabels();\n  }\n\n  /** Attach a component portal as content to this message toastcontainer. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this message toastcontainer. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the notification. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of message toastentrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the message toastexiting from view. */\n  exit() {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple notifications are opened in quick succession (e.g. two consecutive calls to\n    // `NxMessageToastService.open`).\n    this._animationState = 'hidden';\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach message toastcontent after content is already attached');\n    }\n  }\n\n  _getIconName(): string {\n    return this._context === 'success' ? ICONS.success : ICONS.info;\n  }\n\n  _setAriaLabels() {\n     // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (this.config.politeness === 'assertive' && !this.config.announcementMessage) {\n      this._role = 'alert';\n    } else if (this.config.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxMessageComponent } from './message/message.component';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { NxMessageToastComponent } from './message-toast/message-toast.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxIconModule,\n    OverlayModule,\n    PortalModule\n  ],\n  declarations: [\n    NxMessageComponent,\n    NxMessageToastComponent\n  ],\n  exports: [\n    NxMessageComponent\n  ],\n  entryComponents: [\n    NxMessageToastComponent\n  ]\n})\nexport class NxMessageModule {\n}\n","import { OverlayRef } from '@angular/cdk/overlay';\nimport { Subject, Observable } from 'rxjs';\nimport { NxMessageToastComponent } from './message-toast.component';\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n\nexport class NxMessageToastRef {\n\n  /**\n   * The instance of the component making up the content of the message toast.\n   * @docs-private\n   */\n  toastInstance: NxMessageToastComponent;\n\n  /** Subject for notifying the user that the message toasthas been dismissed. */\n  private readonly _afterDismissed = new Subject<any>();\n\n  /** Subject for notifying the user that the message toasthas opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the message toastis\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: any;\n\n  constructor(toastInstance: NxMessageToastComponent,\n              private _overlayRef: OverlayRef) {\n    this.toastInstance = toastInstance;\n    toastInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the message toast. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.toastInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Dismisses the message toastafter some duration */\n  _dismissAfter(duration: number): void {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n\n  /** Marks the message toastas opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    this._afterDismissed.next();\n    this._afterDismissed.complete();\n  }\n\n  /** Gets an observable that is notified when the message toastis finished closing. */\n  afterDismissed(): Observable<any> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the message toasthas opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.toastInstance._onEnter;\n  }\n}\n","import { Injectable, Injector, ComponentRef, TemplateRef, InjectionToken, Inject, Optional, SkipSelf, OnDestroy } from '@angular/core';\nimport { Overlay, OverlayRef, OverlayConfig } from '@angular/cdk/overlay';\nimport { ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { NxMessageToastComponent } from './message-toast.component';\nimport { NxMessageToastConfig, NxMessageToastData } from './message-toast-config';\nimport { NxMessageToastRef } from './message-toast-ref';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { NxMessageModule } from '../message.module';\n\n/** Injection token that can be used to specify default message toast. */\nexport const NX_MESSAGE_TOAST_DEFAULT_CONFIG =\n  new InjectionToken<NxMessageToastConfig>('NX_MESSAGE_TOAST_DEFAULT_CONFIG');\n\n/** A service for dispatching and displaying toast messages. */\n@Injectable({ providedIn: NxMessageModule })\nexport class NxMessageToastService implements OnDestroy {\n\n/**\n * Reference to the current message toast in the view *at this level* (in the Angular injector tree).\n * If there is a parent message toast service, all operations should delegate to that parent\n * via `_oldToastMessageRef`.\n */\n  private _toastRefAtThisLevel: NxMessageToastRef | null = null;\n\n  /** Reference to the currently opened message toastat *any* level. */\n  get _oldToastMessageRef(): NxMessageToastRef | null {\n    const parent = this._parentMessageToastService;\n    return parent ? parent._oldToastMessageRef : this._toastRefAtThisLevel;\n  }\n\n  set _oldToastMessageRef(value: NxMessageToastRef | null) {\n    if (this._parentMessageToastService) {\n      this._parentMessageToastService._oldToastMessageRef = value;\n    } else {\n      this._toastRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n    private _overlay: Overlay,\n    private _injector: Injector,\n    private _live: LiveAnnouncer,\n    @Optional() @SkipSelf() private _parentMessageToastService: NxMessageToastService,\n    @Optional() @Inject(NX_MESSAGE_TOAST_DEFAULT_CONFIG) private _defaultConfig: NxMessageToastConfig) { }\n\n  /** Creates and dispatches a message toastwith a custom text.\n   *\n   * @param text Text to be used for the message toast.\n   * @param config Extra configuration for the message toast.\n  */\n  open(text: string, config?: NxMessageToastConfig): NxMessageToastRef {\n    const currentConfig = { ...new NxMessageToastConfig(), ...this._defaultConfig, ...config };\n    const overlayRef = this._createOverlay(currentConfig);\n    const injector = this._createInjector(currentConfig, new NxMessageToastData(text), this._injector);\n\n    const componentPortal = new ComponentPortal(NxMessageToastComponent, undefined, injector);\n    const componentRef = overlayRef.attach(componentPortal);\n    const toastRef = new NxMessageToastRef(componentRef.instance, overlayRef);\n\n    this._animateToast(toastRef, currentConfig);\n    this._oldToastMessageRef = toastRef;\n    return this._oldToastMessageRef;\n  }\n\n  /** Creates and dispatches a message toastwith a custom template for the content.\n   *\n   * @param template Template to be used for the message toast.\n   * @param config Extra configuration for the message toast.\n  */\n  openFromTemplate(template: TemplateRef<any>, config?: NxMessageToastConfig): NxMessageToastRef {\n    const currentConfig = { ...new NxMessageToastConfig(), ...this._defaultConfig, ...config };\n    const overlayRef = this._createOverlay(currentConfig);\n    const container = this._attachToastComponent(overlayRef, currentConfig);\n    const toastRef = new NxMessageToastRef(container, overlayRef);\n    const portal = new TemplatePortal(template, null!, toastRef);\n\n    container.attachTemplatePortal(portal);\n    this._animateToast(toastRef, currentConfig);\n    this._oldToastMessageRef = toastRef;\n    return this._oldToastMessageRef;\n  }\n\n  // Attaches the message toastcontainer component to the overlay.\n  private _attachToastComponent(overlayRef: OverlayRef, config: NxMessageToastConfig): NxMessageToastComponent {\n    const injector = this._createInjector(config, null, this._injector);\n    const containerPortal = new ComponentPortal(NxMessageToastComponent, null, injector);\n    const containerRef: ComponentRef<NxMessageToastComponent> = overlayRef.attach(containerPortal);\n    containerRef.instance.config = config;\n\n    return containerRef.instance;\n  }\n\n  // Creates a new overlay and places it in the correct place.\n  private _createOverlay(config: NxMessageToastConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    const positionStrategy = this._overlay.position().global();\n\n    positionStrategy.bottom('0');\n    positionStrategy.centerHorizontally();\n    overlayConfig.positionStrategy = positionStrategy;\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /** Animates the old message toastout and the new one in. */\n  private _animateToast(toastRef: NxMessageToastRef, config: NxMessageToastConfig) {\n    // When the message toastis dismissed, clear the reference to it.\n    toastRef.afterDismissed().subscribe(() => {\n      // Clear the message toastref if it hasn't already been replaced by a newer message toast.\n      if (this._oldToastMessageRef === toastRef) {\n        this._oldToastMessageRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._oldToastMessageRef) {\n      // If a message toastis opened, dismiss it and enter the\n      // new message toastafter exit animation is complete.\n      this._oldToastMessageRef.afterDismissed().subscribe(() => {\n        toastRef.toastInstance.enter();\n    });\n      this._oldToastMessageRef.dismiss();\n\n    } else {\n      // If no message toastis in view, enter the message toast.\n      toastRef.toastInstance.enter();\n    }\n\n    // If a message toastduration is provided, set up dismiss based on after the message toastis opened.\n    if (config.duration && config.duration > 0) {\n      toastRef.afterOpened().subscribe(() => toastRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  private _createInjector(config: NxMessageToastConfig, data: NxMessageToastData, injector: Injector): PortalInjector {\n    const tokens = new WeakMap();\n    tokens.set(NxMessageToastConfig, config);\n    tokens.set(NxMessageToastData, data);\n\n    return new PortalInjector(injector, tokens);\n  }\n\n  /**\n   * Dismisses the currently visible message toast.\n   */\n  dismiss(): void {\n    if (this._oldToastMessageRef) {\n      this._oldToastMessageRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._toastRefAtThisLevel) {\n      this._toastRefAtThisLevel.dismiss();\n    }\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'nx-page-search',\n  templateUrl: 'page-search.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ 'page-search.component.scss' ],\n  host: {\n    '[attr.role]': '\"search\"'\n  }\n})\nexport class NxPageSearchComponent {\n  /** An event emitted when the user clicks the search button. */\n  @Output('nxButtonClick') buttonClick = new EventEmitter();\n\n  private _buttonLabel: string = null;\n\n  /** Sets the text label of the button. */\n  @Input('nxButtonLabel')\n  set buttonLabel(value: string) {\n    if (this._buttonLabel !== value) {\n      this._buttonLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get buttonLabel(): string {\n    return this._buttonLabel;\n  }\n\n  private _hideSearchButton = false;\n\n  /** Whether the search button should be hidden. */\n  @Input('nxHideSearchButton')\n  set hideSearchButton(value: boolean) {\n    this._hideSearchButton = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get hideSearchButton(): boolean {\n    return this._hideSearchButton;\n  }\n\n  private _buttonLayout = '12,12,12,2';\n\n  /** Layout of the search button inside of a NxGrid. Default: 12,12,12,2. */\n  @Input('nxButtonLayout')\n  set buttonLayout(value: string) {\n    if (this._buttonLayout !== value) {\n      this._buttonLayout = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get buttonLayout(): string {\n    return this._buttonLayout;\n  }\n\n  private _contentLayout: string = null;\n\n  /** Layout of the content area inside of a NxGrid. Default: 12,12,12,10 | 12 (if search button is hidden). */\n  @Input('nxContentLayout')\n  set contentLayout(value: string) {\n    if (this._contentLayout !== value) {\n      this._contentLayout = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get contentLayout(): string {\n    if (this._contentLayout) {\n      return this._contentLayout;\n    }\n    return !this.hideSearchButton ? '12,12,12,10' : '12';\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** @docs-private */\n  onButtonClick() {\n    this.buttonClick.emit();\n  }\n}\n","import { NxGridModule } from '@allianz/ngx-ndbx/grid';\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NxAutocompleteModule} from '@allianz/ngx-ndbx/autocomplete';\nimport {NxFormfieldModule} from '@allianz/ngx-ndbx/formfield';\nimport {NxPageSearchComponent} from './page-search.component';\nimport {NxButtonModule} from '@allianz/ngx-ndbx/button';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxAutocompleteModule,\n    NxFormfieldModule,\n    NxButtonModule,\n    NxGridModule\n  ],\n  declarations: [\n    NxPageSearchComponent\n  ],\n  exports: [\n    NxPageSearchComponent\n  ]\n})\nexport class NxPageSearchModule {\n\n}\n","import { NxIconComponent } from '@allianz/ngx-ndbx/icon';\nimport { ENTER, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  QueryList,\n  ViewChildren\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\n\n@Component({\n  selector: 'nx-rating',\n  templateUrl: './rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./rating.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxRatingComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.nx-rating--negative]': 'negative',\n    '[class.nx-rating--disabled]': 'disabled',\n  }\n})\nexport class NxRatingComponent implements ControlValueAccessor {\n\n  private _value: number = 0;\n  /** Sets the selected rating 1 - 5. */\n  @Input('nxValue')\n  set value(newValue: number) {\n    this._value = coerceNumberProperty(newValue);\n    this._changeDetectorRef.markForCheck();\n  }\n  get value(): number {\n    return this._value;\n  }\n\n  private _disabled: boolean = false;\n  /** Whether the rating component should be disabled. */\n  @Input('nxDisabled')\n  set disabled( newValue: boolean) {\n    if (this._disabled === newValue) {\n      return;\n    }\n    this._disabled = coerceBooleanProperty(newValue);\n    this._changeDetectorRef.markForCheck();\n  }\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  private _negative: boolean = false;\n  /** Whether the negative colors be used. */\n  @Input('nxNegative')\n  set negative(newValue: boolean) {\n    if (this._negative === newValue) {\n      return;\n    }\n    this._negative = coerceBooleanProperty(newValue);\n    this._changeDetectorRef.markForCheck();\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _startLabel: string = null;\n  /** Sets the label painted at the start of the rating component. */\n  @Input('nxStartLabel')\n  set startLabel(newValue: string) {\n    this._startLabel = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get startLabel(): string {\n    return this._startLabel;\n  }\n\n  private _endLabel: string = null;\n  /** Sets the label painted at the end of the rating component. */\n  @Input('nxEndLabel')\n  set endLabel(newValue: string) {\n    this._endLabel = newValue;\n    this._changeDetectorRef.markForCheck();\n  }\n  get endLabel(): string {\n    return this._endLabel;\n  }\n\n  private _ariaLabel: string[] = ['1/5', '2/5', '3/5', '4/5', '5/5'];\n  @Input('nxAriaLabel')\n  /** Sets an array of custom aria-describedby attributes for each of the stars in the component. */\n  set ariaLabel(newAriaLabels: string[]) {\n    this._ariaLabel = newAriaLabels;\n    this._changeDetectorRef.markForCheck();\n  }\n  get ariaLabel(): string[] {\n    return this._ariaLabel;\n  }\n  /** An event is dispatched each time when the rating changes. */\n  @Output('nxValueChange') valueChange = new EventEmitter<number>();\n\n  /** @docs-private */\n  @ViewChildren(NxIconComponent, {read: ElementRef}) icons: QueryList<ElementRef>;\n  private onTouchedCallback = () => {};\n  private onChangeCallback = (option: any) => {};\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** Whether the given rating is selected. */\n  isSelected(index: number) {\n    return index <= this.value;\n  }\n\n  /** Allows to set the rating. */\n  setSelection(value: number) {\n    if (!this.disabled) {\n      this.value = value;\n      this.valueChange.emit(value);\n      this.onTouchedCallback();\n      this.onChangeCallback(this.value);\n    }\n  }\n\n  /** @docs-private */\n  handleKeyUp(event: KeyboardEvent, rating: number) {\n    const keyCode = event.keyCode;\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (keyCode === ENTER) {\n      this.setSelection(rating);\n    }\n\n    if (keyCode === RIGHT_ARROW) {\n      this.value = Math.min(this.value + 1, 5);\n      const elementRef: ElementRef = this.icons.toArray()[this.value - 1];\n      elementRef.nativeElement.focus();\n    }\n\n    if (keyCode === LEFT_ARROW) {\n      this.value = Math.max(this.value - 1, 1);\n      const elementRef: ElementRef = this.icons.toArray()[this.value - 1];\n      elementRef.nativeElement.focus();\n    }\n  }\n\n  writeValue(value: number): void {\n    this.value = value;\n  }\n\n  registerOnChange(callback: any): void {\n    this.onChangeCallback = callback;\n  }\n\n  registerOnTouched(callback: any): void {\n    this.onTouchedCallback = callback;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  getAriaLabel(rating) {\n    return this.ariaLabel[rating - 1];\n  }\n\n  /** @docs-private */\n  getIconName(rating: number) {\n    return 'star' + ((!this.isSelected(rating)) ? '-o' : '');\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {NxRatingComponent} from './rating.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxIconModule\n  ],\n  declarations: [\n    NxRatingComponent\n  ],\n  exports: [\n    NxRatingComponent\n  ]\n})\nexport class NxRatingModule {\n\n}\n","import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NxNumberStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** The aria label for the decrement '-' button */\n  decrementAriaLabel: string = 'Decrement';\n  /** The aria label for the increment '+' button */\n  incrementAriaLabel: string = 'Increment';\n}\n","import { getFontShorthand } from '@allianz/ngx-ndbx/utils';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\n\n/** @docs-private */\n@Directive({\n  selector: 'input[nxAutoResize]'\n})\nexport class NxAutoResizeDirective implements AfterViewInit, OnDestroy {\n\n  @HostBinding('style.width.px') width: number;\n\n  private _resize: boolean = true;\n  @Input('nxAutoResize')\n  set resize(value: boolean) {\n    this._resize = coerceBooleanProperty(value);\n    if (this._resize) {\n      this._addEventListener();\n      this.updateInputWidth();\n    } else {\n      this._removeEventListener();\n    }\n  }\n  get resize(): boolean {\n    return this._resize;\n  }\n\n  constructor(private _element: ElementRef,\n              private _renderer: Renderer2,\n              private _cdr: ChangeDetectorRef) {\n    this.updateInputWidth = this.updateInputWidth.bind(this);\n  }\n\n  ngAfterViewInit() {\n    if (this.resize) {\n      this._addEventListener();\n    }\n  }\n\n  ngOnDestroy() {\n    this._removeEventListener();\n  }\n\n  updateInputWidth() {\n    const measureCanvas = this._renderer.createElement('canvas');\n\n    const ctx = measureCanvas.getContext('2d');\n    const styles = window.getComputedStyle(this._element.nativeElement);\n\n    ctx.font = getFontShorthand(styles);\n\n    const metrics = ctx.measureText(this._element.nativeElement.value);\n\n    const padding = this.sumStyles(styles.paddingLeft, styles.paddingRight);\n    const border = this.sumStyles(styles.borderLeftWidth, styles.borderRightWidth);\n    // the pixels are needed, because despite the correct calculation the last pixels of a number are always cut\n    const newWidth = metrics.width + padding + border + 16;\n\n    // Limit to own given minimal width\n    const parsed = parseFloat(styles.minWidth);\n    this.width = Math.max(Number.isNaN(parsed) ? 0 : parsed, newWidth);\n\n    // needed when the outer component is onPush\n    this._cdr.markForCheck();\n  }\n\n  _addEventListener() {\n    this._element.nativeElement.addEventListener('input', this.updateInputWidth, true);\n    this._element.nativeElement.addEventListener('change', this.updateInputWidth, true);\n  }\n\n  _removeEventListener() {\n    this._element.nativeElement.removeEventListener('input', this.updateInputWidth, true);\n    this._element.nativeElement.removeEventListener('change', this.updateInputWidth, true);\n  }\n\n  sumStyles(left, right) {\n    left = parseInt(left, 10);\n    right = parseInt(right, 10);\n    left = Number.isNaN(left) ? 0 : left;\n    right = Number.isNaN(right) ? 0 : right;\n    return left + right;\n  }\n}\n","import { Subscription } from 'rxjs';\nimport { NxNumberStepperIntl } from './number-stepper-intl';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mapClassNames, pad } from '@allianz/ngx-ndbx/utils';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n  OnDestroy\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator } from '@angular/forms';\n\nimport { MappedStyles } from '@allianz/ngx-ndbx/core';\nimport { NxAutoResizeDirective } from './auto-resize.directive';\nimport { Decimal } from 'decimal.js';\n\nconst SIZE_MAPPING = {\n  big: 'nx-stepper--big',\n  normal: ''\n};\nconst DEFAULT_CLASSES = ['nx-stepper'];\nconst INPUT_CLASSES = ['nx-stepper__input'];\n\nconst ALLOWED_CHARACTERS = new RegExp(/^-?[0-9]\\d*(\\.\\d+)?$/g);\nconst CUSTOM_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NxNumberStepperComponent),\n  multi: true\n};\nconst CUSTOM_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NxNumberStepperComponent),\n  multi: true\n};\n\nlet nextUniqueId = 0;\n\n@Component({\n  selector: 'nx-number-stepper',\n  templateUrl: 'number-stepper.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['number-stepper.component.scss'],\n  inputs: ['classNames: nxSize'],\n  host: {\n    '[class.is-negative]': 'negative'\n  },\n  providers: [CUSTOM_VALUE_ACCESSOR, CUSTOM_VALIDATOR]\n})\nexport class NxNumberStepperComponent extends MappedStyles\n  implements OnInit, AfterViewInit, ControlValueAccessor, Validator, OnDestroy {\n  private _step: number = 1;\n  private _min: number = 0;\n  private _max: number = 100;\n  private _value: number = 0;\n  private _label = null;\n  private _resize: boolean = false;\n  private _intlSubscription: Subscription;\n  private _negative: boolean = false;\n  private _leadingZero: boolean = true;\n\n  /** @docs-private */\n  numberInputValue: string;\n\n  /**\n   * Defines the size of the number stepper.\n   *\n   * Values: big | normal. Default: normal\n   */\n  classNames: string;\n\n  /** @docs-private */\n  public inputClassNames: string = mapClassNames(\n    'regular',\n    INPUT_CLASSES\n  );\n\n  /** @docs-private */\n  public inputId = `nx-number-stepper-${nextUniqueId++}`;\n\n  /** @docs-private */\n  public inputWidth;\n\n  /** @docs-private */\n  public ariaDescribedBy = null;\n\n  /** @docs-private */\n  @ViewChild('customLabel', { static: false }) ngContentWrapper: ElementRef;\n\n  /** @docs-private */\n  @ViewChild(NxAutoResizeDirective, { static: true }) autoResize: NxAutoResizeDirective;\n\n  /** An event emitted on value change. */\n  @Output('nxValueChange') valueChange = new EventEmitter<number>();\n\n  /** Whether the input should be resized. Default: false */\n  @Input('nxResize')\n  set resize(value: boolean) {\n    this._resize = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get resize(): boolean {\n    return this._resize;\n  }\n\n  get label(): string {\n    return this._label;\n  }\n\n  /** Defines the the label shown above the stepper input. */\n  @Input('nxLabel')\n  set label(value: string) {\n    if (this._label !== value) {\n      this._label = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Sets the step size. Default: 1 */\n  @Input('nxStep')\n  set step(value: number) {\n    // only internal changes no need to call markForCheck\n    this._step = Number(value);\n  }\n\n  get step(): number {\n    return this._step;\n  }\n\n  /** Sets the minimum accepted number. Default: 0 */\n  @Input('nxMin')\n  set min(value: number) {\n    this._min = Number(value);\n  }\n\n  get min(): number {\n    return this._min;\n  }\n\n  /** Sets the maximum accepted number. Default: 100 */\n  @Input('nxMax')\n  set max(value: number) {\n    this._max = Number(value);\n  }\n\n  get max(): number {\n    return this._max;\n  }\n\n  get value(): number {\n    return this._value;\n  }\n\n  /** Sets the value of the number-stepper. */\n  @Input('nxValue')\n  set value(value: number | null) {\n    this._value = value;\n    if (this._value !== null) {\n      this.setInputValue(this._value);\n    } else {\n      this.setInputValue(0);\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Whether the negative set of styling should be used. */\n  @Input()\n  set negative(value: boolean) {\n    if (this._negative !== value) {\n      this._negative = coerceBooleanProperty(value);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  /** Whether the number stepper value should have a leading zero.\n   *\n   * Default value is true.\n   */\n  @Input()\n  set leadingZero(value: boolean) {\n    if (this._leadingZero !== value) {\n      this._leadingZero = coerceBooleanProperty(value);\n      this.setInputValue(this.value);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get leadingZero(): boolean {\n    return this._leadingZero;\n  }\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    _renderer: Renderer2,\n    _elementRef: ElementRef,\n    public _intl: NxNumberStepperIntl\n  ) {\n    super(SIZE_MAPPING, DEFAULT_CLASSES, _elementRef, _renderer);\n    this._intlSubscription = this._intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this.setInputValue(this._value);\n  }\n\n  ngAfterViewInit() {\n    if (this.ngContentWrapper) {\n      this.ariaDescribedBy = this.ngContentWrapper.nativeElement.children.length > 0 ? `label-for-${this.inputId}` : null;\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n  }\n\n  /** @docs-private */\n  setInputValue(value) {\n    if (this.leadingZero) {\n      this.numberInputValue = pad(value.toString(), 2);\n    } else {\n      this.numberInputValue = value.toString();\n    }\n    // use timeout to get the current value of numberInputValue\n    setTimeout(() => {\n      this.triggerResize();\n    });\n  }\n\n  /* ControlValueAccessor Implementations */\n  writeValue(value: any): void {\n    this.value = value;\n  }\n\n  private onChangeCallback = (_: any) => { };\n\n  registerOnChange(onChange: any): void {\n    this.onChangeCallback = onChange;\n  }\n  /** @docs-private */\n  onTouchedCallback = () => { };\n\n  registerOnTouched(onTouched: any): void {\n    this.onTouchedCallback = onTouched;\n  }\n\n  /** @docs-private */\n  onInputChange(event) {\n    if (!this.validateUserInput(event.target.value)) {\n      this._value = null;\n    } else {\n      this._value = Number(event.target.value);\n    }\n\n    // setInputValue() should be called so that numberInputValue is updated with the user input\n    if (this._value !== null) {\n      this.setInputValue(this._value);\n    }\n    this.valueChange.emit(this._value);\n    this.onChangeCallback(this._value);\n  }\n\n  /** @docs-private */\n  validateUserInput(input: string) {\n    return !!input.match(ALLOWED_CHARACTERS);\n  }\n\n  /** @docs-private */\n  incrementOnClick() {\n    this._increment();\n    this.onTouchedCallback();\n  }\n\n  /** @docs-private */\n  incrementOnKey() {\n    this._increment();\n  }\n\n  /** @docs-private */\n  _increment() {\n    let newValue;\n    if (this.isBetweenLimits(this._value)) {\n      newValue = this.getNextGreaterValue(this._value);\n    } else {\n      newValue = this.enforceLimits(this._value);\n    }\n    this.value = newValue;\n    this.valueChange.emit(this._value);\n    this.onChangeCallback(this._value);\n  }\n\n  /** @docs-private */\n  triggerResize() {\n    if (this.resize) {\n      this.autoResize.updateInputWidth();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** @docs-private */\n  decrementOnClick() {\n    this._decrement();\n    this.onTouchedCallback();\n  }\n\n  /** @docs-private */\n  decrementOnKey() {\n    this._decrement();\n  }\n\n  /** @docs-private */\n  _decrement() {\n    let newValue;\n    if (this.isBetweenLimits(this._value)) {\n      newValue = this.getNextLowerValue(this._value);\n    } else {\n      newValue = this.enforceLimits(this._value);\n    }\n    this.value = newValue;\n    this.valueChange.emit(this._value);\n    this.onChangeCallback(this._value);\n  }\n\n  /** @docs-private */\n  enforceLimits(value) {\n    if (value > this._max) {\n      return this._max;\n    } else if (value < this._min) {\n      return this._min;\n    }\n    return value;\n  }\n\n  /** @docs-private */\n  getNextLowerValue(start) {\n    // if there is an invalid input start is null\n    if (!start) {\n      start = 0;\n    }\n\n    let next;\n    if (this.isValidStep(start)) {\n      next = (new Decimal(start).minus(new Decimal(this._step))).toNumber();\n    } else {\n      next = new Decimal(start).toNearest(this._step, Decimal.ROUND_DOWN).toNumber();\n    }\n    return this.enforceLimits(next);\n  }\n\n  /** @docs-private */\n  getNextGreaterValue(start) {\n    let next;\n    if (!start) {\n      start = 0;\n    }\n    if (this.isValidStep(start)) {\n      next = (new Decimal(start).plus(new Decimal(this._step))).toNumber();\n    } else {\n      next = new Decimal(start).toNearest(this._step, Decimal.ROUND_UP).toNumber();\n    }\n    return this.enforceLimits(next);\n  }\n\n  /** @docs-private */\n  isBetweenLimits(value) {\n    return value <= this._max && value >= this._min;\n  }\n\n  /** @docs-private */\n  isMinimum() {\n    return this._value === this._min;\n  }\n\n  /** @docs-private */\n  isMaximum() {\n    return this._value === this._max;\n  }\n\n  /** @docs-private */\n  isValidStep(value) {\n    if (value === null) {\n      value = new Decimal(0);\n    }\n    const min = new Decimal(this._min);\n    const valueDec = new Decimal(value);\n    const checkValue = (min.minus(valueDec)).mod(new Decimal(this._step)).toNumber();\n\n    if (\n      this.isBetweenLimits(value) && ((this.isMinimum() || this.isMaximum()) ||\n      checkValue === 0)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  /** @docs-private */\n  userInputToNumber(value): number {\n    const current = value === '' ? 0 : value;\n    return parseInt(current, 10);\n  }\n\n  _validateFn() {\n    // the manual user input must match min + n * step, e.g. minimum 1 step 2: 1, 3, 5, 7 etc.\n    if (!this.isValidStep(this._value)) {\n      return { nxNumberStepperStepError: 'Value is not a valid step' };\n    } else if (this._value === null) {\n      return { nxNumberStepperFormatError: 'Not a valid number' };\n    }\n    return null;\n  }\n\n  /** @docs-private */\n  validate(c: FormControl) {\n    return this._validateFn();\n  }\n\n  get _buttonType(): string {\n    return 'secondary' + (this.negative ? ' negative' : '');\n  }\n}\n","import { Directive } from '@angular/core';\n\n/** Directive used to pass a suffix to the number stepper. */\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: 'nx-number-stepper-prefix',\n  host: {\n    'class': 'nx-stepper__prefix'\n  }\n})\nexport class NxNumberStepperPrefixDirective {\n}\n","import { Directive } from '@angular/core';\n\n/** Directive used to pass a suffix to the number stepper. */\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: 'nx-number-stepper-suffix',\n  host: {\n    'class': 'nx-stepper__suffix'\n  }\n})\nexport class NxNumberStepperSuffixDirective {\n}\n","import { NxNumberStepperIntl } from './number-stepper-intl';\nimport { NxAutoResizeDirective } from './auto-resize.directive';\nimport { CommonModule } from '@angular/common';\nimport { NxButtonModule } from '@allianz/ngx-ndbx/button';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxInputModule } from '@allianz/ngx-ndbx/input';\nimport { NgModule } from '@angular/core';\n\nimport { NxNumberStepperComponent } from './number-stepper.component';\nimport { FormsModule } from '@angular/forms';\nimport { NxNumberStepperPrefixDirective } from './number-stepper-prefix.directive';\nimport { NxNumberStepperSuffixDirective } from './number-stepper-suffix.directive';\n\n@NgModule({\n  imports: [\n    NxInputModule,\n    FormsModule,\n    NxIconModule,\n    NxButtonModule,\n    CommonModule\n  ],\n  exports: [\n    NxNumberStepperComponent,\n    NxAutoResizeDirective,\n    NxNumberStepperPrefixDirective,\n    NxNumberStepperSuffixDirective\n  ],\n  declarations: [\n    NxNumberStepperComponent,\n    NxAutoResizeDirective,\n    NxNumberStepperPrefixDirective,\n    NxNumberStepperSuffixDirective\n  ],\n  providers: [NxNumberStepperIntl],\n})\nexport class NxNumberStepperModule { }\n","\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\n\n/**\n * Interface for providing custom labels in a simple pagination.\n * With an implementation you can localize your pagination with the NX_PAGINATION_TEXTS injection token.\n */\nexport interface IPaginationTexts {\n  /** Label that should replace 'previous'. */\n  previous: string;\n\n  /** Label that should replace 'next'. */\n  next: string;\n\n  /** Label that should replace 'first'.\n   *\n   * Optional attribute needed only for the advanced pagination.\n   */\n  first?: string;\n\n  /** Label that should replace 'last'.\n   *\n   * Optional attribute needed only for the advanced pagination.\n   */\n  last?: string;\n\n  /** Label that should replace 'of'. */\n  ofLabel: string;\n\n  /** Label that should replace the aria label. */\n  ariaLabel: string;\n}\n\nexport const DefaultPaginationTexts =  {\n  previous: 'Previous',\n  next: 'Next',\n  first: 'First',\n  last: 'Last',\n  ofLabel: 'of',\n  ariaLabel: 'Please select your page'\n};\n\n/** InjectionToken for pagination that can be used to override default locale code. */\nexport const NX_PAGINATION_TEXTS = new InjectionToken<IPaginationTexts>('nx-pagination-texts');\n","import { Injectable } from '@angular/core';\nimport { Page } from './pagination.component';\n\n/** @docs-private */\n@Injectable()\nexport class NxPaginationUtils  {\n  private _pagesMobile = 3;\n  private _elipsisText: string = '...';\n  private _classExpanded: string = 'expanded-view';\n\n  getPages(currentPage: number, totalPages: number): Page[] {\n\n    let pages = [];\n    let start = [], middle = [], end = [];\n\n    // First array -> start\n    start = this.getStartArray(currentPage, totalPages);\n    // Second array -> middle\n    middle =  this.getMiddleArray(currentPage, totalPages);\n    // Third array -> end\n    end = this.getEndArray(currentPage, totalPages);\n\n    pages = [ ...start, ...middle, ...end ];\n\n    return pages;\n  }\n\n  getMiddleArray(currentPage: number, totalPages: number): Array<any> {\n    let pageNumber = currentPage < 6 ? 4 : currentPage - 1;\n    const middle = [];\n\n    while (\n      middle.length < 3 &&\n      pageNumber >= 2 &&\n      pageNumber <= totalPages - 3 &&\n      (pageNumber <= currentPage + 1 && pageNumber >= currentPage - 1)\n    ) {\n      middle.push(this.createPaginationItem(pageNumber, pageNumber));\n      pageNumber++;\n    }\n    return middle;\n  }\n  getEndArray(currentPage: number, totalPages: number): Array<any> {\n    const end = [];\n    let currentItemToShow: number =\n      totalPages <= 3 ? totalPages + 1 :\n      totalPages <= 6 ? totalPages - (totalPages - 4) : totalPages - 2 ;\n    const showEllipsis = currentPage < totalPages - 4;\n\n    while (currentItemToShow <= totalPages) {\n      const endItem = end.length === 0 && showEllipsis ?\n        this.createPaginationItem(this._elipsisText, currentItemToShow, true) :\n        this.createPaginationItem(currentItemToShow , currentItemToShow, true);\n      end.push(endItem);\n      currentItemToShow++;\n    }\n\n    return end;\n  }\n  getStartArray(currentPage: number, totalPages: number): Array<any> {\n    let counterPages = 0;\n    const start = [];\n    const maxSizeArray = 3;\n\n    while (counterPages < maxSizeArray && counterPages < totalPages) {\n      const startItem = counterPages === 2 && currentPage > 5 ?\n        this.createPaginationItem(this._elipsisText, counterPages, true) :\n        this.createPaginationItem(counterPages + 1 , counterPages + 1, true);\n\n      start.push(startItem);\n      counterPages++;\n    }\n\n    return start;\n  }\n\n  getMobilePages(currentPage: number, totalPages: number): Array<any> {\n    // if we have less pages than the number we want to display take all\n    if (totalPages < this._pagesMobile) {\n      return Array.from(Array(totalPages).keys()).map(item => this.createPaginationItem(item + 1, item + 1));\n    }\n\n    switch (currentPage) {\n      // first page active\n      case 1:\n        return [1, 2, 3].map( item => this.createPaginationItem(item, item));\n      // last page active\n      case totalPages:\n        return [totalPages - 2, totalPages - 1, totalPages].map( item => this.createPaginationItem(item, item));\n      // any other page active\n      default:\n        return [currentPage - 1, currentPage, currentPage + 1].map( item => this.createPaginationItem(item, item));\n    }\n  }\n\n  private createPaginationItem(label: string | number, value: number, classExpanded?: boolean) {\n    return { label: label, value: value, class: classExpanded ? this._classExpanded : ''  };\n  }\n\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  AfterContentInit,\n} from '@angular/core';\n\nimport { DefaultPaginationTexts, IPaginationTexts, NX_PAGINATION_TEXTS } from './pagination-texts';\nimport { NxPaginationUtils } from './pagination-utils';\n\n/** @docs-private */\nexport interface Page {\n  label: string;\n  value: any;\n  class: string;\n}\n\n@Component({\n  selector: 'nx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ './pagination.component.scss' ],\n})\n\nexport class NxPaginationComponent implements OnInit, AfterContentInit {\n  private _page: number;\n  private _count: number;\n  private _perPage: number;\n  private _type: string = 'simple';\n\n  /** @docs-private */\n  paginationTexts: IPaginationTexts;\n\n  /** @docs-private */\n  totalNumberPages: number = 0;\n\n  get page(): number { return this._page; }\n\n  /** Sets the current page. */\n  @Input('nxPage') // the current page\n  set page(value: number) {\n    this._page = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get count(): number { return this._count; }\n\n  /** Number of total items over all pages. */\n  @Input('nxCount') // how many total items there are in all pages\n  set count(value: number) {\n    this._count = value;\n    this.totalNumberPages =  this.calculateTotalPages();\n    this._changeDetectorRef.markForCheck();\n  }\n  get perPage(): number { return this._perPage; }\n\n  /** Sets the number of items you want to show per page. */\n  @Input('nxPerPage') // how many items we want to show per page\n  set perPage(value: number) {\n    this._perPage = value;\n    this.totalNumberPages =  this.calculateTotalPages();\n    this._changeDetectorRef.markForCheck();\n  }\n  get type(): string { return this._type; }\n\n  /**\n   * Determines the type of pagination.\n   *\n   * Values: simple | advanced, default: simple.\n   */\n  @Input('nxType')\n  set type(value: string) { // type advanced or simple\n    this._type = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** An event emitted when the previous page button is clicked. */\n  @Output() nxGoPrev = new EventEmitter<void>();\n\n  /** An event emitted when the next page button is clicked */\n  @Output() nxGoNext = new EventEmitter<void>();\n\n  /**\n   * An event emitted when a page number is clicked.\n   * Provides the number of the page as parameter.\n   */\n  @Output() nxGoPage = new EventEmitter<number>();\n\n  constructor(\n      @Optional() @Inject(NX_PAGINATION_TEXTS) paginationTexts: IPaginationTexts,\n      private paginationUtilsService: NxPaginationUtils,\n      private _changeDetectorRef: ChangeDetectorRef) {\n    this.paginationTexts = paginationTexts || DefaultPaginationTexts;\n   }\n\n  ngOnInit() {\n    this.totalNumberPages =  this.calculateTotalPages();\n  }\n\n  ngAfterContentInit() {\n    if (this.type === 'advanced' && (!this.paginationTexts.last || !this.paginationTexts.first)) {\n      console.warn('Please define aria labels for the last and first arrows.');\n    }\n  }\n\n  /** Returns the number of the first page. */\n  getMin(): number {\n    return this.totalNumberPages > 0 ? 1 : 0;\n  }\n\n  /** Returns the number of the last page. */\n  getMax(): number {\n    let max = this._perPage * this._page;\n    if (max > this._count) {\n      max = this._count;\n    }\n    return max;\n  }\n\n  /** Returns the total number of pages */\n  calculateTotalPages(): number {\n    return Math.ceil(this._count / this._perPage) || 0;\n  }\n\n  /** Directs to the page with number n. */\n  onPage(n: number): void {\n    this.nxGoPage.emit(n);\n  }\n\n  /** Directs to the previous page. */\n  onPrev(): void {\n    if (!this._isPaginationPreviousDisabled()) {\n      this.nxGoPrev.emit();\n    }\n  }\n\n  /** Directs to the next page. */\n  onNext(): void {\n    if (!this._isPaginationNextDisabled()) {\n      this.nxGoNext.emit();\n    }\n  }\n\n  /** Directs to the first page. */\n  onFirst() {\n    if (!this._isPaginationPreviousDisabled()) {\n      this.onPage(1);\n    }\n  }\n\n  /** Directs to the last page. */\n  onLast() {\n    if (!this._isPaginationNextDisabled()) {\n      this.onPage(this.totalNumberPages);\n    }\n  }\n\n  /** Returns if the current page is the last page. */\n  lastPage(): boolean {\n    return this._perPage * this._page >= this._count;\n  }\n\n  /** @docs-private */\n  getPages(): Page[] {\n    return this.paginationUtilsService.getPages(this._page, this.totalNumberPages);\n  }\n\n  /** @docs-private */\n  getMobilePages(): Page[] {\n    return this.paginationUtilsService.getMobilePages(this._page, this.totalNumberPages);\n  }\n\n  /** @docs-private */\n  getPaginationItemClasses(page: Page): Object {\n    const classes = {\n      'is-ellipsis': page.label === '...',\n      'nx-pagination__item--expanded-view': page.class === 'expanded-view'\n    };\n    return classes;\n  }\n\n  /** @docs-private */\n  getPaginationNumberClasses(page: Page): Object {\n    const classes = {\n      'is-active': page.value === this.page,\n      'nx-pagination__ellipsis': page.label === '...',\n      'nx-pagination__link': page.label !== '...'\n    };\n    return classes;\n  }\n\n  /** Returns true, if `nxCount` is greater than 0, else false. */\n  isPaginationVisible(): boolean {\n    return this.count > 0;\n  }\n\n  /** Returns true, if `nxCount` is greater than 0 and the type of pagination is 'simple', else false. */\n  isPaginationCompactVisible(): boolean {\n    return this.type.includes('simple') && this.count > 0;\n  }\n\n  /** @docs-private */\n  isPaginationContainerVisible(): boolean {\n    return this.type.includes('advanced');\n  }\n\n  _isPaginationPreviousDisabled(): boolean {\n    return this.page === this.getMin();\n  }\n\n  _isPaginationNextDisabled(): boolean {\n    return this.page === this.totalNumberPages;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NxPaginationComponent } from './pagination.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxPaginationUtils } from './pagination-utils';\n\n@NgModule({\n  imports: [\n    CommonModule, NxIconModule\n  ],\n  declarations: [\n    NxPaginationComponent\n  ],\n  exports: [\n    NxPaginationComponent\n  ],\n  providers: [\n    NxPaginationUtils\n  ]\n})\nexport class NxPaginationModule { }\n","import { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject ,  Observable } from 'rxjs';\n\nexport class TableDataSource extends DataSource<any> {\nconstructor(private _datachange: BehaviorSubject<any[]>) {\nsuper();\n}\n/** @docs-private Connect function called by the table to retrieve one stream containing the data to render. */\nconnect(): Observable<Object[]> {\nreturn this._datachange;\n}\n/** @docs-private */\ndisconnect() { }\n}\n","import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, OnInit, Output, ChangeDetectorRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { NxDisplayedColumns } from './displayedColumns';\nimport { TableDataSource } from './tabledata-source';\n\n@Component({\n  selector: 'nx-dynamic-table',\n  templateUrl: './dynamic-table.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ './dynamic-table.component.scss' ]\n})\nexport class NxDynamicTableComponent implements OnInit {\n\n  private _dataChange: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\n  private _dataSource: TableDataSource | null;\n  private _data: any[];\n  private _displayedColumns: NxDisplayedColumns[];\n  private _columnKeys: string[];\n\n  /** Sets the data that it will show in the table. */\n  @Input('nxData')\n  set data(value: any[]) {\n    this._data = value\n      .filter(element => element);\n    // If user dont pass displayedColumns the table will show all data and the name of columns will be the key of data\n    if (!this._displayedColumns) {\n      const keys = [], cArray = [];\n      // For catch keys of data Objects and assing title, key and type string by default to displayedColumns\n      this._data\n        .forEach(element => {\n          for (const key in element) {\n            if (keys.indexOf(key) === -1) {\n              keys.push(key);\n              cArray.push({ title: key, key: key, type: 'string' });\n            }\n          }\n        });\n      this._columnKeys = keys;\n      this._displayedColumns = cArray;\n      // need to call markForCheck as the setter changes displayedColumns here\n      // sidenote: isn't needed for the data itself as it gets passed to the cdk-table\n      // by the datasource observable\n      this._changeDetectorRef.markForCheck();\n    }\n    this._dataChange.next(this._data);\n  }\n  get data(): any[] {\n    return this._data;\n  }\n\n  /** Sets the name order and type of columns. */\n  @Input('nxDisplayedColumns')\n  set displayedColumns(value: NxDisplayedColumns[]) {\n    this._displayedColumns = value;\n    this._columnKeys = value.map(column => column.key);\n    this._changeDetectorRef.markForCheck();\n  }\n  get displayedColumns(): NxDisplayedColumns[] {\n    return this._displayedColumns;\n  }\n\n  /** An event is dispatched when a row is clicked. */\n  @Output() nxRowClick = new EventEmitter();\n\n  /** @docs-private */\n  get dataSource(): TableDataSource {\n    return this._dataSource;\n  }\n\n  /** @docs-private */\n  get columnKeys(): string[] {\n    return this._columnKeys;\n  }\n\n  constructor(private el: ElementRef, private _changeDetectorRef: ChangeDetectorRef) { }\n\n  ngOnInit() {\n    if (!this._data) {\n      this._data = [];\n      this._dataChange.next(this._data);\n    }\n    this._dataSource = new TableDataSource(this._dataChange);\n  }\n\n  /** @docs-private */\n  handleRowClick(row: Object): void {\n    this.nxRowClick.emit(row);\n  }\n\n  /** @docs-private */\n  isNumeric(element: NxDisplayedColumns): boolean {\n    if (element.type === 'numeric') {\n      return true;\n    }\n    return false;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NxDynamicTableComponent } from './dynamic-table.component';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\n\n@NgModule({\n  declarations: [ NxDynamicTableComponent ],\n  exports: [ NxDynamicTableComponent ],\n  imports: [ CommonModule, CdkTableModule, ScrollingModule ]\n})\nexport class NxDynamicTableModule { }\n","import { Directive, Input } from '@angular/core';\nimport { CdkAccordion } from '@angular/cdk/accordion';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { AccordionStyle } from './expansion-panel';\n\nconst DEFAULT_TYPE: AccordionStyle = 'regular';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: 'nx-accordion',\n  host: {\n    '[class.nx-accordion]': 'true',\n    'role': 'presentation'\n  }\n})\nexport class NxAccordionDirective extends CdkAccordion {\n\n  private _style: AccordionStyle = 'regular';\n\n  /**\n   * Value for the styling that should be chosen.\n   * Default value: 'regular'\n   */\n  @Input('nxStyle')\n  set style(value: AccordionStyle) {\n    value = value ? value : DEFAULT_TYPE;\n\n    const [newValue] = value.match(/regular|light/) || [DEFAULT_TYPE];\n    this._style = newValue as AccordionStyle;\n  }\n  get style(): AccordionStyle {\n    return this._style;\n  }\n\n  private _negative: boolean = null;\n\n  /** Whether the negative set of styles should be used. */\n  @Input()\n  set negative(value: boolean) {\n    this._negative = coerceBooleanProperty(value);\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n}\n","import { AnimationTriggerMetadata, trigger, state, style, transition, animate } from '@angular/animations';\n\nexport const nxAccordionAnimations: {\n  readonly bodyExpansion: AnimationTriggerMetadata;\n  readonly indicatorRotate: AnimationTriggerMetadata;\n} = {\n  bodyExpansion: trigger('bodyExpansion', [\n    state('closed', style({height: '0px', visibility: 'hidden'})),\n    state('open', style({height: '*', visibility: 'visible'})),\n    transition('open <=> closed', animate('.5s cubic-bezier(0.86, 0, 0.07, 1)'))\n  ]),\n  indicatorRotate: trigger('indicatorRotate', [\n    state('closed', style({transform: 'rotate(0deg)'})),\n    state('open', style({transform: 'rotate(180deg)'})),\n    transition('open <=> closed', animate('.3s ease')),\n  ])\n};\n","\nimport { Directive, TemplateRef } from '@angular/core';\n\n@Directive({ selector: '[nxExpansionPanelBody]' })\nexport class NxExpansionPanelBodyDirective {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","import { CdkAccordionItem } from '@angular/cdk/accordion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, startWith, take } from 'rxjs/operators';\n\nimport { NxAccordionDirective } from './accordion';\nimport { nxAccordionAnimations } from './accordion-animations';\nimport { NxExpansionPanelBodyDirective } from './expansion-panel-body';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nlet nextId = 0;\n\n/** The styling of the accordion. */\nexport type AccordionStyle = 'regular' | 'light';\nconst DEFAULT_TYPE = 'regular';\n\n@Component({\n  selector: 'nx-expansion-panel',\n  exportAs: 'NxExpansionPanelComponent',\n  templateUrl: 'expansion-panel.html',\n  styleUrls: ['expansion-panel.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [nxAccordionAnimations.bodyExpansion],\n  host: {\n    '[class.nx-expanded]': 'expanded',\n    '[class.nx-expansion-panel--light]': '_accordionStyle === \"light\"',\n    '[class.nx-expansion-panel--regular]': '_accordionStyle === \"regular\"',\n    '[class.nx-expansion-panel--negative]': 'negative',\n    '[class.is-disabled]': 'disabled',\n  },\n  providers: [\n    // Provide NxAccordionDirective as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    { provide: NxAccordionDirective, useValue: undefined },\n  ],\n})\nexport class NxExpansionPanelComponent extends CdkAccordionItem implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the negative set of styles should be used. */\n  @Input()\n  set negative(value: boolean) {\n    this._negative = coerceBooleanProperty(value);\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n  private _negative: boolean = null;\n  _accordionStyle: AccordionStyle = DEFAULT_TYPE;\n\n  /**\n   * Value for the styling that should be chosen.\n   * Default value: 'regular'.\n   */\n  @Input('nxStyle')\n  set style(value: AccordionStyle) {\n    value = value ? value : DEFAULT_TYPE;\n\n    const [newValue] = value.match(/regular|light/) || [DEFAULT_TYPE];\n    this._style = newValue as AccordionStyle;\n    this._accordionStyle = newValue as AccordionStyle;\n  }\n\n  get style(): AccordionStyle {\n    return this._style;\n  }\n  private _style: AccordionStyle = null;\n\n  /** @docs-private */\n  @ContentChild(NxExpansionPanelBodyDirective, {static: false}) lazyContent;\n\n  private _portal: TemplatePortal;\n\n  /** @docs-private */\n  get portal() {\n    return this._portal;\n  }\n\n  /** @docs-private */\n  accordion: NxAccordionDirective;\n  _headerId = `nx-expansion-panel-header-${nextId++}`;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  constructor(@Optional() @SkipSelf() accordion: NxAccordionDirective,\n    _changeDetectorRef: ChangeDetectorRef,\n    _expansionDispatcher: UniqueSelectionDispatcher,\n    private _viewContainerRef: ViewContainerRef\n  ) {\n    super(accordion, _changeDetectorRef, _expansionDispatcher);\n    this.accordion = accordion;\n  }\n\n  ngAfterContentInit() {\n    if (this.lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this.lazyContent._template, this._viewContainerRef);\n      });\n    }\n\n    // Inherit appearance given by the accordion (if any).\n    if (Boolean(this.accordion)) {\n\n      if (this.style === null && this.accordion.style !== null) {\n        this.style = this.accordion.style;\n      }\n\n      if (this.negative === null && this.accordion.negative !== null) {\n        this.negative = this.accordion.negative;\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  /** @docs-private */\n  getOpenState() {\n    return this.expanded ? 'open' : 'closed';\n  }\n}\n","import { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, Host, OnDestroy } from '@angular/core';\nimport { merge, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { nxAccordionAnimations } from './accordion-animations';\nimport { NxExpansionPanelComponent } from './expansion-panel';\n\n@Component({\n  selector: 'nx-expansion-panel-header',\n  templateUrl: 'expansion-panel-header.html',\n  styleUrls: ['expansion-panel-header.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [nxAccordionAnimations.indicatorRotate],\n  host: {\n    '[class.nx-expanded]': 'isExpanded()',\n    'class': 'nx-expansion-panel__header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': 'isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.is-disabled]': 'panel.disabled',\n    '(keydown)': 'keydown($event)',\n    '(click)': 'toggle()'\n  }\n})\nexport class NxExpansionPanelHeaderComponent implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    /** @docs-private */ @Host() public panel: NxExpansionPanelComponent,\n    private _changeDetectorRef: ChangeDetectorRef\n  ) {\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n  }\n\n  /** @docs-private */\n  isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** @docs-private */\n  getOpenState(): string {\n    return this.panel.getOpenState();\n  }\n\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /**\n   * Toggle the expansion panel.\n   */\n  toggle() {\n    this.panel.toggle();\n  }\n\n  /** @docs-private */\n  keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this.toggle();\n        break;\n      default:\n        return;\n    }\n  }\n}\n\n/**\n * This directive is to be used inside of the NxExpansionPanelHeader component.\n */\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: 'nx-expansion-panel-description',\n  host : {\n    class: 'nx-expansion-panel__header-description'\n  }\n})\nexport class NxExpansionPanelDescriptionDirective {}\n\n/**\n * This directive is to be used inside of the NxExpansionPanelHeader component.\n */\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: 'nx-expansion-panel-title',\n  host : {\n    class: 'nx-expansion-panel__header-title'\n  }\n})\nexport class NxExpansionPanelTitleDirective {}\n","import { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxAccordionDirective } from './accordion';\nimport { NxExpansionPanelComponent } from './expansion-panel';\nimport { NxExpansionPanelBodyDirective } from './expansion-panel-body';\nimport {\n  NxExpansionPanelDescriptionDirective,\n  NxExpansionPanelHeaderComponent,\n  NxExpansionPanelTitleDirective,\n} from './expansion-panel-header';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PortalModule,\n    NxIconModule\n  ],\n  exports: [\n    NxAccordionDirective,\n    NxExpansionPanelComponent,\n    NxExpansionPanelHeaderComponent,\n    NxExpansionPanelDescriptionDirective,\n    NxExpansionPanelTitleDirective,\n    NxExpansionPanelBodyDirective\n  ],\n  declarations: [\n    NxAccordionDirective,\n    NxExpansionPanelComponent,\n    NxExpansionPanelHeaderComponent,\n    NxExpansionPanelDescriptionDirective,\n    NxExpansionPanelTitleDirective,\n    NxExpansionPanelBodyDirective\n  ],\n  providers: [],\n})\nexport class NxAccordionModule { }\n","/** @docs-private */\nexport abstract class NxTabGroupBase {\n\n}\n","import { Component, EmbeddedViewRef, Input, OnDestroy, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { NxTabGroupBase } from './tab-group-base';\nimport { NxTabGroupComponent } from './tab-group';\n\n/** @docs-private */\n@Component({\n  selector: 'nx-tab-header-outlet',\n  template: '<ng-container #outlet></ng-container>'\n})\nexport class NxTabHeaderOutletComponent implements OnInit, OnDestroy {\n  @ViewChild('outlet', { static: true, read: ViewContainerRef }) _outlet: ViewContainerRef;\n\n  @Input() content: EmbeddedViewRef<any>;\n\n  constructor(private _tabGroup: NxTabGroupBase) { }\n\n  private _appearanceSubscription: Subscription;\n\n  ngOnInit() {\n    this._appearanceSubscription = (this._tabGroup as NxTabGroupComponent)._appearanceChange.subscribe(() => {\n      this.detach();\n    });\n    this.attach();\n  }\n\n  attach() {\n    this._outlet.insert(this.content);\n  }\n\n  detach() {\n    const index = this._outlet.indexOf(this.content);\n    if (index !== -1) {\n      this._outlet.detach(index);\n    }\n  }\n\n  ngOnDestroy() {\n    this._appearanceSubscription.unsubscribe();\n  }\n}\n","import { Directive} from '@angular/core';\nimport { CdkPortal } from '@angular/cdk/portal';\n\n/** @docs-private */\n@Directive({ selector: '[nxTabLabel]' })\nexport class NxTabLabelDirective extends CdkPortal {}\n","import { Directive, TemplateRef } from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({ selector: '[nxTabContent]' })\nexport class NxTabContentDirective {\n  constructor(/** @docs-private */public template: TemplateRef<any>) { }\n}\n","import { NxTabGroupBase } from './tab-group-base';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  Optional,\n  Inject,\n  Host,\n  ContentChild,\n  EmbeddedViewRef,\n  AfterContentInit\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { NxTabGroupComponent } from './tab-group';\nimport { NxTabLabelDirective } from './tab-label';\nimport { NxTabContentDirective } from './tab-content';\n\n@Component({\n  selector: 'nx-tab',\n  exportAs: 'nxTab',\n  templateUrl: 'tab.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxTabComponent implements OnChanges, OnDestroy, AfterContentInit {\n  private _label: string;\n  private _disabled: boolean = false;\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * Content for the tab label given by `<ng-template nxTabLabel>`.\n   * @docs-private\n   * */\n  @ContentChild(NxTabLabelDirective, { read: TemplateRef, static: true })\n  get templateLabel(): TemplateRef<any> {return this._templateLabel; }\n  set templateLabel(value: TemplateRef<any>) {\n    // Only update the templateLabel via query if there is actually\n    // a nxTabLabel found. This works around an issue where a user may have\n    // manually set `templateLabel` during creation mode, which would then get clobbered\n    // by `undefined` when this query resolves.\n    if (value) {\n      this._templateLabel = value;\n    }\n  }\n\n  private _templateLabel: TemplateRef<any>;\n\n  /** Template inside the NxTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, { static: true }) _implicitContent: TemplateRef<any>;\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(NxTabContentDirective, { read: TemplateRef, static: true })\n  _explicitContent: TemplateRef<any>;\n\n  /** Sets the label of the tab shown in the tablist. */\n  @Input()\n  get label(): string {\n    return this._label;\n  }\n  set label(value: string) {\n    if (this._label !== value) {\n      this._label = value;\n    }\n  }\n\n  /** Sets the tab to disabled. */\n  @Input()\n  get disabled(): boolean {\n    return (this._tabGroup && (this._tabGroup as NxTabGroupComponent).disabled) ?\n    (this._tabGroup as NxTabGroupComponent).disabled : this._disabled;\n  }\n  set disabled(value: boolean) {\n    if (this._disabled !== value) {\n      this._disabled = value;\n    }\n  }\n\n  private _headerViewRef: EmbeddedViewRef<any>;\n  private _contentViewRef: EmbeddedViewRef<any>;\n\n  /** @docs-private */\n  get headerViewRef() {\n    return this._headerViewRef;\n  }\n\n  /** @docs-private */\n  get contentViewRef() {\n    // for lazy loading we only create the viewref when it is asked for\n    if (!this._contentViewRef) {\n      const contentTemplate = this._explicitContent || this._implicitContent;\n      this._contentViewRef = contentTemplate.createEmbeddedView({});\n    }\n    return this._contentViewRef;\n  }\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(\n    @Inject(NxTabGroupBase) @Optional() @Host() private _tabGroup: NxTabGroupBase) {\n    if (!this._tabGroup) {\n      throw Error(`The nx-tab element has to be wrapped in a nx-tab-group to work.\n      Please provide a nx-tab-group element and place your tabs inside it.`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('label') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngAfterContentInit() {\n    if (this.templateLabel) {\n      this._headerViewRef = this.templateLabel.createEmbeddedView({});\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n    this._contentViewRef.destroy();\n    if (this._headerViewRef) { this._headerViewRef.destroy(); }\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { NxTabComponent } from './tab';\nimport { NxTabGroupBase } from './tab-group-base';\nimport { NxTabGroupComponent } from './tab-group';\n\n/** @docs-private */\n@Component({\n  selector: 'nx-tab-body',\n  templateUrl: 'tab-body.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./tab-body.scss']\n})\nexport class NxTabBodyComponent implements OnInit, OnDestroy {\n  private _appearanceSubscription: Subscription;\n\n  @ViewChild('outlet', { static: true, read: ViewContainerRef }) _outlet: ViewContainerRef;\n\n  @Input() tab: NxTabComponent;\n\n  private _active: boolean = false;\n\n  @Input()\n  set active(value: boolean) {\n    this._active = coerceBooleanProperty(value);\n    if (this._active) {\n      this.attach();\n    } else {\n      this.detach();\n    }\n  }\n  get active(): boolean {\n    return this._active;\n  }\n\n  constructor(\n    private _tabGroup: NxTabGroupBase) { }\n\n  ngOnInit() {\n    this._appearanceSubscription = (this._tabGroup as NxTabGroupComponent)._appearanceChange.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  ngOnDestroy() {\n    this._appearanceSubscription.unsubscribe();\n  }\n\n  attach() {\n    this._outlet.insert(this.tab.contentViewRef);\n  }\n\n  detach() {\n    const index = this._outlet.indexOf(this.tab.contentViewRef);\n    if (index !== -1) {\n      this._outlet.detach(index);\n    }\n  }\n}\n","import { FocusableOption } from '@angular/cdk/a11y';\nimport { Directive, ElementRef, Input } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** @docs-private */\n@Directive({ selector: '[nxTabLabelWrapper]' })\nexport class NxTabLabelWrapperDirective implements FocusableOption {\n  private _disabled: boolean = false;\n\n  constructor(public elementRef: ElementRef) {}\n\n  /** Whether the tab group is disabled. Default: false. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this.disabled !== newValue) {\n      this._disabled = newValue;\n    }\n  }\n\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n}\n","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { END, ENTER, HOME, SPACE } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n} from '@angular/core';\n\nimport { NxTabLabelWrapperDirective } from './tab-label-wrapper';\n\n/** @docs-private */\n@Component({\n  selector: 'nx-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['./tab-header.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NxTabHeaderComponent implements AfterContentInit {\n\n  private _keyManager: FocusKeyManager<NxTabLabelWrapperDirective>;\n\n  private _selectedIndex: number = 0;\n\n  @Input()\n  get selectedIndex(): number {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: number) {\n    this._selectedIndex = value;\n    if (this._keyManager) {\n      this._keyManager.updateActiveItem(value);\n    }\n  }\n\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex : 0;\n  }\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) { return; }\n    this._keyManager.setActiveItem(value);\n  }\n\n  private _autoselect: boolean = true;\n\n  @Input()\n  get autoselect(): boolean {\n    return this._autoselect;\n  }\n  set autoselect(value: boolean) {\n    this._autoselect = value;\n  }\n\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  @ContentChildren(NxTabLabelWrapperDirective) labels: QueryList<NxTabLabelWrapperDirective>;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<NxTabLabelWrapperDirective>(this.labels).withHorizontalOrientation('ltr').withWrap();\n    this._keyManager.updateActiveItem(0);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _isValidIndex(idx: number) {\n    if (!this.labels) { return true; }\n    const tab = this.labels.toArray()[idx] || null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Handles keyboard inputs on the labels\n   * If autoselect is enabled the tab gets changed immediately\n   * If autoselect is disabled only the focus changes but the user still has to select the item\n   * by himself\n   */\n  handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this._keyManager.activeItemIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n\n    if (this.autoselect) {\n      this.selectFocusedIndex.emit(this._keyManager.activeItemIndex);\n    } else if (event.keyCode !== ENTER && event.keyCode !== SPACE) {\n      this.indexFocused.emit(this._keyManager.activeItemIndex);\n    }\n  }\n}\n","import { NxTabGroupBase } from './tab-group-base';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n  OnInit\n} from '@angular/core';\nimport { merge, Subscription, Subject } from 'rxjs';\n\nimport { NxAccordionDirective } from '@allianz/ngx-ndbx/accordion';\nimport { NxExpansionPanelComponent } from '@allianz/ngx-ndbx/accordion';\nimport { NxTabComponent } from './tab';\nimport { NxTabBodyComponent } from './tab-body';\nimport { NxTabHeaderComponent } from './tab-header';\n\nexport class NxTabChangeEvent {\n  /** The index of the selected or focused tab. */\n  index: number;\n\n  /** The component instance of the selected or focused tab. */\n  tab: NxTabComponent;\n}\n\nlet nextId: number = 0;\nconst MOBILE_BREAKPOINT = 480;\n\n@Component({\n  selector: 'nx-tab-group',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['./tab-group.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.is-negative]': 'negative',\n    '[class.is-disabled]': 'disabled'\n  },\n  providers: [{ provide: NxTabGroupBase, useExisting: NxTabGroupComponent }]\n})\nexport class NxTabGroupComponent implements NxTabGroupBase, OnInit, OnDestroy, AfterContentInit, AfterContentChecked {\n  private _selectedIndex: number | null = null;\n  private _groupId: number;\n  private _negative: boolean = false;\n  private _disabled: boolean = false;\n  private _indexToSelect: number | null = 0;\n  private _autoselect: boolean = true;\n  private _mobileAccordion: boolean = true;\n  _showAccordion: boolean = false;\n\n  /** @docs-private */\n  @ContentChildren(NxTabComponent) tabs: QueryList<NxTabComponent>;\n\n  /** @docs-private */\n  @ViewChildren(NxTabBodyComponent) tabBodyChildren: QueryList<NxTabBodyComponent>;\n\n  /** @docs-private */\n  @ViewChild('tabHeader', { static: false }) tabHeader: NxTabHeaderComponent;\n\n  /** @docs-private */\n  @ViewChildren(NxExpansionPanelComponent) panels: QueryList<NxExpansionPanelComponent>;\n\n  /** @docs-private */\n  @ViewChild(NxAccordionDirective, { static: false }) accordion: NxAccordionDirective;\n\n  /** Sets the selected tab. */\n  @Input()\n  get selectedIndex(): number {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: number) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n\n  /** Whether the negative set of styling should be used. */\n  @Input()\n  get negative(): boolean {\n    return this._negative;\n  }\n  set negative(value: boolean) {\n    if (value !== this._negative) {\n      this._negative = coerceBooleanProperty(value);\n    }\n  }\n\n  /** Whether the tab group is disabled. Default: false. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    if (value !== this._disabled) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n  }\n\n  /** Whether the tab should be immediately selected on focus. */\n  @Input()\n  get autoselect(): boolean {\n    return this._autoselect;\n  }\n  set autoselect(value: boolean) {\n    this._autoselect = coerceBooleanProperty(value);\n  }\n\n  /** Whether the tabs should to accordion on mobile viewports. */\n  @Input()\n  get mobileAccordion(): boolean {\n    return this._mobileAccordion;\n  }\n  set mobileAccordion(value: boolean) {\n    this._mobileAccordion = coerceBooleanProperty(value);\n  }\n\n  /** An event emitted when the selected tab has changed. */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** An event emitted when the selected tab has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<NxTabChangeEvent> = new EventEmitter<NxTabChangeEvent>();\n\n  /**\n   * An event emitted when focus has changed within a tab group.\n   *\n   * **Note:** is not supported in mobile view.\n   */\n  @Output() readonly focusChange: EventEmitter<NxTabChangeEvent> = new EventEmitter<NxTabChangeEvent>();\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  private _disabledTabsCache = [];\n\n  _appearanceChange = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {\n    this._groupId = nextId++;\n  }\n\n  ngOnInit() {\n    this._switchAppearance(window.innerWidth);\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this.tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this.tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /**\n    * After the content is checked, this component knows what tabs have been defined\n    * and what the selected index should be.\n    */\n  ngAfterContentChecked() {\n\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    let indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If the active tab is disabled select the next focusable tab\n    // if all tabs are disabled, allow selection of disabled active tab.\n    if (!this.disabled && this.tabs.toArray()[indexToSelect].disabled) {\n      const nextFocusable = this.tabs.toArray()\n        .map((tab, index) => ({ tab: tab, index: index }))\n        .find(item => !item.tab.disabled);\n\n      indexToSelect = nextFocusable ? nextFocusable.index : indexToSelect;\n    }\n\n    // If the index to select was disabled previously leave the selection on the current\n    // so that the selection does not jump from one to another tab.\n    if (this._disabledTabsCache[this._indexToSelect]) {\n      this._indexToSelect = this.selectedIndex;\n    }\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex !== indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this.tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // cache the previous disabled status of all tabs\n    if (!this.disabled) {\n      this.tabs.toArray().forEach((tab, index) => this._disabledTabsCache[index] = tab.disabled);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /**\n  * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n  * on the NxTab component, whereas the data binding is inside the NxTabGroup. In order for the\n  * binding to be updated, we need to subscribe to changes in it and trigger change detection\n  * manually.\n  */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this.tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** @docs-private */\n  focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): NxTabChangeEvent {\n    const event = new NxTabChangeEvent;\n    event.index = index;\n    if (this.tabs && this.tabs.length) {\n      event.tab = this.tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /** @docs-private */\n  handleClick(index: number) {\n    const clickedTab = this.tabs.toArray()[index];\n    if (!this.disabled && !clickedTab.disabled) {\n      this.selectedIndex = this.tabHeader.focusIndex = index;\n    }\n  }\n\n  /**\n   * @docs-private\n   * Returns the tabindex for a tab label\n   */\n  getTabIndex(tab: NxTabComponent, idx: number): number | null {\n    return (this.selectedIndex === idx && !tab.disabled && !this.disabled) ? 0 : -1;\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `nx-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `nx-tab-content-${this._groupId}-${i}`;\n  }\n\n  /** @docs-private */\n  @HostListener('window:resize', ['$event'])\n  onResize(event) {\n    this._switchAppearance(event.target.innerWidth);\n  }\n\n  private _switchAppearance(viewPortWidth) {\n    if (!this._mobileAccordion) {\n      return;\n    }\n    // notify the outlets to detach the viewrefs for header and body before\n    // we switch the appearance. this way we only instantiate the templates\n    // once so that they do not get destroyed during the switch\n    if (viewPortWidth <= MOBILE_BREAKPOINT && !this._showAccordion) {\n      this._appearanceChange.next();\n      this._showMobileVersion();\n    } else if (viewPortWidth > MOBILE_BREAKPOINT && this._showAccordion) {\n      this._appearanceChange.next();\n      this._showDesktopVersion();\n    }\n  }\n\n  private _showMobileVersion() {\n    this._showAccordion = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _showDesktopVersion() {\n    this._showAccordion = false;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Emulate the tab change event when an accordion panel is opened in\n   * mobile viewports.\n   */\n  _panelOpened(index: number) {\n    this.selectedIndex = index;\n  }\n}\n","import { Component, Input, Directive, ChangeDetectionStrategy, Optional, SkipSelf, ChangeDetectorRef } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n@Component({\n  selector: 'nx-tab-nav-bar',\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['./tab-nav-bar.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.is-negative]': 'negative',\n    '[class.is-disabled]': 'disabled',\n    'role': 'navigation',\n  }\n})\nexport class NxTabNavBarComponent {\n\n  private _negative: boolean = false;\n\n  /** Whether the tab nav bar has negative styling. */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this.negative) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get negative() {\n    return this._negative;\n  }\n\n  private _disabled: boolean = false;\n\n  /** Whether the tab nav bar has disabled styling. */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n}\n\n@Directive({\n  selector: '[nxTabLink]',\n  host: {\n    '[class.nx-tab-link]': 'true',\n    '[class.is-active]': 'active',\n    '[class.is-disabled]': 'disabled',\n    '[attr.aria-current]': 'active',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  }\n})\nexport class NxTabLinkDirective {\n\n  private _active: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the tab link is active and has the active styling. */\n  @Input()\n  get active(): boolean {\n    return this._active;\n  }\n  set active(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._active) {\n      this._active = value;\n    }\n  }\n\n  /** Whether the tab link is disabled. Default: false. */\n  @Input()\n  get disabled(): boolean {\n    return (this._tabNavBar && this._tabNavBar.disabled) ? this._tabNavBar.disabled : this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._disabled) {\n      this._disabled = value;\n    }\n  }\n\n  constructor(\n    @Optional() @SkipSelf() private _tabNavBar: NxTabNavBarComponent\n  ) {\n    if (!this._tabNavBar) {\n      throw Error(`The nx-tab-link element has to be wrapped in a nx-tab-nav-bar to work.`);\n    }\n\n  }\n\n  _getTabIndex(): string {\n    return (this.disabled) ? '-1' : '0';\n  }\n}\n","import { NxTabHeaderOutletComponent } from './tab-header-outlet';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxAccordionModule } from '@allianz/ngx-ndbx/accordion';\nimport { NxTabComponent } from './tab';\nimport { NxTabBodyComponent } from './tab-body';\nimport { NxTabGroupComponent } from './tab-group';\nimport { NxTabHeaderComponent } from './tab-header';\nimport { NxTabLabelDirective } from './tab-label';\nimport { NxTabNavBarComponent, NxTabLinkDirective } from './tab-nav-bar';\nimport { NxTabContentDirective} from './tab-content';\nimport { NxTabLabelWrapperDirective } from './tab-label-wrapper';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PortalModule,\n    NxAccordionModule\n  ],\n  exports: [\n    NxTabComponent,\n    NxTabGroupComponent,\n    NxTabLabelDirective,\n    NxTabLabelWrapperDirective,\n    NxTabHeaderComponent,\n    NxTabBodyComponent,\n    NxTabNavBarComponent,\n    NxTabLinkDirective,\n    NxTabContentDirective\n  ],\n  declarations: [\n    NxTabComponent,\n    NxTabGroupComponent,\n    NxTabLabelDirective,\n    NxTabLabelWrapperDirective,\n    NxTabHeaderComponent,\n    NxTabBodyComponent,\n    NxTabNavBarComponent,\n    NxTabLinkDirective,\n    NxTabContentDirective,\n    NxTabHeaderOutletComponent\n  ],\n  providers: [],\n})\nexport class NxTabsModule { }\n","import { ElementRef, Renderer2, Input } from '@angular/core';\n\nimport { appendClasses, mapClassNames, removeClasses } from '@allianz/ngx-ndbx/utils';\n\nexport type MappingObject = {\n  [key: string]: string;\n};\n\nexport class MappedStyles {\n  private _classNames: string;\n  private _classNamesSanitized: string;\n\n  constructor(\n    private mapping: MappingObject,\n    private baseClasses = [],\n    protected _elementRef: ElementRef,\n    protected _renderer: Renderer2) {\n      this.classNames = '';\n  }\n\n  get classNames(): string {\n    return this._classNames;\n  }\n\n  set classNames(value: string) {\n    if (this._classNames === value) {\n      return;\n    }\n    removeClasses(this._renderer, this._elementRef, this._classNamesSanitized);\n    this._classNamesSanitized = mapClassNames(value, this.baseClasses, this.mapping);\n    this._classNames = value;\n    appendClasses(this._renderer, this._elementRef, this._classNamesSanitized);\n  }\n}\n","import {Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, Attribute} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  template: '<ng-content></ng-content>',\n  styleUrls: ['card.scss'],\n  selector: 'nx-card',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'nx-card',\n    '[class.is-selectable]': 'selectable',\n    '[class.is-selected]': 'selected',\n    '[class.is-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled',\n    '(click)': '_toggleSelected()',\n    '(keydown.enter)': '_toggleSelected()',\n    '[attr.tabindex]': '_getTabindex()'\n  }\n})\nexport class NxCardComponent {\n  _tabindex: string;\n\n  /**\n   * Whether this card is selectable or not.\n   *\n   * The selectable property of the card is deprecated.\n   * Please use the selectable card component instead.\n   *\n   * @deprecated\n   * @deletion-target 10.0.0\n   */\n  @Input()\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get selectable(): boolean {\n    return this._selectable;\n  }\n\n  private _selectable: boolean;\n\n  /**\n   * Whether this card is selected or not.\n   *\n   * The selected property of the card is deprecated.\n   * Please use the selectable card component instead.\n   *\n   * @deprecated\n   * @deletion-target 10.0.0\n  */\n  @Input()\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  private _selected: boolean;\n\n  /**\n   * Whether a selectable card is disabled or not.\n   *\n   * The disabled property of the card will be deprecated,\n   * as its selectable properties are deprecated as well.\n   * Please use the selectable card component instead.\n   *\n   * @deprecated\n   * @deletion-target 10.0.0\n  */\n  @Input()\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  private _disabled: boolean = false;\n\n  /**\n   * Event emitted when the selected value has changed.\n   *\n   * This output  property of the card is deprecated,\n   * as its selectable properties are deprecated as well.\n   * Please use the selectable card component instead.\n   *\n   * @deprecated\n   * @deletion-target 10.0.0\n  */\n  @Output() selectedChange = new EventEmitter<boolean>();\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Attribute('tabindex') tabindex: string) {\n    this._tabindex = tabindex;\n  }\n\n  _toggleSelected(): void {\n    if (this.selectable && !this.disabled) {\n      this.selected = !this.selected;\n      this.selectedChange.emit(this.selected);\n    }\n  }\n\n  _getTabindex(): string {\n    if (this.disabled) {\n      return '-1';\n    }\n\n    if (this.selectable) {\n      return this._tabindex || '0';\n    }\n\n    return this._tabindex || '';\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {NxCardComponent} from './card.component';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n  declarations: [ NxCardComponent ],\n  exports: [ NxCardComponent ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class NxCardModule { }\n","/** @docs-private */\nexport abstract class SelectableCard {\n  id;\n  value;\n  checked;\n  name;\n  negative;\n  disabled;\n  checkedChange;\n  selectionChange;\n}\n","import { NxSelectableCardComponent } from './selectable-card.component';\n\nexport class NxSelectableCardChangeEvent {\n  constructor(\n    /** The checked value of the selectable card. */\n    public checked: boolean,\n    /** The value of the selectable card. */\n    public value: string,\n    /** The component instance of the selectable card which emitted the change event. */\n    public card: NxSelectableCardComponent\n  ) {}\n}\n","import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  ContentChildren,\n  DoCheck,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n} from '@angular/core';\nimport { Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';\n\nimport {\n  ControlValueAccessor,\n  FormControl,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport { SelectableCard } from './selectable-card';\nimport { NxSelectableCardChangeEvent } from './selectable-card-change-event';\nimport { NxErrorComponent } from '@allianz/ngx-ndbx/base';\n\nlet nextId = 0;\n\n@Component({\n  selector: 'nx-selectable-card',\n  templateUrl: './selectable-card.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['./selectable-card.component.scss'],\n  providers: [{provide: SelectableCard, useExisting: forwardRef(() => NxSelectableCardComponent)}],\n  host: {\n    '[class.is-checked]': 'checked',\n    '[class.is-disabled]': 'disabled',\n    '[class.has-error]': 'errorState',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.role]': '\"checkbox\"',\n    '[attr.aria-checked]': 'checked'\n  }\n})\n\nexport class NxSelectableCardComponent extends SelectableCard implements ControlValueAccessor, DoCheck, AfterContentInit {\n  private _id: string = (nextId++).toString();\n  private _checked = false;\n  private _disabled: boolean = false;\n  private _value: string;\n  private _name: string;\n  private _negative: boolean = false;\n  private _tabindex: string = '0';\n  private _required: boolean;\n  /** @docs-private */\n  _errorListIds: string = '';\n\n  /** @docs-private */\n  @ContentChildren(NxErrorComponent) _errorList: QueryList<NxErrorComponent>;\n\n  /** @docs-private */\n  errorState: boolean = false;\n\n  /** @docs-private */\n  stateChanges = new Subject<void>();\n\n  /** An event is dispatched each time the selectable card value is changed */\n  @Output()\n  selectionChange: EventEmitter<NxSelectableCardChangeEvent> = new EventEmitter<NxSelectableCardChangeEvent>();\n\n  /** An event is dispatched each time the selectable card value is changed */\n  @Output() checkedChange = new EventEmitter<boolean>();\n\n  /**\n   * Id of the selectable card.\n   *\n   * If not set, the selectable card gets an incremented value by default.\n   */\n  @Input()\n  set id(value: string) {\n    if (value !== this._id) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get id() {\n    return `nx-selectable-card-${this._id}`;\n  }\n\n  /** Whether the selectable card  is checked. */\n  @Input()\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get checked() {\n    return this._checked;\n  }\n\n  /** The value attribute of the native input element  */\n  @Input()\n  get value(): string {\n    return this._value;\n  }\n\n  set value(value: string) {\n    if (value) {\n      this._value = value;\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Whether the selectable card is disabled. */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get disabled(): boolean {\n    return this._disabled || null;\n  }\n\n  /** Whether the selectable card is negative. */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._negative) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get negative(): boolean {\n    return this._negative || null;\n  }\n\n  /** Whether the selectable card is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Name of the selectable card. */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n\n  set name(value: string) {\n    this._name = value;\n  }\n\n  /** The tabIndex of the element */\n  @Input()\n  get tabindex(): string {\n    if (this.disabled) {\n      return '-1';\n    }\n\n    return this._tabindex;\n  }\n\n  set tabindex(value: string) {\n    this._tabindex = value;\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              private _errorStateMatcher: ErrorStateMatcher,\n              @Self() @Optional() public ngControl: NgControl,\n              @Optional() private _parentForm: NgForm,\n              @Optional() private _parentFormGroup: FormGroupDirective\n  ) {\n    super();\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._errorList.changes.subscribe((value) => {\n      this._errorListIds = value.map((errorItem: NxErrorComponent) => {\n        return errorItem.id;\n      }).join(' ');\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._errorListIds = this._errorList.map((errorItem: NxErrorComponent) => {\n      return errorItem.id;\n    }).join(' ');\n  }\n\n  /** @docs-private */\n  onChangeCallback = (_: any) => {};\n\n  registerOnChange(fn: any): void {\n    this.onChangeCallback = fn;\n  }\n\n  onTouchedCallback = (_: any) => {};\n\n  registerOnTouched(onTouched: any): void {\n    this.onTouchedCallback = onTouched;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  /** @docs-private */\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const control = this.ngControl ? this.ngControl.control as FormControl : null;\n    const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Toggles the checked state of the selectable card . */\n  public toggle() {\n    if (!this.disabled) {\n      this.checked = !this.checked;\n    }\n  }\n\n  /** @docs-private */\n  _onInputClick(event: Event): void {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // stop the propagation of the native click on the checkbox input so that a click is not triggered twice\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n    if (!this.disabled) {\n      this.toggle();\n      this._emitChangeEvent();\n    }\n  }\n\n  /** @docs-private */\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  /** @docs-private */\n  private _emitChangeEvent() {\n    const event = new NxSelectableCardChangeEvent(this.checked, this.value, this);\n    this.onChangeCallback(this.checked);\n    this.selectionChange.emit(event);\n    this.checkedChange.emit(this.checked);\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'nx-card-header',\n  templateUrl: './card-header.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NxCardHeaderComponent {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'nx-card-footer',\n  templateUrl: './card-footer.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NxCardFooterComponent {\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NxSelectableCardComponent } from './selectable-card.component';\nimport { NxCardHeaderComponent } from './card-header.component';\nimport { NxCardFooterComponent } from './card-footer.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxErrorModule } from '@allianz/ngx-ndbx/base';\n\n@NgModule({\n  declarations: [\n    NxSelectableCardComponent,\n    NxCardHeaderComponent,\n    NxCardFooterComponent\n  ],\n  exports: [\n    NxSelectableCardComponent,\n    NxCardHeaderComponent,\n    NxCardFooterComponent\n  ],\n  imports: [\n    CommonModule,\n    NxIconModule,\n    NxErrorModule\n  ]\n})\nexport class NxSelectableCardModule { }\n","export const BREAKPOINT_MOBILE = '(max-width: 703px)';\nexport const BREAKPOINT_TABLET = '(min-width: 704px) and (max-width: 992px)';\nexport const BREAKPOINT_DESKTOP = '(min-width: 993px)';\n"]}