(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@allianz/ngx-ndbx/icon')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/pagination', ['exports', '@angular/core', '@angular/common', '@allianz/ngx-ndbx/icon'], factory) :
    (global = global || self, factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx'].pagination = {}), global.ng.core, global.ng.common, global.allianz['ngx-ndbx'].icon));
}(this, (function (exports, core, common, icon) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: pagination-texts.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Interface for providing custom labels in a simple pagination.
     * With an implementation you can localize your pagination with the NX_PAGINATION_TEXTS injection token.
     * @record
     */
    function IPaginationTexts() { }
    if (false) {
        /**
         * Label that should replace 'previous'.
         * @type {?}
         */
        IPaginationTexts.prototype.previous;
        /**
         * Label that should replace 'next'.
         * @type {?}
         */
        IPaginationTexts.prototype.next;
        /**
         * Label that should replace 'first'.
         *
         * Optional attribute needed only for the advanced pagination.
         * @type {?|undefined}
         */
        IPaginationTexts.prototype.first;
        /**
         * Label that should replace 'last'.
         *
         * Optional attribute needed only for the advanced pagination.
         * @type {?|undefined}
         */
        IPaginationTexts.prototype.last;
        /**
         * Label that should replace 'of'.
         * @type {?}
         */
        IPaginationTexts.prototype.ofLabel;
        /**
         * Label that should replace the aria label.
         * @type {?}
         */
        IPaginationTexts.prototype.ariaLabel;
    }
    /** @type {?} */
    var DefaultPaginationTexts = {
        previous: 'Previous',
        next: 'Next',
        first: 'First',
        last: 'Last',
        ofLabel: 'of',
        ariaLabel: 'Please select your page'
    };
    /**
     * InjectionToken for pagination that can be used to override default locale code.
     * @type {?}
     */
    var NX_PAGINATION_TEXTS = new core.InjectionToken('nx-pagination-texts');

    /**
     * @fileoverview added by tsickle
     * Generated from: pagination-utils.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docs-private
     */
    var NxPaginationUtils = /** @class */ (function () {
        function NxPaginationUtils() {
            this._pagesMobile = 3;
            this._elipsisText = '...';
            this._classExpanded = 'expanded-view';
        }
        /**
         * @param {?} currentPage
         * @param {?} totalPages
         * @return {?}
         */
        NxPaginationUtils.prototype.getPages = /**
         * @param {?} currentPage
         * @param {?} totalPages
         * @return {?}
         */
        function (currentPage, totalPages) {
            /** @type {?} */
            var pages = [];
            /** @type {?} */
            var start = [];
            /** @type {?} */
            var middle = [];
            /** @type {?} */
            var end = [];
            // First array -> start
            start = this.getStartArray(currentPage, totalPages);
            // Second array -> middle
            middle = this.getMiddleArray(currentPage, totalPages);
            // Third array -> end
            end = this.getEndArray(currentPage, totalPages);
            pages = __spread(start, middle, end);
            return pages;
        };
        /**
         * @param {?} currentPage
         * @param {?} totalPages
         * @return {?}
         */
        NxPaginationUtils.prototype.getMiddleArray = /**
         * @param {?} currentPage
         * @param {?} totalPages
         * @return {?}
         */
        function (currentPage, totalPages) {
            /** @type {?} */
            var pageNumber = currentPage < 6 ? 4 : currentPage - 1;
            /** @type {?} */
            var middle = [];
            while (middle.length < 3 &&
                pageNumber >= 2 &&
                pageNumber <= totalPages - 3 &&
                (pageNumber <= currentPage + 1 && pageNumber >= currentPage - 1)) {
                middle.push(this.createPaginationItem(pageNumber, pageNumber));
                pageNumber++;
            }
            return middle;
        };
        /**
         * @param {?} currentPage
         * @param {?} totalPages
         * @return {?}
         */
        NxPaginationUtils.prototype.getEndArray = /**
         * @param {?} currentPage
         * @param {?} totalPages
         * @return {?}
         */
        function (currentPage, totalPages) {
            /** @type {?} */
            var end = [];
            /** @type {?} */
            var currentItemToShow = totalPages <= 3 ? totalPages + 1 :
                totalPages <= 6 ? totalPages - (totalPages - 4) : totalPages - 2;
            /** @type {?} */
            var showEllipsis = currentPage < totalPages - 4;
            while (currentItemToShow <= totalPages) {
                /** @type {?} */
                var endItem = end.length === 0 && showEllipsis ?
                    this.createPaginationItem(this._elipsisText, currentItemToShow, true) :
                    this.createPaginationItem(currentItemToShow, currentItemToShow, true);
                end.push(endItem);
                currentItemToShow++;
            }
            return end;
        };
        /**
         * @param {?} currentPage
         * @param {?} totalPages
         * @return {?}
         */
        NxPaginationUtils.prototype.getStartArray = /**
         * @param {?} currentPage
         * @param {?} totalPages
         * @return {?}
         */
        function (currentPage, totalPages) {
            /** @type {?} */
            var counterPages = 0;
            /** @type {?} */
            var start = [];
            /** @type {?} */
            var maxSizeArray = 3;
            while (counterPages < maxSizeArray && counterPages < totalPages) {
                /** @type {?} */
                var startItem = counterPages === 2 && currentPage > 5 ?
                    this.createPaginationItem(this._elipsisText, counterPages, true) :
                    this.createPaginationItem(counterPages + 1, counterPages + 1, true);
                start.push(startItem);
                counterPages++;
            }
            return start;
        };
        /**
         * @param {?} currentPage
         * @param {?} totalPages
         * @return {?}
         */
        NxPaginationUtils.prototype.getMobilePages = /**
         * @param {?} currentPage
         * @param {?} totalPages
         * @return {?}
         */
        function (currentPage, totalPages) {
            var _this = this;
            // if we have less pages than the number we want to display take all
            if (totalPages < this._pagesMobile) {
                return Array.from(Array(totalPages).keys()).map((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return _this.createPaginationItem(item + 1, item + 1); }));
            }
            switch (currentPage) {
                // first page active
                case 1:
                    return [1, 2, 3].map((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) { return _this.createPaginationItem(item, item); }));
                // last page active
                case totalPages:
                    return [totalPages - 2, totalPages - 1, totalPages].map((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) { return _this.createPaginationItem(item, item); }));
                // any other page active
                default:
                    return [currentPage - 1, currentPage, currentPage + 1].map((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) { return _this.createPaginationItem(item, item); }));
            }
        };
        /**
         * @private
         * @param {?} label
         * @param {?} value
         * @param {?=} classExpanded
         * @return {?}
         */
        NxPaginationUtils.prototype.createPaginationItem = /**
         * @private
         * @param {?} label
         * @param {?} value
         * @param {?=} classExpanded
         * @return {?}
         */
        function (label, value, classExpanded) {
            return { label: label, value: value, class: classExpanded ? this._classExpanded : '' };
        };
        NxPaginationUtils.decorators = [
            { type: core.Injectable }
        ];
        return NxPaginationUtils;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NxPaginationUtils.prototype._pagesMobile;
        /**
         * @type {?}
         * @private
         */
        NxPaginationUtils.prototype._elipsisText;
        /**
         * @type {?}
         * @private
         */
        NxPaginationUtils.prototype._classExpanded;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: pagination.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docs-private
     * @record
     */
    function Page() { }
    if (false) {
        /** @type {?} */
        Page.prototype.label;
        /** @type {?} */
        Page.prototype.value;
        /** @type {?} */
        Page.prototype.class;
    }
    var NxPaginationComponent = /** @class */ (function () {
        function NxPaginationComponent(paginationTexts, paginationUtilsService, _changeDetectorRef) {
            this.paginationUtilsService = paginationUtilsService;
            this._changeDetectorRef = _changeDetectorRef;
            this._type = 'simple';
            /**
             * \@docs-private
             */
            this.totalNumberPages = 0;
            /**
             * An event emitted when the previous page button is clicked.
             */
            this.nxGoPrev = new core.EventEmitter();
            /**
             * An event emitted when the next page button is clicked
             */
            this.nxGoNext = new core.EventEmitter();
            /**
             * An event emitted when a page number is clicked.
             * Provides the number of the page as parameter.
             */
            this.nxGoPage = new core.EventEmitter();
            this.paginationTexts = paginationTexts || DefaultPaginationTexts;
        }
        Object.defineProperty(NxPaginationComponent.prototype, "page", {
            get: /**
             * @return {?}
             */
            function () { return this._page; },
            /** Sets the current page. */
            set: /**
             * Sets the current page.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._page = value;
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxPaginationComponent.prototype, "count", {
            get: /**
             * @return {?}
             */
            function () { return this._count; },
            /** Number of total items over all pages. */
            set: /**
             * Number of total items over all pages.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._count = value;
                this.totalNumberPages = this.calculateTotalPages();
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxPaginationComponent.prototype, "perPage", {
            get: /**
             * @return {?}
             */
            function () { return this._perPage; },
            /** Sets the number of items you want to show per page. */
            set: /**
             * Sets the number of items you want to show per page.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._perPage = value;
                this.totalNumberPages = this.calculateTotalPages();
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxPaginationComponent.prototype, "type", {
            get: /**
             * @return {?}
             */
            function () { return this._type; },
            /**
             * Determines the type of pagination.
             *
             * Values: simple | advanced, default: simple.
             */
            set: /**
             * Determines the type of pagination.
             *
             * Values: simple | advanced, default: simple.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._type = value;
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NxPaginationComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.totalNumberPages = this.calculateTotalPages();
        };
        /**
         * @return {?}
         */
        NxPaginationComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            if (this.type === 'advanced' && (!this.paginationTexts.last || !this.paginationTexts.first)) {
                console.warn('Please define aria labels for the last and first arrows.');
            }
        };
        /** Returns the number of the first page. */
        /**
         * Returns the number of the first page.
         * @return {?}
         */
        NxPaginationComponent.prototype.getMin = /**
         * Returns the number of the first page.
         * @return {?}
         */
        function () {
            return this.totalNumberPages > 0 ? 1 : 0;
        };
        /** Returns the number of the last page. */
        /**
         * Returns the number of the last page.
         * @return {?}
         */
        NxPaginationComponent.prototype.getMax = /**
         * Returns the number of the last page.
         * @return {?}
         */
        function () {
            /** @type {?} */
            var max = this._perPage * this._page;
            if (max > this._count) {
                max = this._count;
            }
            return max;
        };
        /** Returns the total number of pages */
        /**
         * Returns the total number of pages
         * @return {?}
         */
        NxPaginationComponent.prototype.calculateTotalPages = /**
         * Returns the total number of pages
         * @return {?}
         */
        function () {
            return Math.ceil(this._count / this._perPage) || 0;
        };
        /** Directs to the page with number n. */
        /**
         * Directs to the page with number n.
         * @param {?} n
         * @return {?}
         */
        NxPaginationComponent.prototype.onPage = /**
         * Directs to the page with number n.
         * @param {?} n
         * @return {?}
         */
        function (n) {
            this.nxGoPage.emit(n);
        };
        /** Directs to the previous page. */
        /**
         * Directs to the previous page.
         * @return {?}
         */
        NxPaginationComponent.prototype.onPrev = /**
         * Directs to the previous page.
         * @return {?}
         */
        function () {
            if (!this._isPaginationPreviousDisabled()) {
                this.nxGoPrev.emit();
            }
        };
        /** Directs to the next page. */
        /**
         * Directs to the next page.
         * @return {?}
         */
        NxPaginationComponent.prototype.onNext = /**
         * Directs to the next page.
         * @return {?}
         */
        function () {
            if (!this._isPaginationNextDisabled()) {
                this.nxGoNext.emit();
            }
        };
        /** Directs to the first page. */
        /**
         * Directs to the first page.
         * @return {?}
         */
        NxPaginationComponent.prototype.onFirst = /**
         * Directs to the first page.
         * @return {?}
         */
        function () {
            if (!this._isPaginationPreviousDisabled()) {
                this.onPage(1);
            }
        };
        /** Directs to the last page. */
        /**
         * Directs to the last page.
         * @return {?}
         */
        NxPaginationComponent.prototype.onLast = /**
         * Directs to the last page.
         * @return {?}
         */
        function () {
            if (!this._isPaginationNextDisabled()) {
                this.onPage(this.totalNumberPages);
            }
        };
        /** Returns if the current page is the last page. */
        /**
         * Returns if the current page is the last page.
         * @return {?}
         */
        NxPaginationComponent.prototype.lastPage = /**
         * Returns if the current page is the last page.
         * @return {?}
         */
        function () {
            return this._perPage * this._page >= this._count;
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxPaginationComponent.prototype.getPages = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this.paginationUtilsService.getPages(this._page, this.totalNumberPages);
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxPaginationComponent.prototype.getMobilePages = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this.paginationUtilsService.getMobilePages(this._page, this.totalNumberPages);
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} page
         * @return {?}
         */
        NxPaginationComponent.prototype.getPaginationItemClasses = /**
         * \@docs-private
         * @param {?} page
         * @return {?}
         */
        function (page) {
            /** @type {?} */
            var classes = {
                'is-ellipsis': page.label === '...',
                'nx-pagination__item--expanded-view': page.class === 'expanded-view'
            };
            return classes;
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} page
         * @return {?}
         */
        NxPaginationComponent.prototype.getPaginationNumberClasses = /**
         * \@docs-private
         * @param {?} page
         * @return {?}
         */
        function (page) {
            /** @type {?} */
            var classes = {
                'is-active': page.value === this.page,
                'nx-pagination__ellipsis': page.label === '...',
                'nx-pagination__link': page.label !== '...'
            };
            return classes;
        };
        /** Returns true, if `nxCount` is greater than 0, else false. */
        /**
         * Returns true, if `nxCount` is greater than 0, else false.
         * @return {?}
         */
        NxPaginationComponent.prototype.isPaginationVisible = /**
         * Returns true, if `nxCount` is greater than 0, else false.
         * @return {?}
         */
        function () {
            return this.count > 0;
        };
        /** Returns true, if `nxCount` is greater than 0 and the type of pagination is 'simple', else false. */
        /**
         * Returns true, if `nxCount` is greater than 0 and the type of pagination is 'simple', else false.
         * @return {?}
         */
        NxPaginationComponent.prototype.isPaginationCompactVisible = /**
         * Returns true, if `nxCount` is greater than 0 and the type of pagination is 'simple', else false.
         * @return {?}
         */
        function () {
            return this.type.includes('simple') && this.count > 0;
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxPaginationComponent.prototype.isPaginationContainerVisible = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this.type.includes('advanced');
        };
        /**
         * @return {?}
         */
        NxPaginationComponent.prototype._isPaginationPreviousDisabled = /**
         * @return {?}
         */
        function () {
            return this.page === this.getMin();
        };
        /**
         * @return {?}
         */
        NxPaginationComponent.prototype._isPaginationNextDisabled = /**
         * @return {?}
         */
        function () {
            return this.page === this.totalNumberPages;
        };
        NxPaginationComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-pagination',
                        template: "<nav *ngIf=\"isPaginationVisible()\"  aria-label=\"Page navigation\" class=\"nx-pagination\" >\n  <ul *ngIf=\"isPaginationContainerVisible()\"  [attr.aria-label]=\"paginationTexts.ariaLabel\" class=\"nx-pagination__container\">\n    <li class=\"nx-pagination__item\">\n      <button\n        [attr.aria-label]=\"paginationTexts.first\"\n        [class.is-disabled]=\"_isPaginationPreviousDisabled()\"\n        [tabindex]=\"_isPaginationPreviousDisabled() ? -1 : 0\"\n        class=\"nx-pagination__link nx-pagination__link--first\"\n        (click)=\"onFirst()\">\n        <nx-icon class=\"nx-pagination__arrow\" name=\"arrow-first\"></nx-icon>\n      </button>\n    </li>\n    <li class=\"nx-pagination__item nx-pagination__item-previous\">\n      <button\n        [attr.aria-label]=\"paginationTexts.previous\"\n        [class.is-disabled]=\"_isPaginationPreviousDisabled()\"\n        [tabindex]=\"_isPaginationPreviousDisabled() ? -1 : 0\"\n        class=\"nx-pagination__link nx-pagination__link--previous\"\n        (click)=\"onPrev()\">\n        <nx-icon class=\"nx-pagination__arrow\" name=\"arrow-left\"></nx-icon>\n      </button>\n    </li>\n    <li *ngFor=\"let pageNum of getPages()\" class=\"nx-pagination__item nx-pagination__item--desktop\" [ngClass]=\"getPaginationItemClasses(pageNum)\">\n      <button class=\"nx-pagination--number\"\n        *ngIf=\"pageNum.label !== '...'\"\n        (click)=\"onPage(pageNum.value)\"\n        [attr.aria-current]=\"(pageNum.value === page) ? 'page' : ''\"\n        [ngClass]=\"getPaginationNumberClasses(pageNum)\">\n        {{ pageNum.label }}\n      </button>\n      <span *ngIf=\"pageNum.label === '...'\">\n        {{ pageNum.label }}\n      </span>\n    </li>\n    <li *ngFor=\"let pageNum of getMobilePages()\" class=\"nx-pagination__item nx-pagination__item--mobile\" [ngClass]=\"getPaginationItemClasses(pageNum)\">\n      <button class=\"nx-pagination--number\"\n        (click)=\"onPage(pageNum.value)\"\n        [attr.aria-current]=\"(pageNum.value === page) ? 'page' : ''\"\n        [ngClass]=\"getPaginationNumberClasses(pageNum)\">\n        {{ pageNum.label }}\n      </button>\n    </li>\n    <li class=\"nx-pagination__item nx-pagination__item-next\">\n      <button\n        [attr.aria-label]=\"paginationTexts.next\"\n        [class.is-disabled]=\"_isPaginationNextDisabled()\"\n        [tabindex]=\"_isPaginationNextDisabled() ? -1 : 0\"\n        class=\"nx-pagination__link nx-pagination__link--next\"\n        (click)=\"onNext()\">\n        <nx-icon class=\"nx-pagination__arrow\" name=\"arrow-right\"></nx-icon>\n      </button>\n    </li>\n    <li class=\"nx-pagination__item\">\n      <button\n        [attr.aria-label]=\"paginationTexts.last\"\n        [class.is-disabled]=\"_isPaginationNextDisabled()\"\n        [tabindex]=\"_isPaginationNextDisabled() ? -1 : 0\"\n        class=\"nx-pagination__link nx-pagination__link--last\"\n        (click)=\"onLast()\">\n        <nx-icon class=\"nx-pagination__arrow\" name=\"arrow-last\"></nx-icon>\n      </button>\n    </li>\n  </ul>\n</nav>\n<nav *ngIf=\"isPaginationCompactVisible()\" [attr.aria-label]=\"paginationTexts.ariaLabel\" class=\"nx-pagination-compact\" >\n  <button [attr.aria-label]=\"paginationTexts.previous\"\n    class=\"nx-pagination-compact__previous\"\n    [class.is-disabled]=\"_isPaginationPreviousDisabled()\"\n    [tabindex]=\"_isPaginationPreviousDisabled() ? -1 : 0\"\n\n    (click)=\"onPrev()\">\n    <nx-icon class=\"nx-pagination__arrow\" name=\"arrow-left\"></nx-icon>\n    <span class=\"nx-pagination-compact__direction-label\">\n      {{ paginationTexts.previous }}\n    </span>\n  </button>\n  <div class=\"nx-pagination-compact__display\">\n      <span class=\"nx-pagination-compact__current-page\">{{ page }}</span>\n      <span class=\"nx-pagination-compact__page-separator\"> {{ paginationTexts.ofLabel }} </span>\n      <span class=\"nx-pagination-compact__total-pages\">{{ totalNumberPages }}</span>\n  </div>\n  <button\n    class=\"nx-pagination-compact__next\"\n    [class.is-disabled]=\"_isPaginationNextDisabled()\"\n    [tabindex]=\"_isPaginationNextDisabled() ? -1 : 0\"\n    [attr.aria-label]=\"paginationTexts.next\"\n    (click)=\"onNext()\">\n    <span class=\"nx-pagination-compact__direction-label\"> {{ paginationTexts.next }} </span>\n    <nx-icon class=\"nx-pagination__arrow\" name=\"arrow-right\"></nx-icon>\n  </button>\n</nav>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: [":host button:focus{outline:0}:host button::-moz-focus-inner{border:0}.nx-pagination__container{display:flex;font-size:16px;font-size:var(--pagination-font-size,16px);line-height:24px;line-height:var(--pagination-line-height,24px);font-weight:400;font-weight:var(--pagination-font-weight,400);letter-spacing:0;letter-spacing:var(--pagination-letter-spacing,0);margin:8px 0;padding:0}@media (min-width:704px){.nx-pagination__container{margin:8px 0 40px}}.nx-pagination__item{margin:0 16px;list-style:none;font-weight:600;font-weight:var(--pagination-item-font-weight,600)}.nx-pagination__item:first-child,.nx-pagination__item:last-child{margin:0}.nx-pagination__item.is-ellipsis{color:#414141;color:var(--pagination-text-color,#414141)}.nx-pagination__item--expanded-view{display:block}.nx-pagination__link{color:#006192;color:var(--pagination-link-color,#006192);padding:0;text-decoration:none;background-color:transparent;border:0;cursor:pointer}.nx-pagination__link.is-active{color:#414141;color:var(--pagination-text-color,#414141);font-weight:700;cursor:default}nx-icon.nx-pagination__arrow{font-size:24px;font-size:var(--pagination-icon-size,24px)}.nx-pagination-compact{display:flex;font-size:16px;font-size:var(--pagination-font-size,16px);line-height:24px;line-height:var(--pagination-line-height,24px);font-weight:400;font-weight:var(--pagination-font-weight,400);letter-spacing:0;letter-spacing:var(--pagination-letter-spacing,0);margin:16px 0;padding:0}@media (min-width:704px){.nx-pagination-compact{margin:40px 0}}.nx-pagination-compact__display{color:#414141;color:var(--pagination-text-color,#414141);display:flex}.nx-pagination-compact__current-page{font-weight:700;margin-right:8px}.nx-pagination-compact__total-pages{margin-left:8px}.nx-pagination-compact__next,.nx-pagination-compact__previous,.nx-pagination__arrow-first,.nx-pagination__arrow-last{color:#006192;color:var(--pagination-link-color,#006192);font-weight:600;font-weight:var(--pagination-icon-font-weight,600);text-decoration:none;text-transform:uppercase;display:flex;align-items:center;padding:0;background-color:transparent;cursor:pointer;border:0}.nx-pagination-compact__previous{margin-right:32px}.nx-pagination-compact__next{margin-left:32px}.nx-pagination-compact__direction-label{font-size:16px;font-size:var(--pagination-compact-direction-font-size,16px);line-height:24px;line-height:var(--pagination-compact-direction-line-height,24px);font-weight:600;font-weight:var(--pagination-compact-direction-font-weight,600);letter-spacing:1px;letter-spacing:var(--pagination-compact-direction-letter-spacing,1px)}.nx-pagination-compact__direction-label:first-child{margin-right:8px}.nx-pagination-compact__direction-label:last-child{margin-left:8px}.nx-pagination-compact__next.is-disabled,.nx-pagination-compact__previous.is-disabled,.nx-pagination__link.is-disabled{color:rgba(0,97,146,.4);color:var(--pagination-link-disabled-color,rgba(0,97,146,.4));cursor:not-allowed}:host-context([data-whatinput=keyboard]) .nx-pagination--number:focus,:host-context([data-whatinput=keyboard]) .nx-pagination-compact__next:focus,:host-context([data-whatinput=keyboard]) .nx-pagination-compact__previous:focus,:host-context([data-whatinput=keyboard]) .nx-pagination__link:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6);border-radius:4px}@media screen and (-ms-high-contrast:active){.nx-pagination__link.is-active{border-bottom:4px solid windowText}.nx-pagination-compact__next.is-disabled,.nx-pagination-compact__previous.is-disabled,.nx-pagination__link.is-disabled{color:GrayText}:host-context([data-whatinput=keyboard]) .nx-pagination--number:focus,:host-context([data-whatinput=keyboard]) .nx-pagination-compact__next:focus,:host-context([data-whatinput=keyboard]) .nx-pagination-compact__previous:focus,:host-context([data-whatinput=keyboard]) .nx-pagination__link:focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}}.nx-pagination__link--first,.nx-pagination__link--last,.nx-pagination__link--next,.nx-pagination__link--previous{display:flex;align-items:center}.nx-pagination__item-next{margin-right:8px}.nx-pagination__item-previous{margin-left:8px}.nx-pagination-compact__direction-label,.nx-pagination__item--desktop,.nx-pagination__link--first,.nx-pagination__link--last{display:block}.nx-pagination__item--mobile{display:none}@media (max-width:703px){.nx-pagination-compact__direction-label,.nx-pagination__item--desktop,.nx-pagination__link--first,.nx-pagination__link--last{display:none}.nx-pagination__item--mobile{display:block}}"]
                    }] }
        ];
        /** @nocollapse */
        NxPaginationComponent.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [NX_PAGINATION_TEXTS,] }] },
            { type: NxPaginationUtils },
            { type: core.ChangeDetectorRef }
        ]; };
        NxPaginationComponent.propDecorators = {
            page: [{ type: core.Input, args: ['nxPage',] }],
            count: [{ type: core.Input, args: ['nxCount',] }],
            perPage: [{ type: core.Input, args: ['nxPerPage',] }],
            type: [{ type: core.Input, args: ['nxType',] }],
            nxGoPrev: [{ type: core.Output }],
            nxGoNext: [{ type: core.Output }],
            nxGoPage: [{ type: core.Output }]
        };
        return NxPaginationComponent;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NxPaginationComponent.prototype._page;
        /**
         * @type {?}
         * @private
         */
        NxPaginationComponent.prototype._count;
        /**
         * @type {?}
         * @private
         */
        NxPaginationComponent.prototype._perPage;
        /**
         * @type {?}
         * @private
         */
        NxPaginationComponent.prototype._type;
        /**
         * \@docs-private
         * @type {?}
         */
        NxPaginationComponent.prototype.paginationTexts;
        /**
         * \@docs-private
         * @type {?}
         */
        NxPaginationComponent.prototype.totalNumberPages;
        /**
         * An event emitted when the previous page button is clicked.
         * @type {?}
         */
        NxPaginationComponent.prototype.nxGoPrev;
        /**
         * An event emitted when the next page button is clicked
         * @type {?}
         */
        NxPaginationComponent.prototype.nxGoNext;
        /**
         * An event emitted when a page number is clicked.
         * Provides the number of the page as parameter.
         * @type {?}
         */
        NxPaginationComponent.prototype.nxGoPage;
        /**
         * @type {?}
         * @private
         */
        NxPaginationComponent.prototype.paginationUtilsService;
        /**
         * @type {?}
         * @private
         */
        NxPaginationComponent.prototype._changeDetectorRef;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: pagination.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxPaginationModule = /** @class */ (function () {
        function NxPaginationModule() {
        }
        NxPaginationModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule, icon.NxIconModule
                        ],
                        declarations: [
                            NxPaginationComponent
                        ],
                        exports: [
                            NxPaginationComponent
                        ],
                        providers: [
                            NxPaginationUtils
                        ]
                    },] }
        ];
        return NxPaginationModule;
    }());

    exports.DefaultPaginationTexts = DefaultPaginationTexts;
    exports.NX_PAGINATION_TEXTS = NX_PAGINATION_TEXTS;
    exports.NxPaginationComponent = NxPaginationComponent;
    exports.NxPaginationModule = NxPaginationModule;
    exports.NxPaginationUtils = NxPaginationUtils;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=allianz-ngx-ndbx-pagination.umd.js.map
