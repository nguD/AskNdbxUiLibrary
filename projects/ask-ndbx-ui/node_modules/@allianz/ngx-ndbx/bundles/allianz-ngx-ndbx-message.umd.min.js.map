{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@allianz/ngx-ndbx/message/message/message.component.ts","ng://@allianz/ngx-ndbx/message/message-toast/message-toast-animations.ts","ng://@allianz/ngx-ndbx/message/message-toast/message-toast-config.ts","ng://@allianz/ngx-ndbx/message/message-toast/message-toast.component.ts","ng://@allianz/ngx-ndbx/message/message.module.ts","ng://@allianz/ngx-ndbx/message/message-toast/message-toast-ref.ts","ng://@allianz/ngx-ndbx/message/message-toast/message-toast.service.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","ICONS","NxMessageComponent","_changeDetectorRef","_context","_showIcon","_closable","_closeButtonLabel","closeEvent","EventEmitter","defineProperty","value","_icon","getIconName","markForCheck","coerceBooleanProperty","newValue","_emitCloseEvent","emit","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","exportAs","host","[class.context-info]","[class.context-error]","[class.context-success]","[class.context-warning]","[class.nx-message--closable]","ChangeDetectorRef","Input","Output","messageToastAnimations","toastState","trigger","state","style","opacity","transform","transition","animate","politeness","announcementMessage","duration","context","data","NxMessageToastComponent","_super","_ngZone","config","_this","_destroyed","_onExit","Subject","_onEnter","_animationState","_setAriaLabels","__","constructor","create","tslib_1.__extends","attachComponentPortal","portal","_assertNotAttached","_portalOutlet","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter_1","run","next","complete","enter","detectChanges","exit","ngOnDestroy","onMicrotaskEmpty","asObservable","pipe","take","subscribe","hasAttached","Error","_getIconName","_role","[attr.role]","[@state]","(@state.done)","animations","NgZone","NxMessageToastConfig","NxMessageToastData","ViewChild","CdkPortalOutlet","static","BasePortalOutlet","NxMessageModule","NgModule","imports","CommonModule","NxIconModule","OverlayModule","PortalModule","declarations","exports","entryComponents","MAX_TIMEOUT","Math","pow","NxMessageToastRef","toastInstance","_overlayRef","_afterDismissed","_afterOpened","_finishDismiss","dismiss","closed","clearTimeout","_durationTimeoutId","_dismissAfter","setTimeout","min","_open","dispose","afterDismissed","afterOpened","NX_MESSAGE_TOAST_DEFAULT_CONFIG","InjectionToken","NxMessageToastService","_overlay","_injector","_live","_parentMessageToastService","_defaultConfig","_toastRefAtThisLevel","parent","_oldToastMessageRef","open","text","currentConfig","overlayRef","_createOverlay","injector","_createInjector","componentPortal","ComponentPortal","undefined","componentRef","attach","toastRef","instance","_animateToast","openFromTemplate","container","_attachToastComponent","TemplatePortal","containerPortal","containerRef","overlayConfig","OverlayConfig","positionStrategy","position","global","bottom","centerHorizontally","clear","announce","tokens","WeakMap","set","PortalInjector","Injectable","providedIn","Overlay","Injector","LiveAnnouncer","decorators","type","Optional","SkipSelf","Inject"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input, ChangeDetectorRef, Output, EventEmitter } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** The contextual type of a message. */\nexport type CONTEXT = 'regular' | 'info' | 'error' | 'success' | 'warning';\n\nconst ICONS = {\n  info: 'info-circle',\n  error: 'exclamation-triangle',\n  success: 'check-circle',\n  warning: 'exclamation-circle'\n};\n\n@Component({\n  selector: 'nx-message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'nxMessage',\n  host: {\n    '[class.context-info]': 'context === \"info\"',\n    '[class.context-error]': 'context === \"error\"',\n    '[class.context-success]': 'context === \"success\"',\n    '[class.context-warning]': 'context === \"warning\"',\n    '[class.nx-message--closable]': 'closable'\n\n  }\n})\nexport class NxMessageComponent {\n\n  private _context: CONTEXT = 'regular';\n\n  /**\n   * Sets the context of the message.\n   * The message box will color accordingly. Default: 'regular' */\n  @Input('nxContext')\n  set context(value: CONTEXT) {\n    if (value !== this._context) {\n      this._context = value;\n      this._icon = this.getIconName();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get context(): CONTEXT {\n    return this._context;\n  }\n\n  private _showIcon: boolean = false;\n\n  /**\n   * Whether an icon that belongs to the context of the message should be displayed.\n   *\n   * **Important:** The `showIcon` attribute should always be set to `true` due to deprecation.\n   *\n   * @deprecated The `showIcon` attribute should be always true in future. Messages without an icon are deprecated.\n   * @deletion-target 9.0.0\n   * */\n  @Input()\n  set showIcon(value: boolean) {\n    this._showIcon = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get showIcon(): boolean {\n    return this._showIcon;\n  }\n\n  private _closable: boolean = false;\n\n  /** Whether a message should have a close icon in order to be dismissed. */\n  @Input()\n  set closable(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._closable) {\n      this._closable = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get closable(): boolean {\n    return this._closable;\n  }\n\n  private _icon: string;\n\n  /** @docs-private */\n  get icon(): string {\n    return this._icon;\n  }\n\n  private _closeButtonLabel: string = 'Close dialog';\n\n  /** Sets the label of the close button of the message. */\n  @Input()\n  set closeButtonLabel(value: string) {\n    if (value !== this._closeButtonLabel) {\n      this._closeButtonLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get closeButtonLabel(): string {\n    return this._closeButtonLabel;\n  }\n\n  /** Event emitted when the close icon of the message has been clicked. */\n  @Output('close') closeEvent = new EventEmitter<void>();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  /** @docs-private */\n  _emitCloseEvent() {\n    this.closeEvent.emit();\n  }\n\n  /** @docs-private */\n  getIconName(): string {\n    if (this._context === 'info') {\n      return ICONS.info;\n    } else if (this._context === 'error') {\n      return ICONS.error;\n    } else if (this._context === 'success') {\n      return ICONS.success;\n    } else if (this._context === 'warning') {\n      return ICONS.warning;\n    }\n    return '';\n  }\n}\n","import {\n  AnimationTriggerMetadata,\n  trigger,\n  state,\n  transition,\n  style,\n  animate,\n} from '@angular/animations';\n\n/**\n * Animations used by the Message Toast.\n * @docs-private\n */\nexport const messageToastAnimations: {\n   toastState: AnimationTriggerMetadata\n} = {\n  toastState: trigger('state', [\n    state('initial, void, hidden', style({ opacity: 0, transform: 'translateY(100%)' })),\n    state('visible', style({ opacity: 1 })),\n    transition('* => visible', animate('300ms cubic-bezier(0, 0, 0.2, 1)',\n      style({ opacity: 1, transform: 'translateY(0)' })\n    )),\n    transition('* => hidden', animate('300ms cubic-bezier(0, 0, 0.2, 1)',\n      style({ opacity: 0, transform: 'translateY(200%)' }))),\n  ])\n};\n\n/** @docs-private */\nexport type NxMessageToastAnimationState = 'void' | 'visible' | 'hidden';\n","\nimport { AriaLivePoliteness } from '@angular/cdk/a11y';\n\n/** The contextual type of a message. */\nexport type NxMessageToastContext = 'info' | 'success';\n\n/**\n * Configuration used when opening a message toast.\n */\nexport class NxMessageToastConfig {\n  /** The politeness level for the LiveAnnouncer announcement.\n   *\n   *  Default value: 'polite'.\n   */\n  politeness?: AriaLivePoliteness = 'polite';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a toast message without a custom\n   * component or template, the announcement message will default to the specified message.\n   *\n   * Default value: ''.\n   */\n  announcementMessage?: string = '';\n\n  /** The length of time in milliseconds to wait before automatically dismissing the message toast.\n   *\n   * Default value: 3000.\n   */\n  duration?: number = 3000;\n\n  /** Context of the message toast.\n   *\n   * Default value: 'info'. */\n  context?: NxMessageToastContext = 'info';\n}\n\n/**\n * @docs-private\n * Needed so that the user text data can be injected in the message toastcomponent\n */\nexport class NxMessageToastData {\n  constructor(public data: string) { }\n}\n","import { Component, OnDestroy, ViewChild, NgZone, ChangeDetectorRef, ComponentRef, EmbeddedViewRef } from '@angular/core';\nimport { messageToastAnimations } from './message-toast-animations';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { NxMessageToastConfig, NxMessageToastData } from './message-toast-config';\nimport { take } from 'rxjs/operators';\nimport { AnimationEvent } from '@angular/animations';\n\nconst ICONS = {\n  info: 'info-circle',\n  success: 'check-circle',\n};\n\n/**\n * Internal component that wraps user-provided message toastcontent.\n * @docs-private\n */\n@Component({\n  selector: 'nx-message-toast',\n  templateUrl: './message-toast.component.html',\n  styleUrls: ['./message-toast.component.scss'],\n  host: {\n    '[attr.role]': '_role',\n    '[class.context-info]': '_context === \"info\"',\n    '[class.context-success]': '_context === \"success\"',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [messageToastAnimations.toastState]\n})\nexport class NxMessageToastComponent extends BasePortalOutlet implements OnDestroy {\n\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the message toastcontent will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the message toasthas exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the message toasthas finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the message toastanimations. */\n  _animationState = 'void';\n\n  /** ARIA role for the message toastcontainer. */\n  _role: 'alert' | 'status' | null;\n\n  _context;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The message toastconfiguration. */\n    public config: NxMessageToastConfig,\n    /** Injected data into the notifciation. */\n    public data?: NxMessageToastData\n  ) {\n    super();\n\n    this._context = this.config.context;\n    this._setAriaLabels();\n  }\n\n  /** Attach a component portal as content to this message toastcontainer. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this message toastcontainer. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the notification. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of message toastentrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the message toastexiting from view. */\n  exit() {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple notifications are opened in quick succession (e.g. two consecutive calls to\n    // `NxMessageToastService.open`).\n    this._animationState = 'hidden';\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach message toastcontent after content is already attached');\n    }\n  }\n\n  _getIconName(): string {\n    return this._context === 'success' ? ICONS.success : ICONS.info;\n  }\n\n  _setAriaLabels() {\n     // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (this.config.politeness === 'assertive' && !this.config.announcementMessage) {\n      this._role = 'alert';\n    } else if (this.config.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxMessageComponent } from './message/message.component';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { NxMessageToastComponent } from './message-toast/message-toast.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxIconModule,\n    OverlayModule,\n    PortalModule\n  ],\n  declarations: [\n    NxMessageComponent,\n    NxMessageToastComponent\n  ],\n  exports: [\n    NxMessageComponent\n  ],\n  entryComponents: [\n    NxMessageToastComponent\n  ]\n})\nexport class NxMessageModule {\n}\n","import { OverlayRef } from '@angular/cdk/overlay';\nimport { Subject, Observable } from 'rxjs';\nimport { NxMessageToastComponent } from './message-toast.component';\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n\nexport class NxMessageToastRef {\n\n  /**\n   * The instance of the component making up the content of the message toast.\n   * @docs-private\n   */\n  toastInstance: NxMessageToastComponent;\n\n  /** Subject for notifying the user that the message toasthas been dismissed. */\n  private readonly _afterDismissed = new Subject<any>();\n\n  /** Subject for notifying the user that the message toasthas opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the message toastis\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: any;\n\n  constructor(toastInstance: NxMessageToastComponent,\n              private _overlayRef: OverlayRef) {\n    this.toastInstance = toastInstance;\n    toastInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the message toast. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.toastInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Dismisses the message toastafter some duration */\n  _dismissAfter(duration: number): void {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n\n  /** Marks the message toastas opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    this._afterDismissed.next();\n    this._afterDismissed.complete();\n  }\n\n  /** Gets an observable that is notified when the message toastis finished closing. */\n  afterDismissed(): Observable<any> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the message toasthas opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.toastInstance._onEnter;\n  }\n}\n","import { Injectable, Injector, ComponentRef, TemplateRef, InjectionToken, Inject, Optional, SkipSelf, OnDestroy } from '@angular/core';\nimport { Overlay, OverlayRef, OverlayConfig } from '@angular/cdk/overlay';\nimport { ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { NxMessageToastComponent } from './message-toast.component';\nimport { NxMessageToastConfig, NxMessageToastData } from './message-toast-config';\nimport { NxMessageToastRef } from './message-toast-ref';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { NxMessageModule } from '../message.module';\n\n/** Injection token that can be used to specify default message toast. */\nexport const NX_MESSAGE_TOAST_DEFAULT_CONFIG =\n  new InjectionToken<NxMessageToastConfig>('NX_MESSAGE_TOAST_DEFAULT_CONFIG');\n\n/** A service for dispatching and displaying toast messages. */\n@Injectable({ providedIn: NxMessageModule })\nexport class NxMessageToastService implements OnDestroy {\n\n/**\n * Reference to the current message toast in the view *at this level* (in the Angular injector tree).\n * If there is a parent message toast service, all operations should delegate to that parent\n * via `_oldToastMessageRef`.\n */\n  private _toastRefAtThisLevel: NxMessageToastRef | null = null;\n\n  /** Reference to the currently opened message toastat *any* level. */\n  get _oldToastMessageRef(): NxMessageToastRef | null {\n    const parent = this._parentMessageToastService;\n    return parent ? parent._oldToastMessageRef : this._toastRefAtThisLevel;\n  }\n\n  set _oldToastMessageRef(value: NxMessageToastRef | null) {\n    if (this._parentMessageToastService) {\n      this._parentMessageToastService._oldToastMessageRef = value;\n    } else {\n      this._toastRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n    private _overlay: Overlay,\n    private _injector: Injector,\n    private _live: LiveAnnouncer,\n    @Optional() @SkipSelf() private _parentMessageToastService: NxMessageToastService,\n    @Optional() @Inject(NX_MESSAGE_TOAST_DEFAULT_CONFIG) private _defaultConfig: NxMessageToastConfig) { }\n\n  /** Creates and dispatches a message toastwith a custom text.\n   *\n   * @param text Text to be used for the message toast.\n   * @param config Extra configuration for the message toast.\n  */\n  open(text: string, config?: NxMessageToastConfig): NxMessageToastRef {\n    const currentConfig = { ...new NxMessageToastConfig(), ...this._defaultConfig, ...config };\n    const overlayRef = this._createOverlay(currentConfig);\n    const injector = this._createInjector(currentConfig, new NxMessageToastData(text), this._injector);\n\n    const componentPortal = new ComponentPortal(NxMessageToastComponent, undefined, injector);\n    const componentRef = overlayRef.attach(componentPortal);\n    const toastRef = new NxMessageToastRef(componentRef.instance, overlayRef);\n\n    this._animateToast(toastRef, currentConfig);\n    this._oldToastMessageRef = toastRef;\n    return this._oldToastMessageRef;\n  }\n\n  /** Creates and dispatches a message toastwith a custom template for the content.\n   *\n   * @param template Template to be used for the message toast.\n   * @param config Extra configuration for the message toast.\n  */\n  openFromTemplate(template: TemplateRef<any>, config?: NxMessageToastConfig): NxMessageToastRef {\n    const currentConfig = { ...new NxMessageToastConfig(), ...this._defaultConfig, ...config };\n    const overlayRef = this._createOverlay(currentConfig);\n    const container = this._attachToastComponent(overlayRef, currentConfig);\n    const toastRef = new NxMessageToastRef(container, overlayRef);\n    const portal = new TemplatePortal(template, null!, toastRef);\n\n    container.attachTemplatePortal(portal);\n    this._animateToast(toastRef, currentConfig);\n    this._oldToastMessageRef = toastRef;\n    return this._oldToastMessageRef;\n  }\n\n  // Attaches the message toastcontainer component to the overlay.\n  private _attachToastComponent(overlayRef: OverlayRef, config: NxMessageToastConfig): NxMessageToastComponent {\n    const injector = this._createInjector(config, null, this._injector);\n    const containerPortal = new ComponentPortal(NxMessageToastComponent, null, injector);\n    const containerRef: ComponentRef<NxMessageToastComponent> = overlayRef.attach(containerPortal);\n    containerRef.instance.config = config;\n\n    return containerRef.instance;\n  }\n\n  // Creates a new overlay and places it in the correct place.\n  private _createOverlay(config: NxMessageToastConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    const positionStrategy = this._overlay.position().global();\n\n    positionStrategy.bottom('0');\n    positionStrategy.centerHorizontally();\n    overlayConfig.positionStrategy = positionStrategy;\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /** Animates the old message toastout and the new one in. */\n  private _animateToast(toastRef: NxMessageToastRef, config: NxMessageToastConfig) {\n    // When the message toastis dismissed, clear the reference to it.\n    toastRef.afterDismissed().subscribe(() => {\n      // Clear the message toastref if it hasn't already been replaced by a newer message toast.\n      if (this._oldToastMessageRef === toastRef) {\n        this._oldToastMessageRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._oldToastMessageRef) {\n      // If a message toastis opened, dismiss it and enter the\n      // new message toastafter exit animation is complete.\n      this._oldToastMessageRef.afterDismissed().subscribe(() => {\n        toastRef.toastInstance.enter();\n    });\n      this._oldToastMessageRef.dismiss();\n\n    } else {\n      // If no message toastis in view, enter the message toast.\n      toastRef.toastInstance.enter();\n    }\n\n    // If a message toastduration is provided, set up dismiss based on after the message toastis opened.\n    if (config.duration && config.duration > 0) {\n      toastRef.afterOpened().subscribe(() => toastRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  private _createInjector(config: NxMessageToastConfig, data: NxMessageToastData, injector: Injector): PortalInjector {\n    const tokens = new WeakMap();\n    tokens.set(NxMessageToastConfig, config);\n    tokens.set(NxMessageToastData, data);\n\n    return new PortalInjector(injector, tokens);\n  }\n\n  /**\n   * Dismisses the currently visible message toast.\n   */\n  dismiss(): void {\n    if (this._oldToastMessageRef) {\n      this._oldToastMessageRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._toastRefAtThisLevel) {\n      this._toastRefAtThisLevel.dismiss();\n    }\n  }\n}\n"]}