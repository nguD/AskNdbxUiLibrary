{"version":3,"file":"allianz-ngx-ndbx-modal.umd.js","sources":["ng://@allianz/ngx-ndbx/modal/modal.service.ts","ng://@allianz/ngx-ndbx/modal/animations.ts","ng://@allianz/ngx-ndbx/modal/modal.component.ts","ng://@allianz/ngx-ndbx/modal/modal-open-on-click.directive.ts","ng://@allianz/ngx-ndbx/modal/modal.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** @docs-private */\n@Injectable()\nexport class NxModalService {\n\n  private subject = new Subject();\n  close$: Observable<any> = this.subject.asObservable();\n\n  close() {\n    this.subject.next();\n  }\n}\n","import { animate, animation, AnimationReferenceMetadata, style } from '@angular/animations';\n\nexport const fadeIn: AnimationReferenceMetadata = animation([\n    style({opacity: 0}),\n    animate('300ms', style({opacity: 1}))\n  ]);\n\nexport const fadeOut: AnimationReferenceMetadata = animation(\n  animate('300ms', style({opacity: 0}))\n);\n\nexport const scaleUp: AnimationReferenceMetadata = animation([\n    style({transform: 'scale(1)', opacity: 1}),\n    animate('250ms', style({transform: 'scale(1.3)', opacity: 0}))\n  ]);\n\nexport const scaleDown: AnimationReferenceMetadata = animation([\n    style({transform: 'scale(1.3)', opacity: 0}),\n    animate('250ms', style({transform: 'scale(1)', opacity: 1}))\n  ]);\n","import { OnDestroy, ChangeDetectionStrategy, Directive, ChangeDetectorRef } from '@angular/core';\nimport { Component, Input, OnInit, TemplateRef, Output, EventEmitter } from '@angular/core';\nimport { NxModalService } from './modal.service';\nimport { EventManager } from '@angular/platform-browser';\nimport { fadeIn, fadeOut, scaleDown, scaleUp } from './animations';\nimport { animateChild, query, transition, trigger, useAnimation } from '@angular/animations';\nimport { Subscription } from 'rxjs';\n\n/** Container for the action buttons in a modal. Has a fixed position at the bottom of the modal on scroll. */\n@Directive({\n  selector: '[nxModalActions]',\n  host: {\n    '[class.nx-modal__actions]': 'true'\n  }\n})\nexport class NxModalActionsDirective {}\n\n/** Scrollable container for the content of a modal. */\n@Directive({\n  selector: '[nxModalContent]',\n  host: {\n    '[class.nx-modal__content]': 'true'\n  }\n})\nexport class NxModalContentDirective {}\n\n@Component({\n  selector: 'nx-modal',\n  templateUrl: 'modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ './modal.component.scss' ],\n  animations: [\n    trigger('fadeInOut', [\n      transition(':enter', [\n        useAnimation(fadeIn),\n        query('@scaleUpDown', [\n          animateChild()\n        ])\n      ]),\n      transition(':leave', [\n        query('@scaleUpDown', [\n          animateChild()\n        ]),\n        useAnimation(fadeOut)\n      ])\n    ]),\n    trigger('scaleUpDown', [\n      transition(':enter', useAnimation(scaleDown)),\n      transition(':leave', useAnimation(scaleUp))\n    ])\n  ],\n  host: {\n    '[@fadeInOut]': '',\n    '[class.nx-modal--fixed-width]': 'size === \"fixed\"'\n  }\n})\n\nexport class NxModalComponent implements OnInit, OnDestroy {\n\n  private _closeButtonLabel: string = 'Close dialog';\n\n  /** Sets the 'aria-label' of the modal close button needed for accessibility.\n   *\n   * Default value is 'Close dialog'.\n   */\n  @Input()\n  set closeButtonLabel(value: string) {\n    if (value !== this._closeButtonLabel) {\n      this._closeButtonLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get closeButtonLabel(): string {\n    return this._closeButtonLabel;\n  }\n\n  /**\n   * A template reference variable pointing to the template\n   * which contains the content of the modal view.\n   */\n  @Input('nxBody') body: TemplateRef<any>;\n\n  /**\n   * Whether the modal view should close when the user hits the escape key.\n   * Default is true.\n   */\n  @Input('nxHideOnEsc') hideOnEsc: boolean = true;\n\n  /**\n   * Whether the modal view should close when the user clicks on the backdrop.\n   * Default is true.\n   */\n  @Input('nxHideOnClickOutside') hideOnClickOutside: boolean = true;\n\n  /**\n   * Whether the modal view should have a close icon in the upper right corner.\n   * Default is true.\n   */\n  @Input('nxShowCloseIcon') showCloseIcon: boolean = true;\n\n  /**\n   * Controls the width of the dialog.\n   * On `auto` the width is controlled by the content width,\n   * on `fixed` the dialog gets a fixed width of 736px if the viewport is big enough. */\n  @Input('nxSize') size: 'fixed' | 'auto';\n\n  /**\n   * An event emitted when the user clicks on the backdrop or uses the built-in close button.\n   * This event can be applied in conjunction with the custom open state handling\n   * of a modal to close it when requested by the user.\n   */\n  @Output('nxClose') closeEvent = new EventEmitter<void>();\n\n  private closeSubscription: Subscription = Subscription.EMPTY;\n  private removeEventListener: Function = undefined;\n\n  constructor(private modalService: NxModalService, private eventManager: EventManager, private _changeDetectorRef: ChangeDetectorRef) {\n  }\n\n  ngOnInit() {\n    this.closeSubscription = this.modalService.close$.subscribe(() => this.closeEvent.emit());\n\n    this.removeEventListener = this.eventManager.addGlobalEventListener('window', 'keyup.esc', () => {\n      if (this.hideOnEsc) {\n        this.modalService.close();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.removeEventListener();\n    this.closeSubscription.unsubscribe();\n  }\n\n  /** @docs-private */\n  clickOutsideModal() {\n    if (this.hideOnClickOutside) {\n      this.modalService.close();\n    }\n  }\n\n  /** @docs-private */\n  closeButtonClick() {\n    this.modalService.close();\n  }\n\n  /** @docs-private */\n  cancelClick(evt: KeyboardEvent) {\n    evt.stopPropagation();\n  }\n}\n","import { Directive, Input, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { SubscriptionLike as ISubscription } from 'rxjs';\n\nimport { NxModalService } from './modal.service';\n\n@Directive({selector: '[nxOpenModalOnClick]'})\nexport class NxOpenModalOnClickDirective implements OnInit, OnDestroy {\n\n  /** @docs-private */\n  elements: Array<any>;\n\n  private subscription: ISubscription;\n\n  constructor(private templateRef: TemplateRef<any>,\n              private viewContainer: ViewContainerRef,\n              private modalService: NxModalService) {\n  }\n\n  ngOnInit() {\n    this.subscription = this.modalService.close$.subscribe(() => this.viewContainer.clear());\n  }\n\n  ngOnDestroy() {\n    this.elements.forEach(el => {\n      if (el.removeEventListener) {\n        el.removeEventListener('click', this.clickHandler);\n      }\n    });\n\n    this.subscription.unsubscribe();\n  }\n\n  /** @docs-private */\n  clickHandler = (event: any) => {\n    this.viewContainer.clear();\n    // instantiate the template onto which this directive is applied\n    const viewRef = this.viewContainer.createEmbeddedView(this.templateRef);\n    // we need to mark the viewRef explicitly if the modal is used inside another\n    // component that is using onPush change detection\n    viewRef.markForCheck();\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /**\n   * One or multiple template reference variables pointing to elements\n   * which should trigger opening the modal on click.\n   *\n   * Value: A single template reference variable or an array of template reference variables.\n   */\n  @Input()\n  set nxOpenModalOnClick(elements) {\n    // also support the case where only one element is passed, check for the length property to be sure elements is an array\n    if (elements.length) {\n      this.elements = elements;\n    } else {\n      this.elements = [ elements ];\n    }\n    // add a click event listener to any element passed as property to this directive\n    this.elements.forEach(el => {\n      if (el.addEventListener) {\n        el.addEventListener('click', this.clickHandler);\n      // workaround until refactoring: if the reference is a component\n      // reference the component has to implement a getter to its own elementRef\n      } else if (el.elementRef) {\n        el.elementRef.nativeElement.addEventListener('click', this.clickHandler);\n      } else {\n        console.warn(`nxOpenModalOnClick: Given Element doesn't appear to be an ElementRef.`, el);\n      }\n    });\n  }\n\n}\n","import { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport {NxModalComponent, NxModalActionsDirective, NxModalContentDirective} from './modal.component';\nimport { CommonModule } from '@angular/common';\nimport { NxOpenModalOnClickDirective } from './modal-open-on-click.directive';\nimport { NxModalService } from './modal.service';\nimport { A11yModule } from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [ CommonModule, A11yModule, NxIconModule ],\n  declarations: [\n    NxModalComponent,\n    NxOpenModalOnClickDirective,\n    NxModalActionsDirective,\n    NxModalContentDirective\n  ],\n  exports: [\n    NxModalComponent,\n    NxOpenModalOnClickDirective,\n    NxModalActionsDirective,\n    NxModalContentDirective\n  ],\n})\n\nexport class NxModalModule {\n  // define the modal service on root level as an application wide singleton,\n  // assuming that we only display one modal at a time, which seems quite reasonable\n  // this is static and named \"forRoot\" by convention\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NxModalModule,\n      providers: [NxModalService]\n    };\n  }\n}\n"],"names":["Subject","Injectable","animation","style","animate","Directive","EventEmitter","Subscription","Component","ChangeDetectionStrategy","trigger","transition","useAnimation","query","animateChild","EventManager","ChangeDetectorRef","Input","Output","TemplateRef","ViewContainerRef","NgModule","CommonModule","A11yModule","NxIconModule"],"mappings":"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"}