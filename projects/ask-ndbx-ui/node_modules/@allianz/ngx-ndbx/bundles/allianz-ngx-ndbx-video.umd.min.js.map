{"version":3,"sources":["ng://@allianz/ngx-ndbx/video/video.component.ts","ng://@allianz/ngx-ndbx/video/video.module.ts"],"names":["NxVideoComponent","sanitizer","_changeDetectorRef","this","_videoId","_altText","_playButtonAriaLabel","_previewImageSrc","_showPlayerControls","_allowFullScreen","_interfaceLanguage","showPlayer","Object","defineProperty","prototype","value","markForCheck","coerceBooleanProperty","select","url","videoId","showPlayerControls","allowFullScreen","interfaceLanguage","bypassSecurityTrustResourceUrl","previewImageSrc","defaultLabel","altText","nxPlayButtonAriaLabel","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","DomSanitizer","ChangeDetectorRef","Input","NxVideoModule","NgModule","declarations","exports","imports","CommonModule","NxIconModule"],"mappings":"uqBAAA,IAAAA,EAAA,WA+GE,SAAAA,EAAoBC,EAAiCC,GAAjCC,KAAAF,UAAAA,EAAiCE,KAAAD,mBAAAA,EAjG7CC,KAAAC,SAAmB,KAcnBD,KAAAE,SAAmB,GAcnBF,KAAAG,qBAA+B,GAc/BH,KAAAI,iBAA2B,KAc3BJ,KAAAK,qBAA+B,EAY/BL,KAAAM,kBAA4B,EAY5BN,KAAAO,mBAA6B,KAerCP,KAAAQ,YAAa,EAmCf,OA/HEC,OAAAC,eACIb,EAAAc,UAAA,UAAO,KAMX,WACE,OAAOX,KAAKC,cARd,SACYW,GACNZ,KAAKC,WAAaW,IACpBZ,KAAKC,SAAWW,EAChBZ,KAAKD,mBAAmBc,iDAU5BJ,OAAAC,eACIb,EAAAc,UAAA,UAAO,KAMX,WACE,OAAOX,KAAKE,cARd,SACYU,GACNZ,KAAKE,WAAaU,IACpBZ,KAAKE,SAAWU,EAChBZ,KAAKD,mBAAmBc,iDAU5BJ,OAAAC,eACIb,EAAAc,UAAA,wBAAqB,KAMzB,WACE,OAAOX,KAAKG,0BARd,SAC0BS,GACpBZ,KAAKG,uBAAyBS,IAChCZ,KAAKG,qBAAuBS,EAC5BZ,KAAKD,mBAAmBc,iDAU5BJ,OAAAC,eACIb,EAAAc,UAAA,kBAAe,KAMnB,WACE,OAAOX,KAAKI,sBARd,SACoBQ,GACdZ,KAAKI,mBAAqBQ,IAC5BZ,KAAKI,iBAAmBQ,EACxBZ,KAAKD,mBAAmBc,iDAU5BJ,OAAAC,eACIb,EAAAc,UAAA,qBAAkB,KAItB,WACE,OAAOX,KAAKK,yBANd,SACuBO,GACrBZ,KAAKK,oBAAsBS,EAAAA,sBAAsBF,GACjDZ,KAAKD,mBAAmBc,gDAS1BJ,OAAAC,eACIb,EAAAc,UAAA,kBAAe,KAInB,WACE,OAAOX,KAAKM,sBANd,SACoBM,GAClBZ,KAAKM,iBAAmBQ,EAAAA,sBAAsBF,GAC9CZ,KAAKD,mBAAmBc,gDAS1BJ,OAAAC,eACIb,EAAAc,UAAA,oBAAiB,KAMrB,WACE,OAAOX,KAAKO,wBARd,SACsBK,GAChBZ,KAAKO,qBAAuBK,IAC9BZ,KAAKO,mBAAqBK,EAC1BZ,KAAKD,mBAAmBc,iDAa5BhB,EAAAc,UAAAI,OAAA,WACEf,KAAKQ,YAAa,EAClBR,KAAKD,mBAAmBc,gBAI1BJ,OAAAC,eAAIb,EAAAc,UAAA,WAAQ,KAAZ,eACMK,EAAM,iCAAiChB,KAAKiB,QAAO,+BAUvD,OATKjB,KAAKkB,qBACRF,GAAO,eAEJhB,KAAKmB,kBACRH,GAAO,SAELhB,KAAKoB,oBACPJ,GAAO,OAAOhB,KAAKoB,mBAEdpB,KAAKF,UAAUuB,+BAA+BL,oCAIvDP,OAAAC,eAAIb,EAAAc,UAAA,SAAM,KAAV,WACE,OAAOX,KAAKsB,gBAAkBtB,KAAKsB,gBAAkB,8BAA8BtB,KAAKiB,QAAO,kDAIjGR,OAAAC,eAAIb,EAAAc,UAAA,sBAAmB,KAAvB,eACQY,EAAevB,KAAKwB,QAAaxB,KAAKwB,QAAO,gBAAkB,aACrE,OAAOxB,KAAKyB,sBAAwBzB,KAAKyB,sBAAwBF,uDA1IpEG,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,WACVC,SAAA,ouBACAC,gBAAiBC,EAAAA,wBAAwBC,suGALlCC,EAAAA,oBAD2CC,EAAAA,sDAgBjDC,EAAAA,MAAKR,KAAA,CAAC,8BAcNQ,EAAAA,MAAKR,KAAA,CAAC,4CAcNQ,EAAAA,MAAKR,KAAA,CAAC,kDAcNQ,EAAAA,MAAKR,KAAA,CAAC,iDAcNQ,EAAAA,MAAKR,KAAA,CAAC,iDAYNQ,EAAAA,MAAKR,KAAA,CAAC,gDAYNQ,EAAAA,MAAKR,KAAA,CAAC,0BA+CT9B,EAhJA,GCAA,IAAAuC,EAAA,WAKA,SAAAA,KAK4B,2BAL3BC,EAAAA,SAAQV,KAAA,CAAC,CACRW,aAAc,CAAEzC,GAChB0C,QAAS,CAAE1C,GACX2C,QAAS,CAAEC,EAAAA,aAAcC,EAAAA,kBAECN,EAV5B","sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\n\n@Component({\n  selector: 'nx-video',\n  templateUrl: 'video.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ './video.component.scss' ],\n})\n\n// note that this currently only supports youtube videos\nexport class NxVideoComponent {\n\n  private _videoId: string = null;\n\n  /** Sets the id of the YouTube video. */\n  @Input('nxVideoId')\n  set videoId(value: string) {\n    if (this._videoId !== value) {\n      this._videoId = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get videoId(): string {\n    return this._videoId;\n  }\n\n  private _altText: string = '';\n\n  /** Sets the value of the alt attribute for the preview image. */\n  @Input('nxAltText')\n  set altText(value: string) {\n    if (this._altText !== value) {\n      this._altText = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get altText(): string {\n    return this._altText;\n  }\n\n  private _playButtonAriaLabel: string = '';\n\n  /** Sets the value of the aria-label attribute on the play button (Default: Play Video). */\n  @Input('nxPlayButtonAriaLabel')\n  set nxPlayButtonAriaLabel(value: string) {\n    if (this._playButtonAriaLabel !== value) {\n      this._playButtonAriaLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get nxPlayButtonAriaLabel(): string {\n    return this._playButtonAriaLabel;\n  }\n\n  private _previewImageSrc: string = null;\n\n  /** Sets the preview image. If this is not provided, an image from YouTube will be used as default. */\n  @Input('nxPreviewImageSrc')\n  set previewImageSrc(value: string) {\n    if (this._previewImageSrc !== value) {\n      this._previewImageSrc = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get previewImageSrc(): string {\n    return this._previewImageSrc;\n  }\n\n  private _showPlayerControls: boolean = true;\n\n  /** Sets player controls. If set to false, player controls are not available. */\n  @Input('nxShowPlayerControls')\n  set showPlayerControls(value: boolean) {\n    this._showPlayerControls = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get showPlayerControls(): boolean {\n    return this._showPlayerControls;\n  }\n\n  private _allowFullScreen: boolean = true;\n\n  /** Sets fullscreen option. If set to false, fullscreen option is not available. */\n  @Input('nxAllowFullScreen')\n  set allowFullScreen(value: boolean) {\n    this._allowFullScreen = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get allowFullScreen(): boolean {\n    return this._allowFullScreen;\n  }\n\n  private _interfaceLanguage: string = null;\n\n  /** Sets interface language. Can be used to override the interface language determined by YouTube. */\n  @Input('nxInterfaceLanguage')\n  set interfaceLanguage(value: string) {\n    if (this._interfaceLanguage !== value) {\n      this._interfaceLanguage = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get interfaceLanguage(): string {\n    return this._interfaceLanguage;\n  }\n\n  /** @docs-private */\n  showPlayer = false;\n\n  constructor(private sanitizer: DomSanitizer, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** @docs-private */\n  select(): void {\n    this.showPlayer = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n   /** Returns the safe resource URL of the YouTube video, given video id.  */\n  get videoSrc(): SafeResourceUrl {\n    let url = `https://www.youtube.com/embed/${this.videoId}?rel=0&showinfo=0&autoplay=1`;\n    if (!this.showPlayerControls) {\n      url += '&controls=0';\n    }\n    if (!this.allowFullScreen) {\n      url += '&fs=0';\n    }\n    if (this.interfaceLanguage) {\n      url += `&hl=${this.interfaceLanguage}`;\n    }\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\n  }\n\n  /** Returns the preview image source URL, given video id. */\n  get imgSrc() {\n    return this.previewImageSrc ? this.previewImageSrc : `https://img.youtube.com/vi/${this.videoId}/sddefault.jpg`;\n  }\n\n  /** Returns the labels for the control buttons. */\n  get playButtonAriaLabel() {\n    const defaultLabel = this.altText ? `${this.altText} - Play Video` : 'Play Video';\n    return this.nxPlayButtonAriaLabel ? this.nxPlayButtonAriaLabel : defaultLabel;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NxVideoComponent } from './video.component';\nimport { CommonModule } from '@angular/common';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\n\n@NgModule({\n  declarations: [ NxVideoComponent ],\n  exports: [ NxVideoComponent ],\n  imports: [ CommonModule, NxIconModule ]\n})\nexport class NxVideoModule {}\n"]}