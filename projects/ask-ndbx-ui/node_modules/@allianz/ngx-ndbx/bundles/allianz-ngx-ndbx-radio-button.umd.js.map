{"version":3,"file":"allianz-ngx-ndbx-radio-button.umd.js","sources":["ng://@allianz/ngx-ndbx/radio-button/radio-button.ts","ng://@allianz/ngx-ndbx/radio-button/radio-button.module.ts"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component, ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewChild\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NG_VALUE_ACCESSOR,\n  NgControl, NgForm,\n} from '@angular/forms';\nimport { Subject, Subscription } from 'rxjs';\nimport { NxLabelComponent } from '@allianz/ngx-ndbx/base';\n\n/** The change event object emitted by the radio group and radio button. */\nexport class NxRadioChange {\n  source: NxRadioComponent;\n  value: any;\n\n  /** The NxRadioComponent that emits the change event. NxRadioChange object can be instantiated with source radio component and a value. */\n  constructor(source: NxRadioComponent, value: any) {\n    this.source = source;\n    this.value = value;\n  }\n}\n\n/** Label Size Types */\nexport type LabelSize  = 'small' | 'big';\n\nlet nextId = 0;\n\n@Component({\n  selector: 'nx-radio-group',\n  templateUrl: './radio-group.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'radiogroup',\n    '[attr.id]': 'id',\n    '[attr.required]': 'required',\n    '[class.nx-radio-group--negative]': 'negative',\n    '[attr.aria-labelledby]': 'this._label?.id  || null'\n  },\n  styleUrls: [ 'radio-button-group.scss' ]\n})\nexport class NxRadioGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy {\n\n  @ContentChild(forwardRef(() => NxLabelComponent), {static: false})\n  _label: NxLabelComponent;\n\n  // emits when the internal state changes on properties which are relevant\n  // for the radio buttons so that they can mark themself for check\n  readonly _stateChanges = new Subject<void>();\n\n  private _id: string = `nx-radio-group-${nextId++}`;\n  /** Sets the Id of the radio group. */\n  @Input('id')\n  set id(value: string) {\n    if (this._id !== value) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get id(): string {\n    return this._id;\n  }\n  private _disabled: boolean = false;\n\n  /** Whether every radio button in this group should be disabled. */\n  @Input('nxDisabled')\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    // inform childs about the change where CD should be triggered\n    this._stateChanges.next();\n  }\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  private _negative: boolean = false;\n  /** Whether the radio group should have negative styling. */\n  @Input()\n  set negative(value: boolean) {\n    this._negative = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _required: boolean = false;\n  /** Sets if at least an option should be selected. */\n  @Input()\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._stateChanges.next();\n  }\n  get required(): boolean {\n    return this._required;\n  }\n\n  /** An event is dispatched on each group value change. */\n  @Output('nxGroupValueChange') groupValueChange: EventEmitter<NxRadioChange> = new EventEmitter<NxRadioChange>();\n  private _name: string = `nx-radio-group-${nextId++}`;\n  private _value: any = null;\n  // The currently selected radio button; should match _value\n  private _selected: NxRadioComponent | null = null;\n\n  @ContentChildren(forwardRef(() => NxRadioComponent), {descendants: true})\n  _radios: QueryList<NxRadioComponent>;\n\n  private _onChange: (value: any) => void = () => {};\n  private _onTouched: () => any = () => {};\n\n  get name(): string {\n    return this._name;\n  }\n\n  // this is also the name attribute, which is mandatory in conjunction with ngModel, hence no nx prefix\n  /** Sets the name of this radio group, which is mandatory in conjunction with ngModel (Default: null). */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this._stateChanges.next();\n  }\n\n  get value(): any { return this._value; }\n\n  /** Sets the value of the selected radion button in this group (Default: null). */\n  @Input('nxValue')\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() public _parentForm: NgForm,\n              @Optional() public _parentFormGroup: FormGroupDirective) {\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._updateSelectedRadioFromValue();\n    this._checkSelectedRadioButton();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** @docs-private this is meant to be called by the radio buttons in this group */\n  change(value) {\n    this.value = value;\n    this._onChange(value);\n    this.groupValueChange.emit(new NxRadioChange(this._selected, this._value));\n  }\n\n  /** @docs-private this is meant to be called by the radio buttons in this group. */\n  touch() {\n    if (this._onTouched) {\n      this._onTouched();\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value === this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  private _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n}\n\n@Component({\n  selector: 'nx-radio',\n  templateUrl: 'radio-button.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ 'radio-button.scss' ],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NxRadioComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[attr.required]': 'required',\n    '[class.nx-radio-button--small-label]': 'labelSize === \"small\"',\n    '[class.nx-radio-button--big-label]': 'labelSize === \"big\"',\n    '[class.nx-radio--negative]': 'negative',\n    '[class.has-error]': '_controlInvalid() || null',\n    '[attr.aria-invalid]': '_controlInvalid() || null',\n  }\n})\nexport class NxRadioComponent implements ControlValueAccessor, OnInit, OnDestroy {\n  /** @docs-private */\n  @ViewChild('radioLabelWrapper', { static: true }) _radioLabelWrapper: ElementRef;\n  private _parentChangeSubscription: Subscription;\n\n  private _id: string = `nx-radio-${nextId++}`;\n  /** Sets the id of the radio component. */\n  @Input('id')\n  set id(value: string) {\n    if (this._id !== value) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get id(): string {\n    return this._id;\n  }\n\n  /** @docs-private */\n  get inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  /** @docs-private */\n  get labelId(): string {\n    return `${this.id}-label`;\n  }\n\n  private _name: string = null;\n  // this is also the name attribute, which is mandatory in conjunction with ngModel, hence no nx prefix\n  /** Sets the name of this radio component, which is mandatory in conjunction with ngModel (Default: null). */\n  @Input('name')\n  set name(value: string) {\n    if (this._name !== value) {\n      this._name = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get name(): string {\n    return (this.radioGroup && this.radioGroup.name) ? this.radioGroup.name : this._name;\n  }\n\n  private _labelSize: LabelSize = 'big';\n  /** Sets the label size of the radio button.\n   * The default value is `big`.\n  */\n  @Input()\n  set labelSize(value: LabelSize) {\n    if (this._labelSize !== value) {\n      this._labelSize = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get labelSize(): LabelSize {\n    return this._labelSize;\n  }\n\n  private _negative:  boolean = false;\n  /**\n   * Whether the negative set of styles should be used.\n   *\n   * If the radio button is placed in a radio group, the negative value\n   * is overwritten by the group's negative value.\n   */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._negative !== newValue) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get negative(): boolean {\n    return this.radioGroup ? this.radioGroup.negative : this._negative;\n  }\n\n  /** An event is dispatched on each value change. */\n  @Output('nxValueChange') valueChange: EventEmitter<NxRadioChange> = new EventEmitter<NxRadioChange>();\n  private _value: any = null;\n  private _checked: boolean = false;\n  private _disabled: boolean = false;\n  private _required: boolean = false;\n\n  get value(): any {\n    return this._value;\n  }\n\n  /** @docs-private */\n  get labelHasContent(): boolean {\n    return !!this._radioLabelWrapper.nativeElement.innerHTML.trim();\n  }\n\n  /** @docs-private\n   * Callback for when the content of the label has changed.\n   */\n  labelContentChanged() {\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Sets the value of the form control element (Default: null). */\n  @Input('nxValue')\n  set value(value: any) {\n    if (value !== this._value) {\n      this._value = value;\n      this.onChangeCallback(value);\n    }\n  }\n\n  /** @docs-private */\n  get checked(): boolean {\n    return this._checked;\n  }\n\n  /** Whether the radio component is selected. */\n  @Input('nxChecked')\n  set checked(value: boolean) {\n    if (this._checked !== value) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** @docs-private */\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup && this.radioGroup.disabled);\n  }\n\n  /** Whether the radio button should be disabled or not. */\n  @Input('nxDisabled')\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** @docs-private */\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n\n  /** Sets if at least a radio button should be selected. */\n  @Input()\n  set required(value: boolean) {\n    this._required = value;\n    // needed when the outer component is set to onPush because it is a native property\n    // on the host element\n    this._changeDetectorRef.markForCheck();\n  }\n\n  constructor(@Optional() public radioGroup: NxRadioGroupComponent,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      this.name = this.radioGroup.name;\n      // when relevant properties of the parent like name and disabled change\n      // we need to let change detection know that the template needs an update\n      this._parentChangeSubscription = this.radioGroup._stateChanges.subscribe(()  => {\n        this._changeDetectorRef.markForCheck();\n      });\n\n      if (this.radioGroup.value === this._value) {\n        this._checked = true;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._parentChangeSubscription) {\n      this._parentChangeSubscription.unsubscribe();\n    }\n  }\n\n  writeValue(value: any): void {\n    if (value === this._value) {\n      this._checked = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  private onChangeCallback = (_: any) => {};\n\n  registerOnChange(onChange: any): void {\n    this.onChangeCallback = onChange;\n  }\n\n  private onTouchedCallback = () => {};\n\n  registerOnTouched(onTouched: any): void {\n    this.onTouchedCallback = onTouched;\n  }\n\n  /** @docs-private */\n  touch() {\n    this.onTouchedCallback();\n\n    if (this.radioGroup) {\n      this.radioGroup.touch();\n    }\n  }\n\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n    this._checked = true;\n    this.valueChange.emit(new NxRadioChange(this, this._value));\n    this.onChangeCallback(this.value);\n\n    if (this.radioGroup && this.value !== this.radioGroup.value) {\n      this.radioGroup.change(this.value);\n    }\n  }\n\n  _onInputClick(event: Event) {\n    // make sure click event propagation on the visually hidden input\n    // are stopped to prevent multiple events bubbling up.\n    event.stopPropagation();\n  }\n\n  /** @docs-private */\n  _controlInvalid(): boolean {\n    const form = this.radioGroup && (this.radioGroup._parentFormGroup || this.radioGroup._parentForm);\n    return !!(this.radioGroup && this.radioGroup.ngControl && this.radioGroup.ngControl.invalid\n      && (this.radioGroup.ngControl.touched || (form && form.submitted)));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxRadioComponent } from './radio-button';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxRadioGroupComponent } from './radio-button';\nimport { NxErrorModule, NxLabelModule } from '@allianz/ngx-ndbx/base';\nimport {ObserversModule} from '@angular/cdk/observers';\n\n@NgModule({\n  declarations: [\n    NxRadioComponent,\n    NxRadioGroupComponent\n  ],\n  exports: [\n    NxRadioComponent,\n    NxRadioGroupComponent,\n    NxErrorModule,\n    NxLabelModule\n  ],\n  imports: [\n    CommonModule,\n    NxIconModule,\n    ObserversModule\n  ]\n})\nexport class NxRadioModule { }\n"],"names":["Subject","EventEmitter","coerceBooleanProperty","Component","ChangeDetectionStrategy","ChangeDetectorRef","NgControl","Optional","Self","NgForm","FormGroupDirective","ContentChild","forwardRef","NxLabelComponent","Input","Output","ContentChildren","NG_VALUE_ACCESSOR","ViewChild","NgModule","NxErrorModule","NxLabelModule","CommonModule","NxIconModule","ObserversModule"],"mappings":"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"}