{"version":3,"file":"allianz-ngx-ndbx-menu.umd.js","sources":["ng://@allianz/ngx-ndbx/menu/menu.component.ts","ng://@allianz/ngx-ndbx/menu/menu-link.directive.ts","ng://@allianz/ngx-ndbx/menu/menu-item.directive.ts","ng://@allianz/ngx-ndbx/menu/menu-button.component.ts","ng://@allianz/ngx-ndbx/menu/menu.module.ts"],"sourcesContent":["import { Component, ChangeDetectionStrategy, ChangeDetectorRef, Input } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/**\n  This components is a collapsible menu for usage on smaller devices.\n  Can contain any content, but usually [nxMenuLink], [nxMenuGroup] and [nxAction].\n*/\n@Component({\n  selector: 'nx-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[attr.aria-expanded]': 'open'\n  }\n})\nexport class NxMenuComponent {\n  private _open: boolean = false;\n\n  /** Whether the menu is open or closed. */\n  @Input()\n  set open(value: boolean) {\n    const open = coerceBooleanProperty(value);\n    if (open !== this._open) {\n      this._open = open;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get open(): boolean {\n    return this._open;\n  }\n\n  /* Toggles the open state of the menu. */\n  toggle() {\n    this.open = !this.open;\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n}\n","import { Directive } from '@angular/core';\n\n/**\n  This is a menu link.\n  It adds styling to a link and is usually used within a [nxMenuItem].\n */\n@Directive({\n  selector: 'a[nxMenuLink]',\n  host: {\n    class: 'nx-menu__link'\n  }\n})\nexport class NxMenuLinkDirective {}\n","import { Directive, Input } from '@angular/core';\n\n/**\n  This is a menu item is used to structure content whithin a menu.\n */\n@Directive({\n  selector: '[nxMenuItem]',\n  host: {\n    class: 'nx-menu__item',\n    '[class.nx-menu__item--small]': 'size === \"s\"',\n    '[class.nx-menu__item--large]': 'size === \"l\"'\n  }\n})\nexport class NxMenuItemDirective {\n  @Input('nxMenuItem')\n  set size(value: string) {\n    this._size = value === 'l' ? 'l' : 's';\n  }\n  get size(): string {\n    return this._size;\n  }\n  private _size: string = 's';\n}\n","import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, Attribute, Directive } from '@angular/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\n\nexport type NxMenuButtonType = 'root' | 'nested';\n\n/**\n * @title MenuButton\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: '[nxMenuButton]',\n  templateUrl: 'menu-button.component.html',\n  styleUrls: ['menu-button.component.scss'],\n  host: {\n    '[class.is-expanded]': 'expandable && expanded',\n    '[class.is-expandable]': 'expandable',\n    '[class.nx-menu-button--nested]': 'type === \"nested\"',\n    '[class.nx-menu-button--root]': 'type === \"root\"',\n    'class': 'nx-menu-button'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxMenuButtonComponent {\n  /** Whether this menu button is expandable or not. Will add a caret icon. */\n  @Input()\n  set expandable(value: boolean) {\n    this._expandable = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get expandable(): boolean {\n    return this._expandable;\n  }\n  private _expandable: boolean = false;\n\n  /**\n   * Whether this menu button is expanded or not.\n   * Only works in combination with the `expandable` option set to `true`.\n   */\n  @Input()\n  set expanded(value: boolean) {\n    this._expanded = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get expanded() {\n    return this._expanded;\n  }\n  private _expanded: boolean = false;\n\n  /**\n   * The type of this menu button.\n   * Can be `primary` or `secondary`, defaults to `primary`.\n   */\n  @Input('nxType')\n  set type(value: NxMenuButtonType) {\n    if (value === 'root' || value === 'nested') {\n      this._type = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get type(): NxMenuButtonType {\n    return this._type;\n  }\n  private _type: NxMenuButtonType = 'root';\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/**\n * Icon that can be added to a [nxButton].\n */\n@Directive({\n  selector: '[nxMenuButtonIcon]',\n  host: {\n    class: 'nx-menu-button__icon'\n  }\n})\nexport class NxMenuButtonIconDirective {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NxMenuComponent } from './menu.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxMenuLinkDirective } from './menu-link.directive';\nimport { NxMenuItemDirective } from './menu-item.directive';\nimport { NxMenuButtonComponent, NxMenuButtonIconDirective } from './menu-button.component';\n\nconst EXPORTED_MODULES = [\n  NxMenuComponent,\n  NxMenuLinkDirective,\n  NxMenuItemDirective,\n  NxMenuButtonComponent,\n  NxMenuButtonIconDirective,\n];\n\n@NgModule({\n  imports: [ CommonModule, NxIconModule ],\n  declarations: EXPORTED_MODULES,\n  exports: EXPORTED_MODULES\n})\nexport class NxMenuModule { }\n"],"names":["coerceBooleanProperty","Component","ChangeDetectionStrategy","ChangeDetectorRef","Input","Directive","NgModule","CommonModule","NxIconModule"],"mappings":"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"}