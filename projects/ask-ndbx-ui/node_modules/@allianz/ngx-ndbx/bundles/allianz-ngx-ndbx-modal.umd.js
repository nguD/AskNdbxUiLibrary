(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@allianz/ngx-ndbx/icon'), require('@angular/core'), require('rxjs'), require('@angular/platform-browser'), require('@angular/animations'), require('@angular/common'), require('@angular/cdk/a11y')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/modal', ['exports', '@allianz/ngx-ndbx/icon', '@angular/core', 'rxjs', '@angular/platform-browser', '@angular/animations', '@angular/common', '@angular/cdk/a11y'], factory) :
    (global = global || self, factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx'].modal = {}), global.allianz['ngx-ndbx'].icon, global.ng.core, global.rxjs, global.ng.platformBrowser, global.ng.animations, global.ng.common, global.ng.cdk.a11y));
}(this, (function (exports, icon, core, rxjs, platformBrowser, animations, common, a11y) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: modal.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docs-private
     */
    var NxModalService = /** @class */ (function () {
        function NxModalService() {
            this.subject = new rxjs.Subject();
            this.close$ = this.subject.asObservable();
        }
        /**
         * @return {?}
         */
        NxModalService.prototype.close = /**
         * @return {?}
         */
        function () {
            this.subject.next();
        };
        NxModalService.decorators = [
            { type: core.Injectable }
        ];
        return NxModalService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NxModalService.prototype.subject;
        /** @type {?} */
        NxModalService.prototype.close$;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: animations.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var fadeIn = animations.animation([
        animations.style({ opacity: 0 }),
        animations.animate('300ms', animations.style({ opacity: 1 }))
    ]);
    /** @type {?} */
    var fadeOut = animations.animation(animations.animate('300ms', animations.style({ opacity: 0 })));
    /** @type {?} */
    var scaleUp = animations.animation([
        animations.style({ transform: 'scale(1)', opacity: 1 }),
        animations.animate('250ms', animations.style({ transform: 'scale(1.3)', opacity: 0 }))
    ]);
    /** @type {?} */
    var scaleDown = animations.animation([
        animations.style({ transform: 'scale(1.3)', opacity: 0 }),
        animations.animate('250ms', animations.style({ transform: 'scale(1)', opacity: 1 }))
    ]);

    /**
     * @fileoverview added by tsickle
     * Generated from: modal.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Container for the action buttons in a modal. Has a fixed position at the bottom of the modal on scroll.
     */
    var NxModalActionsDirective = /** @class */ (function () {
        function NxModalActionsDirective() {
        }
        NxModalActionsDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[nxModalActions]',
                        host: {
                            '[class.nx-modal__actions]': 'true'
                        }
                    },] }
        ];
        return NxModalActionsDirective;
    }());
    /**
     * Scrollable container for the content of a modal.
     */
    var NxModalContentDirective = /** @class */ (function () {
        function NxModalContentDirective() {
        }
        NxModalContentDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[nxModalContent]',
                        host: {
                            '[class.nx-modal__content]': 'true'
                        }
                    },] }
        ];
        return NxModalContentDirective;
    }());
    var NxModalComponent = /** @class */ (function () {
        function NxModalComponent(modalService, eventManager, _changeDetectorRef) {
            this.modalService = modalService;
            this.eventManager = eventManager;
            this._changeDetectorRef = _changeDetectorRef;
            this._closeButtonLabel = 'Close dialog';
            /**
             * Whether the modal view should close when the user hits the escape key.
             * Default is true.
             */
            this.hideOnEsc = true;
            /**
             * Whether the modal view should close when the user clicks on the backdrop.
             * Default is true.
             */
            this.hideOnClickOutside = true;
            /**
             * Whether the modal view should have a close icon in the upper right corner.
             * Default is true.
             */
            this.showCloseIcon = true;
            /**
             * An event emitted when the user clicks on the backdrop or uses the built-in close button.
             * This event can be applied in conjunction with the custom open state handling
             * of a modal to close it when requested by the user.
             */
            this.closeEvent = new core.EventEmitter();
            this.closeSubscription = rxjs.Subscription.EMPTY;
            this.removeEventListener = undefined;
        }
        Object.defineProperty(NxModalComponent.prototype, "closeButtonLabel", {
            get: /**
             * @return {?}
             */
            function () {
                return this._closeButtonLabel;
            },
            /** Sets the 'aria-label' of the modal close button needed for accessibility.
             *
             * Default value is 'Close dialog'.
             */
            set: /**
             * Sets the 'aria-label' of the modal close button needed for accessibility.
             *
             * Default value is 'Close dialog'.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value !== this._closeButtonLabel) {
                    this._closeButtonLabel = value;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NxModalComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.closeSubscription = this.modalService.close$.subscribe((/**
             * @return {?}
             */
            function () { return _this.closeEvent.emit(); }));
            this.removeEventListener = this.eventManager.addGlobalEventListener('window', 'keyup.esc', (/**
             * @return {?}
             */
            function () {
                if (_this.hideOnEsc) {
                    _this.modalService.close();
                }
            }));
        };
        /**
         * @return {?}
         */
        NxModalComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.removeEventListener();
            this.closeSubscription.unsubscribe();
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxModalComponent.prototype.clickOutsideModal = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            if (this.hideOnClickOutside) {
                this.modalService.close();
            }
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxModalComponent.prototype.closeButtonClick = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            this.modalService.close();
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} evt
         * @return {?}
         */
        NxModalComponent.prototype.cancelClick = /**
         * \@docs-private
         * @param {?} evt
         * @return {?}
         */
        function (evt) {
            evt.stopPropagation();
        };
        NxModalComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-modal',
                        template: "<div class=\"nx-modal\" role=\"dialog\" cdkTrapFocus cdkTrapFocusAutoCapture cdkFocusInitial>\n  <div class=\"nx-modal__backdrop\" (click)=\"clickOutsideModal()\">\n    <div class=\"nx-modal__position\">\n      <div class=\"nx-modal__container\" (click)=\"cancelClick($event)\" [@scaleUpDown]>\n\n        <button\n          (click)=\"closeButtonClick()\"\n          *ngIf=\"showCloseIcon\"\n          [attr.aria-label]=\"closeButtonLabel\"\n          class=\"nx-modal__close\"\n          type=\"button\">\n          <nx-icon name=\"close\"></nx-icon>\n        </button>\n\n        <div class=\"nx-modal__content-wrapper\">\n          <ng-container *ngIf=\"body else projectContent\">\n            <ng-container *ngTemplateOutlet=\"body\"></ng-container>\n          </ng-container>\n\n          <ng-template #projectContent>\n            <ng-content></ng-content>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        animations: [
                            animations.trigger('fadeInOut', [
                                animations.transition(':enter', [
                                    animations.useAnimation(fadeIn),
                                    animations.query('@scaleUpDown', [
                                        animations.animateChild()
                                    ])
                                ]),
                                animations.transition(':leave', [
                                    animations.query('@scaleUpDown', [
                                        animations.animateChild()
                                    ]),
                                    animations.useAnimation(fadeOut)
                                ])
                            ]),
                            animations.trigger('scaleUpDown', [
                                animations.transition(':enter', animations.useAnimation(scaleDown)),
                                animations.transition(':leave', animations.useAnimation(scaleUp))
                            ])
                        ],
                        host: {
                            '[@fadeInOut]': '',
                            '[class.nx-modal--fixed-width]': 'size === "fixed"'
                        },
                        styles: [":host{position:relative;z-index:1000}.nx-modal{display:flex;position:fixed;width:100vw;height:100vh;top:0;bottom:0;left:0;right:0;z-index:1000;align-items:center;justify-content:center;transition:opacity .3s}.nx-modal__backdrop{background-color:rgba(0,0,0,.35);height:100%;left:0;position:absolute;top:0;width:100%;z-index:-1}.nx-modal__position{position:absolute;display:inline-block;top:50%;left:50%;transform:translate(-50%,-50%);z-index:20}.nx-modal__container{border-radius:4px;box-shadow:0 8px 24px rgba(65,65,65,.35);background:#fff;background:var(--modal-background-color,#fff);color:#414141;color:var(--modal-text-color,#414141)}.nx-modal__content-wrapper{padding:40px 40px 48px;max-height:calc(100vh - 48px);overflow-y:auto}@media (max-width:703px){.nx-modal__content-wrapper{max-height:70vh;padding:40px 32px 48px}}.nx-modal__close{background-color:transparent;border:none;cursor:pointer;position:absolute;top:16px;right:16px;height:24px;outline:0;padding:0;color:#414141;color:var(--modal-close-icon-color,#414141)}.nx-modal__close nx-icon{font-size:24px}.nx-modal__close::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]) .nx-modal__close:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6);border-radius:4px}@media (max-width:703px){.nx-modal__position{width:100%}.nx-modal__container{position:relative;max-width:calc(100vw - 16px);max-height:70vh;margin:0 auto}}:host(.nx-modal--fixed-width) .nx-modal__container{width:736px;max-width:calc(100vw - 16px)}::ng-deep .nx-modal__actions{height:72px;border-top:1px solid #d9d9d9;border-top:1px solid var(--modal-actions-border-color,#d9d9d9);display:flex;align-items:center;justify-content:flex-end;padding:0 40px;position:absolute;bottom:0;left:0;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px;background:#fff;background:var(--modal-actions-background-color,#fff)}::ng-deep .nx-modal__content{overflow-y:auto;max-height:calc(100vh - 72px - 48px)}@media (max-width:703px){::ng-deep .nx-modal__content{max-height:calc(70vh - 72px - 48px)}}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]) .nx-modal__close:focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}.nx-modal__content-wrapper,::ng-deep .nx-modal__actions{border:2px solid windowText}}"]
                    }] }
        ];
        /** @nocollapse */
        NxModalComponent.ctorParameters = function () { return [
            { type: NxModalService },
            { type: platformBrowser.EventManager },
            { type: core.ChangeDetectorRef }
        ]; };
        NxModalComponent.propDecorators = {
            closeButtonLabel: [{ type: core.Input }],
            body: [{ type: core.Input, args: ['nxBody',] }],
            hideOnEsc: [{ type: core.Input, args: ['nxHideOnEsc',] }],
            hideOnClickOutside: [{ type: core.Input, args: ['nxHideOnClickOutside',] }],
            showCloseIcon: [{ type: core.Input, args: ['nxShowCloseIcon',] }],
            size: [{ type: core.Input, args: ['nxSize',] }],
            closeEvent: [{ type: core.Output, args: ['nxClose',] }]
        };
        return NxModalComponent;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NxModalComponent.prototype._closeButtonLabel;
        /**
         * A template reference variable pointing to the template
         * which contains the content of the modal view.
         * @type {?}
         */
        NxModalComponent.prototype.body;
        /**
         * Whether the modal view should close when the user hits the escape key.
         * Default is true.
         * @type {?}
         */
        NxModalComponent.prototype.hideOnEsc;
        /**
         * Whether the modal view should close when the user clicks on the backdrop.
         * Default is true.
         * @type {?}
         */
        NxModalComponent.prototype.hideOnClickOutside;
        /**
         * Whether the modal view should have a close icon in the upper right corner.
         * Default is true.
         * @type {?}
         */
        NxModalComponent.prototype.showCloseIcon;
        /**
         * Controls the width of the dialog.
         * On `auto` the width is controlled by the content width,
         * on `fixed` the dialog gets a fixed width of 736px if the viewport is big enough.
         * @type {?}
         */
        NxModalComponent.prototype.size;
        /**
         * An event emitted when the user clicks on the backdrop or uses the built-in close button.
         * This event can be applied in conjunction with the custom open state handling
         * of a modal to close it when requested by the user.
         * @type {?}
         */
        NxModalComponent.prototype.closeEvent;
        /**
         * @type {?}
         * @private
         */
        NxModalComponent.prototype.closeSubscription;
        /**
         * @type {?}
         * @private
         */
        NxModalComponent.prototype.removeEventListener;
        /**
         * @type {?}
         * @private
         */
        NxModalComponent.prototype.modalService;
        /**
         * @type {?}
         * @private
         */
        NxModalComponent.prototype.eventManager;
        /**
         * @type {?}
         * @private
         */
        NxModalComponent.prototype._changeDetectorRef;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: modal-open-on-click.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxOpenModalOnClickDirective = /** @class */ (function () {
        function NxOpenModalOnClickDirective(templateRef, viewContainer, modalService) {
            var _this = this;
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
            this.modalService = modalService;
            /**
             * \@docs-private
             */
            this.clickHandler = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.viewContainer.clear();
                // instantiate the template onto which this directive is applied
                /** @type {?} */
                var viewRef = _this.viewContainer.createEmbeddedView(_this.templateRef);
                // we need to mark the viewRef explicitly if the modal is used inside another
                // component that is using onPush change detection
                viewRef.markForCheck();
                event.preventDefault();
                event.stopPropagation();
            });
        }
        /**
         * @return {?}
         */
        NxOpenModalOnClickDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.subscription = this.modalService.close$.subscribe((/**
             * @return {?}
             */
            function () { return _this.viewContainer.clear(); }));
        };
        /**
         * @return {?}
         */
        NxOpenModalOnClickDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.elements.forEach((/**
             * @param {?} el
             * @return {?}
             */
            function (el) {
                if (el.removeEventListener) {
                    el.removeEventListener('click', _this.clickHandler);
                }
            }));
            this.subscription.unsubscribe();
        };
        Object.defineProperty(NxOpenModalOnClickDirective.prototype, "nxOpenModalOnClick", {
            /**
             * One or multiple template reference variables pointing to elements
             * which should trigger opening the modal on click.
             *
             * Value: A single template reference variable or an array of template reference variables.
             */
            set: /**
             * One or multiple template reference variables pointing to elements
             * which should trigger opening the modal on click.
             *
             * Value: A single template reference variable or an array of template reference variables.
             * @param {?} elements
             * @return {?}
             */
            function (elements) {
                var _this = this;
                // also support the case where only one element is passed, check for the length property to be sure elements is an array
                if (elements.length) {
                    this.elements = elements;
                }
                else {
                    this.elements = [elements];
                }
                // add a click event listener to any element passed as property to this directive
                this.elements.forEach((/**
                 * @param {?} el
                 * @return {?}
                 */
                function (el) {
                    if (el.addEventListener) {
                        el.addEventListener('click', _this.clickHandler);
                        // workaround until refactoring: if the reference is a component
                        // reference the component has to implement a getter to its own elementRef
                    }
                    else if (el.elementRef) {
                        el.elementRef.nativeElement.addEventListener('click', _this.clickHandler);
                    }
                    else {
                        console.warn("nxOpenModalOnClick: Given Element doesn't appear to be an ElementRef.", el);
                    }
                }));
            },
            enumerable: true,
            configurable: true
        });
        NxOpenModalOnClickDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[nxOpenModalOnClick]' },] }
        ];
        /** @nocollapse */
        NxOpenModalOnClickDirective.ctorParameters = function () { return [
            { type: core.TemplateRef },
            { type: core.ViewContainerRef },
            { type: NxModalService }
        ]; };
        NxOpenModalOnClickDirective.propDecorators = {
            nxOpenModalOnClick: [{ type: core.Input }]
        };
        return NxOpenModalOnClickDirective;
    }());
    if (false) {
        /**
         * \@docs-private
         * @type {?}
         */
        NxOpenModalOnClickDirective.prototype.elements;
        /**
         * @type {?}
         * @private
         */
        NxOpenModalOnClickDirective.prototype.subscription;
        /**
         * \@docs-private
         * @type {?}
         */
        NxOpenModalOnClickDirective.prototype.clickHandler;
        /**
         * @type {?}
         * @private
         */
        NxOpenModalOnClickDirective.prototype.templateRef;
        /**
         * @type {?}
         * @private
         */
        NxOpenModalOnClickDirective.prototype.viewContainer;
        /**
         * @type {?}
         * @private
         */
        NxOpenModalOnClickDirective.prototype.modalService;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: modal.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxModalModule = /** @class */ (function () {
        function NxModalModule() {
        }
        // define the modal service on root level as an application wide singleton,
        // assuming that we only display one modal at a time, which seems quite reasonable
        // this is static and named "forRoot" by convention
        // define the modal service on root level as an application wide singleton,
        // assuming that we only display one modal at a time, which seems quite reasonable
        // this is static and named "forRoot" by convention
        /**
         * @return {?}
         */
        NxModalModule.forRoot = 
        // define the modal service on root level as an application wide singleton,
        // assuming that we only display one modal at a time, which seems quite reasonable
        // this is static and named "forRoot" by convention
        /**
         * @return {?}
         */
        function () {
            return {
                ngModule: NxModalModule,
                providers: [NxModalService]
            };
        };
        NxModalModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, a11y.A11yModule, icon.NxIconModule],
                        declarations: [
                            NxModalComponent,
                            NxOpenModalOnClickDirective,
                            NxModalActionsDirective,
                            NxModalContentDirective
                        ],
                        exports: [
                            NxModalComponent,
                            NxOpenModalOnClickDirective,
                            NxModalActionsDirective,
                            NxModalContentDirective
                        ],
                    },] }
        ];
        return NxModalModule;
    }());

    exports.NxModalActionsDirective = NxModalActionsDirective;
    exports.NxModalComponent = NxModalComponent;
    exports.NxModalContentDirective = NxModalContentDirective;
    exports.NxModalModule = NxModalModule;
    exports.NxModalService = NxModalService;
    exports.NxOpenModalOnClickDirective = NxOpenModalOnClickDirective;
    exports.ɵa = fadeIn;
    exports.ɵb = fadeOut;
    exports.ɵc = scaleUp;
    exports.ɵd = scaleDown;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=allianz-ngx-ndbx-modal.umd.js.map
