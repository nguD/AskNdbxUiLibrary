{"version":3,"file":"allianz-ngx-ndbx-table.umd.js","sources":["ng://@allianz/ngx-ndbx/table/table-cell.component.ts","ng://@allianz/ngx-ndbx/table/header-cell.directive.ts","ng://@allianz/ngx-ndbx/table/table.component.ts","ng://@allianz/ngx-ndbx/table/table-row.component.ts","ng://@allianz/ngx-ndbx/table/expandable/expandable-table-row.component.ts","ng://@allianz/ngx-ndbx/table/expandable/expandable-table-cell.component.ts","ng://@allianz/ngx-ndbx/table/expandable/toggle-button.component.ts","ng://@allianz/ngx-ndbx/table/expandable/expandable-table.directive.ts","ng://@allianz/ngx-ndbx/table/sort-header/sort.directive.ts","ng://@allianz/ngx-ndbx/table/sort-header/sort-header-intl.ts","ng://@allianz/ngx-ndbx/table/sort-header/sort-header.component.ts","ng://@allianz/ngx-ndbx/table/table.module.ts"],"sourcesContent":["import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n/**\n * This is a table cell.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'td[nxTableCell], td[nxCell]',\n  template: '<ng-content></ng-content>',\n  host: {\n    '[class.nx-table-cell]': 'true',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxTableCellComponent { }\n","import { Directive } from '@angular/core';\n\n/**\n * This is a table header cell.\n */\n@Directive({\n  selector: '[nxHeaderCell]',\n  host: {\n    '[class.nx-header-cell]': 'true'\n  }\n})\nexport class NxHeaderCellDirective { }\n","import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n/**\n * This is a table.\n * The table supports a `zebra` and a `condensed` mode.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'table[nxTable]',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['./table.component.scss'],\n  host: {\n    'class': 'nx-table',\n    '[class.nx-table--condensed]': 'condensed',\n    '[class.nx-table--zebra]': 'zebra'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxTableComponent {\n\n  private _condensed: boolean;\n\n  private _zebra: boolean;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n   /** Change the table mode to condensed  */\n  @Input() set condensed(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (value !== this._condensed) {\n      this._condensed = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get condensed(): boolean {\n    return this._condensed;\n  }\n\n   /** Change the table mode to zebra  */\n  @Input() set zebra(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (value !== this._zebra) {\n      this._zebra = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get zebra(): boolean {\n    return this._zebra;\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ChangeDetectorRef,\n  Output,\n  ElementRef\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EventEmitter } from '@angular/core';\nimport { SPACE } from '@angular/cdk/keycodes';\n\n/**\n * This is a table row.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'tr[nxTableRow]',\n  host: {\n   'class': 'nx-table-row',\n   '[class.is-selected]': 'selected',\n   '[class.nx-table-row--selectable]': 'selectable',\n   '[attr.aria-selected]': 'selected',\n   '(click)': '_onSelect($event)',\n   '(keydown.space)': '_onSelect($event)'\n  },\n  template: `<ng-content></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxTableRowComponent {\n\n  /** Whether this table row is selectable */\n  @Input()\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get selectable(): boolean {\n    return this._selectable;\n  }\n  private _selectable: boolean = false;\n\n  /** Whether this table row is selected */\n  @Input()\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get selected(): boolean {\n    return this._selected;\n  }\n  private _selected: boolean = false;\n\n  @Output()\n  select: EventEmitter<void> = new EventEmitter();\n\n  constructor(protected _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) {}\n\n  _onSelect($event) {\n    if (!this._selectable || this.isActionEvent($event)) {\n      return;\n    }\n\n    if ($event.keyCode === SPACE) {\n      $event.preventDefault();\n    }\n\n    this.select.emit();\n  }\n\n  /**\n   * Checks if the event would trigger an action.\n   * Return `true` if a button, link, input or label are clicked.\n   */\n  private isActionEvent($event) {\n    let parent: HTMLElement = $event.target;\n\n    while (parent && parent !== this._elementRef.nativeElement) {\n      if (['A', 'INPUT', 'BUTTON'].indexOf(parent.tagName) >= 0) {\n        return true;\n      } else if (parent.tagName === 'LABEL' && parent.getAttribute('for')) {\n        return true;\n      }\n\n      parent = parent.parentElement;\n    }\n\n    return false;\n  }\n}\n","import { Component, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { NxExpandable } from './toggle-button.component';\n\n/**\n * This is an expandable table row.\n * It can collapse its height to hide the content.\n * Requires the table cells to have the `[nxExpandableTableCell]` component.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'tr[nxExpandableTableRow]',\n  host: {\n   'class': 'nx-expandable-table-row'\n  },\n  template: `<ng-content></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxExpandableTableRowComponent implements NxExpandable {\n  expanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Toggles the expansion of this row.\n   */\n  toggle() {\n    if (this.expanded.value) {\n      this.close();\n    } else {\n      this.expand();\n    }\n  }\n\n  /**\n   * Expands this row.\n   */\n  expand() {\n    if (!this.expanded.value) {\n      this.expanded.next(true);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Closes this row.\n   */\n  close() {\n    if (this.expanded.value) {\n      this.expanded.next(false);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { ChangeDetectionStrategy, Component, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NxExpandableTableRowComponent } from './expandable-table-row.component';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * This is an expandable table cell.\n * Only works in conjunction with the `[nxExpandableTableRow]` component.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'td[nxExpandableTableCell]',\n  templateUrl: './expandable-table-cell.component.html',\n  host: {\n    'class': 'nx-expandable-table-cell'\n  },\n  animations: [\n    trigger('openClose', [\n      state('open', style({\n        height: '*',\n        visibility: 'visible'\n      })),\n      state('closed, void', style({\n        height: '0',\n        visibility: 'hidden' // visibility and height to toggle instead of display: none to prevent cell width jumping\n      })),\n      transition('closed <=> open, void => closed', [\n        animate('225ms cubic-bezier(0.4,0.0,0.2,1)')\n      ])\n    ])\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxExpandableTableCellComponent implements OnDestroy {\n  private _destroyed = new Subject();\n\n  _open: boolean = false;\n\n  constructor(\n      _row: NxExpandableTableRowComponent,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    _row.expanded.pipe(takeUntil(this._destroyed))\n      .subscribe(open => {\n        this._open = open;\n        this._changeDetectorRef.markForCheck();\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n}\n","import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { Subscription, BehaviorSubject } from 'rxjs';\n\nexport interface NxExpandable {\n  /** Indicates if this expandable instance is open or not.  */\n  expanded: BehaviorSubject<boolean>;\n\n  /** Toggles the open state. */\n  toggle: () => void;\n\n  /** Expands this component. */\n  expand: () => void;\n\n  /** Closes this component. */\n  close: () => void;\n}\n\n/**\n * This toggle button can be clicked and toggles expandable elements.\n * e.g. it can toggle a expandable table row or anything else that implements the `NxExpandable` interface.\n */\n@Component({\n  selector: 'nx-toggle-button',\n  templateUrl: './toggle-button.component.html',\n  styleUrls: ['./toggle-button.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxToggleButtonComponent implements OnDestroy {\n  _expanded: boolean = false;\n\n  /**\n   * This is the expandable target that will be toggled when the user clicks the button.\n   */\n  @Input()\n  set target(value: NxExpandable) {\n    this._target = value;\n\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n\n    if (this._target) {\n      this._subscription = this._target.expanded.subscribe(expanded => {\n          this._expanded = expanded;\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n  _target: NxExpandable;\n\n  @Input()\n  set ariaLabel(value: string) {\n    this._ariaLabel = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  _ariaLabel: string = '';\n\n  private _subscription: Subscription;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  _onClick() {\n    if (this._target) {\n      this._target.toggle();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n}\n","import { ContentChildren, QueryList, AfterViewInit, Directive } from '@angular/core';\nimport { NxExpandableTableRowComponent } from './expandable-table-row.component';\nimport { flatMap, startWith, map, distinctUntilChanged } from 'rxjs/operators';\nimport { combineLatest, BehaviorSubject } from 'rxjs';\nimport { NxExpandable } from './toggle-button.component';\n\n/**\n * The nxExpandableTable adds row expansion functionality to the nxTable.\n * It provides the logic to expand/collapse all expandable rows simultanously.\n */\n@Directive({\n  selector: 'table[nxExpandableTable]',\n  exportAs: 'nxExpandableTable'\n})\nexport class NxExpandableTableDirective implements AfterViewInit, NxExpandable {\n  @ContentChildren(NxExpandableTableRowComponent, { descendants: true }) rows: QueryList<NxExpandableTableRowComponent>;\n\n  expanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  ngAfterViewInit() {\n    this.rows.changes.pipe(\n      startWith(this.rows),\n      flatMap((rows: NxExpandableTableRowComponent[]) => {\n        return combineLatest(rows.map(row => row.expanded));\n      }),\n      map((values: boolean[]) =>\n        values.reduce((a, x) => a && x, true)\n      ),\n      distinctUntilChanged()\n    )\n    .subscribe((rowsOpen) => {\n      this.expanded.next(rowsOpen);\n    });\n  }\n\n  /**\n   * Toggles the expandable rows. If all rows are open it will close them, otherwise it will open them.\n   */\n  toggle() {\n    if (this.expanded.value) {\n      this.close();\n    } else {\n      this.expand();\n    }\n  }\n\n  /**\n   * Expands all expandable rows.\n   */\n  expand() {\n    this.rows.forEach(row => row.expanded.next(true));\n  }\n\n  /**\n   * Closes all expandable rows.\n   */\n  close() {\n    this.rows.forEach(row => row.expanded.next(false));\n  }\n}\n","import { Directive, Output, EventEmitter, Input, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nexport type SortDirection = 'asc' | 'desc';\n\nexport class SortEvent {\n  /** The name of the column that is being sorted by. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n\n  constructor(active, direction) {\n    this.active = active;\n    this.direction = direction;\n  }\n}\n\n@Directive({\n  selector: 'table[nxSort]',\n  exportAs: 'NxSortDirective'\n})\nexport class NxSortDirective implements OnDestroy {\n\n  readonly _stateChanges = new Subject<void>();\n\n  private _active: string;\n\n  /** Sets the key of the most recently sorted column. */\n  @Input()\n  set active(value: string) {\n    if (this._active !== value) {\n      this._active = value;\n      this.sortChange.emit(new SortEvent(this.active, this.direction));\n      this._stateChanges.next();\n    }\n  }\n  get active(): string {\n    return this._active;\n  }\n\n  private _direction: SortDirection = 'asc';\n\n  /** Sets the direction of the currently active sorted column. Default: 'asc'. */\n  @Input()\n  set direction(value: SortDirection) {\n    if (this._direction !== value) {\n      this._direction = value;\n      this.sortChange.emit(new SortEvent(this.active, this.direction));\n      this._stateChanges.next();\n    }\n  }\n  get direction(): SortDirection {\n    return this._direction;\n  }\n\n  /**\n   * @docs-private\n   * An event emitted when the active value has changed.\n   */\n  @Output() readonly activeChange: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * @docs-private\n   * An event emitted when the direction value has changed.\n   */\n  @Output() readonly directionChange: EventEmitter<SortDirection> = new EventEmitter<SortDirection>();\n\n  /** An event emitted when either the active sort or sort direction changes. */\n  @Output() readonly sortChange: EventEmitter<SortEvent> = new EventEmitter<SortEvent>();\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /**\n   * Sets the active sort key and determines the new sort direction.\n   * Afterwards the output event `sortChange` is called.\n   *\n   * If `sortable` is not the key of the active sort header, the initial direction to sort is 'asc'.\n   * Otherwise the direction of the sorted column changes.\n   */\n  sort(sortable: string): void {\n    if (this._active !== sortable) {\n      this._active = sortable;\n      this.activeChange.emit(this.active);\n      this._direction = 'asc';\n      this.directionChange.emit(this.direction);\n    } else if (this._direction === 'asc') {\n      this._direction = 'desc';\n      this.directionChange.emit(this.direction);\n    } else {\n      this._direction = 'asc';\n      this.directionChange.emit(this.direction);\n    }\n\n    this.sortChange.emit(new SortEvent(this.active, this.direction));\n    this._stateChanges.next();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class NxSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** The aria label for a header that can be sorted ascending. */\n  sortAscendingAriaLabel: string = 'sort ascending by';\n  /** The aria label for a header that can be sorted descending. */\n  sortDescendingAriaLabel: string = 'sort descending by';\n}\n","import { Component, Input, Optional, ChangeDetectionStrategy, OnInit, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NxSortDirective } from './sort.directive';\nimport { Subscription } from 'rxjs';\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { NxSortHeaderIntl } from './sort-header-intl';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'th[nxSortHeaderCell]',\n  exportAs: 'nxSortHeaderComponent',\n  templateUrl: 'sort-header.component.html',\n  styleUrls: ['sort-header.component.scss'],\n  host: {\n    '(click)': '_handleClick()',\n    '(keydown)': '_onKeydown($event)'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxSortHeaderComponent implements OnInit, OnDestroy {\n\n  private _parentChangeSubscription: Subscription;\n  private _intlSubscription: Subscription;\n  private _key: string;\n\n  /** Sets the key of this sort header. */\n  @Input('nxSortHeaderCell')\n  set key(value: string) {\n    if (this._key !== value) {\n      this._key = value;\n    }\n  }\n  get key(): string {\n    return this._key;\n  }\n\n  constructor(@Optional() public _sort: NxSortDirective,\n    public _intl: NxSortHeaderIntl,\n    private _changeDetectorRef: ChangeDetectorRef\n  ) {\n    this._intlSubscription = this._intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._parentChangeSubscription = this._sort._stateChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._parentChangeSubscription) {\n      this._parentChangeSubscription.unsubscribe();\n    }\n    this._intlSubscription.unsubscribe();\n  }\n\n  _handleClick() {\n    this._sort.sort(this._key);\n  }\n\n  _onKeydown($event) {\n    if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {\n      this._sort.sort(this._key);\n\n      // prevent page from scrolling down\n      if ($event.keyCode === SPACE) {\n        $event.preventDefault();\n      }\n    }\n  }\n\n  _isSortedAscending() {\n    return (this._sort.active === this._key && this._sort.direction === 'asc');\n  }\n\n  _isSortedDescending() {\n    return (this._sort.active === this._key && this._sort.direction === 'desc');\n  }\n\n  _getAriaLabel(): string {\n    if (this._sort.active === this._key && this._sort.direction === 'asc') {\n      return `${this._intl.sortDescendingAriaLabel}`;\n    }\n    return `${this._intl.sortAscendingAriaLabel}`;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxTableCellComponent } from './table-cell.component';\nimport { NxHeaderCellDirective } from './header-cell.directive';\nimport { NxTableComponent } from './table.component';\nimport { NxTableRowComponent } from './table-row.component';\nimport { NxExpandableTableCellComponent } from './expandable/expandable-table-cell.component';\nimport { NxExpandableTableRowComponent } from './expandable/expandable-table-row.component';\nimport { NxToggleButtonComponent } from './expandable/toggle-button.component';\nimport { NxExpandableTableDirective } from './expandable/expandable-table.directive';\nimport { NxSortHeaderComponent } from './sort-header/sort-header.component';\nimport { NxSortDirective } from './sort-header/sort.directive';\nimport { NxSortHeaderIntl } from './sort-header/sort-header-intl';\n\nconst EXPORTED_DECLARED_ELEMENTS = [\n  NxHeaderCellDirective,\n  NxTableComponent,\n  NxTableCellComponent,\n  NxTableComponent,\n  NxTableRowComponent,\n  NxToggleButtonComponent,\n  NxExpandableTableDirective,\n  NxExpandableTableRowComponent,\n  NxExpandableTableCellComponent,\n  NxSortHeaderComponent,\n  NxSortDirective\n];\n@NgModule({\n  declarations: EXPORTED_DECLARED_ELEMENTS,\n  exports: EXPORTED_DECLARED_ELEMENTS,\n  imports: [\n    CommonModule,\n    NxIconModule\n  ],\n  providers: [ NxSortHeaderIntl ],\n})\nexport class NxTableModule { }\n"],"names":["Component","ChangeDetectionStrategy","Directive","coerceBooleanProperty","ChangeDetectorRef","Input","EventEmitter","SPACE","ElementRef","Output","BehaviorSubject","Subject","takeUntil","trigger","state","style","transition","animate","startWith","flatMap","combineLatest","map","distinctUntilChanged","ContentChildren","Injectable","ENTER","Optional","NgModule","CommonModule","NxIconModule"],"mappings":"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"}