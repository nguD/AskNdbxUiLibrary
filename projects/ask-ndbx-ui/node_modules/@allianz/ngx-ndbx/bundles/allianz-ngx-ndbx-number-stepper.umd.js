(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@angular/core'), require('@allianz/ngx-ndbx/utils'), require('@angular/cdk/coercion'), require('@angular/common'), require('@allianz/ngx-ndbx/button'), require('@allianz/ngx-ndbx/icon'), require('@allianz/ngx-ndbx/input'), require('@angular/forms'), require('@allianz/ngx-ndbx/core'), require('decimal.js')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/number-stepper', ['exports', 'rxjs', '@angular/core', '@allianz/ngx-ndbx/utils', '@angular/cdk/coercion', '@angular/common', '@allianz/ngx-ndbx/button', '@allianz/ngx-ndbx/icon', '@allianz/ngx-ndbx/input', '@angular/forms', '@allianz/ngx-ndbx/core', 'decimal.js'], factory) :
    (global = global || self, factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx']['number-stepper'] = {}), global.rxjs, global.ng.core, global.allianz['ngx-ndbx'].utils, global.ng.cdk.coercion, global.ng.common, global.allianz['ngx-ndbx'].button, global.allianz['ngx-ndbx'].icon, global.allianz['ngx-ndbx'].input, global.ng.forms, global.allianz['ngx-ndbx'].core, global.decimal_js));
}(this, (function (exports, rxjs, core, utils, coercion, common, button, icon, input, forms, core$1, decimal_js) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: number-stepper-intl.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxNumberStepperIntl = /** @class */ (function () {
        function NxNumberStepperIntl() {
            /**
             * Stream that emits whenever the labels here are changed. Use this to notify
             * components if the labels have changed after initialization.
             */
            this.changes = new rxjs.Subject();
            /**
             * The aria label for the decrement '-' button
             */
            this.decrementAriaLabel = 'Decrement';
            /**
             * The aria label for the increment '+' button
             */
            this.incrementAriaLabel = 'Increment';
        }
        NxNumberStepperIntl.decorators = [
            { type: core.Injectable }
        ];
        return NxNumberStepperIntl;
    }());
    if (false) {
        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the labels have changed after initialization.
         * @type {?}
         */
        NxNumberStepperIntl.prototype.changes;
        /**
         * The aria label for the decrement '-' button
         * @type {?}
         */
        NxNumberStepperIntl.prototype.decrementAriaLabel;
        /**
         * The aria label for the increment '+' button
         * @type {?}
         */
        NxNumberStepperIntl.prototype.incrementAriaLabel;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: auto-resize.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@docs-private
     */
    var NxAutoResizeDirective = /** @class */ (function () {
        function NxAutoResizeDirective(_element, _renderer, _cdr) {
            this._element = _element;
            this._renderer = _renderer;
            this._cdr = _cdr;
            this._resize = true;
            this.updateInputWidth = this.updateInputWidth.bind(this);
        }
        Object.defineProperty(NxAutoResizeDirective.prototype, "resize", {
            get: /**
             * @return {?}
             */
            function () {
                return this._resize;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._resize = coercion.coerceBooleanProperty(value);
                if (this._resize) {
                    this._addEventListener();
                    this.updateInputWidth();
                }
                else {
                    this._removeEventListener();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NxAutoResizeDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            if (this.resize) {
                this._addEventListener();
            }
        };
        /**
         * @return {?}
         */
        NxAutoResizeDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this._removeEventListener();
        };
        /**
         * @return {?}
         */
        NxAutoResizeDirective.prototype.updateInputWidth = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var measureCanvas = this._renderer.createElement('canvas');
            /** @type {?} */
            var ctx = measureCanvas.getContext('2d');
            /** @type {?} */
            var styles = window.getComputedStyle(this._element.nativeElement);
            ctx.font = utils.getFontShorthand(styles);
            /** @type {?} */
            var metrics = ctx.measureText(this._element.nativeElement.value);
            /** @type {?} */
            var padding = this.sumStyles(styles.paddingLeft, styles.paddingRight);
            /** @type {?} */
            var border = this.sumStyles(styles.borderLeftWidth, styles.borderRightWidth);
            // the pixels are needed, because despite the correct calculation the last pixels of a number are always cut
            /** @type {?} */
            var newWidth = metrics.width + padding + border + 16;
            // Limit to own given minimal width
            /** @type {?} */
            var parsed = parseFloat(styles.minWidth);
            this.width = Math.max(Number.isNaN(parsed) ? 0 : parsed, newWidth);
            // needed when the outer component is onPush
            this._cdr.markForCheck();
        };
        /**
         * @return {?}
         */
        NxAutoResizeDirective.prototype._addEventListener = /**
         * @return {?}
         */
        function () {
            this._element.nativeElement.addEventListener('input', this.updateInputWidth, true);
            this._element.nativeElement.addEventListener('change', this.updateInputWidth, true);
        };
        /**
         * @return {?}
         */
        NxAutoResizeDirective.prototype._removeEventListener = /**
         * @return {?}
         */
        function () {
            this._element.nativeElement.removeEventListener('input', this.updateInputWidth, true);
            this._element.nativeElement.removeEventListener('change', this.updateInputWidth, true);
        };
        /**
         * @param {?} left
         * @param {?} right
         * @return {?}
         */
        NxAutoResizeDirective.prototype.sumStyles = /**
         * @param {?} left
         * @param {?} right
         * @return {?}
         */
        function (left, right) {
            left = parseInt(left, 10);
            right = parseInt(right, 10);
            left = Number.isNaN(left) ? 0 : left;
            right = Number.isNaN(right) ? 0 : right;
            return left + right;
        };
        NxAutoResizeDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'input[nxAutoResize]'
                    },] }
        ];
        /** @nocollapse */
        NxAutoResizeDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 },
            { type: core.ChangeDetectorRef }
        ]; };
        NxAutoResizeDirective.propDecorators = {
            width: [{ type: core.HostBinding, args: ['style.width.px',] }],
            resize: [{ type: core.Input, args: ['nxAutoResize',] }]
        };
        return NxAutoResizeDirective;
    }());
    if (false) {
        /** @type {?} */
        NxAutoResizeDirective.prototype.width;
        /**
         * @type {?}
         * @private
         */
        NxAutoResizeDirective.prototype._resize;
        /**
         * @type {?}
         * @private
         */
        NxAutoResizeDirective.prototype._element;
        /**
         * @type {?}
         * @private
         */
        NxAutoResizeDirective.prototype._renderer;
        /**
         * @type {?}
         * @private
         */
        NxAutoResizeDirective.prototype._cdr;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: number-stepper.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var SIZE_MAPPING = {
        big: 'nx-stepper--big',
        normal: ''
    };
    /** @type {?} */
    var DEFAULT_CLASSES = ['nx-stepper'];
    /** @type {?} */
    var INPUT_CLASSES = ['nx-stepper__input'];
    /** @type {?} */
    var ALLOWED_CHARACTERS = new RegExp(/^-?[0-9]\d*(\.\d+)?$/g);
    /** @type {?} */
    var CUSTOM_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef((/**
         * @return {?}
         */
        function () { return NxNumberStepperComponent; })),
        multi: true
    };
    /** @type {?} */
    var CUSTOM_VALIDATOR = {
        provide: forms.NG_VALIDATORS,
        useExisting: core.forwardRef((/**
         * @return {?}
         */
        function () { return NxNumberStepperComponent; })),
        multi: true
    };
    /** @type {?} */
    var nextUniqueId = 0;
    var NxNumberStepperComponent = /** @class */ (function (_super) {
        __extends(NxNumberStepperComponent, _super);
        function NxNumberStepperComponent(_changeDetectorRef, _renderer, _elementRef, _intl) {
            var _this = _super.call(this, SIZE_MAPPING, DEFAULT_CLASSES, _elementRef, _renderer) || this;
            _this._changeDetectorRef = _changeDetectorRef;
            _this._intl = _intl;
            _this._step = 1;
            _this._min = 0;
            _this._max = 100;
            _this._value = 0;
            _this._label = null;
            _this._resize = false;
            _this._negative = false;
            _this._leadingZero = true;
            /**
             * \@docs-private
             */
            _this.inputClassNames = utils.mapClassNames('regular', INPUT_CLASSES);
            /**
             * \@docs-private
             */
            _this.inputId = "nx-number-stepper-" + nextUniqueId++;
            /**
             * \@docs-private
             */
            _this.ariaDescribedBy = null;
            /**
             * An event emitted on value change.
             */
            _this.valueChange = new core.EventEmitter();
            _this.onChangeCallback = (/**
             * @param {?} _
             * @return {?}
             */
            function (_) { });
            /**
             * \@docs-private
             */
            _this.onTouchedCallback = (/**
             * @return {?}
             */
            function () { });
            _this._intlSubscription = _this._intl.changes.subscribe((/**
             * @return {?}
             */
            function () { return _this._changeDetectorRef.markForCheck(); }));
            return _this;
        }
        Object.defineProperty(NxNumberStepperComponent.prototype, "resize", {
            get: /**
             * @return {?}
             */
            function () {
                return this._resize;
            },
            /** Whether the input should be resized. Default: false */
            set: /**
             * Whether the input should be resized. Default: false
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._resize = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxNumberStepperComponent.prototype, "label", {
            get: /**
             * @return {?}
             */
            function () {
                return this._label;
            },
            /** Defines the the label shown above the stepper input. */
            set: /**
             * Defines the the label shown above the stepper input.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (this._label !== value) {
                    this._label = value;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxNumberStepperComponent.prototype, "step", {
            get: /**
             * @return {?}
             */
            function () {
                return this._step;
            },
            /** Sets the step size. Default: 1 */
            set: /**
             * Sets the step size. Default: 1
             * @param {?} value
             * @return {?}
             */
            function (value) {
                // only internal changes no need to call markForCheck
                this._step = Number(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxNumberStepperComponent.prototype, "min", {
            get: /**
             * @return {?}
             */
            function () {
                return this._min;
            },
            /** Sets the minimum accepted number. Default: 0 */
            set: /**
             * Sets the minimum accepted number. Default: 0
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._min = Number(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxNumberStepperComponent.prototype, "max", {
            get: /**
             * @return {?}
             */
            function () {
                return this._max;
            },
            /** Sets the maximum accepted number. Default: 100 */
            set: /**
             * Sets the maximum accepted number. Default: 100
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._max = Number(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxNumberStepperComponent.prototype, "value", {
            get: /**
             * @return {?}
             */
            function () {
                return this._value;
            },
            /** Sets the value of the number-stepper. */
            set: /**
             * Sets the value of the number-stepper.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._value = value;
                if (this._value !== null) {
                    this.setInputValue(this._value);
                }
                else {
                    this.setInputValue(0);
                }
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxNumberStepperComponent.prototype, "negative", {
            get: /**
             * @return {?}
             */
            function () {
                return this._negative;
            },
            /** Whether the negative set of styling should be used. */
            set: /**
             * Whether the negative set of styling should be used.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (this._negative !== value) {
                    this._negative = coercion.coerceBooleanProperty(value);
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxNumberStepperComponent.prototype, "leadingZero", {
            get: /**
             * @return {?}
             */
            function () {
                return this._leadingZero;
            },
            /** Whether the number stepper value should have a leading zero.
             *
             * Default value is true.
             */
            set: /**
             * Whether the number stepper value should have a leading zero.
             *
             * Default value is true.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (this._leadingZero !== value) {
                    this._leadingZero = coercion.coerceBooleanProperty(value);
                    this.setInputValue(this.value);
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NxNumberStepperComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.setInputValue(this._value);
        };
        /**
         * @return {?}
         */
        NxNumberStepperComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            if (this.ngContentWrapper) {
                this.ariaDescribedBy = this.ngContentWrapper.nativeElement.children.length > 0 ? "label-for-" + this.inputId : null;
            }
        };
        /**
         * @return {?}
         */
        NxNumberStepperComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this._intlSubscription.unsubscribe();
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        NxNumberStepperComponent.prototype.setInputValue = /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (this.leadingZero) {
                this.numberInputValue = utils.pad(value.toString(), 2);
            }
            else {
                this.numberInputValue = value.toString();
            }
            // use timeout to get the current value of numberInputValue
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.triggerResize();
            }));
        };
        /* ControlValueAccessor Implementations */
        /* ControlValueAccessor Implementations */
        /**
         * @param {?} value
         * @return {?}
         */
        NxNumberStepperComponent.prototype.writeValue = /* ControlValueAccessor Implementations */
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value = value;
        };
        /**
         * @param {?} onChange
         * @return {?}
         */
        NxNumberStepperComponent.prototype.registerOnChange = /**
         * @param {?} onChange
         * @return {?}
         */
        function (onChange) {
            this.onChangeCallback = onChange;
        };
        /**
         * @param {?} onTouched
         * @return {?}
         */
        NxNumberStepperComponent.prototype.registerOnTouched = /**
         * @param {?} onTouched
         * @return {?}
         */
        function (onTouched) {
            this.onTouchedCallback = onTouched;
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        NxNumberStepperComponent.prototype.onInputChange = /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!this.validateUserInput(event.target.value)) {
                this._value = null;
            }
            else {
                this._value = Number(event.target.value);
            }
            // setInputValue() should be called so that numberInputValue is updated with the user input
            if (this._value !== null) {
                this.setInputValue(this._value);
            }
            this.valueChange.emit(this._value);
            this.onChangeCallback(this._value);
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} input
         * @return {?}
         */
        NxNumberStepperComponent.prototype.validateUserInput = /**
         * \@docs-private
         * @param {?} input
         * @return {?}
         */
        function (input) {
            return !!input.match(ALLOWED_CHARACTERS);
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxNumberStepperComponent.prototype.incrementOnClick = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            this._increment();
            this.onTouchedCallback();
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxNumberStepperComponent.prototype.incrementOnKey = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            this._increment();
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxNumberStepperComponent.prototype._increment = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var newValue;
            if (this.isBetweenLimits(this._value)) {
                newValue = this.getNextGreaterValue(this._value);
            }
            else {
                newValue = this.enforceLimits(this._value);
            }
            this.value = newValue;
            this.valueChange.emit(this._value);
            this.onChangeCallback(this._value);
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxNumberStepperComponent.prototype.triggerResize = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            if (this.resize) {
                this.autoResize.updateInputWidth();
                this._changeDetectorRef.markForCheck();
            }
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxNumberStepperComponent.prototype.decrementOnClick = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            this._decrement();
            this.onTouchedCallback();
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxNumberStepperComponent.prototype.decrementOnKey = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            this._decrement();
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxNumberStepperComponent.prototype._decrement = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var newValue;
            if (this.isBetweenLimits(this._value)) {
                newValue = this.getNextLowerValue(this._value);
            }
            else {
                newValue = this.enforceLimits(this._value);
            }
            this.value = newValue;
            this.valueChange.emit(this._value);
            this.onChangeCallback(this._value);
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        NxNumberStepperComponent.prototype.enforceLimits = /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value > this._max) {
                return this._max;
            }
            else if (value < this._min) {
                return this._min;
            }
            return value;
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} start
         * @return {?}
         */
        NxNumberStepperComponent.prototype.getNextLowerValue = /**
         * \@docs-private
         * @param {?} start
         * @return {?}
         */
        function (start) {
            // if there is an invalid input start is null
            if (!start) {
                start = 0;
            }
            /** @type {?} */
            var next;
            if (this.isValidStep(start)) {
                next = (new decimal_js.Decimal(start).minus(new decimal_js.Decimal(this._step))).toNumber();
            }
            else {
                next = new decimal_js.Decimal(start).toNearest(this._step, decimal_js.Decimal.ROUND_DOWN).toNumber();
            }
            return this.enforceLimits(next);
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} start
         * @return {?}
         */
        NxNumberStepperComponent.prototype.getNextGreaterValue = /**
         * \@docs-private
         * @param {?} start
         * @return {?}
         */
        function (start) {
            /** @type {?} */
            var next;
            if (!start) {
                start = 0;
            }
            if (this.isValidStep(start)) {
                next = (new decimal_js.Decimal(start).plus(new decimal_js.Decimal(this._step))).toNumber();
            }
            else {
                next = new decimal_js.Decimal(start).toNearest(this._step, decimal_js.Decimal.ROUND_UP).toNumber();
            }
            return this.enforceLimits(next);
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        NxNumberStepperComponent.prototype.isBetweenLimits = /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return value <= this._max && value >= this._min;
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxNumberStepperComponent.prototype.isMinimum = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._value === this._min;
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxNumberStepperComponent.prototype.isMaximum = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._value === this._max;
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        NxNumberStepperComponent.prototype.isValidStep = /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value === null) {
                value = new decimal_js.Decimal(0);
            }
            /** @type {?} */
            var min = new decimal_js.Decimal(this._min);
            /** @type {?} */
            var valueDec = new decimal_js.Decimal(value);
            /** @type {?} */
            var checkValue = (min.minus(valueDec)).mod(new decimal_js.Decimal(this._step)).toNumber();
            if (this.isBetweenLimits(value) && ((this.isMinimum() || this.isMaximum()) ||
                checkValue === 0)) {
                return true;
            }
            return false;
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        NxNumberStepperComponent.prototype.userInputToNumber = /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var current = value === '' ? 0 : value;
            return parseInt(current, 10);
        };
        /**
         * @return {?}
         */
        NxNumberStepperComponent.prototype._validateFn = /**
         * @return {?}
         */
        function () {
            // the manual user input must match min + n * step, e.g. minimum 1 step 2: 1, 3, 5, 7 etc.
            if (!this.isValidStep(this._value)) {
                return { nxNumberStepperStepError: 'Value is not a valid step' };
            }
            else if (this._value === null) {
                return { nxNumberStepperFormatError: 'Not a valid number' };
            }
            return null;
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} c
         * @return {?}
         */
        NxNumberStepperComponent.prototype.validate = /**
         * \@docs-private
         * @param {?} c
         * @return {?}
         */
        function (c) {
            return this._validateFn();
        };
        Object.defineProperty(NxNumberStepperComponent.prototype, "_buttonType", {
            get: /**
             * @return {?}
             */
            function () {
                return 'secondary' + (this.negative ? ' negative' : '');
            },
            enumerable: true,
            configurable: true
        });
        NxNumberStepperComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-number-stepper',
                        template: "<div *ngIf=\"label\" class=\"nx-stepper__label\">\n  <label [for]=\"inputId\">\n    {{label}}\n  </label>\n</div>\n<div class=\"nx-stepper__label\" #customLabel *ngIf=\"!label\" [id]=\"ariaDescribedBy\">\n  <ng-content></ng-content>\n</div>\n<div class=\"nx-stepper__input-container\">\n  <button\n    [attr.aria-label]=\"_intl.decrementAriaLabel\"\n    [nxButton]=\"_buttonType\"\n    class=\"nx-stepper__down nx-stepper__control\"\n    (click)=\"decrementOnClick()\"\n    [disabled]=\"value <= min\"\n    type=\"button\">\n    <nx-icon name=\"minus\" size=\"s\"></nx-icon>\n  </button>\n  <div class=\"nx-stepper__input-wrapper\">\n    <div class=\"nx-stepper__inner-wrapper\">\n        <ng-content select=\"nx-number-stepper-prefix\"></ng-content>\n\n        <input [nxAutoResize]=\"resize\" [value]=\"numberInputValue\"\n        [attr.aria-describedby]=\"ariaDescribedBy\"\n        [id]=\"inputId\" [ngClass]=\"inputClassNames\"\n        (input)=\"onInputChange($event)\"\n        (keydown.arrowup)=\"incrementOnKey()\"\n        (keydown.arrowdown)=\"decrementOnKey()\"\n        (blur)=\"onTouchedCallback()\"/>\n\n        <ng-content select=\"nx-number-stepper-suffix\"></ng-content>\n    </div>\n    <div class=\"nx-stepper__input-underline\"></div>\n  </div>\n\n  <button\n    [attr.aria-label]=\"_intl.incrementAriaLabel\"\n    [nxButton]=\"_buttonType\"\n    class=\"nx-stepper__up nx-stepper__control\"\n    (click)=\"incrementOnClick()\"\n    [disabled]=\"value >= max\"\n    type=\"button\">\n    <nx-icon name=\"plus\" size=\"s\"></nx-icon>\n  </button>\n</div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        inputs: ['classNames: nxSize'],
                        host: {
                            '[class.is-negative]': 'negative'
                        },
                        providers: [CUSTOM_VALUE_ACCESSOR, CUSTOM_VALIDATOR],
                        styles: [":host{display:block}:host input{padding:0}.nx-stepper__input-container{align-items:flex-end;display:flex;margin-top:12px}.nx-stepper__label{display:flex;font-size:20px;font-size:var(--number-stepper-label-font-size,20px);line-height:28px;line-height:var(--number-stepper-label-line-height,28px);font-weight:400;font-weight:var(--number-stepper-label-font-weight,400);letter-spacing:.2px;letter-spacing:var(--number-stepper-label-letter-spacing,.2px)}.nx-stepper__control{width:32px;height:32px;min-height:32px;font-size:24px;margin:0;padding:0}.nx-stepper__input{width:56px;min-width:56px}.nx-stepper__input,::ng-deep .nx-stepper__prefix,::ng-deep .nx-stepper__suffix{font-size:20px;font-size:var(--number-stepper-small-font-size,20px);line-height:28px;line-height:var(--number-stepper-small-line-height,28px);font-weight:400;font-weight:var(--number-stepper-small-font-weight,400);letter-spacing:.2px;letter-spacing:var(--number-stepper-small-letter-spacing,.2px);color:#414141;color:var(--number-stepper-color,#414141);background:0 0;outline:0;border:0;text-align:center}::ng-deep .nx-stepper__suffix{margin-left:4px}::ng-deep .nx-stepper__prefix{margin-right:4px}.nx-stepper__input-wrapper{display:flex;align-items:center;flex-direction:column;margin:0 16px}.nx-stepper__inner-wrapper{height:28px;display:flex;align-items:baseline}.nx-stepper__input-underline{width:100%;margin-top:2px;height:2px;background:#414141;background:var(--number-stepper-underline-color,#414141)}:host.nx-stepper--big .nx-stepper__control{width:72px;min-height:48px;margin-bottom:0}:host.nx-stepper--big .nx-stepper__input{width:72px;min-width:72px}:host.nx-stepper--big .nx-stepper__input,:host.nx-stepper--big ::ng-deep .nx-stepper__prefix,:host.nx-stepper--big ::ng-deep .nx-stepper__suffix{font-size:40px;font-size:var(--number-stepper-large-font-size,40px);line-height:48px;line-height:var(--number-stepper-large-line-height,48px);font-weight:400;font-weight:var(--number-stepper-large-font-weight,400);letter-spacing:.3px;letter-spacing:var(--number-stepper-large-letter-spacing,.3px);height:48px;padding:0;margin-bottom:0}:host.nx-stepper--big .nx-stepper__input-wrapper{margin:0 24px}:host.nx-stepper--big .nx-stepper__input-underline{margin-top:-2px}:host.nx-stepper--big .nx-stepper__inner-wrapper{height:48px}:host.is-negative .nx-stepper__label,:host.is-negative ::ng-deep .nx-stepper__prefix,:host.is-negative ::ng-deep .nx-stepper__suffix{color:#fff}:host.is-negative .nx-stepper__input{color:#fff}:host.is-negative .nx-stepper__input-underline{background:#fff}@media screen and (-ms-high-contrast:active){button.nx-stepper__control:disabled{border-color:GrayText;color:GrayText;opacity:1}.nx-stepper__input{color:buttonText}::ng-deep .nx-stepper__prefix,::ng-deep .nx-stepper__suffix,:host.nx-stepper--big ::ng-deep .nx-stepper__prefix,:host.nx-stepper--big ::ng-deep .nx-stepper__suffix{-ms-high-contrast-adjust:none;color:windowText}.nx-stepper__inner-wrapper{background:buttonFace}.nx-stepper__input-underline{background:buttonText}}"]
                    }] }
        ];
        /** @nocollapse */
        NxNumberStepperComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: core.Renderer2 },
            { type: core.ElementRef },
            { type: NxNumberStepperIntl }
        ]; };
        NxNumberStepperComponent.propDecorators = {
            ngContentWrapper: [{ type: core.ViewChild, args: ['customLabel', { static: false },] }],
            autoResize: [{ type: core.ViewChild, args: [NxAutoResizeDirective, { static: true },] }],
            valueChange: [{ type: core.Output, args: ['nxValueChange',] }],
            resize: [{ type: core.Input, args: ['nxResize',] }],
            label: [{ type: core.Input, args: ['nxLabel',] }],
            step: [{ type: core.Input, args: ['nxStep',] }],
            min: [{ type: core.Input, args: ['nxMin',] }],
            max: [{ type: core.Input, args: ['nxMax',] }],
            value: [{ type: core.Input, args: ['nxValue',] }],
            negative: [{ type: core.Input }],
            leadingZero: [{ type: core.Input }]
        };
        return NxNumberStepperComponent;
    }(core$1.MappedStyles));
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NxNumberStepperComponent.prototype._step;
        /**
         * @type {?}
         * @private
         */
        NxNumberStepperComponent.prototype._min;
        /**
         * @type {?}
         * @private
         */
        NxNumberStepperComponent.prototype._max;
        /**
         * @type {?}
         * @private
         */
        NxNumberStepperComponent.prototype._value;
        /**
         * @type {?}
         * @private
         */
        NxNumberStepperComponent.prototype._label;
        /**
         * @type {?}
         * @private
         */
        NxNumberStepperComponent.prototype._resize;
        /**
         * @type {?}
         * @private
         */
        NxNumberStepperComponent.prototype._intlSubscription;
        /**
         * @type {?}
         * @private
         */
        NxNumberStepperComponent.prototype._negative;
        /**
         * @type {?}
         * @private
         */
        NxNumberStepperComponent.prototype._leadingZero;
        /**
         * \@docs-private
         * @type {?}
         */
        NxNumberStepperComponent.prototype.numberInputValue;
        /**
         * Defines the size of the number stepper.
         *
         * Values: big | normal. Default: normal
         * @type {?}
         */
        NxNumberStepperComponent.prototype.classNames;
        /**
         * \@docs-private
         * @type {?}
         */
        NxNumberStepperComponent.prototype.inputClassNames;
        /**
         * \@docs-private
         * @type {?}
         */
        NxNumberStepperComponent.prototype.inputId;
        /**
         * \@docs-private
         * @type {?}
         */
        NxNumberStepperComponent.prototype.inputWidth;
        /**
         * \@docs-private
         * @type {?}
         */
        NxNumberStepperComponent.prototype.ariaDescribedBy;
        /**
         * \@docs-private
         * @type {?}
         */
        NxNumberStepperComponent.prototype.ngContentWrapper;
        /**
         * \@docs-private
         * @type {?}
         */
        NxNumberStepperComponent.prototype.autoResize;
        /**
         * An event emitted on value change.
         * @type {?}
         */
        NxNumberStepperComponent.prototype.valueChange;
        /**
         * @type {?}
         * @private
         */
        NxNumberStepperComponent.prototype.onChangeCallback;
        /**
         * \@docs-private
         * @type {?}
         */
        NxNumberStepperComponent.prototype.onTouchedCallback;
        /**
         * @type {?}
         * @private
         */
        NxNumberStepperComponent.prototype._changeDetectorRef;
        /** @type {?} */
        NxNumberStepperComponent.prototype._intl;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: number-stepper-prefix.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Directive used to pass a suffix to the number stepper.
     */
    var NxNumberStepperPrefixDirective = /** @class */ (function () {
        function NxNumberStepperPrefixDirective() {
        }
        NxNumberStepperPrefixDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: 'nx-number-stepper-prefix',
                        host: {
                            'class': 'nx-stepper__prefix'
                        }
                    },] }
        ];
        return NxNumberStepperPrefixDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: number-stepper-suffix.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Directive used to pass a suffix to the number stepper.
     */
    var NxNumberStepperSuffixDirective = /** @class */ (function () {
        function NxNumberStepperSuffixDirective() {
        }
        NxNumberStepperSuffixDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: 'nx-number-stepper-suffix',
                        host: {
                            'class': 'nx-stepper__suffix'
                        }
                    },] }
        ];
        return NxNumberStepperSuffixDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: number-stepper.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxNumberStepperModule = /** @class */ (function () {
        function NxNumberStepperModule() {
        }
        NxNumberStepperModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            input.NxInputModule,
                            forms.FormsModule,
                            icon.NxIconModule,
                            button.NxButtonModule,
                            common.CommonModule
                        ],
                        exports: [
                            NxNumberStepperComponent,
                            NxAutoResizeDirective,
                            NxNumberStepperPrefixDirective,
                            NxNumberStepperSuffixDirective
                        ],
                        declarations: [
                            NxNumberStepperComponent,
                            NxAutoResizeDirective,
                            NxNumberStepperPrefixDirective,
                            NxNumberStepperSuffixDirective
                        ],
                        providers: [NxNumberStepperIntl],
                    },] }
        ];
        return NxNumberStepperModule;
    }());

    exports.NxNumberStepperComponent = NxNumberStepperComponent;
    exports.NxNumberStepperIntl = NxNumberStepperIntl;
    exports.NxNumberStepperModule = NxNumberStepperModule;
    exports.NxNumberStepperPrefixDirective = NxNumberStepperPrefixDirective;
    exports.NxNumberStepperSuffixDirective = NxNumberStepperSuffixDirective;
    exports.ɵa = NxAutoResizeDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=allianz-ngx-ndbx-number-stepper.umd.js.map
