{"version":3,"sources":["ng://@allianz/ngx-ndbx/code-input/code-input-intl.ts","ng://@allianz/ngx-ndbx/code-input/code-input.component.ts","ng://@allianz/ngx-ndbx/code-input/code-input.module.ts"],"names":["NxCodeInputIntl","this","changes","Subject","inputFieldAriaLabel","ofLabel","Injectable","DEFAULT_INPUT_LENGTH","NxCodeInputComponent","_changeDetectorRef","_el","_control","_intl","_errorStateMatcher","_parentForm","_parentFormGroup","errorState","_codeLength","_type","_isUpDown","_tabindex","_keyCode","Array","_focused","_negative","_disabled","propagateChange","_","propagateTouch","valueAccessor","Object","defineProperty","prototype","value","setInputLength","markForCheck","_convertTo","newValue","coerceBooleanProperty","ngDoCheck","updateErrorState","codeLength","_convertLetterSize","convertTo","toUpperCase","toLowerCase","_keydownAction","event","previousInputField","target","previousElementSibling","nextInputField","nextElementSibling","keyCode","SPACE","BACKSPACE","tagName","selectInput","LEFT_ARROW","preventDefault","RIGHT_ARROW","DOWN_ARROW","UP_ARROW","_selectText","_selectNextInput","slice","currentIndex","_getFocusedInputIndex","join","focusNextInput","type","nextSibling","focus","_pasteClipboard","copiedText","clipboardData","getData","copiedTextIndex","inputIndex","_formatNumberInput","i","length","nativeElement","children","item","srcElement","formattedInput","match","_onBlur","_this","setTimeout","_setFocusState","setDisabledState","isDisabled","disabled","writeValue","valueAsArray","split","_trackByKeyCode","index","_inputGap","registerOnChange","fn","registerOnTouched","oldState","parent","control","newState","isErrorState","getAriaLabel","keyIndex","input","setSelectionRange","err","DOMException","name","Component","args","selector","template","host","[class.nx-code-input]","[class.has-error]","[class.is-negative]","[class.is-disabled]","[attr.tabindex]","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","ElementRef","NgControl","decorators","Self","Optional","ErrorStateMatcher","NgForm","FormGroupDirective","Input","NxCodeInputModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NxCodeInputIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that should replace the 'Enter key' of the aria-label. */\n  inputFieldAriaLabel: string = 'Enter Key';\n\n  /** Label that should replace the 'of' of the aria-label. */\n  ofLabel?: string = 'of';\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  ChangeDetectorRef,\n  ElementRef,\n  Self,\n  Optional,\n  DoCheck\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl, NgForm, FormGroupDirective, FormControl } from '@angular/forms';\nimport { NxCodeInputIntl } from './code-input-intl';\nimport { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';\nimport { BACKSPACE, LEFT_ARROW, RIGHT_ARROW, SPACE, DOWN_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nconst DEFAULT_INPUT_LENGTH = 6;\nconst TAG_NAME_INPUT = 'INPUT';\nconst AUTO_UPPERCASE = 'upper';\nconst AUTO_LOWERCASE = 'lower';\nconst INPUT_FIELD_GAP = 'nx-code-input--field-with-gap';\nexport type NxConversionTypes = 'lower' | 'upper';\n\n@Component({\n  selector: 'nx-code-input',\n  templateUrl: 'code-input.component.html',\n  styleUrls: [\n    'code-input.scss'\n  ],\n  host: {\n    '[class.nx-code-input]': 'true',\n    '[class.has-error]': 'errorState',\n    '[class.is-negative]': 'negative',\n    '[class.is-disabled]': 'disabled',\n    '[attr.tabindex]': '-1'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxCodeInputComponent implements ControlValueAccessor, DoCheck {\n\n  /** Whether the current input of the component has an error. */\n  errorState: boolean = false;\n\n  /** The length of the code input. Default: 6. */\n  @Input('length')\n  set codeLength(value: number) {\n    this._codeLength = value;\n    this.setInputLength();\n    this._changeDetectorRef.markForCheck();\n  }\n  get codeLength() {\n    return this._codeLength;\n  }\n  private _codeLength: number = DEFAULT_INPUT_LENGTH;\n\n  /** The type of HTML input */\n  @Input()\n  set type(value: string) {\n    this._type = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get type() {\n    return this._type;\n  }\n  private _type: string = 'text';\n  private _isUpDown: boolean = false;\n\n  /** Sets the tabindex of the contained input elements. */\n  @Input()\n  set tabindex(value: number) {\n    this._tabindex = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get tabindex(): number {\n    return this._tabindex;\n  }\n  private _tabindex: number = 0;\n\n  /** Whether the form should auto capitalize or lowercase (optional). */\n  @Input('nxConvertTo')\n  set convertTo(value: NxConversionTypes) {\n    this._convertTo = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get convertTo() {\n    return this._convertTo;\n  }\n  private _convertTo?: NxConversionTypes;\n\n  /** The user input in array form */\n  _keyCode: string[] = new Array(DEFAULT_INPUT_LENGTH);\n  private _focused: boolean = false;\n\n  /** Whether the code input uses the negative set of styling. */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._negative !== newValue) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get negative() {\n    return this._negative;\n  }\n\n  private _negative: boolean = false;\n\n  /** Whether the code input is disabled. */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get disabled() {\n    return this._disabled;\n  }\n\n  private _disabled: boolean = false;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _el: ElementRef,\n    @Self() @Optional() public _control: NgControl,\n    public _intl: NxCodeInputIntl,\n    private _errorStateMatcher: ErrorStateMatcher,\n    @Optional() private _parentForm: NgForm,\n    @Optional() private _parentFormGroup: FormGroupDirective) {\n    if (this._control) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this._control.valueAccessor = this;\n    }\n  }\n\n  ngDoCheck() {\n    if (this._control) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  /** Sets the length of the input fields. */\n  setInputLength(): void {\n    if (this.codeLength) {\n      this._keyCode = new Array(this.codeLength);\n    } else {\n      this._keyCode = new Array(DEFAULT_INPUT_LENGTH);\n    }\n  }\n\n  /** Converts to upper or lowercase when enabled. */\n  _convertLetterSize(value: any): string {\n    if (value === 'Ã') {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      if (this.convertTo === AUTO_UPPERCASE) {\n        return value.toUpperCase();\n      } else if (this.convertTo === AUTO_LOWERCASE) {\n        return value.toLowerCase();\n      }\n\n      return value;\n    }\n  }\n\n  /** Reacts to keydown event. */\n  _keydownAction(event): void | false {\n    const previousInputField: HTMLInputElement = event.target.previousElementSibling;\n    const nextInputField: HTMLInputElement = event.target.nextElementSibling;\n\n    switch (event.keyCode) {\n      case SPACE:\n        return false;\n\n      case BACKSPACE:\n        if (event.target.value === '') {\n          if (previousInputField && previousInputField.tagName === TAG_NAME_INPUT) {\n            this.selectInput(previousInputField);\n          }\n        }\n        break;\n\n      case LEFT_ARROW:\n        if (previousInputField && previousInputField.tagName === TAG_NAME_INPUT) {\n          event.preventDefault();\n          this.selectInput(previousInputField);\n        }\n        break;\n\n      case RIGHT_ARROW:\n        if (nextInputField && nextInputField.tagName === TAG_NAME_INPUT) {\n          this.selectInput(nextInputField);\n        }\n        event.preventDefault();\n        break;\n\n      case DOWN_ARROW:\n        this._isUpDown = true;\n        if (this._type === 'number' && (event.target.value === '' || event.target.value === '0')) {\n          event.preventDefault();\n        }\n        break;\n\n      case UP_ARROW:\n        this._isUpDown = true;\n        if (this._type === 'number' && event.target.value === '9') {\n          event.preventDefault();\n        }\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  /** Selects the value on click of an input field. */\n  _selectText(event): void {\n    this.selectInput(event.target);\n  }\n\n  /** Automatically focuses and selects the next input on key input. */\n  _selectNextInput(event): void {\n    event.target.value = this._convertLetterSize(event.target.value.slice(0, 1));\n    const currentIndex = this._getFocusedInputIndex(event);\n    // save in model with uppercase if needed\n    this._keyCode[currentIndex] = event.target.value;\n    this.propagateChange(this._keyCode.join(''));\n\n    // don't jump to next input if the user uses UP/DOWn arrow (native behaviour)\n    const focusNextInput = !(this._isUpDown && this.type === 'number');\n\n    if (event.target.value && focusNextInput) {\n      const nextInputField = event.target.nextSibling;\n\n      if (nextInputField !== null && nextInputField.tagName === TAG_NAME_INPUT) {\n        nextInputField.focus();\n        if (nextInputField.value !== '') {\n          this.selectInput(nextInputField);\n        }\n      }\n    }\n\n    this._isUpDown = false;\n  }\n\n  /** Paste event to distribute content in input fields. */\n  _pasteClipboard(event): void {\n    let copiedText = (event.clipboardData || (<any> window).clipboardData).getData('text');\n    let copiedTextIndex = 0;\n    const inputIndex = this._getFocusedInputIndex(event);\n\n    copiedText = this.type === 'number' ? this._formatNumberInput(copiedText) : copiedText;\n\n    for (let i = inputIndex; i < this.codeLength; i++) {\n      this._keyCode[i] = this._convertLetterSize(copiedText[copiedTextIndex]);\n      copiedTextIndex++;\n    }\n\n    this.propagateChange(this._keyCode.join(''));\n\n    if (inputIndex + copiedText.length < this.codeLength) {\n      this._el.nativeElement.children.item(inputIndex + copiedText.length).focus();\n    } else {\n      this._el.nativeElement.children.item(this.codeLength - 1).focus();\n    }\n\n    event.preventDefault();\n  }\n\n  /** Returns the index of the code input, which is currently focused. */\n  private _getFocusedInputIndex(event) {\n    let inputIndex;\n    for (let i = 0; i < this._el.nativeElement.children.length; i++) {\n      if (event.srcElement === this._el.nativeElement.children.item(i)) {\n        inputIndex = i;\n      }\n    }\n    return inputIndex;\n  }\n\n  /** Removes all characters from the input except for numbers [0-9]. */\n  private _formatNumberInput(copiedText: string) {\n    let formattedInput = '';\n    for (let i = 0; i < copiedText.length; i++) {\n      if (copiedText[i].match(/[0-9]{1}$/)) {\n        formattedInput += copiedText[i];\n      }\n    }\n\n    return formattedInput;\n  }\n\n  /** Triggers when an input field is blurred. */\n  _onBlur(): void {\n    this._focused = false;\n    setTimeout(() => {\n      if (!this._focused) {\n        this.propagateTouch(this._keyCode.join(''));\n      }\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Sets _focused state and makes valid. */\n  _setFocusState(): void {\n    this._focused = true;\n  }\n\n  /**\n   * Disables the code input. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Sets initial value, used by ControlValueAccessor. */\n  writeValue(value: string): void {\n    if (value) {\n      const valueAsArray = value.split('').slice(0, this.codeLength);\n\n      for (let i = 0; i < this.codeLength; i++) {\n        this._keyCode[i] = valueAsArray[i];\n      }\n    } else {\n      this.setInputLength();\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _trackByKeyCode(index: number, item: string): number {\n    return index;\n  }\n\n  /** Adds a gap to input fields when appropriate. */\n  _inputGap(index): string {\n    switch (this.codeLength) {\n      case 4:\n      case 6:\n      case 8:\n        if (index === this.codeLength / 2) {\n          return INPUT_FIELD_GAP;\n        }\n\n        break;\n      default:\n        return;\n    }\n  }\n\n  /** @docs-private */\n  propagateChange = (_: any) => {\n  }\n\n  /** @docs-private */\n  propagateTouch = (_: any) => {\n  }\n\n  registerOnChange(fn: any) {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.propagateTouch = fn;\n  }\n\n  /** @docs-private */\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const control = this._control ? this._control.control as FormControl : null;\n    const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n    }\n  }\n\n  getAriaLabel(keyIndex: number) {\n    return `${this._intl.inputFieldAriaLabel} ${keyIndex + 1} ${this._intl.ofLabel} ${this._keyCode.length}`;\n  }\n\n /** @docs-private\n  * Workaround preventing the selection error because the `setSelectionRange` is not supported on input['type=number']\n  * */\n selectInput(input: HTMLInputElement) {\n   input.focus();\n   try {\n     input.setSelectionRange(0, input.value.length);\n   } catch (err) {\n     if (err instanceof DOMException && err.name === 'InvalidStateError') {\n       // setSelectionRange does not apply\n     } else {\n       throw err;\n     }\n   }\n }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NxCodeInputIntl } from './code-input-intl';\n\nimport {NxCodeInputComponent} from './code-input.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  declarations: [\n    NxCodeInputComponent,\n  ],\n  exports: [\n    NxCodeInputComponent,\n  ],\n  providers: [NxCodeInputIntl],\n})\nexport class NxCodeInputModule {\n}\n"]}