(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@allianz/ngx-ndbx/grid'), require('@angular/core'), require('@angular/common'), require('@allianz/ngx-ndbx/utils'), require('@angular/cdk/coercion'), require('@angular/cdk/keycodes'), require('@angular/forms'), require('decimal.js'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@allianz/ngx-ndbx/slider', ['exports', '@allianz/ngx-ndbx/grid', '@angular/core', '@angular/common', '@allianz/ngx-ndbx/utils', '@angular/cdk/coercion', '@angular/cdk/keycodes', '@angular/forms', 'decimal.js', 'rxjs'], factory) :
    (global = global || self, factory((global.allianz = global.allianz || {}, global.allianz['ngx-ndbx'] = global.allianz['ngx-ndbx'] || {}, global.allianz['ngx-ndbx'].slider = {}), global.allianz['ngx-ndbx'].grid, global.ng.core, global.ng.common, global.allianz['ngx-ndbx'].utils, global.ng.cdk.coercion, global.ng.cdk.keycodes, global.ng.forms, global.decimal_js, global.rxjs));
}(this, (function (exports, grid, core, common, utils, coercion, keycodes, forms, decimal_js, rxjs) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: slider.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function Position() { }
    if (false) {
        /** @type {?} */
        Position.prototype.x;
        /** @type {?} */
        Position.prototype.y;
    }
    /** @enum {number} */
    var EventType = {
        TOUCH: 0, MOUSE: 1,
    };
    EventType[EventType.TOUCH] = 'TOUCH';
    EventType[EventType.MOUSE] = 'MOUSE';
    /** @type {?} */
    var nextId = 0;
    /** @type {?} */
    var DEFAULT_MIN = 0;
    /** @type {?} */
    var DEFAULT_MAX = 100;
    /** @type {?} */
    var DEFAULT_STEP = 1;
    var NxSliderComponent = /** @class */ (function () {
        function NxSliderComponent(elementRef, _changeDetectorRef, _ngZone) {
            this.elementRef = elementRef;
            this._changeDetectorRef = _changeDetectorRef;
            this._ngZone = _ngZone;
            this._id = "nx-slider-" + nextId++;
            this._tabIndex = 0;
            this._min = DEFAULT_MIN;
            this._max = DEFAULT_MAX;
            this._disabled = false;
            this._inverted = false;
            this._thumbLabel = true;
            this._negative = false;
            /**
             * An event is dispatched on each value change.
             */
            this.valueChange = new core.EventEmitter();
            this.isActive = false;
            this.dragSubscriptions = [];
            this.position = null;
            this._value = 0;
            this._step = DEFAULT_STEP;
            this._currentValue = 0;
            this._onChange = (/**
             * @return {?}
             */
            function () { });
            this._onTouched = (/**
             * @return {?}
             */
            function () { });
            /**
             * Sets the customization function for the value which is displayed above the slider handle (Default:(value) => value). ).
             */
            this.valueFormatter = (/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return value; });
            /**
             * Sets the customization function for the label on the min-side of the slider (Default:(value) => value).
             */
            this.labelMinFormatter = (/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return value; });
            /**
             * Sets the customization function for the label on the max-side of the slider (Default:(value) => value).
             */
            this.labelMaxFormatter = (/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return value; });
        }
        Object.defineProperty(NxSliderComponent.prototype, "id", {
            get: /**
             * @return {?}
             */
            function () {
                return this._id;
            },
            /** Sets the id of the slider. */
            set: /**
             * Sets the id of the slider.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (this._id !== value) {
                    this._id = value;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "tabindex", {
            get: /**
             * @return {?}
             */
            function () {
                return this._tabIndex;
            },
            /** Sets the tabindex of the slider. */
            set: /**
             * Sets the tabindex of the slider.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._tabIndex = coercion.coerceNumberProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "min", {
            get: /**
             * @return {?}
             */
            function () {
                return this._min;
            },
            /** Sets the minimum value (Default: 0). */
            set: /**
             * Sets the minimum value (Default: 0).
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._min = coercion.coerceNumberProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "max", {
            get: /**
             * @return {?}
             */
            function () {
                return this._max;
            },
            /** Sets the maximum value (Default: 100). */
            set: /**
             * Sets the maximum value (Default: 100).
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._max = coercion.coerceNumberProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "step", {
            /** Sets the step size by which the value of the slider can be increased or decreased (Default: 1). */
            get: /**
             * Sets the step size by which the value of the slider can be increased or decreased (Default: 1).
             * @return {?}
             */
            function () { return this._step; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._step = coercion.coerceNumberProperty(value, this._step);
                if (this._step % 1 !== 0) {
                    this._roundToDecimal = this._step.toString().split('.').pop().length;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "label", {
            get: /**
             * @return {?}
             */
            function () {
                return this._label;
            },
            /** Sets the label which is displayed on top of the slider. */
            set: /**
             * Sets the label which is displayed on top of the slider.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (this._label !== value) {
                    this._label = value;
                    this._changeDetectorRef.markForCheck();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._disabled;
            },
            /** Whether the input to the control of the slider should be disabled. */
            set: /**
             * Whether the input to the control of the slider should be disabled.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "inverted", {
            get: /**
             * @return {?}
             */
            function () {
                return this._inverted;
            },
            /** Whether the max value is to the right (false) or left (true).*/
            set: /**
             * Whether the max value is to the right (false) or left (true).
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._inverted = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "thumbLabel", {
            get: /**
             * @return {?}
             */
            function () {
                return this._thumbLabel;
            },
            /** Whether to display the thumb label on top of the slider.*/
            set: /**
             * Whether to display the thumb label on top of the slider.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._thumbLabel = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "negative", {
            get: /**
             * @return {?}
             */
            function () {
                return this._negative;
            },
            /** Whether the negative set of styles is applied (Default: 'false').*/
            set: /**
             * Whether the negative set of styles is applied (Default: 'false').
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._negative = coercion.coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NxSliderComponent.prototype, "value", {
            get: /**
             * @return {?}
             */
            function () {
                return this._value;
            },
            /** Sets the current value of the slider. */
            set: /**
             * Sets the current value of the slider.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.writeValue(Number(value));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NxSliderComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.reset();
        };
        /**
         * @param {?} value
         * @return {?}
         */
        NxSliderComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._value) {
                this._value = value;
                this.valueChange.emit(value);
                this._changeDetectorRef.markForCheck();
            }
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        NxSliderComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this._onChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        NxSliderComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this._onTouched = fn;
        };
        /**
         * @param {?} disabled
         * @return {?}
         */
        NxSliderComponent.prototype.setDisabledState = /**
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this.disabled = disabled;
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype.isMinimum = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._value === this.min;
        };
        /** @docs-private
         * A valid step is either:
         * - the minimum because thats our anchor for all value evaluation and steps
         * - (_value - min) % step === 0
         */
        /**
         * \@docs-private
         * A valid step is either:
         * - the minimum because thats our anchor for all value evaluation and steps
         * - (_value - min) % step === 0
         * @return {?}
         */
        NxSliderComponent.prototype.isValidStep = /**
         * \@docs-private
         * A valid step is either:
         * - the minimum because thats our anchor for all value evaluation and steps
         * - (_value - min) % step === 0
         * @return {?}
         */
        function () {
            /** @type {?} */
            var safeValue = new decimal_js.Decimal(this._value).minus(this.min);
            /** @type {?} */
            var modulo = safeValue.mod(this.step);
            return this.isMinimum() || modulo.cmp(0) === 0;
        };
        /** @docs-private
         * We have to look at two cases:
         * - current value is a valid multitude of the step size
         *   then we can safely add or subtract the step
         * - the value is not a valid multitude. this could be the max value or the value bound
         *   via nxValue
         *   then we look for the next closest value upwards or downwards
         *   decimal.js provides a nice utility function for this.
         */
        /**
         * \@docs-private
         * We have to look at two cases:
         * - current value is a valid multitude of the step size
         *   then we can safely add or subtract the step
         * - the value is not a valid multitude. this could be the max value or the value bound
         *   via nxValue
         *   then we look for the next closest value upwards or downwards
         *   decimal.js provides a nice utility function for this.
         * @param {?} valueDiff
         * @return {?}
         */
        NxSliderComponent.prototype.changeValue = /**
         * \@docs-private
         * We have to look at two cases:
         * - current value is a valid multitude of the step size
         *   then we can safely add or subtract the step
         * - the value is not a valid multitude. this could be the max value or the value bound
         *   via nxValue
         *   then we look for the next closest value upwards or downwards
         *   decimal.js provides a nice utility function for this.
         * @param {?} valueDiff
         * @return {?}
         */
        function (valueDiff) {
            /** @type {?} */
            var newValue = new decimal_js.Decimal(this._value);
            if (this.isValidStep()) {
                newValue = newValue.plus(valueDiff);
            }
            else {
                // subtract the minimum to find the closest multitude then add the minimum again to get the valid slider step
                /** @type {?} */
                var minAdjustedValue = new decimal_js.Decimal(this._value).minus(this.min);
                newValue = valueDiff < 0 ? minAdjustedValue.toNearest(this.step, decimal_js.Decimal.ROUND_DOWN)
                    : minAdjustedValue.toNearest(this.step, decimal_js.Decimal.ROUND_UP);
                newValue = newValue.plus(this.min);
            }
            // cast the Decimal object to a JS number before it gets returned
            /** @type {?} */
            var toNumber = newValue.toNumber();
            toNumber = utils.clamp(toNumber, this.min, this.max);
            if (this.value !== toNumber) {
                this._onChange(toNumber);
                this.valueChange.emit(toNumber);
                this.value = toNumber;
            }
        };
        Object.defineProperty(NxSliderComponent.prototype, "percentageValue", {
            /** @docs-private */
            get: /**
             * \@docs-private
             * @return {?}
             */
            function () {
                /** @type {?} */
                var percentageValue = ((this.value || 0) - this.min) / (this.max - this.min) * 100;
                if (this.inverted) {
                    percentageValue = 100 - percentageValue;
                }
                return utils.clamp(percentageValue, 0, 100);
            },
            enumerable: true,
            configurable: true
        });
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        NxSliderComponent.prototype.sliderClick = /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            var _this = this;
            if (this.disabled) {
                return;
            }
            this._focusHandleElement();
            event.stopPropagation();
            this.position = this.getPositionFromEvent(event);
            this.frameId = requestAnimationFrame((/**
             * @return {?}
             */
            function () {
                _this.valueByPosition();
                if (_this.value !== _this._currentValue) {
                    _this._currentValue = _this.value;
                    _this._onChange(_this.value);
                }
            }));
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype.focus = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            if (this.disabled) {
                return;
            }
            this._focusHandleElement();
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype.blur = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            if (this.disabled) {
                return;
            }
        };
        /**
         * @docs-private
         * Prevent text selection when dragging the handle.
         */
        /**
         * \@docs-private
         * Prevent text selection when dragging the handle.
         * @return {?}
         */
        NxSliderComponent.prototype.selectStart = /**
         * \@docs-private
         * Prevent text selection when dragging the handle.
         * @return {?}
         */
        function () {
            return false;
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        NxSliderComponent.prototype.handleKeypress = /**
         * \@docs-private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.disabled) {
                return;
            }
            if (event.which < keycodes.LEFT_ARROW || event.which > keycodes.DOWN_ARROW) {
                return;
            }
            switch (event.which) {
                case this.inverted ? keycodes.RIGHT_ARROW : keycodes.LEFT_ARROW:
                case keycodes.DOWN_ARROW:
                    return this.changeValue(-this.step);
                case keycodes.UP_ARROW:
                case this.inverted ? keycodes.LEFT_ARROW : keycodes.RIGHT_ARROW:
                    return this.changeValue(this.step);
            }
        };
        /** @docs-private
         * this is called on mousedown or touchstart
         */
        /**
         * \@docs-private
         * this is called on mousedown or touchstart
         * @param {?} event
         * @return {?}
         */
        NxSliderComponent.prototype.dragStart = /**
         * \@docs-private
         * this is called on mousedown or touchstart
         * @param {?} event
         * @return {?}
         */
        function (event) {
            var _this = this;
            if (this.disabled) {
                return;
            }
            this.isActive = true;
            /** @type {?} */
            var isTouchEvent = this.detectEventType(event) === EventType.TOUCH;
            this._currentValue = this.value;
            if (isTouchEvent) {
                this._ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () {
                    _this.dragSubscriptions.push(rxjs.fromEvent(document, 'touchmove').subscribe(_this.handleDragMove.bind(_this)));
                    _this.dragSubscriptions.push(rxjs.fromEvent(document, 'touchend').subscribe(_this.handleDragStop.bind(_this)));
                }));
                this._ngZone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.dragSubscriptions.push(rxjs.fromEvent(document, 'touchcancel').subscribe(_this.handleDragStop.bind(_this)));
                }));
            }
            else {
                this._ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () {
                    _this.dragSubscriptions.push(rxjs.fromEvent(document, 'mousemove').subscribe(_this.handleDragMove.bind(_this)));
                }));
                this._ngZone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.dragSubscriptions.push(rxjs.fromEvent(document, 'mouseup').subscribe(_this.handleDragStop.bind(_this)));
                }));
            }
            this.position = this.getPositionFromEvent(event);
            this.runChangeObserver();
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        NxSliderComponent.prototype.formatValue = /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return this.valueFormatter(value);
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype.formatLabelLeft = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this.inverted ? this.formatLabelMax() : this.formatLabelMin();
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype.formatLabelRight = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this.inverted ? this.formatLabelMin() : this.formatLabelMax();
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype.valueByPosition = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var rect = this.elementRef.nativeElement.getBoundingClientRect();
            /** @type {?} */
            var x = Math.max(rect.left, Math.min(rect.right, this.position.x));
            // position of slider relative to slider width
            /** @type {?} */
            var percent = (x - rect.left) / rect.width;
            if (this.inverted) {
                percent = 1 - percent;
            }
            /** @type {?} */
            var exactValue = this.min + percent * (this.max - this.min);
            /**
             * edge case handling because of float precision errors
             * you couldn't reach the maximum
             * @type {?}
             */
            var closestValue;
            if (percent === 1) {
                closestValue = this.max;
            }
            else if (percent === 0) {
                closestValue = this.min;
            }
            else {
                closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;
            }
            if (this._roundToDecimal) {
                closestValue = this.roundToDecimal(closestValue);
            }
            closestValue = utils.clamp(closestValue, this.min, this.max);
            this.value = closestValue;
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        NxSliderComponent.prototype.roundToDecimal = /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return parseFloat(value.toFixed(this._roundToDecimal));
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype.formatLabelMin = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this.labelMinFormatter(this.min);
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype.formatLabelMax = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this.labelMaxFormatter(this.max);
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        NxSliderComponent.prototype.handleDragMove = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.position = this.getPositionFromEvent(event);
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        NxSliderComponent.prototype.handleDragStop = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.reset();
            this.valueByPosition();
            if (this.value !== this._currentValue) {
                this._currentValue = this.value;
                this._onChange(this.value);
            }
        };
        /**
         * @private
         * @return {?}
         */
        NxSliderComponent.prototype.runChangeObserver = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.frameId = requestAnimationFrame((/**
             * @return {?}
             */
            function () {
                _this.valueByPosition();
                if (_this.isActive) {
                    _this.runChangeObserver();
                }
            }));
        };
        /**
         * @private
         * @return {?}
         */
        NxSliderComponent.prototype.reset = /**
         * @private
         * @return {?}
         */
        function () {
            var e_1, _a;
            this.isActive = false;
            try {
                for (var _b = __values(this.dragSubscriptions), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var subscription = _c.value;
                    subscription.unsubscribe();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.dragSubscriptions = [];
            cancelAnimationFrame(this.frameId);
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        NxSliderComponent.prototype.detectEventType = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            return event.type.includes('touch') ? EventType.TOUCH : EventType.MOUSE;
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        NxSliderComponent.prototype.getPositionFromEvent = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var eventType = this.detectEventType(event);
            /** @type {?} */
            var cursor = eventType === EventType.TOUCH ? ((/** @type {?} */ (event))).touches.item(0) : event;
            return {
                x: cursor.clientX,
                y: cursor.clientY
            };
        };
        /** @docs-private */
        /**
         * \@docs-private
         * @return {?}
         */
        NxSliderComponent.prototype._focusHandleElement = /**
         * \@docs-private
         * @return {?}
         */
        function () {
            this.handleElement.nativeElement.focus();
        };
        NxSliderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'nx-slider',
                        template: "<label class=\"nx-slider__label\" [id]=\"id + '-label'\" [attr.for]=\"id + '-handle'\" (click)=\"_focusHandleElement()\">{{label}}</label>\n\n<div\n  class=\"nx-slider__wrapper\"\n  (click)=\"sliderClick($event)\"\n>\n\n  <span class=\"nx-slider__background\">\n    <span class=\"nx-slider__filler\" [style.width.%]=\"percentageValue\"></span>\n\n    <div class=\"nx-slider__handle\"\n        [id]=\"id + '-handle'\"\n        [attr.tabindex]=\"tabindex\"\n        [attr.aria-labelledby]=\"id + '-label'\"\n        role=\"slider\"\n        [attr.aria-valuemin]=\"formatLabelMin()\"\n        [attr.aria-valuemax]=\"formatLabelMax()\"\n        [attr.aria-valuetext]=\"formatValue(value)\"\n        [attr.aria-valuenow]=\"formatValue(value)\"\n        (mousedown)=\"dragStart($event)\"\n        (touchstart)=\"dragStart($event)\"\n        (selectstart)=\"selectStart()\"\n        #handle\n      >\n\n      <span *ngIf=\"thumbLabel\" class=\"nx-slider__value\">{{formatValue(value)}}\n        <div class=\"nx-slider__arrow\">\n        </div>\n      </span>\n    </div>\n\n  </span>\n</div>\n\n<div class=\"nx-slider__label-container\">\n    <span class=\"nx-slider__value-label\">{{formatLabelLeft()}}</span>\n    <span class=\"nx-slider__value-label\">{{formatLabelRight()}}</span>\n</div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return NxSliderComponent; })),
                                multi: true
                            }],
                        host: {
                            '[attr.aria-disabled]': 'disabled ? true : null',
                            '(keydown)': 'handleKeypress($event)',
                            '[class.nx-slider--disabled]': 'disabled',
                            '[class.nx-slider--negative]': 'negative'
                        },
                        styles: [":host{display:block}.nx-slider__label{font-size:20px;font-size:var(--slider-label-font-size,20px);line-height:28px;line-height:var(--slider-label-line-height,28px);font-weight:300;font-weight:var(--slider-label-font-weight,300);letter-spacing:.2px;letter-spacing:var(--slider-label-letter-spacing,.2px);color:#414141;color:var(--slider-label-color,#414141)}.nx-slider__wrapper{width:100%;padding:66px 0 18px}.nx-slider__background{position:relative;background-color:#d9d9d9;background-color:var(--slider-background-color,#d9d9d9);display:block;height:4px;border-radius:2px;white-space:nowrap;cursor:pointer}.nx-slider__filler{display:inline-block;height:4px;border-radius:2px;background-color:#007ab3;background-color:var(--slider-indicator-color,#007ab3);float:left}.nx-slider__handle{display:inline-block;position:relative;width:24px;height:24px;border-radius:50%;box-shadow:0 2px 4px rgba(65,65,65,.5);border-color:var(--slider-handle-border-color,#f5f5f5);background:#fff;background:var(--slider-handle-background-color,#fff);box-sizing:border-box;margin-left:-12px;top:-10px;z-index:2;cursor:-webkit-grab;cursor:grab;border:1px solid #f5f5f5}.nx-slider__handle:focus{outline:0;border-color:#007ab3;border-color:var(--slider-handle-focus-border-color,#007ab3)}.nx-slider__handle:active{box-shadow:0 2px 4px rgba(65,65,65,.5),inset 0 0 0 4px #fff,inset 0 0 0 24px rgba(0,122,179,.2);box-shadow:0 2px 4px rgba(65,65,65,.5),inset 0 0 0 4px var(--slider-handle-background-color,#fff),inset 0 0 0 24px var(--slider-handle-active-inset-color,rgba(0,122,179,.2));cursor:-webkit-grabbing;cursor:grabbing}:host-context([data-whatinput=keyboard]) .nx-slider__handle:focus{border-color:#7fbcd9;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]) .nx-slider__handle:focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}}.nx-slider__value{font-size:12px;font-size:var(--slider-handle-value-font-size,12px);line-height:16px;line-height:var(--slider-handle-value-line-height,16px);font-weight:600;font-weight:var(--slider-handle-value-font-weight,600);letter-spacing:.5px;letter-spacing:var(--slider-handle-value-letter-spacing,.5px);color:#006192;color:var(--slider-handle-value-color,#006192);border:1px solid #f5f5f5;border-color:var(--slider-handle-border-color,#f5f5f5);border-radius:4px;box-shadow:0 2px 4px rgba(65,65,65,.5);cursor:-webkit-grab;cursor:grab;height:24px;width:48px;text-align:center;right:8px;padding:3px 8px;position:relative;top:-40px;display:table;left:50%;transform:translateX(-50%);background:#fff;background:var(--slider-value-background-color,#fff)}.nx-slider__value:active{cursor:-webkit-grabbing;cursor:grabbing}.nx-slider__arrow{width:6px;height:6px;border-right:1px solid;border-bottom:1px solid;left:50%;transform:translate(-50%,1px) rotate(45deg);position:absolute;box-shadow:-2px -2px 1px 1px #fff,2px 2px 4px rgba(65,65,65,.5);box-shadow:-2px -2px 1px 1px var(--slider-value-background-color,#fff),2px 2px 4px rgba(65,65,65,.5);background:#fff;background:var(--slider-value-background-color,#fff);border-color:#f5f5f5;border-color:var(--slider-handle-border-color,#f5f5f5)}.nx-slider__label-container{display:flex;width:100%;justify-content:space-between;font-size:16px;font-size:var(--slider-value-label-font-size,16px);line-height:24px;line-height:var(--slider-value-label-line-height,24px);font-weight:300;font-weight:var(--slider-value-label-font-weight,300);letter-spacing:0;letter-spacing:var(--slider-value-label-letter-spacing,0);color:#414141;color:var(--slider-value-label-color,#414141)}.nx-slider__max-value-label{text-align:right}:host(.nx-slider--disabled){cursor:not-allowed}:host(.nx-slider--disabled) .nx-slider__background,:host(.nx-slider--disabled) .nx-slider__filler,:host(.nx-slider--disabled) .nx-slider__handle,:host(.nx-slider--disabled) .nx-slider__value,:host(.nx-slider--disabled) .nx-slider__value-label{pointer-events:none;cursor:not-allowed}:host(.nx-slider--disabled) .nx-slider__handle,:host(.nx-slider--disabled) .nx-slider__value{background-color:#fff;background-color:var(--slider-value-disabled-background-color,#fff)}:host(.nx-slider--disabled) .nx-slider__filler{background-color:rgba(0,97,146,.4);background-color:var(--slider-indicator-disabled-color,rgba(0,97,146,.4))}:host(.nx-slider--disabled) .nx-slider__value{color:rgba(0,97,146,.4);color:var(--slider-handle-value-disabled-color,rgba(0,97,146,.4))}:host(.nx-slider--disabled) .nx-slider__label-container{color:#dadada;color:var(--slider-value-label-disabled-color,#dadada)}:host(.nx-slider--disabled) .nx-slider__arrow{background:#fff;background:var(--slider-value-disabled-background-color,#fff);box-shadow:-2px -2px 1px 1px #fff,2px 2px 4px rgba(65,65,65,.5);box-shadow:-2px -2px 1px 1px var(--slider-value-disabled-background-color,#fff),2px 2px 4px rgba(65,65,65,.5)}:host(.nx-slider--disabled) .nx-slider__background{background:#d9d9d9;background:var(--slider-disabled-background-color,#d9d9d9)}:host(.nx-slider--negative) .nx-slider__label,:host(.nx-slider--negative) .nx-slider__value-label{color:#fff}:host(.nx-slider--negative) .nx-slider__filler{background-color:#fff}:host(.nx-slider--negative) .nx-slider__background{background-color:rgba(255,255,255,.35)}:host(.nx-slider--negative.nx-slider--disabled) .nx-slider__label,:host(.nx-slider--negative.nx-slider--disabled) .nx-slider__value-label{color:#d9d9d9}:host(.nx-slider--negative.nx-slider--disabled) .nx-slider__filler{background-color:#d9d9d9}@media screen and (-ms-high-contrast:active){.nx-slider__background{background-color:buttonFace;border:1px solid buttonText}.nx-slider__filler{background-color:highlight}.nx-slider__handle{background-color:buttonFace;border-color:buttonText}.nx-slider__handle:focus,.nx-slider__handle:hover{background-color:highlight}.nx-slider__handle:active{background-color:buttonText}.nx-slider__value{border-color:buttonText;background-color:buttonFace;color:buttonText;-ms-high-contrast-adjust:none}.nx-slider__arrow{-ms-high-contrast-adjust:auto;background-color:buttonFace}:host(.nx-slider--disabled) .nx-slider__background{background-color:background;border:1px solid GrayText}:host(.nx-slider--disabled) .nx-slider__filler{background-color:GrayText}:host(.nx-slider--disabled) .nx-slider__handle{background-color:GrayText}:host(.nx-slider--disabled) .nx-slider__value{border-color:GrayText;color:GrayText}:host(.nx-slider--disabled) .nx-slider__arrow{border-color:GrayText}}"]
                    }] }
        ];
        /** @nocollapse */
        NxSliderComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.ChangeDetectorRef },
            { type: core.NgZone }
        ]; };
        NxSliderComponent.propDecorators = {
            handleElement: [{ type: core.ViewChild, args: ['handle', { static: true },] }],
            id: [{ type: core.Input, args: ['id',] }],
            tabindex: [{ type: core.Input }],
            min: [{ type: core.Input, args: ['nxMin',] }],
            max: [{ type: core.Input, args: ['nxMax',] }],
            step: [{ type: core.Input, args: ['nxStep',] }],
            label: [{ type: core.Input, args: ['nxLabel',] }],
            disabled: [{ type: core.Input }],
            inverted: [{ type: core.Input, args: ['nxInverted',] }],
            thumbLabel: [{ type: core.Input }],
            negative: [{ type: core.Input, args: ['negative',] }],
            valueChange: [{ type: core.Output, args: ['nxValueChange',] }],
            valueFormatter: [{ type: core.Input, args: ['nxValueFormatter',] }],
            labelMinFormatter: [{ type: core.Input, args: ['nxLabelMinFormatter',] }],
            labelMaxFormatter: [{ type: core.Input, args: ['nxLabelMaxFormatter',] }],
            value: [{ type: core.Input, args: ['nxValue',] }]
        };
        return NxSliderComponent;
    }());
    if (false) {
        /**
         * \@docs-private
         * @type {?}
         */
        NxSliderComponent.prototype.handleElement;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype._id;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype._tabIndex;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype._min;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype._max;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype._label;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype._disabled;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype._inverted;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype._thumbLabel;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype._negative;
        /**
         * An event is dispatched on each value change.
         * @type {?}
         */
        NxSliderComponent.prototype.valueChange;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype.isActive;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype.dragSubscriptions;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype.frameId;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype.position;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype._value;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype._roundToDecimal;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype._step;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype._currentValue;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype._onChange;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype._onTouched;
        /**
         * Sets the customization function for the value which is displayed above the slider handle (Default:(value) => value). ).
         * @type {?}
         */
        NxSliderComponent.prototype.valueFormatter;
        /**
         * Sets the customization function for the label on the min-side of the slider (Default:(value) => value).
         * @type {?}
         */
        NxSliderComponent.prototype.labelMinFormatter;
        /**
         * Sets the customization function for the label on the max-side of the slider (Default:(value) => value).
         * @type {?}
         */
        NxSliderComponent.prototype.labelMaxFormatter;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype.elementRef;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype._changeDetectorRef;
        /**
         * @type {?}
         * @private
         */
        NxSliderComponent.prototype._ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: slider.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NxSliderModule = /** @class */ (function () {
        function NxSliderModule() {
        }
        NxSliderModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, grid.NxGridModule],
                        declarations: [NxSliderComponent],
                        exports: [NxSliderComponent]
                    },] }
        ];
        return NxSliderModule;
    }());

    exports.NxSliderComponent = NxSliderComponent;
    exports.NxSliderModule = NxSliderModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=allianz-ngx-ndbx-slider.umd.js.map
