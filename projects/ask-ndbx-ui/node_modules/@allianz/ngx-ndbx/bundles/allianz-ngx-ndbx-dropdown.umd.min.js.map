{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@allianz/ngx-ndbx/dropdown/dropdown-errors.ts","ng://@allianz/ngx-ndbx/dropdown/dropdown.control.ts","ng://@allianz/ngx-ndbx/dropdown/group/dropdown-group.ts","ng://@allianz/ngx-ndbx/dropdown/item/dropdown-item.ts","ng://@allianz/ngx-ndbx/dropdown/closed-label.directive.ts","ng://@allianz/ngx-ndbx/dropdown/dropdown.ts","ng://@allianz/ngx-ndbx/dropdown/dropdown.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","getNxDropdownNonFunctionValueError","Error","NxDropdownControl","_super","_this","apply","isMultiSelect","tslib_1.__extends","Input","args","NxFormfieldControl","NxDropdownGroupComponent","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","NxDropdownItemChange","item","isUserInput","nextId","NxDropdownItemComponent","_dropdown","group","_changeDetectorRef","_elementRef","_hidden","_mostRecentViewValue","_id","_selected","_destroy","Subject","onSelectionChange","EventEmitter","_stateChanges","filterChanges","pipe","takeUntil","subscribe","_showOrHideByFilter","_closedStream","defineProperty","_active","ngAfterViewChecked","viewValue","ngOnDestroy","complete","_onClick","event","preventDefault","stopPropagation","_selectViaInteraction","multiselect","markForCheck","_emitSelectionChangeEvent","show","hide","search","constraint","filterFn","valueFormatter","nativeElement","textContent","trim","select","deselect","focus","emit","setActiveStyles","setInactiveStyles","getLabel","_isContentEmpty","element","children","_onLabelChange","detectChanges","host","[id]","role","[attr.aria-selected]","[class.nx-hidden]","[class.nx-dropdown-item--active]","[class.nx-selected]","[class.nx-multiselect]","(click)","decorators","type","Inject","Optional","ChangeDetectorRef","ElementRef","Output","ViewChild","static","NxDropdownClosedLabelDirective","templateRef","Directive","TemplateRef","source","NxDropdownComponent","_ngZone","tabIndex","formFieldComponent","ngControl","_parentForm","_parentFormGroup","readonly","_disabled","_focused","_panelOpen","errorState","isStable","controlType","_overlayViewportMargin","stateChanges","_optionIds","_tabIndex","currentFilter","_ariaLabel","_style","_negative","showFilter","filterPlaceholder","openedChange","_openedStream","filter","map","valueChange","selectionChange","optionSelectionChanges","defer","options","merge","option","onStable","asObservable","take","switchMap","toString","_compareWith","o1","o2","_filterFn","itemValue","toLocaleLowerCase","indexOf","_onChange","_onTouched","valueAccessor","_positions","originX","originY","overlayX","overlayY","parseInt","disabled","_value","newValue","writeValue","match","_closedDropdownLabel","_selectionModel","selected","label","fn","_initializeSelection","panelOpen","ngDoCheck","updateErrorState","ngOnInit","SelectionModel","ngAfterContentInit","_customClosedDropdownLabel","_defaultClosedDropdownLabel","_initKeyManager","changed","added","forEach","removed","changes","startWith","_resetOptions","isErrorState","control","form","invalid","touched","submitted","oldState","parent","newState","_keyManager","ActiveDescendantKeyManager","withTypeAhead","withWrap","withVerticalOrientation","withHorizontalOrientation","skipPredicate","tabOut","closePanel","change","panel","_scrollActiveOptionIntoView","activeItem","changedOrDestroyed","_onSelect","setTimeout","_setOptionIds","id","join","wasSelected","isSelected","setActiveItem","_sortValues","clear","_propagateChanges","Promise","resolve","then","_setSelectionByValue","isArray","currentValue","_selectValue","correspondingOption","find","isDevMode","console","warn","fallbackValue","valueToEmit","NxDropdownSelectChange","options_1","toArray","sort","a","_updatePositionOffset","offset","formFieldRect","elementRef","getBoundingClientRect","dropdownRect","panelHeader","overlayDir","overlayRef","overlayElement","querySelector","panelHeaderPaddingTop","getComputedStyle","paddingTop","top","offsetY","openPanel","_triggerRect","trigger","_highlightCorrectOption","_calculateScrollTop","panelBody","scrollTop","empty","_getItemOffset","panelHeight","offsetHeight","middleOfPanel","containerElement","panelOffset","offsetTop","panelTopScrollPosition","clientHeight","itemTop","itemBottom","height","itemRect","setDescribedByIds","ids","ariaDescribedby","setAriaLabel","_getAriaLabel","appearance","isEmpty","hasValue","focused","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","onKeydown","HOME","END","SHIFT","TAB","manager","allHidden","every","Boolean","setFirstItemActive","setLastItemActive","previouslyFocusedIndex","activeItemIndex","delay","shiftKey","formatValue","_onFilter","target","_onAttached","positionChange","positionStrategy","getConfig","withPositions","slice","updatePosition","filterInput","_onFocus","_onBlur","_clearFilter","_getAriaActiveDescendant","providers","provide","useExisting","[class.nx-dropdown]","[class.is-filled]","[class.has-focus]","[class.nx-dropdown--negative]","[class.nx-dropdown--disabled]","[attr.aria-describedby]","[attr.aria-required]","[attr.aria-label]","aria-haspopup","[attr.aria-expanded]","[attr.disabled]","[attr.tabindex]","(keydown)","(focus)","(blur)","NgZone","Attribute","NxFormfieldComponent","NgControl","Self","NgForm","FormGroupDirective","CdkConnectedOverlay","ContentChildren","descendants","ContentChild","NxDropdownModule","NgModule","imports","CommonModule","NxFormfieldModule","NxCheckboxModule","OverlayModule","A11yModule","NxIconModule","ObserversModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getNxDropdownDynamicMultipleError(): Error {\n  return Error('Cannot change `multiselect` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiselect` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getNxDropdownNonArrayValueError(): Error {\n  return Error('Value must be an array in multiselect mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getNxDropdownNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","import { NxFormfieldControl } from '@allianz/ngx-ndbx/formfield';\nimport { Input } from '@angular/core';\n\nexport abstract class NxDropdownControl extends NxFormfieldControl<any> {\n  /**\n   * Whether the dropdown should allow multi selection and additional checkboxes are shown.\n   *\n   * Note: Please make sure the value you bind is an array. If not an error is thrown! */\n  @Input('nxIsMultiselect') isMultiSelect: boolean = false;\n\n  /** @docs-private */\n  abstract formatValue?(value): string;\n\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'nx-dropdown-group',\n  templateUrl: 'dropdown-group.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['dropdown-group.scss']\n})\nexport class NxDropdownGroupComponent {\n  /** Label displayed in the group. */\n  @Input('nxLabel') label: string;\n}\n","import { Highlightable } from '@angular/cdk/a11y';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxDropdownComponent } from '../dropdown';\nimport { NxDropdownControl } from '../dropdown.control';\nimport { NxDropdownGroupComponent } from './../group/dropdown-group';\n\nexport class NxDropdownItemChange {\n\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public item: NxDropdownItemComponent,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/** the unique id counter */\nlet nextId = 0;\n\n@Component({\n  selector: 'nx-dropdown-item',\n  templateUrl: 'dropdown-item.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [\n    'dropdown-item.scss'\n  ],\n  host: {\n    '[id]': 'id',\n    'role': 'option',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[class.nx-hidden]': '_hidden',\n    '[class.nx-dropdown-item--active]': 'active',\n    '[class.nx-selected]': 'selected',\n    '[class.nx-multiselect]': 'multiselect',\n    '(click)': '_onClick($event)'\n  }\n})\nexport class NxDropdownItemComponent implements Highlightable, OnDestroy, AfterViewChecked {\n  _hidden = false;\n\n  private _mostRecentViewValue = '';\n\n  private _id = `nx-dropdown-item-${nextId++}`;\n\n  /**\n   * The value of the dropdown item.\n   * You can't use undefined, null and '' (empty strings)\n   * as they are sentinel values signalling empty data.\n   */\n  @Input('nxValue') value;\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  private _selected: boolean = false;\n\n  /** Whether the item is selected. */\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  private _active: boolean;\n\n  /** Whether the item is active. */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * @docs-private\n   * Whether the parent dropdown is in multiselect mode.\n   */\n  get multiselect(): boolean {\n    return this._dropdown && this._dropdown.isMultiSelect;\n  }\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<NxDropdownItemChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * @docs-private\n   * The wrapping div in the template. Used by dropdown to use the container height for scrolling.\n   */\n  @ViewChild('container', { static: true }) containerElement;\n\n  constructor(\n    @Inject(NxDropdownControl) private _dropdown: NxDropdownControl,\n    /** @docs-private */\n    @Optional() readonly group: NxDropdownGroupComponent,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef) {\n    (this._dropdown as NxDropdownComponent).filterChanges.pipe(takeUntil(this._destroy)).subscribe((value) => {\n      this._showOrHideByFilter(value);\n    });\n    // reset the hidden state when dropdown closes that on next open the user is seeing the full list again\n    (this._dropdown as NxDropdownComponent)._closedStream.pipe(takeUntil(this._destroy)).subscribe(() => {\n      this._hidden = false;\n    });\n  }\n\n  ngAfterViewChecked() {\n    // Since the parent dropdown component could be using the item's label to display the selected values\n    // and it doesn't have a way of knowing if the item's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._destroy.next();\n    this._destroy.complete();\n  }\n\n  _onClick(event) {\n    /* preventDefault to stop triggering the event twice when you click on the checkbox or the label inside the item */\n    event.preventDefault();\n    event.stopPropagation();\n    this._selectViaInteraction();\n  }\n\n  /**\n  * `Selects the option while indicating the selection came from the user. Used to\n  * determine if the select's view -> model callback should be invoked.`\n  */\n  _selectViaInteraction(): void {\n    this._selected = this.multiselect ? !this._selected : true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent(true);\n  }\n\n  /** @docs-private */\n  show() {\n    this._hidden = false;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** @docs-private */\n  hide() {\n    this._hidden = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _showOrHideByFilter(search) {\n    const constraint = (this._dropdown as NxDropdownComponent).filterFn(search, this.viewValue);\n    this._hidden = constraint ? false : true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get _formattedValue() {\n    return (this._dropdown as NxDropdownComponent).valueFormatter(this.value);\n  }\n\n  /** @docs-private */\n  get viewValue() {\n    return (this._elementRef.nativeElement.textContent || '').trim();\n  }\n\n  /** @docs-private */\n  get elementRef() {\n    return this._elementRef;\n  }\n\n  select() {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** @docs-private */\n  deselect() {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** @docs-private */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  private _emitSelectionChangeEvent(isUserInput: boolean = false) {\n    this.onSelectionChange.emit(new NxDropdownItemChange(this, isUserInput));\n  }\n\n  /** @docs-private */\n  setActiveStyles(): void {\n    this._active = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** @docs-private */\n  setInactiveStyles(): void {\n    this._active = false;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the ListKeyManagerOption.\n   * @docs-private */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  _isContentEmpty(element) {\n    return element.children.length === 0 && !element.textContent.trim();\n  }\n\n  _onLabelChange() {\n    // trigger change detection when the label content changes for the case that ng-content was empty before.\n    // this is also important when the label comes in deferred, e.g. by a delayed observable,\n    // then first the default label derived from the value is shown\n    // and after the value from the async observable is ready we need to trigger change detection that the derived label\n    // gets hidden again.\n    // Notice(!): the event of (cdkObserveContent) is run outside of the ngZone\n    // We run detectChanges directly here as markForCheck wasn't enough to always trigger change detection correctly\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n// This Directive solely purpose is to mark given ng-template and project it into the required destination.\n@Directive({\n  selector: '[nxClosedLabel]'\n})\nexport class NxDropdownClosedLabelDirective {\n  constructor(public templateRef: TemplateRef<any>) {}\n}\n","import { NxFormfieldComponent, NxFormfieldControl } from '@allianz/ngx-ndbx/formfield';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, SHIFT, TAB } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, ConnectionPositionPair, FlexibleConnectedPositionStrategy } from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  isDevMode,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  Self,\n  ViewChild,\n  TemplateRef,\n  ContentChild,\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {delay, filter, map, startWith, switchMap, take, takeUntil} from 'rxjs/operators';\n\nimport { getNxDropdownNonArrayValueError, getNxDropdownNonFunctionValueError } from './dropdown-errors';\nimport { NxDropdownControl } from './dropdown.control';\nimport { NxDropdownGroupComponent } from './group/dropdown-group';\nimport { NxDropdownItemChange, NxDropdownItemComponent } from './item/dropdown-item';\nimport { NxDropdownClosedLabelDirective } from './closed-label.directive';\n\n/** Change event object that is emitted when the select value has changed. */\nexport class NxDropdownSelectChange<T = any> {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: NxDropdownComponent,\n    /** Current value of the select that emitted the event. */\n    public value: T) { }\n}\n\nfunction getPositions(): ConnectionPositionPair[] {\n  return [{\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'top'\n  }, {\n    originX: 'start',\n    originY: 'center',\n    overlayX: 'start',\n    overlayY: 'center'\n  }, {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'bottom'\n  }];\n}\n\n@Component({\n  selector: 'nx-dropdown',\n  templateUrl: 'dropdown.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['dropdown.scss'],\n  providers: [\n    { provide: NxDropdownControl, useExisting: NxDropdownComponent },\n    { provide: NxFormfieldControl, useExisting: NxDropdownComponent },\n  ],\n  host: {\n    'role': 'button',\n    '[class.nx-dropdown]': 'true',\n    '[class.is-filled]': 'hasValue',\n    '[class.has-focus]': 'focused',\n    '[class.nx-dropdown--negative]': '_negative',\n    '[class.nx-dropdown--disabled]': 'disabled',\n    '[attr.aria-describedby]': 'ariaDescribedby || null',\n    '[attr.aria-required]': 'required',\n    '[attr.aria-label]': '_getAriaLabel()',\n    'aria-haspopup': 'listbox',\n    '[attr.aria-expanded]': 'panelOpen',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.tabindex]': 'tabIndex',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': 'openPanel()'\n  }\n})\nexport class NxDropdownComponent extends NxDropdownControl implements ControlValueAccessor,\n  OnInit, AfterContentInit, OnDestroy, DoCheck {\n\n  // The dropdown currently doesn't support readonly of the NxFormfieldControl so we hardcode it here\n  readonly readonly: boolean = false;\n\n  private _selectionModel: SelectionModel<NxDropdownItemComponent>;\n\n  protected _disabled: boolean = false;\n\n  private _focused: boolean = false;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** @docs-private */\n  errorState: boolean = false;\n\n  /** @docs-private */\n  isStable: boolean = false;\n\n  /**\n   * Name of this control that is used inside the formfield component\n   * @docs-private\n   */\n  controlType = 'nx-dropdown';\n\n  /** Holds the value from nxValue. */\n  private _value: any;\n\n  /** The minimal space between the viewport and the overlay */\n  _overlayViewportMargin: number = 16;\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** Holds the panelWidth after panel was attached. */\n  _panelWidth: number;\n\n  /**\n   * @docs-private\n   * Emits when internal state changes to inform formfield about it.\n   */\n  readonly stateChanges = new Subject<any>();\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** @docs-private */\n  ariaDescribedby: string;\n\n  private _tabIndex: number = 0;\n\n  /** @docs-private */\n  currentFilter: string = '';\n\n  @Input()\n  get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n\n  /** Label to describe the component. */\n  @Input('nxAriaLabel') _ariaLabel: string = '';\n\n  /** Selected value */\n  @Input('nxValue')\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n      this._onChange(newValue);\n    }\n  }\n\n  /** Whether the dropdown is disabled. */\n  @Input('nxDisabled')\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n  }\n\n  /** Whether the component is required. This adds an aria-required label to the component. */\n  @Input('nxRequired') required: boolean;\n\n  private _style: string = '';\n  /** Whether the dropdown should render in its negative style or not. */\n  _negative: boolean = false;\n\n  /** If set to 'negative', the component is displayed with the negative set of styles. */\n  @Input('nxStyle')\n  set styles(value: string) {\n\n    if (this._style === value) {\n      return;\n    }\n\n    this._style = value;\n    this._negative = !!this._style.match(/negative/);\n  }\n\n  /** Whether the dropdown should be shown with an additional filter input. */\n  @Input('nxShowFilter') showFilter: boolean = false;\n\n  /** Text displayed as placeholder for the filter. */\n  @Input('nxFilterPlaceholder') filterPlaceholder: string = '';\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n    this.openedChange.pipe(filter(o => o), map(() => { }));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n    this.openedChange.pipe(filter(o => !o), map(() => { }));\n\n  /** Event emitted when the user types in the filter input. */\n  @Output('filterInput') readonly filterChanges: Subject<any> = new Subject<any>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output('nxValueChange') readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** Event emitted when the selected value has been changed. */\n  @Output() readonly selectionChange: EventEmitter<NxDropdownSelectChange> =\n    new EventEmitter<NxDropdownSelectChange>();\n\n  /** @docs-private */\n  readonly optionSelectionChanges: Observable<NxDropdownItemChange> = defer<Observable<NxDropdownItemChange>>(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions:  ConnectionPositionPair[];\n\n  /**\n   * @docs-private\n   * Panel containing the select options.\n   */\n  @ViewChild('panel', { static: false }) panel: ElementRef;\n\n  /** @docs-private */\n  @ViewChild('panelBody', { static: false }) panelBody: ElementRef;\n\n  /** @docs-private */\n  @ViewChild('trigger', { static: true }) trigger: ElementRef;\n\n  /** @docs-private */\n  @ViewChild('filterInput', { static: false }) filterInput: ElementRef;\n\n  /**\n   * @docs-private\n   * Overlay pane containing the options.\n   */\n  @ViewChild(CdkConnectedOverlay, { static: true }) overlayDir: CdkConnectedOverlay;\n\n  /** @docs-private */\n  @ContentChildren(NxDropdownItemComponent, { descendants: true }) options;\n\n  /** @docs-private */\n  @ContentChildren(NxDropdownGroupComponent) groups;\n\n  @ContentChild(NxDropdownClosedLabelDirective, {static: false})\n  _customClosedDropdownLabel: NxDropdownClosedLabelDirective;\n\n  @ViewChild('defaultClosedDropdownLabel', { static: true })\n  private _defaultClosedDropdownLabel: TemplateRef<any>;\n\n  /** @docs-private */\n  get closedDropdownLabel(): TemplateRef<any> {\n    return this._closedDropdownLabel;\n  }\n  private _closedDropdownLabel: TemplateRef<any>;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /**\n   * @docs-private\n   * The currently selected option.\n   */\n  get selected(): NxDropdownItemComponent | NxDropdownItemComponent[] {\n    return this.isMultiSelect ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  private _keyManager: ActiveDescendantKeyManager<NxDropdownItemComponent>;\n\n  /** @docs-private */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n  set panelOpen(value: boolean) {\n    this._panelOpen = value;\n  }\n\n  /**\n   * Function that transforms the value into a string.\n   * This function is used for displaying and filtering the content\n   * ( Default: (value) => value ? value.toString() : null; ).\n   */\n  @Input('nxValueFormatter') valueFormatter = (value) => {\n    return value == null ? '' : value.toString();\n  }\n\n  /** @docs-private */\n  get label(): string {\n    return this.formFieldComponent ? this.formFieldComponent.label : '';\n  }\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getNxDropdownNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  private _filterFn = (search: string, itemValue: string) => {\n    return itemValue.toLocaleLowerCase().indexOf(search.toLocaleLowerCase()) >= 0;\n  }\n\n  /**\n   * Function to be used when the user types into the search filter. The first argument is the user input,\n   * the second argument is the dropdown item value. The dropdown items will use this function to set their\n   * visibility state.\n   * A boolean should be returned.\n   */\n  @Input()\n  get filterFn() { return this._filterFn; }\n  set filterFn(fn: (search: string, itemValue: string) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getNxDropdownNonFunctionValueError();\n    }\n    this._filterFn = fn;\n  }\n\n  /**\n   * @docs-private\n   * Whether the select is focused.\n   */\n  get focused(): boolean {\n    return this._focused || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => { };\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => { };\n\n  /** @docs-private */\n  get elementRef(): ElementRef {\n    return this._elementRef;\n  }\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Attribute('tabindex') tabIndex: string,\n    @Optional() private formFieldComponent: NxFormfieldComponent,\n    /** @docs-private */\n    @Self() @Optional() public ngControl: NgControl,\n    @Optional() private _parentForm: NgForm,\n    @Optional() private _parentFormGroup: FormGroupDirective) {\n    super();\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._positions = getPositions();\n    this.tabIndex = parseInt(tabIndex, 10) || 0;\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<NxDropdownItemComponent>(this.isMultiSelect);\n  }\n\n  ngAfterContentInit() {\n    this._closedDropdownLabel =\n      this._customClosedDropdownLabel && this._customClosedDropdownLabel.templateRef || this._defaultClosedDropdownLabel;\n    this._initKeyManager();\n\n    this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n  }\n\n  /** @docs-private */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n\n  /** @docs-private */\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const control = this.ngControl ? this.ngControl.control as FormControl : null;\n    const newState = this.isErrorState(control, parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<NxDropdownItemComponent>(this.options)\n      .withTypeAhead()\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation('ltr')\n      .skipPredicate(item => item._hidden);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.closePanel();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        // Delay the auto scrolling until all items have settled otherwise the item containers might\n        // not exist yet\n        this._ngZone.onStable\n          .asObservable()\n          .pipe(take(1)).subscribe(() => {\n            this._scrollActiveOptionIntoView();\n          });\n      } else if (!this._panelOpen && !this.isMultiSelect && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.item, event.isUserInput);\n\n      if (event.isUserInput && !this.isMultiSelect && this._panelOpen) {\n        this.closePanel();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        // defer it for the next cycle to not run in changed after checked errors\n        // the combination of dropdown-item notifying parent and when the parent\n        // tries to fetch the triggerValue from the child throws these errors\n        setTimeout(() => {\n          this._changeDetectorRef.markForCheck();\n          this.stateChanges.next();\n        });\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: NxDropdownItemComponent, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this.isMultiSelect) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.isMultiSelect) {\n        this._sortValues();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.isMultiSelect && value) {\n      if (!Array.isArray(value)) {\n        throw getNxDropdownNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): NxDropdownItemComponent | undefined {\n    const correspondingOption = this.options.find((option: NxDropdownItemComponent) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value, value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n    return correspondingOption;\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.isMultiSelect) {\n      valueToEmit = (this.selected as NxDropdownItemComponent[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as NxDropdownItemComponent).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new NxDropdownSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.isMultiSelect) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Adds a offset to the overlay position, so the formfield label and the dropdown panel header are vertically aligned. */\n  private _updatePositionOffset() {\n    let offset = 0;\n\n    if (this.formFieldComponent !== null) {\n      const formFieldRect = this.formFieldComponent.elementRef.nativeElement.getBoundingClientRect();\n      const dropdownRect = this._elementRef.nativeElement.getBoundingClientRect();\n      const panelHeader = this.overlayDir.overlayRef.overlayElement.querySelector('.nx-dropdown__panel-header');\n      const panelHeaderPaddingTop = panelHeader ? parseInt(getComputedStyle(panelHeader).paddingTop, 10) : 0;\n      offset = formFieldRect.top - dropdownRect.top - panelHeaderPaddingTop;\n    }\n\n    this._positions[0].offsetY = offset;\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Opens the panel of the dropdown. */\n  openPanel() {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n    this._panelOpen = true;\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    this._keyManager.withHorizontalOrientation(null);\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Closes the panel of the dropdown. */\n  closePanel() {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this.isStable = false;\n      this._keyManager.withHorizontalOrientation('ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n      this.openedChange.emit(false);\n      // defer the focus if the dropdown triggers actions that detach\n      // a template/view from the DOM to prevent changed after checked errors\n      setTimeout(() => this.focus());\n    }\n  }\n\n  // calculate inital scrollTop when the dropdown opens\n  // scrolls the selected item to the middle of the panel if possible\n  private _calculateScrollTop() {\n    // reset the scrolltop to make calculation easier\n    this.panelBody.nativeElement.scrollTop = 0;\n\n    if (!this.empty) {\n      const offset = this._getItemOffset(this._keyManager.activeItem);\n      const panelHeight = this.panelBody.nativeElement.offsetHeight;\n      const panelRect = this.panelBody.nativeElement.getBoundingClientRect();\n      const middleOfPanel = panelRect.top + panelHeight / 2;\n\n      if (offset > middleOfPanel) {\n        // because we reset the scrollTop to 0 at the top we can simply take the middleOfPanel which is our\n        // target position for the item and subtract it from the offset (which is now always relative to the viewport)\n        this.panelBody.nativeElement.scrollTop = offset - middleOfPanel;\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    if (!this.panelOpen || !this._keyManager.activeItem) {\n      return;\n    }\n\n    const activeItem = this._keyManager.activeItem.containerElement.nativeElement;\n    const panel = this.panelBody.nativeElement;\n    const panelOffset = panel.offsetTop;   // how much the overlay is repositioned on the page\n    const panelTopScrollPosition = panel.scrollTop;\n    const panelHeight = panel.clientHeight;\n    const itemTop = activeItem.offsetTop - panelOffset;\n    const itemBottom = activeItem.offsetTop - panelOffset + activeItem.getBoundingClientRect().height;\n\n    // item half or less visible on top\n    if (itemTop < panelTopScrollPosition) {\n      this.panelBody.nativeElement.scrollTop = itemTop;\n      // item half or less visible on bottom\n    } else if (itemBottom > (panelTopScrollPosition + panelHeight)) {\n      this.panelBody.nativeElement.scrollTop = itemBottom - panelHeight;\n    }\n  }\n\n  /** @docs-private */\n  private _getItemOffset(item) {\n    const itemRect = item.containerElement.nativeElement.getBoundingClientRect();\n\n    return itemRect.top + (itemRect.height / 2); // get position of the item's center\n  }\n\n  /**\n   * @docs-private\n   * Formfield Implementation\n   */\n  setDescribedByIds(ids: string[]): void {\n    this.ariaDescribedby = ids.join(' ');\n  }\n\n  /** @docs-private */\n  setAriaLabel(value: string) {\n    this._ariaLabel = value;\n  }\n\n  _getAriaLabel() {\n    return this._ariaLabel || (this.formFieldComponent ? this.formFieldComponent.label : null);\n  }\n\n  get _isInOutlineField(): boolean {\n    return this.formFieldComponent !== null\n      && this.formFieldComponent.appearance === 'outline';\n  }\n\n  /**\n   * @docs-private\n   * Whether the select has a value.\n   */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  /** @docs-private */\n  get hasValue() {\n    return this._selectionModel.hasValue();\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean {\n    return this.focused || !this.empty;\n  }\n  /** End Formfield */\n\n  /** ControlValueAccessor */\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n  /** End ControlValueAccessor */\n\n  _handleKeydown(event: KeyboardEvent) {\n    this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n  }\n\n  private _handleClosedKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n      keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.isMultiSelect || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.openPanel();\n    } else if (!this.isMultiSelect && !this.disabled) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  private _handleOpenKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    // if has filter all events other than the listed ones should be ignored or handled in _onFilter()\n    if (!([DOWN_ARROW, UP_ARROW, HOME, END, ENTER, LEFT_ARROW, RIGHT_ARROW, SHIFT, SPACE, TAB].indexOf(keyCode) >= 0)\n         && this.showFilter) {\n      return;\n    }\n\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    const allHidden = this.options.map(option => option._hidden).every(option => Boolean(option));\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.closePanel();\n    } else if (keyCode === ENTER && manager.activeItem && !allHidden) {\n      event.preventDefault();\n\n      manager.activeItem._selectViaInteraction();\n    } else if (keyCode === ENTER && allHidden) {\n      event.preventDefault();\n\n      this.closePanel();\n    } else if (!this.showFilter && keyCode === SPACE && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (keyCode === TAB) {\n      this.closePanel();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n      manager.onKeydown(event);\n\n      this._ngZone.onStable\n        .asObservable()\n      .pipe(\n        take(1),\n        delay(251) // we need to defer to get the new activeItemIndex. delay > debouncing of the typeAhead\n       ).subscribe(() => {\n          this.isStable = true;\n          this._changeDetectorRef.detectChanges();\n        });\n\n      if (this.isMultiSelect && isArrowKey && event.shiftKey && manager.activeItem &&\n        manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /** @docs-private */\n  formatValue(value): string {\n    return this.valueFormatter(value);\n  }\n\n  /** Called when the user types in the filter input */\n  _onFilter(event) {\n    event.preventDefault();\n    this.currentFilter = event.target.value;\n    this.filterChanges.next(event.target.value);\n    const allHidden = this.options.map(option => option._hidden).every(option => Boolean(option));\n    if (allHidden) {\n      this._keyManager.setActiveItem(null);\n    } else {\n      this._keyManager.setFirstItemActive();\n    }\n  }\n\n  /**\n   * @docs-private\n   * The value displayed in the trigger.\n   */\n  get triggerValue(): string {\n\n    if (this.empty) {\n      return '';\n    }\n\n    if (this.isMultiSelect) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      return selectedOptions.join(', ');\n    }\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      const overlayRef = this.overlayDir.overlayRef;\n      const positionStrategy = overlayRef.getConfig()\n        .positionStrategy as FlexibleConnectedPositionStrategy;\n\n      this._updatePositionOffset();\n      positionStrategy.withPositions(this._positions.slice());\n      overlayRef.updatePosition();\n\n      if (this._keyManager.activeItem) {\n        this._calculateScrollTop();\n      }\n\n      this._changeDetectorRef.markForCheck();\n      this.openedChange.emit(true);\n\n      // If there is no item selected, the filter takes the focus.\n      if (this.showFilter && !this._value) {\n        this.filterInput.nativeElement.focus();\n      } else {\n        this.panelBody.nativeElement.focus();\n      }\n    });\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (this.filterInput && this.showFilter) {\n      this._clearFilter();\n    }\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /** @docs-private */\n  get isFilterEmpty() {\n    return this.currentFilter.length === 0;\n  }\n\n  /** @docs-private */\n  _clearFilter() {\n    this.filterInput.nativeElement.value = '';\n    this.currentFilter = '';\n    this.filterChanges.next('');\n  }\n\n  /** @docs-private determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n}\n","import { NxFormfieldModule } from '@allianz/ngx-ndbx/formfield';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxCheckboxModule } from '@allianz/ngx-ndbx/checkbox';\nimport { NxDropdownComponent } from './dropdown';\nimport { NxDropdownGroupComponent } from './group/dropdown-group';\nimport { NxDropdownItemComponent } from './item/dropdown-item';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { NxDropdownClosedLabelDirective } from './closed-label.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxFormfieldModule,\n    NxCheckboxModule,\n    OverlayModule,\n    A11yModule,\n    NxIconModule,\n    ObserversModule\n  ],\n  declarations: [\n    NxDropdownComponent,\n    NxDropdownItemComponent,\n    NxDropdownGroupComponent,\n    NxDropdownClosedLabelDirective\n  ],\n  exports: [\n    NxDropdownComponent,\n    NxDropdownItemComponent,\n    NxDropdownGroupComponent,\n    NxDropdownClosedLabelDirective\n  ]\n})\nexport class NxDropdownModule {\n\n}\n"]}