{"version":3,"sources":["ng://@allianz/ngx-ndbx/checkbox/checkbox.component.ts","ng://@allianz/ngx-ndbx/checkbox/checkbox.module.ts"],"names":["nextId","NxCheckboxChangeEvent","checked","value","checkbox","this","NxCheckboxGroupComponent","_changeDetectorRef","ngControl","_stateChanges","Subject","selectionChange","EventEmitter","_id","_disabled","_negative","_onChange","_onTouched","valueAccessor","Object","defineProperty","prototype","markForCheck","_name","coerceBooleanProperty","_label","disabled","next","_labelSize","_required","ngAfterContentInit","_this","_value","_updateSelectedCheckboxFromValue","_checkboxes","filter","map","cb","changes","subscribe","control","setValue","ngOnDestroy","complete","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","length","indexOf","change","emit","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","host","[class.nx-checkbox-group]","[class.nx-checkbox-group--negative]","[attr.id]","[attr.required]","[attr.disabled]","[attr.aria-labelledby]","[attr.role]","ChangeDetectorRef","NgControl","decorators","type","Optional","Self","ContentChildren","forwardRef","NxCheckboxComponent","descendants","ContentChild","NxLabelComponent","static","Output","Input","_errorStateMatcher","checkboxGroup","_parentForm","_parentFormGroup","toString","_checked","_indeterminate","indeterminateChange","checkedChange","checkboxChange","onChangeCallback","_","onTouchedCallback","name","newValue","labelSize","negative","_setIndeterminate","_setChecked","_checkboxLabelWrapper","nativeElement","innerHTML","trim","labelContentChanged","detectChanges","_controlInvalid","parent","isErrorState","ngOnInit","_parentChangeSubscription","unsubscribe","toggle","onChange","onTouched","touch","_onInputClick","event","stopPropagation","_createChangeEvent","checkedValue","[class.nx-checkbox]","[class.disabled]","[class.nx-checkbox--label-large]","[class.nx-checkbox--label-small]","[class.nx-checkbox--negative]","[class.has-error]","[attr.aria-invalid]","ErrorStateMatcher","NgForm","FormGroupDirective","ViewChild","NxCheckboxModule","NgModule","declarations","exports","NxLabelModule","NxErrorModule","imports","CommonModule","NxIconModule","ObserversModule"],"mappings":"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","sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ChangeDetectorRef,\n  AfterContentInit,\n  OnDestroy,\n  ContentChildren,\n  QueryList,\n  Optional,\n  Self,\n  OnInit,\n  ContentChild,\n  ViewChild,\n  ElementRef,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NgControl,\n  NgForm,\n  FormGroupDirective,\n  FormControl,\n} from '@angular/forms';\nimport { Subject, Subscription } from 'rxjs';\nimport { NxLabelComponent } from '@allianz/ngx-ndbx/base';\nimport { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';\n\nlet nextId = 0;\n\nexport class NxCheckboxChangeEvent {\n  constructor(\n  /** The checked value of the checkbox. */\n  public checked: boolean,\n  /** The value of the checkbox. */\n  public value: string,\n  /** The component instance of the checkbox which emitted the change event. */\n  public checkbox: NxCheckboxComponent\n  ) {}\n}\n\n/** Size of the label. */\nexport type NxCheckboxLabelSize = 'small' | 'large';\n\n@Component({\n  selector: 'nx-checkbox-group',\n  templateUrl: 'checkbox-group.component.html',\n  styleUrls: ['checkbox-group.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.nx-checkbox-group]': 'true',\n    '[class.nx-checkbox-group--negative]': 'negative',\n    '[attr.id]': 'id',\n    '[attr.required]': 'required',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-labelledby]': 'this._label?.id  || null',\n    '[attr.role]': '\"group\"',\n  }\n})\nexport class NxCheckboxGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy {\n  @ContentChildren(forwardRef(() => NxCheckboxComponent), {descendants: true})\n  _checkboxes: QueryList<NxCheckboxComponent>;\n\n  @ContentChild(forwardRef(() => NxLabelComponent), {static: false})\n   _label: NxLabelComponent;\n\n  readonly _stateChanges = new Subject<void>();\n  @Output() selectionChange: EventEmitter<NxCheckboxChangeEvent> = new EventEmitter<NxCheckboxChangeEvent>();\n\n  private _id: string = `nx-checkbox-group-${nextId++}`;\n  /** Sets the Id of the checkbox group. */\n  @Input()\n  set id(value: string) {\n    if (this._id !== value) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get id(): string {\n    return this._id;\n  }\n\n  private _name: string;\n  /** Sets the name of the checkboxes inside the nx-checkbox-group. */\n  @Input()\n  set name(value: string) {\n    this._name = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get name(): string {\n    return this._name;\n  }\n\n  private _disabled: boolean = false;\n\n  /** Disables all checkboxes inside the nx-checkbox-group. */\n  @Input()\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this._label) {\n      this._label.disabled = this._disabled;\n    }\n    this._stateChanges.next();\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  private _negative: boolean = false;\n  /** Set the negative styles for all the checkboxes inside the nx-checkbox-group */\n  @Input()\n  set negative(value: boolean) {\n    this._negative = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n    this._stateChanges.next();\n  }\n\n  get negative(): boolean {\n    return this._negative;\n  }\n\n  private _labelSize: NxCheckboxLabelSize;\n  /** Sets the label size of the checkboxes inside the group */\n  @Input()\n  set labelSize(value: NxCheckboxLabelSize) {\n    this._labelSize = value;\n    this._stateChanges.next();\n  }\n\n  get labelSize(): NxCheckboxLabelSize {\n    return this._labelSize;\n  }\n\n  /** Whether the nx-checkbox-group are required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  private _required: boolean;\n\n  private _value: any;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Self() public ngControl: NgControl) {\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    if (this.ngControl) {\n      if (!!this._value) {\n        this._updateSelectedCheckboxFromValue();\n      }\n\n      this._value = this._checkboxes\n                        .filter(checkbox => checkbox.checked)\n                        .map(cb => cb.value);\n    }\n\n    this._updateSelectedCheckboxFromValue();\n    this._checkboxes.changes.subscribe(() => {\n      this._value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);\n      if (this.ngControl) {\n        this.ngControl.control.setValue(this._value);\n      }\n      this._updateSelectedCheckboxFromValue();\n    });\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  writeValue(value: any): void {\n    if (this._value !== value) {\n      this._value = value;\n      this._updateSelectedCheckboxFromValue();\n    }\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  private _onChange: (value: any) => void = () => {};\n\n  private _onTouched: () => any = () => {};\n\n  private _updateSelectedCheckboxFromValue(): void {\n    if (this._checkboxes && this._checkboxes.length && !!this._value && this._value.length) {\n      this._checkboxes.map(checkbox => {\n        checkbox.checked = this._value.indexOf(checkbox.value) !== -1;\n      });\n    }\n  }\n\n  /** @docs-private */\n  change(value) {\n    value = this._checkboxes.filter(checkbox => checkbox.checked).map(cb => cb.value);\n    this._onChange(value);\n    if (this._onTouched) {\n      this._onTouched();\n    }\n    this.selectionChange.emit(new NxCheckboxChangeEvent(value.checked, value.value, value));\n  }\n}\n\n@Component({\n  selector: 'nx-checkbox',\n  templateUrl: 'checkbox.component.html',\n  styleUrls: ['checkbox.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.nx-checkbox]': 'true',\n    '[class.disabled]': 'disabled',\n    '[class.nx-checkbox--label-large]': 'labelSize === \"large\"',\n    '[class.nx-checkbox--label-small]': 'labelSize === \"small\"',\n    '[class.nx-checkbox--negative]': 'negative',\n    '[class.has-error]': '_controlInvalid() || null',\n    '[attr.required]': 'required',\n    '[attr.aria-invalid]': '_controlInvalid() || null',\n  }\n})\n\nexport class NxCheckboxComponent implements ControlValueAccessor, OnDestroy, OnInit {\n  private _parentChangeSubscription: Subscription;\n  private _id: string = (nextId++).toString();\n  private _disabled: boolean = false;\n  private _negative: boolean = false;\n  private _labelSize: NxCheckboxLabelSize = 'small';\n  private _checked = false;\n  private _name: string = null;\n\n  /** @docs-private */\n  @ViewChild('checkboxLabelWrapper', { static: true }) _checkboxLabelWrapper: ElementRef;\n\n  /**\n   * Id of the checkbox.\n   *\n   * If not set, the checkbox gets an incremented value by default.\n   */\n  @Input()\n  set id(value: string) {\n    if (value !== this._id) {\n      this._id = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get id() {\n    return `nx-checkbox-${this._id}`;\n  }\n\n  /** Name of the checkbox. */\n  @Input()\n  set name(name: string) {\n    this._name = name;\n  }\n\n  get name(): string {\n    return (this.checkboxGroup && this.checkboxGroup.name) ? this.checkboxGroup.name : this._name;\n  }\n\n  /** Whether the checkbox is disabled. */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get disabled(): boolean {\n    return (this.checkboxGroup && this.checkboxGroup.disabled) ? this.checkboxGroup.disabled : this._disabled;\n  }\n\n  /**\n   * Sets the label size of the checkbox. Default value: small\n   */\n  @Input()\n  set labelSize(value: NxCheckboxLabelSize) {\n    this._labelSize = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get labelSize(): NxCheckboxLabelSize {\n    return (this.checkboxGroup && this.checkboxGroup.labelSize) ? this.checkboxGroup.labelSize : this._labelSize;\n  }\n\n  /**\n   * Whether the checkbox has negative styling.\n   */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._negative) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get negative(): boolean {\n    return (this.checkboxGroup && this.checkboxGroup.negative) ? this.checkboxGroup.negative : this._negative;\n  }\n\n  /** Whether the checkbox is checked. */\n  @Input()\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._checked) {\n      if (this._indeterminate) {\n        this._setIndeterminate(false);\n      }\n      this._setChecked(newValue);\n    }\n  }\n\n  get checked() {\n    return this._checked;\n  }\n\n  private _indeterminate = false;\n\n  /** Whether the checkbox is indeterminated. */\n  @Input()\n  set indeterminate(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._indeterminate !== newValue) {\n      if (this._checked) {\n        this._setChecked(false);\n      }\n      this._setIndeterminate(newValue);\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get indeterminate() {\n    return this._indeterminate;\n  }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean {\n    return this._required;\n  }\n\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  private _required: boolean;\n\n  /** Sets the value of the checkbox. Default value is the checked status. */\n  @Input()\n  get value(): string {\n    return this._value ? this._value : this.checked.toString();\n  }\n\n  set value(value: string) {\n    this._value = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _value: string;\n\n  /** An event emitted when the indeterminate value has changed */\n  @Output()\n  indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n  /** An event emitted when the checked value has changed.\n   *\n   * Emits the boolean checked value of the changed checkbox.\n   */\n  @Output()\n  checkedChange = new EventEmitter<boolean>(false);\n\n  /** An event emitted when the checked value has changed.\n   *\n   * Emits a NxCheckboxChangeEvent.\n   */\n  @Output()\n  checkboxChange: EventEmitter<NxCheckboxChangeEvent> = new EventEmitter<NxCheckboxChangeEvent>();\n\n  /** @docs-private */\n  get labelHasContent() {\n    return !!this._checkboxLabelWrapper.nativeElement.innerHTML.trim();\n  }\n\n  /** @docs-private\n   * Callback for when the content of the label has changed.\n   */\n  labelContentChanged() {\n    this._changeDetectorRef.detectChanges();\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() public checkboxGroup: NxCheckboxGroupComponent,\n              @Self() @Optional() public ngControl: NgControl,\n              @Optional() private _parentForm: NgForm,\n              @Optional() private _parentFormGroup: FormGroupDirective\n  ) {\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n  }\n\n  /** @docs-private */\n  _controlInvalid(): boolean {\n\n    const parent = this._parentFormGroup || this._parentForm;\n    let control = null;\n\n    if (this.checkboxGroup && this.checkboxGroup.ngControl) {\n      control = this.checkboxGroup.ngControl;\n    } else {\n      control = this.ngControl ? this.ngControl.control as FormControl : null;\n    }\n\n    return this._errorStateMatcher.isErrorState(control, parent);\n  }\n\n  ngOnInit() {\n    if (this.checkboxGroup) {\n      this.name = this.checkboxGroup.name;\n      // when relevant properties of the parent like name and disabled change\n      // we need to let change detection know that the template needs an update\n      this._parentChangeSubscription = this.checkboxGroup._stateChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._parentChangeSubscription) {\n      this._parentChangeSubscription.unsubscribe();\n    }\n  }\n\n  private _setIndeterminate(value: boolean) {\n    this._indeterminate = value;\n    this.indeterminateChange.emit(this._indeterminate);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _setChecked(value: boolean) {\n    this._checked = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Toggles the checked state of the checkbox. */\n  public toggle() {\n    this.checked = !this.checked;\n    this.onChangeCallback(this.checked);\n    if (this.checkboxGroup !== null) {\n      this.checkboxGroup.change(this);\n    }\n  }\n\n  writeValue(value: any): void {\n    if (value === null) {\n      value = false;\n    }\n    if (value !== this.checked) {\n      this.checked = value;\n    }\n  }\n\n  private onChangeCallback = (_: any) => {};\n\n  registerOnChange(onChange: any): void {\n    this.onChangeCallback = onChange;\n  }\n\n  private onTouchedCallback = () => {};\n\n  registerOnTouched(onTouched: any): void {\n    this.onTouchedCallback = onTouched;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  touch() {\n    this.onTouchedCallback();\n  }\n\n  /** @docs-private */\n  _onInputClick(event): void {\n    // stop the propagation of the native click on the checkbox input so that a click is not triggered twice\n    event.stopPropagation();\n    if (!this.disabled) {\n      this.toggle();\n      this.checkedChange.emit(this._checked);\n      this.checkboxChange.emit(this._createChangeEvent(this._checked));\n    }\n  }\n\n  /**@docs-private */\n  private _createChangeEvent(checkedValue: boolean): NxCheckboxChangeEvent {\n    const event = new NxCheckboxChangeEvent(checkedValue, this.value, this);\n    event.checked = checkedValue;\n    event.value = this.value;\n    event.checkbox = this;\n    return event;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxCheckboxComponent } from './checkbox.component';\nimport { NxCheckboxGroupComponent } from './checkbox.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxErrorModule, NxLabelModule } from '@allianz/ngx-ndbx/base';\nimport {ObserversModule} from '@angular/cdk/observers';\n\n@NgModule({\n  declarations: [\n    NxCheckboxComponent,\n    NxCheckboxGroupComponent\n  ],\n  exports: [\n    NxCheckboxComponent,\n    NxCheckboxGroupComponent,\n    NxLabelModule,\n    NxErrorModule\n  ],\n  imports: [\n    CommonModule,\n    NxIconModule,\n    ObserversModule\n  ]\n})\nexport class NxCheckboxModule { }\n"]}