import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, NgZone } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class NxSliderComponent implements ControlValueAccessor, OnDestroy {
    private elementRef;
    private _changeDetectorRef;
    private _ngZone;
    /** @docs-private */
    handleElement: ElementRef;
    private _id;
    /** Sets the id of the slider. */
    id: string;
    private _tabIndex;
    /** Sets the tabindex of the slider. */
    tabindex: number;
    private _min;
    /** Sets the minimum value (Default: 0). */
    min: number;
    private _max;
    /** Sets the maximum value (Default: 100). */
    max: number;
    /** Sets the step size by which the value of the slider can be increased or decreased (Default: 1). */
    step: number;
    private _label;
    /** Sets the label which is displayed on top of the slider. */
    label: string;
    private _disabled;
    /** Whether the input to the control of the slider should be disabled. */
    disabled: boolean;
    private _inverted;
    /** Whether the max value is to the right (false) or left (true).*/
    inverted: boolean;
    private _thumbLabel;
    /** Whether to display the thumb label on top of the slider.*/
    thumbLabel: boolean;
    private _negative;
    /** Whether the negative set of styles is applied (Default: 'false').*/
    negative: boolean;
    /** An event is dispatched on each value change. */
    valueChange: EventEmitter<number>;
    private isActive;
    private dragSubscriptions;
    private frameId;
    private position;
    private _value;
    private _roundToDecimal;
    private _step;
    private _currentValue;
    private _onChange;
    private _onTouched;
    /** Sets the customization function for the value which is displayed above the slider handle (Default:(value) => value). ). */
    valueFormatter: Function;
    /** Sets the customization function for the label on the min-side of the slider (Default:(value) => value). */
    labelMinFormatter: Function;
    /** Sets the customization function for the label on the max-side of the slider (Default:(value) => value). */
    labelMaxFormatter: Function;
    constructor(elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef, _ngZone: NgZone);
    /** Sets the current value of the slider. */
    value: number;
    ngOnDestroy(): void;
    writeValue(value: number): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    setDisabledState(disabled: boolean): void;
    /** @docs-private */
    isMinimum(): boolean;
    /** @docs-private
     * A valid step is either:
     * - the minimum because thats our anchor for all value evaluation and steps
     * - (_value - min) % step === 0
     */
    isValidStep(): boolean;
    /** @docs-private
     * We have to look at two cases:
     * - current value is a valid multitude of the step size
     *   then we can safely add or subtract the step
     * - the value is not a valid multitude. this could be the max value or the value bound
     *   via nxValue
     *   then we look for the next closest value upwards or downwards
     *   decimal.js provides a nice utility function for this.
     */
    changeValue(valueDiff: number): void;
    /** @docs-private */
    readonly percentageValue: number;
    /** @docs-private */
    sliderClick(event: MouseEvent): void;
    /** @docs-private */
    focus(): void;
    /** @docs-private */
    blur(): void;
    /**
     * @docs-private
     * Prevent text selection when dragging the handle.
     */
    selectStart(): boolean;
    /** @docs-private */
    handleKeypress(event: KeyboardEvent): void;
    /** @docs-private
     * this is called on mousedown or touchstart
     */
    dragStart(event: MouseEvent | TouchEvent): void;
    /** @docs-private */
    formatValue(value: number): string;
    /** @docs-private */
    formatLabelLeft(): string;
    /** @docs-private */
    formatLabelRight(): string;
    /** @docs-private */
    valueByPosition(): void;
    /** @docs-private */
    roundToDecimal(value: number): number;
    /** @docs-private */
    formatLabelMin(): any;
    /** @docs-private */
    formatLabelMax(): any;
    private handleDragMove;
    private handleDragStop;
    private runChangeObserver;
    private reset;
    private detectEventType;
    private getPositionFromEvent;
    /** @docs-private */
    _focusHandleElement(): void;
}
