import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { Subject } from 'rxjs';
import { NxLabelComponent } from '@allianz/ngx-ndbx/base';
/** The change event object emitted by the radio group and radio button. */
export declare class NxRadioChange {
    source: NxRadioComponent;
    value: any;
    /** The NxRadioComponent that emits the change event. NxRadioChange object can be instantiated with source radio component and a value. */
    constructor(source: NxRadioComponent, value: any);
}
/** Label Size Types */
export declare type LabelSize = 'small' | 'big';
export declare class NxRadioGroupComponent implements ControlValueAccessor, AfterContentInit, OnDestroy {
    private _changeDetectorRef;
    ngControl: NgControl;
    _parentForm: NgForm;
    _parentFormGroup: FormGroupDirective;
    _label: NxLabelComponent;
    readonly _stateChanges: Subject<void>;
    private _id;
    /** Sets the Id of the radio group. */
    id: string;
    private _disabled;
    /** Whether every radio button in this group should be disabled. */
    disabled: boolean;
    private _negative;
    /** Whether the radio group should have negative styling. */
    negative: boolean;
    private _required;
    /** Sets if at least an option should be selected. */
    required: boolean;
    /** An event is dispatched on each group value change. */
    groupValueChange: EventEmitter<NxRadioChange>;
    private _name;
    private _value;
    private _selected;
    _radios: QueryList<NxRadioComponent>;
    private _onChange;
    private _onTouched;
    /** Sets the name of this radio group, which is mandatory in conjunction with ngModel (Default: null). */
    name: string;
    /** Sets the value of the selected radion button in this group (Default: null). */
    value: any;
    constructor(_changeDetectorRef: ChangeDetectorRef, ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    /** @docs-private this is meant to be called by the radio buttons in this group */
    change(value: any): void;
    /** @docs-private this is meant to be called by the radio buttons in this group. */
    touch(): void;
    setDisabledState(isDisabled: boolean): void;
    private _updateSelectedRadioFromValue;
    private _checkSelectedRadioButton;
}
export declare class NxRadioComponent implements ControlValueAccessor, OnInit, OnDestroy {
    radioGroup: NxRadioGroupComponent;
    private _changeDetectorRef;
    /** @docs-private */
    _radioLabelWrapper: ElementRef;
    private _parentChangeSubscription;
    private _id;
    /** Sets the id of the radio component. */
    id: string;
    /** @docs-private */
    readonly inputId: string;
    /** @docs-private */
    readonly labelId: string;
    private _name;
    /** Sets the name of this radio component, which is mandatory in conjunction with ngModel (Default: null). */
    name: string;
    private _labelSize;
    /** Sets the label size of the radio button.
     * The default value is `big`.
    */
    labelSize: LabelSize;
    private _negative;
    /**
     * Whether the negative set of styles should be used.
     *
     * If the radio button is placed in a radio group, the negative value
     * is overwritten by the group's negative value.
     */
    negative: boolean;
    /** An event is dispatched on each value change. */
    valueChange: EventEmitter<NxRadioChange>;
    private _value;
    private _checked;
    private _disabled;
    private _required;
    /** Sets the value of the form control element (Default: null). */
    value: any;
    /** @docs-private */
    readonly labelHasContent: boolean;
    /** @docs-private
     * Callback for when the content of the label has changed.
     */
    labelContentChanged(): void;
    /** @docs-private */
    /** Whether the radio component is selected. */
    checked: boolean;
    /** @docs-private */
    /** Whether the radio button should be disabled or not. */
    disabled: boolean;
    /** @docs-private */
    /** Sets if at least a radio button should be selected. */
    required: boolean;
    constructor(radioGroup: NxRadioGroupComponent, _changeDetectorRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    private onChangeCallback;
    registerOnChange(onChange: any): void;
    private onTouchedCallback;
    registerOnTouched(onTouched: any): void;
    /** @docs-private */
    touch(): void;
    _onInputChange(event: Event): void;
    _onInputClick(event: Event): void;
    /** @docs-private */
    _controlInvalid(): boolean;
}
