import { ChangeDetectorRef, EventEmitter, OnInit, AfterContentInit } from '@angular/core';
import { IPaginationTexts } from './pagination-texts';
import { NxPaginationUtils } from './pagination-utils';
/** @docs-private */
export interface Page {
    label: string;
    value: any;
    class: string;
}
export declare class NxPaginationComponent implements OnInit, AfterContentInit {
    private paginationUtilsService;
    private _changeDetectorRef;
    private _page;
    private _count;
    private _perPage;
    private _type;
    /** @docs-private */
    paginationTexts: IPaginationTexts;
    /** @docs-private */
    totalNumberPages: number;
    /** Sets the current page. */
    page: number;
    /** Number of total items over all pages. */
    count: number;
    /** Sets the number of items you want to show per page. */
    perPage: number;
    /**
    * Determines the type of pagination.
    *
    * Values: simple | advanced, default: simple.
    */
    type: string;
    /** An event emitted when the previous page button is clicked. */
    nxGoPrev: EventEmitter<void>;
    /** An event emitted when the next page button is clicked */
    nxGoNext: EventEmitter<void>;
    /**
     * An event emitted when a page number is clicked.
     * Provides the number of the page as parameter.
     */
    nxGoPage: EventEmitter<number>;
    constructor(paginationTexts: IPaginationTexts, paginationUtilsService: NxPaginationUtils, _changeDetectorRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    /** Returns the number of the first page. */
    getMin(): number;
    /** Returns the number of the last page. */
    getMax(): number;
    /** Returns the total number of pages */
    calculateTotalPages(): number;
    /** Directs to the page with number n. */
    onPage(n: number): void;
    /** Directs to the previous page. */
    onPrev(): void;
    /** Directs to the next page. */
    onNext(): void;
    /** Directs to the first page. */
    onFirst(): void;
    /** Directs to the last page. */
    onLast(): void;
    /** Returns if the current page is the last page. */
    lastPage(): boolean;
    /** @docs-private */
    getPages(): Page[];
    /** @docs-private */
    getMobilePages(): Page[];
    /** @docs-private */
    getPaginationItemClasses(page: Page): Object;
    /** @docs-private */
    getPaginationNumberClasses(page: Page): Object;
    /** Returns true, if `nxCount` is greater than 0, else false. */
    isPaginationVisible(): boolean;
    /** Returns true, if `nxCount` is greater than 0 and the type of pagination is 'simple', else false. */
    isPaginationCompactVisible(): boolean;
    /** @docs-private */
    isPaginationContainerVisible(): boolean;
    _isPaginationPreviousDisabled(): boolean;
    _isPaginationNextDisabled(): boolean;
}
