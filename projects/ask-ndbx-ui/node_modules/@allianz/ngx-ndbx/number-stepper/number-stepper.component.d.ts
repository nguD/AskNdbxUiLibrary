import { NxNumberStepperIntl } from './number-stepper-intl';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnInit, Renderer2, OnDestroy } from '@angular/core';
import { ControlValueAccessor, FormControl, Validator } from '@angular/forms';
import { MappedStyles } from '@allianz/ngx-ndbx/core';
import { NxAutoResizeDirective } from './auto-resize.directive';
export declare class NxNumberStepperComponent extends MappedStyles implements OnInit, AfterViewInit, ControlValueAccessor, Validator, OnDestroy {
    private _changeDetectorRef;
    _intl: NxNumberStepperIntl;
    private _step;
    private _min;
    private _max;
    private _value;
    private _label;
    private _resize;
    private _intlSubscription;
    private _negative;
    private _leadingZero;
    /** @docs-private */
    numberInputValue: string;
    /**
     * Defines the size of the number stepper.
     *
     * Values: big | normal. Default: normal
     */
    classNames: string;
    /** @docs-private */
    inputClassNames: string;
    /** @docs-private */
    inputId: string;
    /** @docs-private */
    inputWidth: any;
    /** @docs-private */
    ariaDescribedBy: any;
    /** @docs-private */
    ngContentWrapper: ElementRef;
    /** @docs-private */
    autoResize: NxAutoResizeDirective;
    /** An event emitted on value change. */
    valueChange: EventEmitter<number>;
    /** Whether the input should be resized. Default: false */
    resize: boolean;
    /** Defines the the label shown above the stepper input. */
    label: string;
    /** Sets the step size. Default: 1 */
    step: number;
    /** Sets the minimum accepted number. Default: 0 */
    min: number;
    /** Sets the maximum accepted number. Default: 100 */
    max: number;
    /** Sets the value of the number-stepper. */
    value: number;
    /** Whether the negative set of styling should be used. */
    negative: boolean;
    /** Whether the number stepper value should have a leading zero.
     *
     * Default value is true.
     */
    leadingZero: boolean;
    constructor(_changeDetectorRef: ChangeDetectorRef, _renderer: Renderer2, _elementRef: ElementRef, _intl: NxNumberStepperIntl);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /** @docs-private */
    setInputValue(value: any): void;
    writeValue(value: any): void;
    private onChangeCallback;
    registerOnChange(onChange: any): void;
    /** @docs-private */
    onTouchedCallback: () => void;
    registerOnTouched(onTouched: any): void;
    /** @docs-private */
    onInputChange(event: any): void;
    /** @docs-private */
    validateUserInput(input: string): boolean;
    /** @docs-private */
    incrementOnClick(): void;
    /** @docs-private */
    incrementOnKey(): void;
    /** @docs-private */
    _increment(): void;
    /** @docs-private */
    triggerResize(): void;
    /** @docs-private */
    decrementOnClick(): void;
    /** @docs-private */
    decrementOnKey(): void;
    /** @docs-private */
    _decrement(): void;
    /** @docs-private */
    enforceLimits(value: any): any;
    /** @docs-private */
    getNextLowerValue(start: any): any;
    /** @docs-private */
    getNextGreaterValue(start: any): any;
    /** @docs-private */
    isBetweenLimits(value: any): boolean;
    /** @docs-private */
    isMinimum(): boolean;
    /** @docs-private */
    isMaximum(): boolean;
    /** @docs-private */
    isValidStep(value: any): boolean;
    /** @docs-private */
    userInputToNumber(value: any): number;
    _validateFn(): {
        nxNumberStepperStepError: string;
        nxNumberStepperFormatError?: undefined;
    } | {
        nxNumberStepperFormatError: string;
        nxNumberStepperStepError?: undefined;
    };
    /** @docs-private */
    validate(c: FormControl): {
        nxNumberStepperStepError: string;
        nxNumberStepperFormatError?: undefined;
    } | {
        nxNumberStepperFormatError: string;
        nxNumberStepperStepError?: undefined;
    };
    readonly _buttonType: string;
}
