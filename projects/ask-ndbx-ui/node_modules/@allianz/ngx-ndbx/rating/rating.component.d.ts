import { ChangeDetectorRef, ElementRef, EventEmitter, QueryList } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class NxRatingComponent implements ControlValueAccessor {
    private _changeDetectorRef;
    private _value;
    /** Sets the selected rating 1 - 5. */
    value: number;
    private _disabled;
    /** Whether the rating component should be disabled. */
    disabled: boolean;
    private _negative;
    /** Whether the negative colors be used. */
    negative: boolean;
    private _startLabel;
    /** Sets the label painted at the start of the rating component. */
    startLabel: string;
    private _endLabel;
    /** Sets the label painted at the end of the rating component. */
    endLabel: string;
    private _ariaLabel;
    ariaLabel: string[];
    /** An event is dispatched each time when the rating changes. */
    valueChange: EventEmitter<number>;
    /** @docs-private */
    icons: QueryList<ElementRef>;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(_changeDetectorRef: ChangeDetectorRef);
    /** Whether the given rating is selected. */
    isSelected(index: number): boolean;
    /** Allows to set the rating. */
    setSelection(value: number): void;
    /** @docs-private */
    handleKeyUp(event: KeyboardEvent, rating: number): void;
    writeValue(value: number): void;
    registerOnChange(callback: any): void;
    registerOnTouched(callback: any): void;
    setDisabledState(isDisabled: boolean): void;
    /** @docs-private */
    getAriaLabel(rating: any): string;
    /** @docs-private */
    getIconName(rating: number): string;
}
