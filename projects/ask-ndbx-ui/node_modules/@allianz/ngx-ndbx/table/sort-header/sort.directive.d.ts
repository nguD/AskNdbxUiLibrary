import { EventEmitter, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
export declare type SortDirection = 'asc' | 'desc';
export declare class SortEvent {
    /** The name of the column that is being sorted by. */
    active: string;
    /** The sort direction. */
    direction: SortDirection;
    constructor(active: any, direction: any);
}
export declare class NxSortDirective implements OnDestroy {
    readonly _stateChanges: Subject<void>;
    private _active;
    /** Sets the key of the most recently sorted column. */
    active: string;
    private _direction;
    /** Sets the direction of the currently active sorted column. Default: 'asc'. */
    direction: SortDirection;
    /**
     * @docs-private
     * An event emitted when the active value has changed.
     */
    readonly activeChange: EventEmitter<string>;
    /**
     * @docs-private
     * An event emitted when the direction value has changed.
     */
    readonly directionChange: EventEmitter<SortDirection>;
    /** An event emitted when either the active sort or sort direction changes. */
    readonly sortChange: EventEmitter<SortEvent>;
    ngOnDestroy(): void;
    /**
     * Sets the active sort key and determines the new sort direction.
     * Afterwards the output event `sortChange` is called.
     *
     * If `sortable` is not the key of the active sort header, the initial direction to sort is 'asc'.
     * Otherwise the direction of the sorted column changes.
     */
    sort(sortable: string): void;
}
