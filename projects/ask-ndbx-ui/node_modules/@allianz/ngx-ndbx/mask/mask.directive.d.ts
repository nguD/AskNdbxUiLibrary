import { ElementRef } from '@angular/core';
import { ControlValueAccessor, Validator } from '@angular/forms';
import { Subject } from 'rxjs';
export declare const NX_MASK_VALUE_ACCESSOR: any;
export declare const NX_MASK_VALIDATORS: any;
/** Options for input case sensitivity. */
export declare type MaskConversionTypes = 'lower' | 'upper';
export declare class NxMaskDirective implements ControlValueAccessor, Validator {
    private _elementRef;
    private _mask;
    private _separators;
    private _dropSpecialCharacters;
    private _validateMask;
    private _convertTo?;
    /**
     * _cursor is a helper for saving a position or a selectionRange (selectionStart + selectionEnd)
     * and then apply it later on (in _onInputChange()).
     *
     * _cursor.position is used for saving a position that is then applied without any changes.
     * if the position is saved, selectionStart and selectionEnd will be ignored in _onInputChange().
     * _cursor.selectionStart and selectionEnd is used for saving the current cursor position,
     * and a new cursor position is then calculated with this data.
     */
    private _cursor;
    /** helper variable for saving the current value of the input element to compare it then with a new value. */
    private _inputValue;
    /** helper variable for saving the masked string of a pasted value and then applying it in _onInputChange(). */
    private _pastedData;
    /**
     * Emits the unmasked value before the value changes.
     */
    readonly cvaModelChange: Subject<string>;
    private _onChangeCallback;
    private _onTouchedCallback;
    private _validatorOnChange;
    private _callOnChangeCallback;
    private _afterInputHook;
    private _beforePasteHook;
    /**
     * Registers a function to be executed after the onInput handler.
     * The registered hook receives a `KeyboardEvent` from the onInput event handler as a parameter.
     *
     * **Note:** If you register a `afterInputHook`, you may also register a `beforePasteHook`
     * to perform similar changes for pasting.
     */
    registerAfterInputHook(afterInput: (event: KeyboardEvent) => void): void;
    /**
     * Registers a function to be executed before the onPaste handler.
     * The registered hook receives a `ClipboardEvent` from the onPaste event handler as a parameter.
     */
    registerBeforePasteHook(beforePaste: (event: ClipboardEvent) => void): void;
    /** Sets the mask. */
    mask: string;
    /**
     * Sets the mask (for programmatical use).
     *
     * No `_onChangeCallback()` will be called!
     */
    setMask(value: string): void;
    /** Sets the case sensitivity of the mask. */
    convertTo: MaskConversionTypes;
    /**
     * Sets the keys that are recognized as separators.
     * Default separators: / ( ) . : - + , and space.
     */
    separators: string[];
    /** Whether the separators should be dropped in the control value accessor. */
    dropSpecialCharacters: boolean;
    /** Whether the mask validation should be applied on the input. Default: true. */
    validateMask: boolean;
    constructor(_elementRef: ElementRef);
    /** @docs-private */
    readonly elementRefValue: string;
    /** Returns the unmasked value. */
    getUnmaskedValue(): string;
    /**
     * this._cursor can be set to a new value in this function;
     * in _onInputChange() it is then used to set the cursor position.
     */
    _onKeydown(event: KeyboardEvent): void;
    /**
     * Returns the cursor position after a letter is entered at `selectionStart` position in the mask.
     * There are two cases to consider ('|' => cursor position where the character is entered, mask: 00:00:00):
     * - before the separators there is space for entering the letter: '12:3|4:5' => '12:30:|45'
     * - the letter has to be shifted and is entered after the separators: '12:34|:5' => '12:34:0|5'
     */
    private _calculateCursorShift;
    private _isStringAllowed;
    /**
     * Handles the onInput event.
     * `_beforeInputHook()` is called before the actual execution.
     *
     */
    _onInputChange(event: KeyboardEvent): void;
    /**
     * this._cursor and this._pastedData can be set to a new value in this function;
     * _cursor is used to set the cursor position after checking the masked input in _onInputChange().
     * _pastedData carries the valid part of the pasted value to _inInputChange();
     *
     *`_beforePasteHook()` is called before the actual execution.
     */
    _onPaste(event: ClipboardEvent): void;
    private updateValue;
    /** @docs-private */
    getMaskedString(inputValue: string, maskStartIndex?: number): string;
    private isSeparator;
    writeValue(value: any): void;
    registerOnChange(onChange: any): void;
    registerOnTouched(onTouched: any): void;
    /** @docs-private */
    registerOnValidatorChange(fn: () => void): void;
    _validateFn(): {
        nxMaskLengthError: {
            'length': number;
            'actual': any;
        };
    };
    /** @docs-private */
    validate(): {
        nxMaskLengthError: {
            'length': number;
            'actual': any;
        };
    };
    _touch(): void;
}
