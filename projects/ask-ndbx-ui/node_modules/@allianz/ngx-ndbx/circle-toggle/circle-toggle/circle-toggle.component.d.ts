import { EventEmitter, OnInit, OnDestroy, AfterViewInit, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { ToggleButton } from './toggle-button';
import { NxCircleToggleGroupComponent } from '../circle-toggle-group/circle-toggle-group.component';
import { NxMobileToggleButtonComponent } from '../mobile-toggle-button/mobile-toggle-button.component';
export declare class ToggleChangeEvent {
    /** A toggle button */
    button: ToggleButton;
    /** The value of the toggle button that is sent with the event. */
    value: string;
    constructor(button: any, value: any);
}
export declare class NxCircleToggleComponent extends ToggleButton implements OnInit, OnDestroy, AfterViewInit, ControlValueAccessor {
    toggleGroup: NxCircleToggleGroupComponent;
    private _checkedDispatcher;
    private _changeDetectorRef;
    private _id;
    /** @docs-private */
    inGroup: boolean;
    /**
     * Id of the circle toggle.
     *
     * If not set, the circle toggle gets an incremented value by default.
     */
    id: string;
    private _name;
    /** Name that is used for accessibility. */
    name: string;
    /**
     * An event that is emitted when the checked state fo the circle toggle changes.
     */
    checkedChange: EventEmitter<boolean>;
    /**
     * An event that is emitted when the checked state of the circle toggle changes.
     * The event object contains the circle toggle itself and its value (see ToggleChangeEvent).
     */
    selectionChange: EventEmitter<ToggleChangeEvent>;
    _checked: boolean;
    /** Whether the circle toggle is checked. */
    checked: boolean;
    private _value;
    /** The value that is used in the model. */
    value: string;
    private _iconName;
    /** Id of the icon that should be displayed. */
    iconName: string;
    private _svg;
    /** SVG that is displayed if the circle toggle is unchecked. */
    svg: string;
    private _svgChecked;
    /** SVG that is displayed if the circle toggle is checked. */
    svgChecked: string;
    private _circleText;
    /** A text that is displayed inside the circle toggle. */
    circleText: string;
    private _label;
    /** Label displayed below the circle. */
    label: string;
    private _hint;
    /** Additional hint displayed below the label. */
    hint: string;
    private _negative;
    /** Whether the circle toggle uses the negative set of styling. */
    negative: boolean;
    private _responsive;
    /** Whether the circle toggle has a responsive behavior. */
    responsive: boolean;
    private _disabled;
    /** Whether the circle toggle is disabled. */
    disabled: boolean;
    /** @docs-private */
    toggleButton: NxMobileToggleButtonComponent;
    private _hover;
    /** touched is set to true on touch devices. */
    _touched: boolean;
    /** @docs-private */
    onMouseEnter(): void;
    /** @docs-private */
    onMouseLeave(): void;
    /** @docs-private */
    onTouchStart(): void;
    _removeUniqueSelectionListener: () => void;
    private onChangeCallback;
    private onTouchedCallback;
    constructor(/** @docs-private */ toggleGroup: NxCircleToggleGroupComponent, _checkedDispatcher: UniqueSelectionDispatcher, _changeDetectorRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /** @docs-private */
    attachListenerForGroup(): void;
    writeValue(newValue: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    /** @docs-private */
    toggle(event: any): void;
    /**
     * @docs-private
     *
     * method called by the group if the internal value of the group is changed programatically,
     * does not trigger change emission
     */
    setGroupSelection(): void;
    /** @docs-private */
    readonly svgButton: boolean;
    /** @docs-private */
    readonly svgUrl: string;
    /** @docs-private */
    readonly type: "radio" | "checkbox";
    /** @docs-private */
    handleEnterKey(event: any): void;
}
