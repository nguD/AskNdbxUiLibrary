import { OnDestroy, ChangeDetectorRef } from '@angular/core';
import { OnInit, TemplateRef, EventEmitter } from '@angular/core';
import { NxModalService } from './modal.service';
import { EventManager } from '@angular/platform-browser';
/** Container for the action buttons in a modal. Has a fixed position at the bottom of the modal on scroll. */
export declare class NxModalActionsDirective {
}
/** Scrollable container for the content of a modal. */
export declare class NxModalContentDirective {
}
export declare class NxModalComponent implements OnInit, OnDestroy {
    private modalService;
    private eventManager;
    private _changeDetectorRef;
    private _closeButtonLabel;
    /** Sets the 'aria-label' of the modal close button needed for accessibility.
     *
     * Default value is 'Close dialog'.
     */
    closeButtonLabel: string;
    /**
     * A template reference variable pointing to the template
     * which contains the content of the modal view.
     */
    body: TemplateRef<any>;
    /**
     * Whether the modal view should close when the user hits the escape key.
     * Default is true.
     */
    hideOnEsc: boolean;
    /**
     * Whether the modal view should close when the user clicks on the backdrop.
     * Default is true.
     */
    hideOnClickOutside: boolean;
    /**
     * Whether the modal view should have a close icon in the upper right corner.
     * Default is true.
     */
    showCloseIcon: boolean;
    /**
     * Controls the width of the dialog.
     * On `auto` the width is controlled by the content width,
     * on `fixed` the dialog gets a fixed width of 736px if the viewport is big enough. */
    size: 'fixed' | 'auto';
    /**
     * An event emitted when the user clicks on the backdrop or uses the built-in close button.
     * This event can be applied in conjunction with the custom open state handling
     * of a modal to close it when requested by the user.
     */
    closeEvent: EventEmitter<void>;
    private closeSubscription;
    private removeEventListener;
    constructor(modalService: NxModalService, eventManager: EventManager, _changeDetectorRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    /** @docs-private */
    clickOutsideModal(): void;
    /** @docs-private */
    closeButtonClick(): void;
    /** @docs-private */
    cancelClick(evt: KeyboardEvent): void;
}
