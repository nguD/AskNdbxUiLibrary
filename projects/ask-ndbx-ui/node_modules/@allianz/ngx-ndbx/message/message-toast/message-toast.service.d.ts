import { Injector, TemplateRef, InjectionToken, OnDestroy } from '@angular/core';
import { Overlay } from '@angular/cdk/overlay';
import { NxMessageToastConfig } from './message-toast-config';
import { NxMessageToastRef } from './message-toast-ref';
import { LiveAnnouncer } from '@angular/cdk/a11y';
/** Injection token that can be used to specify default message toast. */
export declare const NX_MESSAGE_TOAST_DEFAULT_CONFIG: InjectionToken<NxMessageToastConfig>;
/** A service for dispatching and displaying toast messages. */
export declare class NxMessageToastService implements OnDestroy {
    private _overlay;
    private _injector;
    private _live;
    private _parentMessageToastService;
    private _defaultConfig;
    /**
     * Reference to the current message toast in the view *at this level* (in the Angular injector tree).
     * If there is a parent message toast service, all operations should delegate to that parent
     * via `_oldToastMessageRef`.
     */
    private _toastRefAtThisLevel;
    /** Reference to the currently opened message toastat *any* level. */
    _oldToastMessageRef: NxMessageToastRef | null;
    constructor(_overlay: Overlay, _injector: Injector, _live: LiveAnnouncer, _parentMessageToastService: NxMessageToastService, _defaultConfig: NxMessageToastConfig);
    /** Creates and dispatches a message toastwith a custom text.
     *
     * @param text Text to be used for the message toast.
     * @param config Extra configuration for the message toast.
    */
    open(text: string, config?: NxMessageToastConfig): NxMessageToastRef;
    /** Creates and dispatches a message toastwith a custom template for the content.
     *
     * @param template Template to be used for the message toast.
     * @param config Extra configuration for the message toast.
    */
    openFromTemplate(template: TemplateRef<any>, config?: NxMessageToastConfig): NxMessageToastRef;
    private _attachToastComponent;
    private _createOverlay;
    /** Animates the old message toastout and the new one in. */
    private _animateToast;
    private _createInjector;
    /**
     * Dismisses the currently visible message toast.
     */
    dismiss(): void;
    ngOnDestroy(): void;
}
