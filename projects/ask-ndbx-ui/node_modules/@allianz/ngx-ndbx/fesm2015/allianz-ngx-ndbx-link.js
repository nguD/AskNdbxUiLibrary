import { Component, ChangeDetectionStrategy, ElementRef, Renderer2, ChangeDetectorRef, ContentChild, Input, NgModule } from '@angular/core';
import { NxIconComponent } from '@allianz/ngx-ndbx/icon';
import { MappedStyles } from '@allianz/ngx-ndbx/core';

/**
 * @fileoverview added by tsickle
 * Generated from: link.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const MAPPING = {
    'black': 'nx-link--black',
    'negative': 'nx-link--negative',
    'text': 'nx-link--text',
    'block': 'nx-link--block',
    'icon-right': 'nx-link--icon-right'
};
/** @type {?} */
const DEFAULT_CLASSES = ['nx-link'];
class NxLinkComponent extends MappedStyles {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     * @param {?} _changeDetectorRef
     */
    constructor(_elementRef, _renderer, _changeDetectorRef) {
        super(MAPPING, DEFAULT_CLASSES, _elementRef, _renderer);
        this._renderer = _renderer;
        this._changeDetectorRef = _changeDetectorRef;
        this._size = 'small';
    }
    /**
     * Sets the size of the link. Default: 'small'.
     * @param {?} value
     * @return {?}
     */
    set size(value) {
        if (this._size !== value) {
            this._size = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get size() {
        return this._size;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // Add a specific link class that the css gets more specific than the nx-icon css
        /** @type {?} */
        const icons = this.elementRef.nativeElement.querySelectorAll('nx-icon');
        for (let i = 0; i < icons.length; i++) {
            this._renderer.addClass(icons[i], 'nx-link__icon');
        }
    }
    /**
     * \@docs-private
     * getter used for the modal component as a quickfix
     * since button got changed from directive to component the reference used by the ngOpenModelOnClick directive
     * for nxButtons is a reference to component instance instead of an element reference. As a workaround we need a
     * way to reach the elementRef of the component until the modal gets refactored.
     * @return {?}
     */
    get elementRef() {
        return this._elementRef;
    }
}
NxLinkComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-link',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['classNames: nxStyle'],
                host: {
                    '[class.nx-link--small]': 'this.size === "small"',
                    '[class.nx-link--large]': 'this.size === "large"'
                },
                styles: [":host{color:#006192;color:var(--link-color,#006192);display:inline-block;cursor:pointer;position:relative;text-decoration:none;transition:color .2s,box-shadow .2s;-webkit-hyphens:none;-ms-hyphens:none;hyphens:none}:host:hover{color:#008ed6;color:var(--link-hover-color,#008ed6)}:host::ng-deep a:active{color:#003781;color:var(--link-active-color,#003781)}:host::ng-deep a{display:flex;align-items:center}:host.nx-link--small{font-size:16px;font-size:var(--link-small-font-size,16px);line-height:24px;line-height:var(--link-small-line-height,24px);font-weight:600;font-weight:var(--link-small-font-weight,600);letter-spacing:1px;letter-spacing:var(--link-small-letter-spacing,1px)}:host.nx-link--large{font-size:30px;font-size:var(--link-large-font-size,30px);line-height:36px;line-height:var(--link-large-line-height,36px);font-weight:600;font-weight:var(--link-large-font-weight,600);letter-spacing:.3px;letter-spacing:var(--link-large-letter-spacing,.3px)}:host-context([data-whatinput=keyboard])::ng-deep a:focus{border-radius:4px;outline:0;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}:host(.nx-link--negative){color:#fff}:host(.nx-link--negative):hover{color:#c2c2c2}:host(.nx-link--negative)::ng-deep a:active{color:#999}:host(.nx-link--negative)::ng-deep a[aria-disabled],:host(.nx-link--negative)::ng-deep a[disabled]{color:rgba(255,255,255,.4)}:host(.nx-link--black){color:#414141;color:var(--link-black-color,#414141)}:host(.nx-link--black):hover{color:#999;color:var(--link-black-hover-color,#999)}:host(.nx-link--black)::ng-deep a:active{color:#5b5b5b;color:var(--link-black-active-color,#5b5b5b)}:host(.nx-link--black)::ng-deep a[aria-disabled],:host(.nx-link--black)::ng-deep a[disabled]{color:#c2c2c2;color:var(--link-black-disabled-color,#c2c2c2)}:host.nx-link--text{font-weight:700;text-transform:none;letter-spacing:normal;border-radius:4px;font-size:inherit;line-height:inherit}:host.nx-link--text ::ng-deep a{display:inline-flex}:host::ng-deep .c-icon,:host::ng-deep nx-icon.nx-link__icon{margin:0 8px 0 0}:host::ng-deep .c-icon::before,:host::ng-deep nx-icon.nx-link__icon::before{line-height:inherit;font-size:inherit}:host.nx-link--small ::ng-deep .c-icon,:host.nx-link--small ::ng-deep nx-icon.nx-link__icon{font-size:24px;font-size:var(--link-small-icon-size,24px)}:host.nx-link--large ::ng-deep .c-icon,:host.nx-link--large ::ng-deep nx-icon.nx-link__icon{font-size:32px;font-size:var(--link-large-icon-size,32px)}:host(.nx-link--icon-right)::ng-deep .c-icon,:host(.nx-link--icon-right)::ng-deep nx-icon.nx-link__icon{order:2;margin:0 0 0 8px}:host::ng-deep a[aria-disabled],:host::ng-deep a[disabled]{cursor:not-allowed;color:rgba(0,97,146,.4);color:var(--link-disabled-color,rgba(0,97,146,.4))}:host::ng-deep a[aria-disabled]:focus,:host::ng-deep a[disabled]:focus{outline:0;box-shadow:none}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard])::ng-deep a:focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}:host::ng-deep a[aria-disabled],:host::ng-deep a[disabled]{color:GrayText}}"]
            }] }
];
/** @nocollapse */
NxLinkComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef }
];
NxLinkComponent.propDecorators = {
    icon: [{ type: ContentChild, args: [NxIconComponent, { static: false },] }],
    size: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxLinkComponent.prototype._size;
    /**
     * \@docs-private
     * @type {?}
     */
    NxLinkComponent.prototype.icon;
    /**
     * Sets the style of the link, thereby altering the visual appearance.
     *
     * You can use any combination of 'black', 'icon-right', 'negative', 'text' and 'block' (deprecated).
     * @type {?}
     */
    NxLinkComponent.prototype.classNames;
    /**
     * @type {?}
     * @protected
     */
    NxLinkComponent.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    NxLinkComponent.prototype._changeDetectorRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: link.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxLinkModule {
}
NxLinkModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NxLinkComponent],
                exports: [NxLinkComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: allianz-ngx-ndbx-link.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxLinkComponent, NxLinkModule };
//# sourceMappingURL=allianz-ngx-ndbx-link.js.map
