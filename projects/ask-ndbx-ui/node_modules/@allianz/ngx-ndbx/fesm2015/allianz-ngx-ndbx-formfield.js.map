{"version":3,"file":"allianz-ngx-ndbx-formfield.js","sources":["ng://@allianz/ngx-ndbx/formfield/appendix.directive.ts","ng://@allianz/ngx-ndbx/formfield/error.directive.ts","ng://@allianz/ngx-ndbx/formfield/formfield-control.ts","ng://@allianz/ngx-ndbx/formfield/hint.directive.ts","ng://@allianz/ngx-ndbx/formfield/note.directive.ts","ng://@allianz/ngx-ndbx/formfield/suffix.directive.ts","ng://@allianz/ngx-ndbx/formfield/prefix.directive.ts","ng://@allianz/ngx-ndbx/formfield/label.directive.ts","ng://@allianz/ngx-ndbx/formfield/formfield.component.ts","ng://@allianz/ngx-ndbx/formfield/formfield.module.ts"],"sourcesContent":["import { Input, Directive } from '@angular/core';\nlet uniqueId = 0;\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n  selector: '[nxFormfieldAppendix]',\n  host: {\n    '[attr.id]': 'id'\n  }\n})\nexport class NxFormfieldAppendixDirective {\n\n  /** Sets the id of the formfield appendix. */\n  @Input() id: string = `nx-formfield-appendix-${uniqueId++}`;\n}\n","import { Directive, Input } from '@angular/core';\n\nlet uniqueId = 0;\n\n@Directive({\n  selector: '[nxFormfieldError], [nxError]',\n  host: {\n    role: 'alert',\n    '[attr.id]': 'id'\n  }\n})\nexport class NxFormfieldErrorDirective {\n  // create a unique id to be used by aria-described-by\n  /** Sets the id of the formfield error. */\n  @Input() id: string = `nx-formfield-error-${uniqueId++}`;\n}\n","import { ElementRef } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n/** @docs-private */\nexport abstract class NxFormfieldControl<T> {\n  value: T | null;\n\n  // Allow the control to notify the parent formfield about internal state changes\n  readonly stateChanges: Observable<void>;\n\n  readonly empty: boolean;\n\n  readonly id: string;\n\n  readonly ngControl: NgControl | null;\n\n  readonly focused: boolean;\n\n  readonly required: boolean;\n\n  readonly disabled: boolean;\n\n  readonly readonly: boolean;\n\n  readonly shouldLabelFloat?: boolean;\n\n  readonly errorState: boolean;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n    /**\n   * An optional name for the control type that can be used to distinguish `nx-formfield` elements\n   * based on their control type. The form field will add a class,\n   * `nx-formfield--type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  abstract setDescribedByIds(ids: string[]): void;\n\n  abstract setAriaLabel?(value: string): void;\n\n  abstract get elementRef(): ElementRef;\n}\n","import { Input, Directive } from '@angular/core';\nlet uniqueId = 0;\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n  selector: '[nxFormfieldHint]',\n  host: {\n    '[attr.id]': 'id'\n  }\n})\nexport class NxFormfieldHintDirective {\n  /** Sets the id of the formfield hint. */\n  @Input() id: string = `nx-formfield-hint-${uniqueId++}`;\n}\n","import { Input, Directive } from '@angular/core';\n\nlet uniqueId = 0;\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n  selector: '[nxFormfieldNote]',\n  host: {\n    '[attr.id]': 'id'\n  }\n})\nexport class NxFormfieldNoteDirective {\n\n  /** Sets the id of the formfield note. */\n  @Input() id: string = `nx-formfield-note-${uniqueId++}`;\n}\n","import { Input, Directive } from '@angular/core';\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n  selector: '[nxFormfieldSuffix]'\n})\nexport class NxFormfieldSuffixDirective {\n}\n","import { Input, Directive } from '@angular/core';\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n  selector: '[nxFormfieldPrefix]'\n})\nexport class NxFormfieldPrefixDirective {\n}\n","import { Directive } from '@angular/core';\n\n/** A directive for passing more complex custom label content. */\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: 'nx-formfield-label'\n})\nexport class NxFormfieldLabelDirective { }\n","import { ViewChild, InjectionToken, Inject, Optional } from '@angular/core';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  ViewEncapsulation,\n  Renderer2\n} from '@angular/core';\nimport { delay, startWith } from 'rxjs/operators';\nimport { getClassNameList } from '@allianz/ngx-ndbx/utils';\n\nimport { NxFormfieldHintDirective } from './hint.directive';\nimport { NxFormfieldNoteDirective } from './note.directive';\nimport { NxFormfieldErrorDirective } from './error.directive';\nimport { NxFormfieldControl } from './formfield-control';\nimport { Subscription } from 'rxjs';\nimport { NxFormfieldSuffixDirective } from './suffix.directive';\nimport { NxFormfieldPrefixDirective } from './prefix.directive';\nimport { NxFormfieldAppendixDirective } from './appendix.directive';\nimport { NxFormfieldLabelDirective } from './label.directive';\n\nconst NX_STYLES = {\n  'negative': 'nx-formfield--negative'\n};\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `FORMFIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface FormfieldDefaultOptions {\n  /** Sets the default appearance. (optional) */\n  appearance?: AppearanceType;\n\n  /** Sets the default float label type. (optional) */\n  nxFloatLabel?: FloatLabelType;\n}\n\nexport const FORMFIELD_DEFAULT_OPTIONS =\n  new InjectionToken<FormfieldDefaultOptions>('FORMFIELD_DEFAULT_OPTIONS');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'auto';\n\n/** Type for the appearance of the formfield. */\nexport type AppearanceType = 'outline' | 'auto';\n\n@Component({\n  selector: 'nx-formfield',\n  templateUrl: 'formfield.component.html',\n  styleUrls: [\n    'formfield.scss',\n    '../input/input.scss'\n  ],\n  host: {\n    '[class.nx-formfield]': 'true',\n    '[class.is-disabled]': 'this._control.disabled',\n    '[class.is-readonly]': 'this._control.readonly',\n    '[class.is-filled]': 'this._control.empty === false',\n    '[class.is-focused]': 'this._control.focused',\n    '[class.is-floating]': 'this.shouldLabelFloat',\n    '[class.has-error]': 'this._control.errorState',\n    '[class.has-outline]': 'this.appearance === \"outline\"',\n    '[class.has-hint]': 'this._hintChildren?.length > 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class NxFormfieldComponent implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _styles: string = '';\n  private _subscriptions: Subscription[] = [];\n\n  @ContentChild(NxFormfieldControl, {static: false}) _control: NxFormfieldControl<any>;\n\n  /**\n   * Sets the label which will act as a floating label.\n   * In addition, the component uses input and label to properly support accessibility.\n   */\n  @Input('nxLabel') label: string;\n\n  @ContentChild(NxFormfieldLabelDirective, {static: false}) _labelChild: NxFormfieldLabelDirective;\n  @ContentChildren(NxFormfieldHintDirective) _hintChildren: QueryList<NxFormfieldHintDirective>;\n  @ContentChildren(NxFormfieldNoteDirective) _noteChildren: QueryList<NxFormfieldNoteDirective>;\n  @ContentChildren(NxFormfieldErrorDirective) _errorChildren: QueryList<NxFormfieldErrorDirective>;\n  @ContentChildren(NxFormfieldSuffixDirective) _suffixChildren: QueryList<NxFormfieldSuffixDirective>;\n  @ContentChildren(NxFormfieldPrefixDirective) _prefixChildren: QueryList<NxFormfieldPrefixDirective>;\n  @ContentChildren(NxFormfieldAppendixDirective) _appendixChildren: QueryList<NxFormfieldAppendixDirective>;\n\n  @ViewChild('connectionContainer', { static: true }) _connectionContainerRef: ElementRef;\n\n  /**\n   * Whether the label should float once the input is focused or filled (auto, default)\n   * or force it to always float with a value of always to simulate a more static form.\n   */\n  @Input('nxFloatLabel')\n  get floatLabel(): FloatLabelType {\n    return this._floatLabel || (this._defaultOptions && this._defaultOptions.nxFloatLabel) || 'auto';\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /**\n   * Sets the styling of the formfield.\n   * If 'negative', a negative set of stylings is used.\n   */\n  @Input('nxStyle')\n  set styles(value: string) {\n\n    if (this._styles === value) {\n      return;\n    }\n\n    const classNames = getClassNameList(value, NX_STYLES);\n\n    classNames.forEach(classStr => {\n      this.renderer.addClass(this.elementRef.nativeElement, classStr);\n    });\n\n    this._styles = value;\n  }\n\n  private _appearance: AppearanceType;\n\n  /**\n   * **NDBX Expert option**\n   *\n   * Sets the appearance of the formfield.\n   */\n  @Input()\n  set appearance(value: AppearanceType) {\n    if (this._appearance !== value) {\n      this._appearance = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get appearance(): AppearanceType {\n    return this._appearance || (this._defaultOptions && this._defaultOptions.appearance) || 'auto';\n  }\n\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always';\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean {\n    return (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  constructor(\n    /** @docs-private */\n    public elementRef: ElementRef,\n    private renderer: Renderer2,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(FORMFIELD_DEFAULT_OPTIONS) private _defaultOptions: FormfieldDefaultOptions\n    ) { }\n\n  /** @docs-private */\n  get control() {\n    return this._control;\n  }\n\n  ngAfterContentInit() {\n    let subscription;\n    const subscriptions = [];\n\n    this._validateControlChild();\n\n    if (this._control.controlType) {\n      this.elementRef.nativeElement.classList.add(`nx-formfield--type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    subscription = this._control.stateChanges.pipe(startWith(null), delay(0)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    subscriptions.push(subscription);\n\n    // Re-validate when the number of hints changes.\n    subscription = this._hintChildren.changes.pipe(startWith(null), delay(0)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n    subscriptions.push(subscription);\n\n    // Update the aria-described by when the number of errors changes.\n    subscription = this._errorChildren.changes.pipe(startWith(null), delay(0)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n    subscriptions.push(subscription);\n\n    this._subscriptions = subscriptions;\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngOnDestroy() {\n    this._subscriptions.forEach((subscription: Subscription) => subscription.unsubscribe());\n  }\n\n  /** @docs-private */\n  getDisplayedMessage(): 'note' | 'error' | '' {\n    if (this._control.errorState && this._errorChildren && this._errorChildren.length > 0) {\n      return 'error';\n    }\n    if (this._noteChildren && this._noteChildren.length > 0) {\n      return 'note';\n    }\n\n    return '';\n  }\n\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n      ids = this._hintChildren.map(hint => hint.id);\n\n      if (this.getDisplayedMessage() === 'note') {\n        ids = [...this._noteChildren.map(hint => hint.id), ...ids];\n      } else if (this._errorChildren) {\n        ids = [...this._errorChildren.map(error => error.id), ...ids];\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  // Fail if the required control is missing.\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw new Error('Formfield must contain a NxFormfieldControl like input[nxInput] or a custom implementation');\n    }\n  }\n\n  /** @docs-private */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this.elementRef;\n  }\n\n  /** @docs-private */\n  _hasLabel() {\n    return !!this._labelChild || !!this.label;\n  }\n\n  /** @docs-private\n   * The placeholder is hidden when\n   *  - the control is not empty\n   *  - The label is not floated\n   * */\n  _hideControlPlaceholder() {\n    return !this.shouldLabelFloat && this._hasLabel() || this._control.empty === false;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxFormfieldErrorDirective } from './error.directive';\nimport { NxFormfieldComponent } from './formfield.component';\nimport { NxFormfieldHintDirective } from './hint.directive';\nimport { NxFormfieldNoteDirective } from './note.directive';\nimport { NxFormfieldPrefixDirective } from './prefix.directive';\nimport { NxFormfieldSuffixDirective } from './suffix.directive';\nimport { NxFormfieldAppendixDirective } from './appendix.directive';\nimport { NxFormfieldLabelDirective } from './label.directive';\nimport { NxErrorModule, NxLabelModule } from '@allianz/ngx-ndbx/base';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NxFormfieldComponent,\n    NxFormfieldHintDirective,\n    NxFormfieldErrorDirective,\n    NxFormfieldNoteDirective,\n    NxFormfieldPrefixDirective,\n    NxFormfieldSuffixDirective,\n    NxFormfieldAppendixDirective,\n    NxFormfieldLabelDirective\n  ],\n  exports: [\n    NxFormfieldComponent,\n    NxFormfieldHintDirective,\n    NxFormfieldErrorDirective,\n    NxFormfieldNoteDirective,\n    NxFormfieldPrefixDirective,\n    NxFormfieldSuffixDirective,\n    NxFormfieldAppendixDirective,\n    NxFormfieldLabelDirective,\n    NxErrorModule,\n    NxLabelModule\n  ]\n})\nexport class NxFormfieldModule { }\n"],"names":["uniqueId"],"mappings":"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"}