{"version":3,"file":"allianz-ngx-ndbx-datefield.js","sources":["ng://@allianz/ngx-ndbx/datefield/adapter/native-date-formats.ts","ng://@allianz/ngx-ndbx/datefield/adapter/date-adapter.ts","ng://@allianz/ngx-ndbx/datefield/adapter/date-token.ts","ng://@allianz/ngx-ndbx/datefield/adapter/native-date-adapter.ts","ng://@allianz/ngx-ndbx/datefield/adapter/date-formats.ts","ng://@allianz/ngx-ndbx/datefield/adapter/index.ts","ng://@allianz/ngx-ndbx/datefield/datefield-errors.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/datepicker-intl.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/datepicker-errors.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/calendar-body.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/month-view.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/multi-year-view.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/year-view.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/calendar.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/datepicker.component.ts","ng://@allianz/ngx-ndbx/datefield/date-validators.ts","ng://@allianz/ngx-ndbx/datefield/datefield.directive.ts","ng://@allianz/ngx-ndbx/datefield/datepicker/datepicker-toggle.ts","ng://@allianz/ngx-ndbx/datefield/datefield.module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NxDateFormats} from './date-formats';\n\nexport const NX_NATIVE_DATE_FORMATS: NxDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","import { Observable ,  Subject } from 'rxjs';\nimport { NgModule } from '@angular/core';\n\n/** @docs-private */\nexport abstract class NxDateAdapter<D> {\n  protected locale = 'de-DE';\n  protected _localeChanges = new Subject<string>();\n  abstract toIso8601(date: D): string;\n  abstract format(date: D, displayFormat: any): string;\n  abstract parse(value: any, format: string|string[], strict: boolean): D | null;\n  abstract isValid(date: D): boolean;\n  abstract clone(date: D): D;\n  abstract isDateInstance(obj: any): boolean;\n  abstract invalid(): D;\n\n  abstract getYear(date: D): number;\n  abstract getMonth(date: D): number;\n  abstract getDate(date: D): number;\n\n  get localeChanges(): Observable<string> { return this._localeChanges; }\n\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      const firstValid = this.isValid(first);\n      const secondValid = this.isValid(second);\n\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid === secondValid;\n    }\n    return first === second;\n  }\n\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  setLocale(locale: string) {\n    this.locale = locale;\n    this._localeChanges.next(this.locale);\n  }\n\n  getLocale(): string {\n    return this.locale;\n  }\n\n  abstract getYearName(date: D): string;\n  abstract createDate(year: number, month: number, date: number): D;\n  abstract getNumDaysInMonth(date: D): number;\n  abstract getDateNames(): string[];\n  abstract getDayOfWeek(date: D): number;\n  abstract getFirstDayOfWeek(): number;\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n  abstract today(): D;\n  abstract addCalendarMonths(date: D, months: number): D;\n  abstract addCalendarYears(date: D, years: number): D;\n  abstract addCalendarDays(date: D, days: number): D;\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","import {InjectionToken, LOCALE_ID} from '@angular/core';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const NX_DATE_LOCALE = new InjectionToken<string>('nx-date-locale');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\n\nimport { NxDateAdapter } from './date-adapter';\nimport { NX_DATE_LOCALE } from './date-token';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl !== 'undefined';\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/**\n * @docs-private\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\n@Injectable()\nexport class NxNativeDateAdapter extends NxDateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(NX_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    const result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() !== month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value === 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NxNativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) !== ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        const date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/** @docs-private */\nexport type NxDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any\n  }\n};\n\nexport const NX_DATE_FORMATS = new InjectionToken<NxDateFormats>('nx-date-formats');\n","import { NX_NATIVE_DATE_FORMATS } from './native-date-formats';\nimport { NxNativeDateAdapter } from './native-date-adapter';\nimport { NX_DATE_FORMATS } from './date-formats';\nimport { NgModule } from '@angular/core';\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport { NxDateAdapter } from './date-adapter';\nimport { NX_DATE_LOCALE } from './date-token';\n\nimport { PlatformModule } from '@angular/cdk/platform';\n\nexport const NX_DATE_LOCALE_PROVIDER = {provide: NX_DATE_LOCALE, useExisting: LOCALE_ID};\n\nexport * from './date-token';\nexport * from './date-adapter';\nexport * from './date-formats';\n\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: NxDateAdapter, useClass: NxNativeDateAdapter},\n    NX_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: NX_DATE_FORMATS, useValue: NX_NATIVE_DATE_FORMATS}],\n})\nexport class NxNativeDateModule {}\n","export function createMissingDateImplError(provider: string) {\n  return Error(\n      `NxDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: NxNativeDateModule, NxMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","import { Subject } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class NxDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (visible in UI). */\n  /** @deprecated Use `switchToMultiYearViewLabel` instead\n  */\n  calendarHeader: string = 'Choose a date';\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `NxDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: NxNativeDateModule, NxMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class NxCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel?: string,\n              public enabled?: boolean) {}\n}\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: '[nx-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.scss'],\n  host: {\n    'class': 'nx-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'nxCalendarBody',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxCalendarBodyComponent {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: NxCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /** The items to display in the first row in the offset space. */\n  @Input() previousItems: NxCalendarCell[] = [];\n\n  /** The items to display in the last row in the offset space. */\n  @Input() followingItems: NxCalendarCell[][] = [[]];\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: NxCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  /** The number of blank cells to put at the end of the last filled row. */\n  get _lastRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[this.rows.length - 1].length ?\n        this.numCols - this.rows[this.rows.length - 1].length : 0;\n  }\n\n  /** The index of the last row. */\n  get _lastRowIndex(): number {\n    return this.rows && this.rows.length ?\n        this.rows.length - 1 : 0;\n  }\n\n  /**\n   * The following full rows to display and fill up the calendar.\n   */\n  get _followingRows(): NxCalendarCell[][] {\n    if (this.followingItems && this.followingItems.length) {\n      // if first row is not a full row => display them in offset space\n      if (this.followingItems[0].length < this.numCols) {\n        return this.followingItems.slice(1, this.followingItems.length);\n      }\n      return this.followingItems;\n    }\n\n    return [];\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber === this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.nx-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport { NxDateAdapter, NxDateFormats } from '../adapter/index';\nimport { NX_DATE_FORMATS } from './../adapter/date-formats';\nimport { NxCalendarBodyComponent, NxCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst DAYS_PER_WEEK = 7;\nconst TOTAL_DAYS_TO_DISPLAY = 6 * DAYS_PER_WEEK;\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'nx-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'nxMonthView',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['month-view.scss']\n})\nexport class NxMonthViewComponent<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(NxCalendarBodyComponent, { static: true }) _nxCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: NxCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  /** Number of days that should be displayed in one row. */\n  _numCols: number = 7;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(NX_DATE_FORMATS) private _dateFormats: NxDateFormats,\n              @Optional() public _dateAdapter: NxDateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    const weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate !== date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -this._numCols);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._numCols);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    const firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._nxCalendarBody._focusActiveCell();\n  }\n\n  /** Creates NxCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell === DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new NxCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) === this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) === this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /**\n   * The last days of the previous month that should be displayed\n   * in the first row of the calendar.\n   */\n  _getLastDaysOfPreviousMonth(): NxCalendarCell[] {\n    const firstDayOfMonth: D = this._dateAdapter.createDate(\n      this._dateAdapter.getYear(this.activeDate),\n      this._dateAdapter.getMonth(this.activeDate),\n      1\n    );\n\n    const firstDayOfPreviousItems =\n      this._dateAdapter.addCalendarDays(firstDayOfMonth, - this._firstWeekOffset);\n\n    return this._getRowOfDays(firstDayOfPreviousItems, this._firstWeekOffset);\n  }\n\n  /**\n   * The first days of the following month that should be displayed\n   * after the days of the current month. After filling up the last\n   * row of the current month, additional rows are added, so that a\n   * total of 42 days (6 rows/weeks) is displayed.\n   */\n  _getFirstDaysOfFollowingMonth(): NxCalendarCell[][] {\n    const followingDays: NxCalendarCell[][] = [];\n\n    const firstDayOfNextMonth: D = this._dateAdapter.addCalendarMonths(\n      this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate),\n        1),\n      1\n    );\n\n    // there should be displayed a total of 7 * 6 items\n    const followingDaysCount =\n      TOTAL_DAYS_TO_DISPLAY - this._firstWeekOffset - this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const offsetItems = followingDaysCount % 7;\n\n    // add a non-full row to following rows.\n    // These items will fill up the last incomplete row of the current month.\n    if (offsetItems > 0) {\n      const offsetRow = this._getRowOfDays(firstDayOfNextMonth, offsetItems);\n      followingDays.push(offsetRow);\n    }\n\n    let remainingDays = followingDaysCount - offsetItems;\n    let firstDayInRow = this._dateAdapter.addCalendarDays(firstDayOfNextMonth, offsetItems);\n\n    // fill remaining rows if needed\n    while (remainingDays > 0) {\n      followingDays.push(\n        this._getRowOfDays(firstDayInRow, this._numCols)\n      );\n\n      firstDayInRow = this._dateAdapter.addCalendarDays(firstDayInRow, this._numCols);\n      remainingDays -= this._numCols;\n    }\n\n    return followingDays;\n  }\n\n  /**\n   * Returns a row with days, beginning with the date of `firstDayInRow`-parameter.\n   * The returned row contains `daysCount` elements.\n   */\n  _getRowOfDays(firstDayInRow: D, daysCount: number): NxCalendarCell[] {\n    const nextRow: NxCalendarCell[] = [];\n    const dateNames = this._dateAdapter.getDateNames();\n    for (let addDays = 0; addDays < daysCount; addDays++) {\n      const day = this._dateAdapter.getDate(\n        this._dateAdapter.addCalendarDays(firstDayInRow, addDays)\n      );\n      nextRow.push(new NxCalendarCell(day, dateNames[day - 1]));\n    }\n    return nextRow;\n  }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport { NxDateAdapter } from '../adapter/index';\nimport { NxCalendarBodyComponent, NxCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const yearsPerPage = 20;\n\nexport const yearsPerRow = 4;\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'nx-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'nxMultiYearView',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['multi-year-view.scss']\n})\nexport class NxMultiYearViewComponent<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(NxCalendarBodyComponent, { static: true }) _nxCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: NxCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: NxDateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length === yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    const month = this._dateAdapter.getMonth(this.activeDate);\n    const daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._nxCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an NxCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    const yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new NxCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) === year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport { NX_DATE_FORMATS, NxDateAdapter, NxDateFormats } from '../adapter/index';\nimport { NxCalendarBodyComponent, NxCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'nx-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'nxYearView',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['year-view.scss']\n})\nexport class NxYearViewComponent<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(NxCalendarBodyComponent, { static: true }) _nxCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: NxCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  _numCols: number = 3;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(NX_DATE_FORMATS) private _dateFormats: NxDateFormats,\n              @Optional() public _dateAdapter: NxDateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._numCols);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, this._numCols);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    const monthNames = this._dateAdapter.getMonthNames('short');\n    this._months = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._nxCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) === this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an NxCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    const ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new NxCalendarCell(\n        month, monthName, ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) === month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { NX_DATE_FORMATS, NxDateAdapter, NxDateFormats } from './../adapter/index';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { NxDatepickerIntl } from './datepicker-intl';\nimport { NxMonthViewComponent } from './month-view';\nimport { NxMultiYearViewComponent } from './multi-year-view';\nimport { NxYearViewComponent } from './year-view';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst yearsPerPage = 20;\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'nx-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.scss'],\n  host: {\n    'class': 'nx-calendar',\n  },\n  exportAs: 'nxCalendar',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxCalendarComponent<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(NxMonthViewComponent, { static: false }) monthView: NxMonthViewComponent<D>;\n  /** Reference to the current year view component. */\n  @ViewChild(NxYearViewComponent, { static: false }) yearView: NxYearViewComponent<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(NxMultiYearViewComponent, { static: false }) multiYearView: NxMultiYearViewComponent<D>;\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView === 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel);\n    }\n    if (this._currentView === 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % yearsPerPage, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % yearsPerPage, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView === 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _intl: NxDatepickerIntl,\n              @Optional() private _dateAdapter: NxDateAdapter<D>,\n              @Optional() @Inject(NX_DATE_FORMATS) private _dateFormats: NxDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _changeViewClicked(): void {\n    this._currentView = this._currentView === 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView === 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView === 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView === 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView === 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView === 'month') {\n      return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) === this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView === 'year') {\n      return this._dateAdapter.getYear(date1) === this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ===\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","import { NxDatepickerIntl } from './datepicker-intl';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject, Subscription, merge} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {NxCalendarComponent} from './calendar';\nimport { NxDateAdapter } from '../adapter/date-adapter';\nimport { NxDatefieldDirective } from './../datefield.directive';\nimport { NxDatepickerToggleComponent } from './datepicker-toggle';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const NX_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('nx-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: NX_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\nexport interface DatepickerDefaultOptions {\n  /** Sets the focus on toggle behavior. (optional) */\n  toggleIconTabindex?: number;\n}\n\nexport const DATEPICKER_DEFAULT_OPTIONS =\n  new InjectionToken<DatepickerDefaultOptions>('DATEPICKER_DEFAULT_OPTIONS');\n\n/**\n * @docs-private\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * NxCalendarComponent directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n */\n@Component({\n  selector: 'nx-datepicker-content',\n  templateUrl: 'datepicker-content.component.html',\n  styleUrls: ['datepicker-content.component.scss'],\n  host: {\n    'class': 'nx-datepicker-content'\n  },\n  exportAs: 'nxDatepickerContent',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxDatepickerContentComponent<D> implements AfterContentInit {\n  datepicker: NxDatepickerComponent<D>;\n\n  @ViewChild(NxCalendarComponent, { static: true }) _calendar: NxCalendarComponent<D>;\n\n  constructor(\n    public _intl: NxDatepickerIntl,\n    public elementRef: ElementRef, private _ngZone: NgZone) {}\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this.elementRef.nativeElement.querySelector('.nx-calendar-body-active').focus();\n      });\n    });\n  }\n}\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"nxDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  selector: 'nx-datepicker',\n  template: '',\n  exportAs: 'nxDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxDatepickerComponent<D> implements OnDestroy {\n  /** The date to open the calendar initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** @docs-private */\n  selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /**\n   * @docs-private\n   * The id for the datepicker calendar.\n   */\n  id: string = `nx-datepicker-${datepickerUid++}`;\n\n  /**\n   * @docs-private\n   * The currently selected date.\n   */\n  get selected(): D | null { return this._validSelected; }\n  set selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /**\n   * @docs-private\n   * The minimum selectable date.\n   */\n  get minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /**\n   * @docs-private\n   * The maximum selectable date.\n   */\n  get maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  /** @docs-private */\n  get dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<NxDatepickerContentComponent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<NxDatepickerContentComponent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: NxDatefieldDirective<D>;\n\n  _toggleButton: NxDatepickerToggleComponent<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(NX_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: NxDateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /**\n   * @docs-private\n   * Selects the given date\n   */\n  select(date: D): void {\n    const oldValue = this.selected;\n    this.selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this.selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * @docs-private\n   * Emits the selected year in multiyear view\n   */\n  selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /**\n   * @docs-private\n   * Emits selected month in year view\n   */\n  selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * @docs-private\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  registerInput(input: NxDatefieldDirective<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A NxDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this.selected = value);\n  }\n\n  /**\n   * @docs-private\n   * Register an input toggle with this datepicker.\n   */\n  registerToggle(toggle: NxDatepickerToggleComponent<D>) {\n    if (this._toggleButton) {\n      throw Error('A NxDatepicker can only be associated with a single toggle button.');\n    }\n    this._toggleButton = toggle;\n  }\n\n  /**\n   * @docs-private\n   * Open the calendar.\n   */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an NxDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this._openAsPopup();\n\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /**\n   * @docs-private\n   * Close the calendar.\n   */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n\n    // if the datepicker toggle button is not focusable, focus the associated input.\n    if (this._toggleButton && this._toggleButton.tabindex < 0) {\n      this._datepickerInput._focus();\n    }\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<NxDatepickerContentComponent<D>>(NxDatepickerContentComponent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'nx-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'nx-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.nx-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","import { ValidatorFn, ValidationErrors, AbstractControl } from '@angular/forms';\nimport { NxDateAdapter, NxDateFormats } from './adapter';\n\n/**\n * Provides a set of date validators that can be used by form controls.\n * @dynamic\n */\nexport class NxDateValidators {\n\n  /** The form control validator for whether the input parses. */\n  static parse<D>(\n    dateAdapter: NxDateAdapter<D>,\n    dateFormats: NxDateFormats,\n    input: HTMLInputElement,\n    strict: boolean,\n    customParseFormat: string | string[] = null): ValidatorFn {\n    return (): ValidationErrors | null => {\n      const parsedValue = dateAdapter.parse(input.value, customParseFormat || dateFormats.parse.dateInput, strict);\n      const valid = !parsedValue || dateAdapter.isValid(parsedValue);\n      return valid ? null : {'nxDatefieldParse': {'text': input}};\n    };\n  }\n\n  /** The form control validator for the min date. */\n  static min<D>(dateAdapter: NxDateAdapter<D>, min: D): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const controlValue = getValidDateOrNull(dateAdapter, dateAdapter.deserialize(control.value));\n      return (!min || !controlValue ||\n          dateAdapter.compareDate(min, controlValue) <= 0) ?\n          null : {'nxDatefieldMin': {'min': min, 'actual': controlValue}};\n    };\n  }\n\n  /** The form control validator for the max date. */\n  static max<D>(dateAdapter: NxDateAdapter<D>, max: D): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = getValidDateOrNull(dateAdapter, dateAdapter.deserialize(control.value));\n    return (!max || !controlValue ||\n        dateAdapter.compareDate(max, controlValue) >= 0) ?\n        null : {'nxDatefieldMax': {'max': max, 'actual': controlValue}};\n    };\n  }\n\n  /** The form control validator for the date filter. */\n  static filter<D>(\n      dateAdapter: NxDateAdapter<D>,\n      dateFilter: (date: D | null) => boolean): ValidatorFn {\n\n    return (control: AbstractControl): ValidationErrors | null => {\n      const controlValue = getValidDateOrNull(dateAdapter, dateAdapter.deserialize(control.value));\n      return !dateFilter || !controlValue || dateFilter(controlValue) ?\n          null : {'nxDatefieldFilter': true};\n    };\n  }\n}\n\nfunction getValidDateOrNull<D>(dateAdapter: NxDateAdapter<D>, obj: any): D | null {\n  return (dateAdapter.isDateInstance(obj) && dateAdapter.isValid(obj)) ? obj : null;\n}\n","import { NxFormfieldComponent } from '@allianz/ngx-ndbx/formfield';\nimport { NX_INPUT_VALUE_ACCESSOR } from '@allianz/ngx-ndbx/input';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOWN_ARROW } from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { NX_DATE_FORMATS, NxDateAdapter, NxDateFormats } from './adapter/index';\nimport { createMissingDateImplError } from './datefield-errors';\nimport { NxDatepickerComponent } from './datepicker/datepicker.component';\nimport { NxDateValidators } from './date-validators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// tslint:disable:member-ordering\nexport const NX_DATEFIELD_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NxDatefieldDirective),\n  multi: true\n};\n\nexport const NX_DATEFIELD_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NxDatefieldDirective),\n  multi: true\n};\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use NxDatepickerInputEvent instead.\n */\nexport class NxDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: NxDatefieldDirective<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n/**\n * Directive used to provide date processing functionality to an input.\n */\n@Directive({\n  selector: 'input[nxDatefield]',\n  providers: [\n    NX_DATEFIELD_VALUE_ACCESSOR,\n    NX_DATEFIELD_VALIDATORS,\n    // {provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxDatefieldDirective},\n    { provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxDatefieldDirective }\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'nxDatefield',\n})\nexport class NxDatefieldDirective<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n\n  /** @docs-private */\n  public currentFormattedDate = null;\n\n  /** The datepicker that this input is associated with. */\n  @Input('nxDatepicker')\n  set datepicker(value: NxDatepickerComponent<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: NxDatepickerComponent<D>;\n\n  private registerDatepicker(value: NxDatepickerComponent<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker.registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker and invalidate values in the datefield. */\n  @Input('nxDatefieldFilter')\n  set datefieldFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n\n  _dateFilter: (date: D | null) => boolean;\n\n  /** Provide or read the current date. It's type <D> depends on the chosen date implementation */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(this.value);\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** Sets the minimum valid date. */\n  @Input('nxMin')\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** Sets the maximum valid date. */\n  @Input('nxMax')\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** If supported by the date implementation enable strict parsing (applies to Moment's parse function here) */\n  @Input('nxStrict')\n  get strict() { return this._strict; }\n  set strict(value: any) {\n    this._strict = coerceBooleanProperty(value);\n    // parse given text value again\n    this._onInput(this._elementRef.nativeElement.value);\n  }\n  private _strict: boolean = true;\n\n  /** Override the parse format given with parse.dateInput with the token NX_DATE_FORMATS  */\n  @Input('nxParseFormat')\n  get parseFormat() { return this._parseFormat; }\n  set parseFormat(value: string | string[]) {\n    this._parseFormat = value;\n    // parse given text value again\n    this._onInput(this._elementRef.nativeElement.value);\n  }\n  private _parseFormat: string | string[];\n\n  /** Override the display format given with display.dateInput with the token NX_DATE_FORMATS  */\n  @Input('nxDisplayFormat')\n  get displayFormat() { return this._displayFormat; }\n  set displayFormat(value: string) {\n    this._displayFormat = value;\n    this._formatValue(this.value);\n  }\n  private _displayFormat: string;\n\n/** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    if (newValue) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      this._elementRef.nativeElement.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<NxDatepickerInputEvent<D>> =\n      new EventEmitter<NxDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<NxDatepickerInputEvent<D>> =\n      new EventEmitter<NxDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /**\n   * @deprecated\n   * @deletion-target 9.0.0\n   * This will force the current value to be parsed again by the given DateAdapter.\n   * That's a convenience method so you can trigger it manually.\n   */\n  public format() {\n    this.value = this.value;\n  }\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: NxDateAdapter<D>,\n      @Optional() @Inject(NX_DATE_FORMATS) private _dateFormats: NxDateFormats,\n      @Optional() private _formField: NxFormfieldComponent) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('NX_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    const validator = Validators.compose(this.getValidators());\n    return validator ? validator(c) : null;\n  }\n\n  /**\n   * @docs-private\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * @docs-private\n   *\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    // formfield not yet accessible as we don't have them in a secondary entry point to import yet.\n    // return this._elementRef;\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._parseFormat || this._dateFormats.parse.dateInput, this.strict);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n\n    if (date) {\n      this.currentFormattedDate = this._dateAdapter.format(\n        date,\n        this._displayFormat || this._dateFormats.display.dateInput\n      );\n    } else {\n      this.currentFormattedDate = null;\n    }\n\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n\n    this.dateInput.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _focus() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n    this._onTouched();\n  }\n\n  /** Returns the validators of the datefield. */\n  getValidators(): ValidatorFn[] {\n    return [\n      NxDateValidators.parse(this._dateAdapter, this._dateFormats, this._elementRef.nativeElement, this._strict, this._parseFormat),\n      NxDateValidators.min(this._dateAdapter, this.min),\n      NxDateValidators.max(this._dateAdapter, this.max),\n      NxDateValidators.filter(this._dateAdapter, this._dateFilter)\n    ];\n  }\n\n  /** Formats a value and sets it on the input native element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value = value ?\n      this._dateAdapter.format(value, this._displayFormat || this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport { merge ,  of as observableOf ,  Subscription } from 'rxjs';\n\nimport { NxDatepickerIntl } from './datepicker-intl';\nimport { NxDatepickerComponent, DATEPICKER_DEFAULT_OPTIONS, DatepickerDefaultOptions } from './datepicker.component';\n\n/** Can be used to override the icon of a `nxDatepickerToggle`. */\n@Directive({\n  selector: '[nxDatepickerToggleIcon]'\n})\n// tslint:disable-next-line:directive-class-suffix\nexport class NxDatepickerToggleIconComponent {}\n\n@Component({\n  selector: 'nx-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.scss'],\n  host: {\n    'class': 'nx-datepicker-toggle',\n    '[class.nx-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.nx-datepicker-toggle--disabled]': 'disabled'\n  },\n  exportAs: 'nxDatepickerToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxDatepickerToggleComponent<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  private _disabled: boolean;\n  private _tabindex: number = 0;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(NxDatepickerToggleIconComponent, {static: false}) _customIcon: NxDatepickerToggleIconComponent;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for')\n  set datepicker(value: NxDatepickerComponent<D>) {\n    this.registerDatepicker(value);\n  }\n  get datepicker(): NxDatepickerComponent<D> {\n    return this._datepicker;\n  }\n  _datepicker: NxDatepickerComponent<D>;\n\n  private registerDatepicker(value: NxDatepickerComponent<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker.registerToggle(this);\n    }\n  }\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Sets the tabindex for the toggle button. Default: 0. */\n  @Input()\n  set tabindex(value: number) {\n    if (this._tabindex !== value) {\n      this._tabindex = value;\n    }\n  }\n  get tabindex(): number {\n    return this._tabindex;\n  }\n\n  constructor(public _intl: NxDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DATEPICKER_DEFAULT_OPTIONS) private _defaultOptions: DatepickerDefaultOptions) {\n      if (this._defaultOptions && this._defaultOptions.toggleIconTabindex) {\n        this._tabindex = this._defaultOptions.toggleIconTabindex;\n      }\n    }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","import { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NX_DATE_LOCALE_PROVIDER } from './adapter/index';\nimport { NxDatefieldDirective } from './datefield.directive';\nimport { NxCalendarComponent } from './datepicker/calendar';\nimport { NxCalendarBodyComponent } from './datepicker/calendar-body';\nimport { NxDatepickerIntl } from './datepicker/datepicker-intl';\nimport { NxDatepickerToggleComponent, NxDatepickerToggleIconComponent } from './datepicker/datepicker-toggle';\nimport {\n  NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  NxDatepickerComponent,\n  NxDatepickerContentComponent,\n} from './datepicker/datepicker.component';\nimport { NxMonthViewComponent } from './datepicker/month-view';\nimport { NxMultiYearViewComponent } from './datepicker/multi-year-view';\nimport { NxYearViewComponent } from './datepicker/year-view';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    A11yModule,\n    NxIconModule\n  ],\n  providers: [\n    // Provide our NX_DATE_LOCALE to determine the current language\n    NX_DATE_LOCALE_PROVIDER,\n    NxDatepickerIntl,\n    NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER\n  ],\n  declarations: [\n    NxDatefieldDirective,\n    NxDatepickerComponent,\n    NxDatepickerToggleIconComponent,\n    NxDatepickerToggleComponent,\n    NxDatepickerContentComponent,\n    NxCalendarComponent,\n    NxCalendarBodyComponent,\n    NxMonthViewComponent,\n    NxMultiYearViewComponent,\n    NxYearViewComponent\n  ],\n  exports: [\n    NxDatefieldDirective,\n    NxDatepickerComponent,\n    NxDatepickerToggleIconComponent,\n    NxDatepickerToggleComponent,\n    NxCalendarComponent,\n    NxCalendarBodyComponent,\n    NxMonthViewComponent,\n    NxMultiYearViewComponent,\n    NxYearViewComponent\n  ],\n  entryComponents: [\n    NxDatepickerContentComponent\n  ]\n})\nexport class NxDatefieldModule { }\n"],"names":["createMissingDateImplError","yearsPerPage","observableOf"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,MAAa,sBAAsB,GAAkB;IACnD,KAAK,EAAE;QACL,SAAS,EAAE,IAAI;KAChB;IACD,OAAO,EAAE;QACP,SAAS,EAAE,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAC;QAC9D,cAAc,EAAE,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAC;QACjD,aAAa,EAAE,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAC;QAC/D,kBAAkB,EAAE,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAC;KACrD;CACF;;;;;;;ACpBD;;;;;AAIA,MAAsB,aAAa;IAAnC;QACY,WAAM,GAAG,OAAO,CAAC;QACjB,mBAAc,GAAG,IAAI,OAAO,EAAU,CAAC;KAwElD;;;;IA3DC,IAAI,aAAa,KAAyB,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE;;;;;IAEvE,WAAW,CAAC,KAAU;QACpB,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACtE,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;KACvB;;;;;;IAED,QAAQ,CAAC,KAAe,EAAE,MAAgB;QACxC,IAAI,KAAK,IAAI,MAAM,EAAE;;kBACb,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;;kBAChC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;YAExC,IAAI,UAAU,IAAI,WAAW,EAAE;gBAC7B,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;aACzC;YACD,OAAO,UAAU,KAAK,WAAW,CAAC;SACnC;QACD,OAAO,KAAK,KAAK,MAAM,CAAC;KACzB;;;;;;IAED,WAAW,CAAC,KAAQ,EAAE,MAAS;QAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;YAC7C,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC5C,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KAChD;;;;;IAED,SAAS,CAAC,MAAc;QACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACvC;;;;IAED,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;KACpB;;;;;;;IAeD,SAAS,CAAC,IAAO,EAAE,GAAc,EAAE,GAAc;QAC/C,IAAI,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE;YAC1C,OAAO,GAAG,CAAC;SACZ;QACD,IAAI,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE;YAC1C,OAAO,GAAG,CAAC;SACZ;QACD,OAAO,IAAI,CAAC;KACb;CACF;;;;;;IAzEC,+BAA2B;;;;;IAC3B,uCAAiD;;;;;;IACjD,wDAAoC;;;;;;;IACpC,oEAAqD;;;;;;;;IACrD,qEAA+E;;;;;;IAC/E,sDAAmC;;;;;;IACnC,oDAA2B;;;;;;IAC3B,4DAA2C;;;;;IAC3C,kDAAsB;;;;;;IAEtB,sDAAkC;;;;;;IAClC,uDAAmC;;;;;;IACnC,sDAAkC;;;;;;IAuClC,0DAAsC;;;;;;;;IACtC,sEAAkE;;;;;;IAClE,gEAA4C;;;;;IAC5C,uDAAkC;;;;;;IAClC,2DAAuC;;;;;IACvC,4DAAqC;;;;;;IACrC,6DAAqE;;;;;IACrE,gDAAoB;;;;;;;IACpB,wEAAuD;;;;;;;IACvD,sEAAqD;;;;;;;IACrD,oEAAmD;;;;;;IACnD,iEAAyE;;;;;;;;ACnE3E;;;;AAGA,MAAa,cAAc,GAAG,IAAI,cAAc,CAAS,gBAAgB,CAAC;;;;;;;;;;;;MCapE,iBAAiB,GAAG,OAAO,IAAI,KAAK,WAAW;;;;;MAG/C,mBAAmB,GAAG;IAC1B,MAAM,EAAE;QACN,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW;QACrF,SAAS,EAAE,UAAU,EAAE,UAAU;KAClC;IACD,OAAO,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAC7F,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;CACvE;;;;;AAGoC,CAAC,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;;;;;MAAjD,kBAAkB,GAAG,KAAK,CAAC,EAAE,OAAqB;;;;;MAGlD,yBAAyB,GAAG;IAChC,MAAM,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,CAAC;IACtF,OAAO,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAC1D,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;CAC9C;;;;;;;MAOK,cAAc,GAChB,oFAAoF;;;;;;;;AAGxF,SAAS,KAAK,CAAI,MAAc,EAAE,aAAmC;;UAC7D,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;IACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QAC/B,WAAW,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;KACnC;IACD,OAAO,WAAW,CAAC;CACpB;;;;;AAOD,MAAa,mBAAoB,SAAQ,aAAmB;;;;;IAiB1D,YAAgD,aAAqB,EAAE,QAAkB;QACvF,KAAK,EAAE,CAAC;;;;;;;;;;;;QAHV,qBAAgB,GAAY,IAAI,CAAC;QAI/B,KAAK,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;;QAG/B,IAAI,CAAC,gBAAgB,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC;QAC1C,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,OAAO,IAAI,QAAQ,CAAC,IAAI,CAAC;KACrD;;;;;IAED,OAAO,CAAC,IAAU;QAChB,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;KAC3B;;;;;IAED,QAAQ,CAAC,IAAU;QACjB,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;KACxB;;;;;IAED,OAAO,CAAC,IAAU;QAChB,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;KACvB;;;;;IAED,YAAY,CAAC,IAAU;QACrB,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;KACtB;;;;;IAED,aAAa,CAAC,KAAkC;QAC9C,IAAI,iBAAiB,EAAE;;kBACf,GAAG,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,EAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAC,CAAC;YACjF,OAAO,KAAK,CAAC,EAAE;;;;YAAE,CAAC,IACd,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC;SACnF;QACD,OAAO,mBAAmB,CAAC,KAAK,CAAC,CAAC;KACnC;;;;IAED,YAAY;QACV,IAAI,iBAAiB,EAAE;;kBACf,GAAG,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,EAAC,GAAG,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAC,CAAC;YACnF,OAAO,KAAK,CAAC,EAAE;;;;YAAE,CAAC,IAAI,IAAI,CAAC,8BAA8B,CACrD,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC;SACnD;QACD,OAAO,kBAAkB,CAAC;KAC3B;;;;;IAED,iBAAiB,CAAC,KAAkC;QAClD,IAAI,iBAAiB,EAAE;;kBACf,GAAG,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,EAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAC,CAAC;YACnF,OAAO,KAAK,CAAC,CAAC;;;;YAAE,CAAC,IAAI,IAAI,CAAC,8BAA8B,CACpD,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC;SACnD;QACD,OAAO,yBAAyB,CAAC,KAAK,CAAC,CAAC;KACzC;;;;;IAED,WAAW,CAAC,IAAU;QACpB,IAAI,iBAAiB,EAAE;;kBACf,GAAG,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,EAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAC,CAAC;YACpF,OAAO,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;SACrE;QACD,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;KACnC;;;;IAED,iBAAiB;;QAEf,OAAO,CAAC,CAAC;KACV;;;;;IAED,iBAAiB,CAAC,IAAU;QAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,uBAAuB,CAC5C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KACtD;;;;;IAED,KAAK,CAAC,IAAU;QACd,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;KACrF;;;;;;;IAED,UAAU,CAAC,IAAY,EAAE,KAAa,EAAE,IAAY;;;QAGlD,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,EAAE,EAAE;YAC3B,MAAM,KAAK,CAAC,wBAAwB,KAAK,4CAA4C,CAAC,CAAC;SACxF;QAED,IAAI,IAAI,GAAG,CAAC,EAAE;YACZ,MAAM,KAAK,CAAC,iBAAiB,IAAI,mCAAmC,CAAC,CAAC;SACvE;;cAEK,MAAM,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;;QAE9D,IAAI,MAAM,CAAC,QAAQ,EAAE,KAAK,KAAK,EAAE;YAC/B,MAAM,KAAK,CAAC,iBAAiB,IAAI,2BAA2B,KAAK,IAAI,CAAC,CAAC;SACxE;QAED,OAAO,MAAM,CAAC;KACf;;;;IAED,KAAK;QACH,OAAO,IAAI,IAAI,EAAE,CAAC;KACnB;;;;;IAED,KAAK,CAAC,KAAU;;;QAGd,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB;QACD,OAAO,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC;KACnD;;;;;;IAED,MAAM,CAAC,IAAU,EAAE,aAAqB;QACtC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACvB,MAAM,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACjE;QAED,IAAI,iBAAiB,EAAE;;;YAGrB,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,EAAE;gBAC5E,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;aACnE;YAED,aAAa,qBAAO,aAAa,IAAE,QAAQ,EAAE,KAAK,GAAC,CAAC;;kBAE9C,GAAG,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,aAAa,CAAC;YAC/D,OAAO,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;SACrE;QACD,OAAO,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;KACjE;;;;;;IAED,gBAAgB,CAAC,IAAU,EAAE,KAAa;QACxC,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE,CAAC,CAAC;KACjD;;;;;;IAED,iBAAiB,CAAC,IAAU,EAAE,MAAc;;YACtC,OAAO,GAAG,IAAI,CAAC,uBAAuB,CACtC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;;;;QAMzE,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,MAAM,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;YAC9E,OAAO,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;SAC1F;QAED,OAAO,OAAO,CAAC;KAChB;;;;;;IAED,eAAe,CAAC,IAAU,EAAE,IAAY;QACtC,OAAO,IAAI,CAAC,uBAAuB,CAC/B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;KACzE;;;;;IAED,SAAS,CAAC,IAAU;QAClB,OAAO;YACL,IAAI,CAAC,cAAc,EAAE;YACrB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;YACpC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;SAChC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACb;;;;;;;;IAOD,WAAW,CAAC,KAAU;QACpB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,IAAI,CAAC,KAAK,EAAE;gBACV,OAAO,IAAI,CAAC;aACb;;;YAGD,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;;sBACxB,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC;gBAC5B,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACtB,OAAO,IAAI,CAAC;iBACb;aACF;SACF;QACD,OAAO,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;KACjC;;;;;IAED,cAAc,CAAC,GAAQ;QACrB,OAAO,GAAG,YAAY,IAAI,CAAC;KAC5B;;;;;IAED,OAAO,CAAC,IAAU;QAChB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;KAC/B;;;;IAED,OAAO;QACL,OAAO,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;KACtB;;;;;;;;;IAGO,uBAAuB,CAAC,IAAY,EAAE,KAAa,EAAE,IAAY;;cACjE,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;;;QAI1C,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,GAAG,GAAG,EAAE;YAC3B,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;SACjD;QACD,OAAO,MAAM,CAAC;KACf;;;;;;;IAOO,OAAO,CAAC,CAAS;QACvB,OAAO,CAAC,IAAI,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KAC7B;;;;;;;;;IASO,8BAA8B,CAAC,GAAW;QAChD,OAAO,GAAG,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;KAC3C;;;;;;;;;;;;;IAaO,OAAO,CAAC,GAAwB,EAAE,IAAU;;cAC5C,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CACvB,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EACpE,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;QAClE,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;KACtB;;;YApQF,UAAU;;;;yCAkBI,QAAQ,YAAI,MAAM,SAAC,cAAc;YArExC,QAAQ;;;;;;;;IAsDd,yCAAqC;;;;;;;;;;;;;IAarC,+CAAiC;;;;;;;;AC3EnC;AAeA,MAAa,eAAe,GAAG,IAAI,cAAc,CAAgB,iBAAiB,CAAC;;;;;;;ACfnF;AAUA,MAAa,uBAAuB,GAAG,EAAC,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,SAAS,EAAC;AAExF,MAca,gBAAgB;;;YAP5B,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,cAAc,CAAC;gBACzB,SAAS,EAAE;oBACT,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,mBAAmB,EAAC;oBACvD,uBAAuB;iBACxB;aACF;;aAKkD,sBAAsB;AAEzE,MAAa,kBAAkB;;;YAJ9B,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,gBAAgB,CAAC;gBAC3B,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,eAAe,EAAE,QAAQ,MAAwB,EAAC,CAAC;aAC1E;;;;;;;;;;;;AC/BD,SAAgB,0BAA0B,CAAC,QAAgB;IACzD,OAAO,KAAK,CACR,uCAAuC,QAAQ,yCAAyC;QACxF,yFAAyF;QACzF,wBAAwB,CAAC,CAAC;CAC/B;;;;;;;ACLD;;;AAaA,MAAa,gBAAgB;IAD7B;;;;;QAMW,YAAO,GAAkB,IAAI,OAAO,EAAQ,CAAC;;;;;QAKtD,mBAAc,GAAW,eAAe,CAAC;;;;QAGzC,kBAAa,GAAW,UAAU,CAAC;;;;QAGnC,sBAAiB,GAAW,eAAe,CAAC;;;;QAG5C,mBAAc,GAAW,gBAAgB,CAAC;;;;QAG1C,mBAAc,GAAW,YAAY,CAAC;;;;QAGtC,kBAAa,GAAW,eAAe,CAAC;;;;QAGxC,kBAAa,GAAW,WAAW,CAAC;;;;QAGpC,uBAAkB,GAAW,mBAAmB,CAAC;;;;QAGjD,uBAAkB,GAAW,eAAe,CAAC;;;;QAG7C,2BAAsB,GAAW,aAAa,CAAC;;;;QAG/C,+BAA0B,GAAW,uBAAuB,CAAC;KAC9D;;;YA1CA,UAAU;;;;;;;;IAMT,mCAAsD;;;;;IAKtD,0CAAyC;;;;;IAGzC,yCAAmC;;;;;IAGnC,6CAA4C;;;;;IAG5C,0CAA0C;;;;;IAG1C,0CAAsC;;;;;IAGtC,yCAAwC;;;;;IAGxC,yCAAoC;;;;;IAGpC,8CAAiD;;;;;IAGjD,8CAA6C;;;;;IAG7C,kDAA+C;;;;;IAG/C,sDAA6D;;;;;;;;;;;;;;;;;;;;AC5C/D,SAAgBA,4BAA0B,CAAC,QAAgB;IACzD,OAAO,KAAK,CACR,uCAAuC,QAAQ,yCAAyC;QACxF,yFAAyF;QACzF,wBAAwB,CAAC,CAAC;CAC/B;;;;;;;;;;;ACSD,MAAa,cAAc;;;;;;;IACzB,YAAmB,KAAa,EACb,YAAoB,EACpB,SAAkB,EAClB,OAAiB;QAHjB,UAAK,GAAL,KAAK,CAAQ;QACb,iBAAY,GAAZ,YAAY,CAAQ;QACpB,cAAS,GAAT,SAAS,CAAS;QAClB,YAAO,GAAP,OAAO,CAAU;KAAI;CACzC;;;IAJa,+BAAoB;;IACpB,sCAA2B;;IAC3B,mCAAyB;;IACzB,iCAAwB;;;;;;AAoBtC,MAAa,uBAAuB;;;;;IA+BlC,YAAoB,WAAuB,EAAU,OAAe;QAAhD,gBAAW,GAAX,WAAW,CAAY;QAAU,YAAO,GAAP,OAAO,CAAQ;;;;QAjB3D,YAAO,GAAG,CAAC,CAAC;;;;QAGZ,2BAAsB,GAAG,KAAK,CAAC;;;;QAG/B,eAAU,GAAG,CAAC,CAAC;;;;QAGf,kBAAa,GAAqB,EAAE,CAAC;;;;QAGrC,mBAAc,GAAuB,CAAC,EAAE,CAAC,CAAC;;;;QAGhC,wBAAmB,GAAyB,IAAI,YAAY,EAAU,CAAC;KAEjB;;;;;IAEzE,YAAY,CAAC,IAAoB;QAC/B,IAAI,CAAC,IAAI,CAAC,sBAAsB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjD,OAAO;SACR;QACD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC3C;;;;;IAGD,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM;YACvD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;KAC5C;;;;;IAGD,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,MAAM;YAC1E,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;KAC/D;;;;;IAGD,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM;YAChC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;KAC9B;;;;;IAKD,IAAI,cAAc;QAChB,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE;;YAErD,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,EAAE;gBAChD,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;aACjE;YACD,OAAO,IAAI,CAAC,cAAc,CAAC;SAC5B;QAED,OAAO,EAAE,CAAC;KACX;;;;;;IAED,aAAa,CAAC,QAAgB,EAAE,QAAgB;;YAC1C,UAAU,GAAG,QAAQ,GAAG,IAAI,CAAC,OAAO,GAAG,QAAQ;;QAGnD,IAAI,QAAQ,EAAE;YACZ,UAAU,IAAI,IAAI,CAAC,eAAe,CAAC;SACpC;QAED,OAAO,UAAU,KAAK,IAAI,CAAC,UAAU,CAAC;KACvC;;;;;IAGD,gBAAgB;QACd,IAAI,CAAC,OAAO,CAAC,iBAAiB;;;QAAC;YAC7B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;;;YAAC;gBAC3D,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,aAAa,CAAC,0BAA0B,CAAC,CAAC,KAAK,EAAE,CAAC;aAClF,EAAC,CAAC;SACJ,EAAC,CAAC;KACJ;;;YAxGF,SAAS,SAAC;;gBAET,QAAQ,EAAE,oBAAoB;gBAC9B,g0EAAiC;gBAEjC,IAAI,EAAE;oBACJ,OAAO,EAAE,kBAAkB;oBAC3B,MAAM,EAAE,MAAM;oBACd,oBAAoB,EAAE,MAAM;iBAC7B;gBACD,QAAQ,EAAE,gBAAgB;gBAC1B,eAAe,EAAE,uBAAuB,CAAC,MAAM;;aAChD;;;;YAnCC,UAAU;YAIV,MAAM;;;oBAkCL,KAAK;mBAGL,KAAK;yBAGL,KAAK;4BAGL,KAAK;sBAGL,KAAK;qCAGL,KAAK;yBAGL,KAAK;4BAGL,KAAK;6BAGL,KAAK;kCAGL,MAAM;;;;;;;IA3BP,wCAAuB;;;;;IAGvB,uCAAkC;;;;;IAGlC,6CAA4B;;;;;IAG5B,gDAA+B;;;;;IAG/B,0CAAqB;;;;;IAGrB,yDAAwC;;;;;IAGxC,6CAAwB;;;;;IAGxB,gDAA8C;;;;;IAG9C,iDAAmD;;;;;IAGnD,sDAA0F;;;;;IAE9E,8CAA+B;;;;;IAAE,0CAAuB;;;;;;;;AC9EtE;;;;;;;;MA4BM,aAAa,GAAG,CAAC;;MACjB,qBAAqB,GAAG,CAAC,GAAG,aAAa;;;;;;AAa/C,MAAa,oBAAoB;;;;;;;IAiF/B,YAAoB,kBAAqC,EACA,YAA2B,EACrD,YAA8B,EAC7B,IAAqB;QAHjC,uBAAkB,GAAlB,kBAAkB,CAAmB;QACA,iBAAY,GAAZ,YAAY,CAAe;QACrD,iBAAY,GAAZ,YAAY,CAAkB;QAC7B,SAAI,GAAJ,IAAI,CAAiB;;;;QAtClC,mBAAc,GAA2B,IAAI,YAAY,EAAY,CAAC;;;;QAGtE,mBAAc,GAAuB,IAAI,YAAY,EAAQ,CAAC;;;;QAG9D,qBAAgB,GAAoB,IAAI,YAAY,EAAK,CAAC;;;;QA2B7E,aAAQ,GAAW,CAAC,CAAC;QAMnB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAMA,4BAA0B,CAAC,aAAa,CAAC,CAAC;SACjD;QACD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAMA,4BAA0B,CAAC,kBAAkB,CAAC,CAAC;SACtD;;cAEK,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE;;cACtD,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,QAAQ,CAAC;;cAC9D,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,MAAM,CAAC;;;cAG1D,QAAQ,GAAG,YAAY,CAAC,GAAG;;;;;QAAC,CAAC,IAAI,EAAE,CAAC;YACxC,OAAO,EAAC,IAAI,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC,CAAC,EAAC,CAAC;SAC1C,EAAC;QACF,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC;QAE1F,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;KAC9C;;;;;IAnGD,IACI,UAAU,KAAQ,OAAO,IAAI,CAAC,WAAW,CAAC,EAAE;;;;;IAChD,IAAI,UAAU,CAAC,KAAQ;;cACf,aAAa,GAAG,IAAI,CAAC,WAAW;;cAChC,SAAS,GACX,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE;QAC/F,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACtF,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE;YAC/D,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;KACF;;;;;IAID,IACI,QAAQ,KAAe,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;;;;;IACnD,IAAI,QAAQ,CAAC,KAAe;QAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAClE;;;;;IAID,IACI,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;;;;;IACjD,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KAChF;;;;;IAID,IACI,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;;;;;IACjD,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KAChF;;;;IAkED,kBAAkB;QAChB,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACzB;;;;;;IAGD,aAAa,CAAC,IAAY;QACxB,IAAI,IAAI,CAAC,aAAa,KAAK,IAAI,EAAE;;kBACzB,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC;;kBACzD,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC;;kBAC3D,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,YAAY,EAAE,aAAa,EAAE,IAAI,CAAC;YAEpF,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACxC;QAED,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;KAC5B;;;;;;IAGD,0BAA0B,CAAC,KAAoB;;;;;;;;cAKvC,aAAa,GAAG,IAAI,CAAC,WAAW;;cAEhC,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE;QAC3B,QAAQ,KAAK,CAAC,OAAO;YACnB,KAAK,UAAU;gBACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtF,MAAM;YACR,KAAK,WAAW;gBACd,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACtF,MAAM;YACR,KAAK,QAAQ;gBACX,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACtF,MAAM;YACR,KAAK,UAAU;gBACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACrF,MAAM;YACR,KAAK,IAAI;gBACP,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,EAChE,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACrD,MAAM;YACR,KAAK,GAAG;gBACN,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,GAC/D,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC;oBACpD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;gBACpD,MAAM;YACR,KAAK,OAAO;gBACV,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,MAAM;oBAC1B,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;oBACxD,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC9D,MAAM;YACR,KAAK,SAAS;gBACZ,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,MAAM;oBAC1B,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;oBACvD,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBAC7D,MAAM;YACR,KAAK,KAAK;gBACR,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;oBACzD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;oBAChE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;;oBAE3B,KAAK,CAAC,cAAc,EAAE,CAAC;iBACxB;gBACD,OAAO;YACT;;gBAEE,OAAO;SACV;QAED,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,EAAE;YACjE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC7C;QAED,IAAI,CAAC,gBAAgB,EAAE,CAAC;;QAExB,KAAK,CAAC,cAAc,EAAE,CAAC;KACxB;;;;;IAGD,KAAK;QACH,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAChE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC,CAAC;QACzE,IAAI,CAAC,WAAW;YACZ,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;iBAChF,iBAAiB,EAAE,CAAC;;cAEvB,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EACxF,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QACnD,IAAI,CAAC,gBAAgB;YACjB,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,YAAY,CAAC;gBAC5D,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,IAAI,aAAa,CAAC;QAE5D,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;KACxC;;;;;;IAGO,gBAAgB;QACtB,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC;KACzC;;;;;;IAGO,gBAAgB;;cAChB,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC;;cAClE,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE;QAClD,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC;QACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YAC1E,IAAI,IAAI,KAAK,aAAa,EAAE;gBAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACrB,IAAI,GAAG,CAAC,CAAC;aACV;;kBACK,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CACnC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAC1C,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;;kBACnD,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;;kBACtC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC;YACzF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;iBAC9B,IAAI,CAAC,IAAI,cAAc,CAAC,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;SACxE;KACF;;;;;;;IAGO,iBAAiB,CAAC,IAAO;QAC/B,OAAO,CAAC,CAAC,IAAI;aACR,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;aAC1C,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aACxE,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;KAC/E;;;;;;;;IAMO,sBAAsB,CAAC,IAAc;QAC3C,OAAO,IAAI,IAAI,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC;YAC3D,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;KAC5C;;;;;;;;IAGO,oBAAoB,CAAC,EAAY,EAAE,EAAY;QACrD,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC7E,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;KAC5E;;;;;;IAMO,mBAAmB,CAAC,GAAQ;QAClC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC;KAC/F;;;;;;IAGO,MAAM;QACZ,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC;KAC/C;;;;;;IAMD,2BAA2B;;cACnB,eAAe,GAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CACrD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAC1C,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAC3C,CAAC,CACF;;cAEK,uBAAuB,GAC3B,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,eAAe,EAAE,CAAE,IAAI,CAAC,gBAAgB,CAAC;QAE7E,OAAO,IAAI,CAAC,aAAa,CAAC,uBAAuB,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;KAC3E;;;;;;;;IAQD,6BAA6B;;cACrB,aAAa,GAAuB,EAAE;;cAEtC,mBAAmB,GAAM,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAChE,IAAI,CAAC,YAAY,CAAC,UAAU,CAC1B,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAC1C,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAC3C,CAAC,CAAC,EACJ,CAAC,CACF;;;cAGK,kBAAkB,GACtB,qBAAqB,GAAG,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC;;cAChG,WAAW,GAAG,kBAAkB,GAAG,CAAC;;;QAI1C,IAAI,WAAW,GAAG,CAAC,EAAE;;kBACb,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE,WAAW,CAAC;YACtE,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC/B;;YAEG,aAAa,GAAG,kBAAkB,GAAG,WAAW;;YAChD,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,mBAAmB,EAAE,WAAW,CAAC;;QAGvF,OAAO,aAAa,GAAG,CAAC,EAAE;YACxB,aAAa,CAAC,IAAI,CAChB,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,CACjD,CAAC;YAEF,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YAChF,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC;SAChC;QAED,OAAO,aAAa,CAAC;KACtB;;;;;;;;IAMD,aAAa,CAAC,aAAgB,EAAE,SAAiB;;cACzC,OAAO,GAAqB,EAAE;;cAC9B,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE;QAClD,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,SAAS,EAAE,OAAO,EAAE,EAAE;;kBAC9C,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CACnC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,aAAa,EAAE,OAAO,CAAC,CAC1D;YACD,OAAO,CAAC,IAAI,CAAC,IAAI,cAAc,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SAC3D;QACD,OAAO,OAAO,CAAC;KAChB;;;YA5VF,SAAS,SAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,izBAA8B;gBAC9B,QAAQ,EAAE,aAAa;gBACvB,eAAe,EAAE,uBAAuB,CAAC,MAAM;;aAEhD;;;;YApCC,iBAAiB;4CAuHJ,QAAQ,YAAI,MAAM,SAAC,eAAe;YA7GxC,aAAa,uBA8GP,QAAQ;YA7Hd,cAAc,uBA8HR,QAAQ;;;yBAhFpB,KAAK;uBAcL,KAAK;sBASL,KAAK;sBAQL,KAAK;yBAQL,KAAK;6BAGL,MAAM;6BAGN,MAAM;+BAGN,MAAM;8BAGN,SAAS,SAAC,uBAAuB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;;;;;;;IAxCpD,2CAAuB;;;;;IASvB,yCAA4B;;;;;IAQ5B,wCAA2B;;;;;IAQ3B,wCAA2B;;;;;IAG3B,0CAA0C;;;;;IAG1C,8CAAyF;;;;;IAGzF,8CAAiF;;;;;IAGjF,gDAA6E;;;;;IAG7E,+CAAsE;;;;;IAGtE,2CAAoB;;;;;IAGpB,sCAA2B;;;;;IAG3B,gDAAyB;;;;;;IAMzB,6CAA6B;;;;;IAG7B,0CAA0B;;;;;IAG1B,yCAA4C;;;;;IAG5C,wCAAqB;;;;;IAET,kDAA6C;;;;;IAC7C,4CAAwE;;IACxE,4CAAiD;;;;;IACjD,oCAAyC;;;;;;;;AC9HvD;;;;;;;;AA0BA,MAAa,YAAY,GAAG,EAAE;;AAE9B,MAAa,WAAW,GAAG,CAAC;;;;;;AAa5B,MAAa,wBAAwB;;;;;;IAiEnC,YAAoB,kBAAqC,EAC1B,YAA8B,EAC7B,IAAqB;QAFjC,uBAAkB,GAAlB,kBAAkB,CAAmB;QAC1B,iBAAY,GAAZ,YAAY,CAAkB;QAC7B,SAAI,GAAJ,IAAI,CAAiB;;;;QAtBlC,mBAAc,GAAoB,IAAI,YAAY,EAAK,CAAC;;;;QAGxD,iBAAY,GAAoB,IAAI,YAAY,EAAK,CAAC;;;;QAGtD,qBAAgB,GAAoB,IAAI,YAAY,EAAK,CAAC;QAiB3E,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAMA,4BAA0B,CAAC,aAAa,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;KAC9C;;;;;IAvED,IACI,UAAU,KAAQ,OAAO,IAAI,CAAC,WAAW,CAAC,EAAE;;;;;IAChD,IAAI,UAAU,CAAC,KAAQ;;cACf,aAAa,GAAG,IAAI,CAAC,WAAW;;cAChC,SAAS,GACX,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE;QAC/F,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACtF,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,YAAY,CAAC;YACnE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,YAAY,CAAC,EAAE;YAC1E,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;KACF;;;;;IAID,IACI,QAAQ,KAAe,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;;;;;IACnD,IAAI,QAAQ,CAAC,KAAe;QAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAClF;;;;;IAID,IACI,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;;;;;IACjD,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KAChF;;;;;IAID,IACI,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;;;;;IACjD,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KAChF;;;;IAqCD,kBAAkB;QAChB,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACzB;;;;;IAGD,KAAK;QACH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC,CAAC;;cACjE,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC;;cACxD,YAAY,GAAG,UAAU,GAAG,YAAY;QAC9C,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAa,EAAE,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,EAAE;YACzD,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,YAAY,GAAG,CAAC,CAAC,CAAC;YACxC,IAAI,GAAG,CAAC,MAAM,KAAK,WAAW,EAAE;gBAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG;;;;gBAAC,IAAI,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC;gBACjE,GAAG,GAAG,EAAE,CAAC;aACV;SACF;QACD,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;KACxC;;;;;;IAGD,aAAa,CAAC,IAAY;QACxB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;cAC3D,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC;;cACnD,WAAW,GACb,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACrF,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,EAC7D,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;KACzE;;;;;;IAGD,0BAA0B,CAAC,KAAoB;;;;;;;;cAKvC,aAAa,GAAG,IAAI,CAAC,WAAW;;cAChC,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE;QAE3B,QAAQ,KAAK,CAAC,OAAO;YACnB,KAAK,UAAU;gBACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvF,MAAM;YACR,KAAK,WAAW;gBACd,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACvF,MAAM;YACR,KAAK,QAAQ;gBACX,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,CAAC;gBACrF,MAAM;YACR,KAAK,UAAU;gBACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;gBACpF,MAAM;YACR,KAAK,IAAI;gBACP,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EACjE,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,YAAY,CAAC,CAAC;gBACjE,MAAM;YACR,KAAK,GAAG;gBACN,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EACjE,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,YAAY,GAAG,CAAC,CAAC,CAAC;gBACnF,MAAM;YACR,KAAK,OAAO;gBACV,IAAI,CAAC,UAAU;oBACX,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAC9B,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,YAAY,GAAG,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC;gBAC7E,MAAM;YACR,KAAK,SAAS;gBACZ,IAAI,CAAC,UAAU;oBACX,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAC9B,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,MAAM,GAAG,YAAY,GAAG,EAAE,GAAG,YAAY,CAAC,CAAC;gBAC3E,MAAM;YACR,KAAK,KAAK;gBACR,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBAChE,MAAM;YACR;;gBAEE,OAAO;SACV;QAED,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,EAAE;YACjE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC7C;QAED,IAAI,CAAC,gBAAgB,EAAE,CAAC;;QAExB,KAAK,CAAC,cAAc,EAAE,CAAC;KACxB;;;;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,YAAY,CAAC;KAClE;;;;;;IAGO,gBAAgB;QACtB,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC;KACzC;;;;;;;IAGO,kBAAkB,CAAC,IAAY;;cAC/B,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACxF,OAAO,IAAI,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;KACnF;;;;;;;IAGO,iBAAiB,CAAC,IAAY;;QAEpC,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI;aAClC,IAAI,CAAC,OAAO,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC/D,IAAI,CAAC,OAAO,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE;YACpE,OAAO,KAAK,CAAC;SACd;;QAGD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;;cAEK,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;;QAG5D,KAAK,IAAI,IAAI,GAAG,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,IAAI,EACnE,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE;YACnD,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBACzB,OAAO,IAAI,CAAC;aACb;SACF;QAED,OAAO,KAAK,CAAC;KACd;;;;;;IAMO,mBAAmB,CAAC,GAAQ;QAClC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC;KAC/F;;;;;;IAGO,MAAM;QACZ,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC;KAC/C;;;YA/NF,SAAS,SAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,sbAAmC;gBACnC,QAAQ,EAAE,iBAAiB;gBAC3B,eAAe,EAAE,uBAAuB,CAAC,MAAM;;aAEhD;;;;YAnCC,iBAAiB;YASV,aAAa,uBA6FP,QAAQ;YA3Gd,cAAc,uBA4GR,QAAQ;;;yBAjEpB,KAAK;uBAeL,KAAK;sBASL,KAAK;sBAQL,KAAK;yBAQL,KAAK;6BAGL,MAAM;2BAGN,MAAM;+BAGN,MAAM;8BAGN,SAAS,SAAC,uBAAuB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;;;;;;;IAxCpD,+CAAuB;;;;;IASvB,6CAA4B;;;;;IAQ5B,4CAA2B;;;;;IAQ3B,4CAA2B;;;;;IAG3B,8CAA0C;;;;;IAG1C,kDAA2E;;;;;IAG3E,gDAAyE;;;;;IAGzE,oDAA6E;;;;;IAG7E,mDAAsE;;;;;IAGtE,0CAA2B;;;;;IAG3B,8CAAmB;;;;;IAGnB,iDAA6B;;;;;IAEjB,sDAA6C;;IAC7C,gDAAiD;;;;;IACjD,wCAAyC;;;;;;;;AC5GvD;;;;;;;;;;;;AAsCA,MAAa,mBAAmB;;;;;;;IAwE9B,YAAoB,kBAAqC,EACA,YAA2B,EACrD,YAA8B,EAC7B,IAAqB;QAHjC,uBAAkB,GAAlB,kBAAkB,CAAmB;QACA,iBAAY,GAAZ,YAAY,CAAe;QACrD,iBAAY,GAAZ,YAAY,CAAkB;QAC7B,SAAI,GAAJ,IAAI,CAAiB;;;;QA/BlC,mBAAc,GAAoB,IAAI,YAAY,EAAK,CAAC;;;;QAGxD,kBAAa,GAAoB,IAAI,YAAY,EAAK,CAAC;;;;QAGvD,qBAAgB,GAAoB,IAAI,YAAY,EAAK,CAAC;QAoB7E,aAAQ,GAAW,CAAC,CAAC;QAMnB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAMA,4BAA0B,CAAC,aAAa,CAAC,CAAC;SACjD;QACD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAMA,4BAA0B,CAAC,kBAAkB,CAAC,CAAC;SACtD;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;KAC9C;;;;;IAlFD,IACI,UAAU,KAAQ,OAAO,IAAI,CAAC,WAAW,CAAC,EAAE;;;;;IAChD,IAAI,UAAU,CAAC,KAAQ;;cACf,aAAa,GAAG,IAAI,CAAC,WAAW;;cAChC,SAAS,GACX,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE;QAC/F,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACtF,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YAC5F,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;KACF;;;;;IAID,IACI,QAAQ,KAAe,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;;;;;IACnD,IAAI,QAAQ,CAAC,KAAe;QAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACnE;;;;;IAID,IACI,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;;;;;IACjD,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KAChF;;;;;IAID,IACI,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;;;;;IACjD,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KAChF;;;;IAiDD,kBAAkB;QAChB,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACzB;;;;;;IAGD,cAAc,CAAC,KAAa;;cACpB,cAAc,GACd,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QAExF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;;cAElC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,cAAc,CAAC;QAEvE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CACjD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,EACjD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;KACzE;;;;;;IAGD,0BAA0B,CAAC,KAAoB;;;;;;;;cAKvC,aAAa,GAAG,IAAI,CAAC,WAAW;;cAChC,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE;QAE3B,QAAQ,KAAK,CAAC,OAAO;YACnB,KAAK,UAAU;gBACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxF,MAAM;YACR,KAAK,WAAW;gBACd,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACxF,MAAM;YACR,KAAK,QAAQ;gBACX,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACxF,MAAM;YACR,KAAK,UAAU;gBACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACvF,MAAM;YACR,KAAK,IAAI;gBACP,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAClE,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACnD,MAAM;YACR,KAAK,GAAG;gBACN,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAClE,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACvD,MAAM;YACR,KAAK,OAAO;gBACV,IAAI,CAAC,UAAU;oBACX,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;gBAClF,MAAM;YACR,KAAK,SAAS;gBACZ,IAAI,CAAC,UAAU;oBACX,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;gBAChF,MAAM;YACR,KAAK,KAAK;gBACR,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBAClE,MAAM;YACR;;gBAEE,OAAO;SACV;QAED,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,EAAE;YACjE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC7C;QAED,IAAI,CAAC,gBAAgB,EAAE,CAAC;;QAExB,KAAK,CAAC,cAAc,EAAE,CAAC;KACxB;;;;;IAGD,KAAK;QACH,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC,CAAC;QAC1E,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;;cAE3D,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,OAAO,CAAC;QAC3D,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG;;;;QAAC,GAAG,IAAI,GAAG,CAAC,GAAG;;;;QAC5E,KAAK,IAAI,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,EAAC,EAAC,CAAC;QAClE,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;KACxC;;;;;;IAGO,gBAAgB;QACtB,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC;KACzC;;;;;;;;IAMO,sBAAsB,CAAC,IAAc;QAC3C,OAAO,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC;YACzF,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;KAC7C;;;;;;;;IAGO,mBAAmB,CAAC,KAAa,EAAE,SAAiB;;cACpD,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CACtC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,EAClF,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC;QACjD,OAAO,IAAI,cAAc,CACrB,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;KAClE;;;;;;;IAGO,kBAAkB,CAAC,KAAa;;cAEhC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC;QAE7D,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI;YACrC,IAAI,CAAC,2BAA2B,CAAC,UAAU,EAAE,KAAK,CAAC;YACnD,IAAI,CAAC,4BAA4B,CAAC,UAAU,EAAE,KAAK,CAAC,EAAE;YACxD,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;;cAEK,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;;QAGvE,KAAK,IAAI,IAAI,GAAG,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,KAAK,EACnE,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE;YACtD,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBACzB,OAAO,IAAI,CAAC;aACb;SACF;QAED,OAAO,KAAK,CAAC;KACd;;;;;;;;;IAMO,2BAA2B,CAAC,IAAY,EAAE,KAAa;QAC7D,IAAI,IAAI,CAAC,OAAO,EAAE;;kBACV,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;;kBACjD,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC;YAEzD,OAAO,IAAI,GAAG,OAAO,KAAK,IAAI,KAAK,OAAO,IAAI,KAAK,GAAG,QAAQ,CAAC,CAAC;SACjE;QAED,OAAO,KAAK,CAAC;KACd;;;;;;;;;IAMO,4BAA4B,CAAC,IAAY,EAAE,KAAa;QAC9D,IAAI,IAAI,CAAC,OAAO,EAAE;;kBACV,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;;kBACjD,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC;YAEzD,OAAO,IAAI,GAAG,OAAO,KAAK,IAAI,KAAK,OAAO,IAAI,KAAK,GAAG,QAAQ,CAAC,CAAC;SACjE;QAED,OAAO,KAAK,CAAC;KACd;;;;;;IAMO,mBAAmB,CAAC,GAAQ;QAClC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC;KAC/F;;;;;;IAGO,MAAM;QACZ,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC;KAC/C;;;YA/QF,SAAS,SAAC;gBACT,QAAQ,EAAE,cAAc;gBACxB,mfAA6B;gBAC7B,QAAQ,EAAE,YAAY;gBACtB,eAAe,EAAE,uBAAuB,CAAC,MAAM;;aAEhD;;;;YAhCC,iBAAiB;4CA0GJ,QAAQ,YAAI,MAAM,SAAC,eAAe;YAhGvB,aAAa,uBAiGxB,QAAQ;YAhHd,cAAc,uBAiHR,QAAQ;;;yBAzEpB,KAAK;uBAcL,KAAK;sBASL,KAAK;sBAQL,KAAK;yBAQL,KAAK;6BAGL,MAAM;4BAGN,MAAM;+BAGN,MAAM;8BAGN,SAAS,SAAC,uBAAuB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;;;;;;;IAxCpD,0CAAuB;;;;;IASvB,wCAA4B;;;;;IAQ5B,uCAA2B;;;;;IAQ3B,uCAA2B;;;;;IAG3B,yCAA0C;;;;;IAG1C,6CAA2E;;;;;IAG3E,4CAA0E;;;;;IAG1E,+CAA6E;;;;;IAG7E,8CAAsE;;;;;IAGtE,sCAA4B;;;;;IAG5B,yCAAmB;;;;;IAGnB,0CAA2B;;;;;;IAM3B,6CAA8B;;IAE9B,uCAAqB;;;;;IAET,iDAA6C;;;;;IAC7C,2CAAwE;;IACxE,2CAAiD;;;;;IACjD,mCAAyC;;;;;;;;ACjHvD;;;;;;;;MAgCMC,cAAY,GAAG,EAAE;;;;;;AAgBvB,MAAa,mBAAmB;;;;;;;IAsH9B,YAAoB,KAAuB,EACX,YAA8B,EACL,YAA2B,EACxE,iBAAoC;QAH5B,UAAK,GAAL,KAAK,CAAkB;QACX,iBAAY,GAAZ,YAAY,CAAkB;QACL,iBAAY,GAAZ,YAAY,CAAe;;;;QA5G3E,cAAS,GAAoC,OAAO,CAAC;;;;QA8B3C,mBAAc,GAAoB,IAAI,YAAY,EAAK,CAAC;;;;;QAMxD,iBAAY,GAAoB,IAAI,YAAY,EAAK,CAAC;;;;;QAMtD,kBAAa,GAAoB,IAAI,YAAY,EAAK,CAAC;;;;QAGvD,mBAAc,GAAuB,IAAI,YAAY,EAAQ,CAAC;QAkE/E,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAMD,4BAA0B,CAAC,aAAa,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAMA,4BAA0B,CAAC,kBAAkB,CAAC,CAAC;SACtD;QAED,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS;;;QAAC,MAAM,iBAAiB,CAAC,YAAY,EAAE,EAAC,CAAC;KACrF;;;;;IAhID,IACI,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;;;;;IACjD,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KAChF;;;;;IAOD,IACI,QAAQ,KAAe,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;;;;;IACnD,IAAI,QAAQ,CAAC,KAAe;QAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KACjF;;;;;IAID,IACI,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;;;;;IACjD,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KAChF;;;;;IAID,IACI,OAAO,KAAe,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;;;;;IACjD,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KAChF;;;;;;IAmCD,IAAI,WAAW,KAAQ,OAAO,IAAI,CAAC,kBAAkB,CAAC,EAAE;;;;;IACxD,IAAI,WAAW,CAAC,KAAQ;QACtB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KAC1F;;;;;IAOD,IAAI,iBAAiB;QACnB,IAAI,IAAI,CAAC,YAAY,KAAK,OAAO,EAAE;YACjC,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;SAC7F;QACD,IAAI,IAAI,CAAC,YAAY,KAAK,MAAM,EAAE;YAChC,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACxD;;cACK,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC;;cACxD,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CACjD,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,UAAU,GAAG,UAAU,GAAGC,cAAY,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;cACzE,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CAChD,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,UAAU,GAAGA,cAAY,GAAG,CAAC,GAAG,UAAU,GAAGA,cAAY,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAClG,OAAO,GAAG,eAAe,WAAW,cAAc,EAAE,CAAC;KACtD;;;;IAED,IAAI,kBAAkB;QACpB,OAAO,IAAI,CAAC,YAAY,KAAK,OAAO;YAChC,IAAI,CAAC,KAAK,CAAC,0BAA0B,GAAG,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC;KAC/E;;;;;IAGD,IAAI,gBAAgB;QAClB,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc;YAClC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa;YAChC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB;SAC5C,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KACtB;;;;;IAGD,IAAI,gBAAgB;QAClB,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc;YAClC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa;YAChC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB;SAC5C,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KACtB;;;;IAkBD,kBAAkB;QAChB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QAC7D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC;KACpC;;;;IAED,WAAW;QACT,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;KACjC;;;;;IAED,WAAW,CAAC,OAAsB;;cAC1B,MAAM,GAAG,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,UAAU;QAEvE,IAAI,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;;kBAC3B,IAAI,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa;YAElE,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,KAAK,EAAE,CAAC;aACd;SACF;KACF;;;;;;IAGD,aAAa,CAAC,IAAO;QACnB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;YACpD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChC;KACF;;;;;;IAGD,4BAA4B,CAAC,cAAiB;QAC5C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;KACxC;;;;;;IAGD,wBAAwB,CAAC,eAAkB;QACzC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;KAC1C;;;;IAED,aAAa;QACX,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;KAC5B;;;;;;;IAGD,eAAe,CAAC,IAAO,EAAE,IAAqC;QAC5D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;KAC1B;;;;;IAGD,kBAAkB;QAChB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,KAAK,OAAO,GAAG,YAAY,GAAG,OAAO,CAAC;KAC5E;;;;;IAGD,gBAAgB;QACd,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,KAAK,OAAO;YAC5C,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACzD,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAC9B,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,KAAK,MAAM,GAAG,CAAC,CAAC,GAAG,CAACA,cAAY,CAAC,CAAC;KAC9E;;;;;IAGD,YAAY;QACV,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,KAAK,OAAO;YAC5C,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;YACxD,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAC9B,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,KAAK,MAAM,GAAG,CAAC,GAAGA,cAAY,CAAC,CAAC;KAC5E;;;;;IAGD,gBAAgB;QACd,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,OAAO,IAAI,CAAC;SACb;QACD,OAAO,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KAC3E;;;;;IAGD,YAAY;QACV,OAAO,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KAC3E;;;;;;;;IAGO,WAAW,CAAC,KAAQ,EAAE,KAAQ;QACpC,IAAI,IAAI,CAAC,YAAY,KAAK,OAAO,EAAE;YACjC,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC;gBACxE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SAC7E;QACD,IAAI,IAAI,CAAC,YAAY,KAAK,MAAM,EAAE;YAChC,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC9E;;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,GAAGA,cAAY,CAAC;YAC9D,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,GAAGA,cAAY,CAAC,CAAC;KACjE;;;;;;IAMO,mBAAmB,CAAC,GAAQ;QAClC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC;KAC/F;;;YAtPF,SAAS,SAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,mkEAA4B;gBAE5B,IAAI,EAAE;oBACJ,OAAO,EAAE,aAAa;iBACvB;gBACD,QAAQ,EAAE,YAAY;gBACtB,eAAe,EAAE,uBAAuB,CAAC,MAAM;;aAChD;;;;YA5BQ,gBAAgB;YAFC,aAAa,uBAsJxB,QAAQ;4CACR,QAAQ,YAAI,MAAM,SAAC,eAAe;YArK/C,iBAAiB;;;sBAiDhB,KAAK;wBAQL,KAAK;uBAGL,KAAK;sBAQL,KAAK;sBAQL,KAAK;yBAQL,KAAK;6BAGL,MAAM;2BAMN,MAAM;4BAMN,MAAM;6BAGN,MAAM;wBAGN,SAAS,SAAC,oBAAoB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;uBAEjD,SAAS,SAAC,mBAAmB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;4BAGhD,SAAS,SAAC,wBAAwB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;;;;;;;IAhEtD,2CAAmC;;;;;IAQnC,uCAA2B;;;;;IAG3B,wCAA8D;;;;;IAQ9D,wCAA4B;;;;;IAQ5B,uCAA2B;;;;;IAQ3B,uCAA2B;;;;;IAG3B,yCAA0C;;;;;IAG1C,6CAA2E;;;;;;IAM3E,2CAAyE;;;;;;IAMzE,4CAA0E;;;;;IAG1E,6CAAiF;;;;;IAGjF,wCAAuF;;;;;IAEvF,uCAAoF;;;;;IAGpF,4CAAmG;;;;;IASnG,iDAA8B;;;;;IAG9B,2CAA8C;;;;;IAyClC,oCAA+B;;;;;IAC/B,2CAAkD;;;;;IAClD,2CAAwE;;;;;;;;ACxKtF;;;;IAiDI,aAAa,GAAG,CAAC;;;;;AAGrB,MAAa,6BAA6B,GACtC,IAAI,cAAc,CAAuB,+BAA+B,CAAC;;;;;;AAG7E,SAAgB,8CAA8C,CAAC,OAAgB;IAE7E;;;IAAO,MAAM,OAAO,CAAC,gBAAgB,CAAC,UAAU,EAAE,EAAC;CACpD;;;;;AAGD,MAAa,sCAAsC,GAAG;IACpD,OAAO,EAAE,6BAA6B;IACtC,IAAI,EAAE,CAAC,OAAO,CAAC;IACf,UAAU,EAAE,8CAA8C;CAC3D;;;;AAED,uCAGC;;;;;;IADC,sDAA4B;;;AAG9B,MAAa,0BAA0B,GACrC,IAAI,cAAc,CAA2B,4BAA4B,CAAC;;;;;;;;;AAmB5E,MAAa,4BAA4B;;;;;;IAKvC,YACS,KAAuB,EACvB,UAAsB,EAAU,OAAe;QAD/C,UAAK,GAAL,KAAK,CAAkB;QACvB,eAAU,GAAV,UAAU,CAAY;QAAU,YAAO,GAAP,OAAO,CAAQ;KAAI;;;;IAE5D,kBAAkB;QAChB,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACzB;;;;;;IAGO,gBAAgB;QACtB,IAAI,CAAC,OAAO,CAAC,iBAAiB;;;QAAC;YAC7B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;;;YAAC;gBAC3D,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,0BAA0B,CAAC,CAAC,KAAK,EAAE,CAAC;aACjF,EAAC,CAAC;SACJ,EAAC,CAAC;KACJ;;;YA9BF,SAAS,SAAC;gBACT,QAAQ,EAAE,uBAAuB;gBACjC,kwBAAgD;gBAEhD,IAAI,EAAE;oBACJ,OAAO,EAAE,uBAAuB;iBACjC;gBACD,QAAQ,EAAE,qBAAqB;gBAC/B,eAAe,EAAE,uBAAuB,CAAC,MAAM;;aAChD;;;;YA5FQ,gBAAgB;YA4BvB,UAAU;YAKV,MAAM;;;wBA+DL,SAAS,SAAC,mBAAmB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;;;;IAFhD,kDAAqC;;IAErC,iDAAoF;;IAGlF,6CAA8B;;IAC9B,kDAA6B;;;;;IAAE,+CAAuB;;;;;;;;;AA0B1D,MAAa,qBAAqB;;;;;;;;;;IAwHhC,YAAoB,QAAiB,EACjB,OAAe,EACf,iBAAmC,EACI,eAAe,EAC1C,YAA8B,EAC9B,IAAoB,EACF,SAAc;QAN5C,aAAQ,GAAR,QAAQ,CAAS;QACjB,YAAO,GAAP,OAAO,CAAQ;QACf,sBAAiB,GAAjB,iBAAiB,CAAkB;QACI,oBAAe,GAAf,eAAe,CAAA;QAC1C,iBAAY,GAAZ,YAAY,CAAkB;QAC9B,SAAI,GAAJ,IAAI,CAAgB;QACF,cAAS,GAAT,SAAS,CAAK;;;;QAhHvD,cAAS,GAAoC,OAAO,CAAC;;;;QAmB9D,oBAAe,GAAoB,IAAI,YAAY,EAAK,CAAC;;;;;QAMtC,iBAAY,GAAoB,IAAI,YAAY,EAAK,CAAC;;;;;QAMtD,kBAAa,GAAoB,IAAI,YAAY,EAAK,CAAC;;;;QAMxD,iBAAY,GAAuB,IAAI,YAAY,EAAQ,CAAC;;;;QAG5D,iBAAY,GAAuB,IAAI,YAAY,EAAQ,CAAC;QAMtE,YAAO,GAAG,KAAK,CAAC;;;;;QAMxB,OAAE,GAAW,iBAAiB,aAAa,EAAE,EAAE,CAAC;QAQxC,mBAAc,GAAa,IAAI,CAAC;;;;QAiChC,8BAAyB,GAAuB,IAAI,CAAC;;;;QAGrD,uBAAkB,GAAG,YAAY,CAAC,KAAK,CAAC;;;;QAQvC,oBAAe,GAAG,IAAI,OAAO,EAAW,CAAC;QAUhD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAMD,4BAA0B,CAAC,aAAa,CAAC,CAAC;SACjD;KACF;;;;;IAjID,IACI,OAAO;;;QAGT,OAAO,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;KACtF;;;;;IACD,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KAChF;;;;;IAOD,IACI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,KAAK,SAAS,IAAI,IAAI,CAAC,gBAAgB;YACxD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;KACvD;;;;;IACD,IAAI,QAAQ,CAAC,KAAc;;cACnB,QAAQ,GAAG,qBAAqB,CAAC,KAAK,CAAC;QAE7C,IAAI,QAAQ,KAAK,IAAI,CAAC,SAAS,EAAE;YAC/B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACrC;KACF;;;;;IA4BD,IACI,MAAM,KAAc,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE;;;;;IAC9C,IAAI,MAAM,CAAC,KAAc,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE;;;;;;IAalE,IAAI,QAAQ,KAAe,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE;;;;;IACxD,IAAI,QAAQ,CAAC,KAAe,IAAI,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,EAAE;;;;;;IAO9D,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC;KAC3D;;;;;;IAMD,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC;KAC3D;;;;;IAGD,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC;KACnE;;;;IAsCD,WAAW;QACT,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;QACtC,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;QAEhC,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;YACzB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;SAChC;KACF;;;;;;;IAMD,MAAM,CAAC,IAAO;;cACN,QAAQ,GAAG,IAAI,CAAC,QAAQ;QAC9B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;YACxD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACjC;KACF;;;;;;;IAMD,UAAU,CAAC,cAAiB;QAC1B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;KACxC;;;;;;;IAMD,WAAW,CAAC,eAAkB;QAC5B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;KAC1C;;;;;;;IAOD,aAAa,CAAC,KAA8B;QAC1C,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,MAAM,KAAK,CAAC,4DAA4D,CAAC,CAAC;SAC3E;QACD,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,kBAAkB;YACnB,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,SAAS;;;;YAAC,CAAC,KAAe,KAAK,IAAI,CAAC,QAAQ,GAAG,KAAK,EAAC,CAAC;KAC9F;;;;;;;IAMD,cAAc,CAAC,MAAsC;QACnD,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,MAAM,KAAK,CAAC,oEAAoE,CAAC,CAAC;SACnF;QACD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;KAC7B;;;;;;IAMD,IAAI;QACF,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjC,OAAO;SACR;QACD,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC1B,MAAM,KAAK,CAAC,6DAA6D,CAAC,CAAC;SAC5E;QACD,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;SAC/D;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;QAEpB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;KAC1B;;;;;;IAMD,KAAK;QACH,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,OAAO;SACR;QAED,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE;YAClD,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;SACzB;QAED,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE;YAC3D,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;SAC/B;;cAEK,aAAa;;;QAAG;;;YAGpB,IAAI,IAAI,CAAC,OAAO,EAAE;gBAChB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;gBACzB,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;aACvC;SACF,CAAA;QAED,IAAI,IAAI,CAAC,yBAAyB;YAChC,OAAO,IAAI,CAAC,yBAAyB,CAAC,KAAK,KAAK,UAAU,EAAE;;;;;;YAM5D,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,CAAC;YACvC,UAAU,CAAC,aAAa,CAAC,CAAC;SAC3B;aAAM;YACL,aAAa,EAAE,CAAC;SACjB;;QAGD,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,CAAC,EAAE;YACzD,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;SAChC;KACF;;;;;;IAGO,YAAY;QAClB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,IAAI,CAAC,eAAe,GAAG,IAAI,eAAe,CAAkC,4BAA4B,EACpC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SAC7F;QAED,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;QAED,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE;YACjC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACtE,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC;;YAGnD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;;;YAAC;gBAC3D,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;aACjC,EAAC,CAAC;SACJ;KACF;;;;;;IAGO,YAAY;;cACZ,aAAa,GAAG,IAAI,aAAa,CAAC;YACtC,gBAAgB,EAAE,IAAI,CAAC,4BAA4B,EAAE;YACrD,WAAW,EAAE,IAAI;YACjB,aAAa,EAAE,iCAAiC;YAChD,SAAS,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK;YAC9C,cAAc,EAAE,IAAI,CAAC,eAAe,EAAE;YACtC,UAAU,EAAE,qBAAqB;SAClC,CAAC;QAEF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAErD,KAAK,CACH,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,EAC9B,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,MAAM;;;;QAAC,KAAK,IAAI,KAAK,CAAC,OAAO,KAAK,MAAM,EAAC,CAAC,CAC/E,CAAC,SAAS;;;QAAC,MAAM,IAAI,CAAC,KAAK,EAAE,EAAC,CAAC;KACjC;;;;;;IAGO,4BAA4B;QAClC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;aAC5B,mBAAmB,CAAC,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,EAAE,CAAC;aACtE,qBAAqB,CAAC,wBAAwB,CAAC;aAC/C,sBAAsB,CAAC,KAAK,CAAC;aAC7B,kBAAkB,CAAC,CAAC,CAAC;aACrB,kBAAkB,EAAE;aACpB,aAAa,CAAC;YACb;gBACE,OAAO,EAAE,OAAO;gBAChB,OAAO,EAAE,QAAQ;gBACjB,QAAQ,EAAE,OAAO;gBACjB,QAAQ,EAAE,KAAK;aAChB;YACD;gBACE,OAAO,EAAE,OAAO;gBAChB,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,OAAO;gBACjB,QAAQ,EAAE,QAAQ;aACnB;YACD;gBACE,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,QAAQ;gBACjB,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,KAAK;aAChB;YACD;gBACE,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,QAAQ;aACnB;SACF,CAAC,CAAC;KACN;;;;;;IAMO,mBAAmB,CAAC,GAAQ;QAClC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC;KAC/F;;;YAjWF,SAAS,SAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,QAAQ,EAAE,EAAE;gBACZ,QAAQ,EAAE,cAAc;gBACxB,eAAe,EAAE,uBAAuB,CAAC,MAAM;aAChD;;;;YA/GC,OAAO;YAmBP,MAAM;YAKN,gBAAgB;4CAmNH,MAAM,SAAC,6BAA6B;YA7M1C,aAAa,uBA8MP,QAAQ;YAhPf,cAAc,uBAiPP,QAAQ;4CACR,QAAQ,YAAI,MAAM,SAAC,QAAQ;;;sBA5HvC,KAAK;wBAYL,KAAK;uBAGL,KAAK;2BAsBL,MAAM;4BAMN,MAAM;yBAGN,KAAK;2BAGL,MAAM,SAAC,QAAQ;2BAGf,MAAM,SAAC,QAAQ;qBAGf,KAAK;;;;;;;IA9CN,yCAA2B;;;;;IAG3B,0CAA8D;;;;;IAgB9D,0CAA2B;;;;;IAG3B,gDAAyD;;;;;;IAMzD,6CAAyE;;;;;;IAMzE,8CAA0E;;;;;IAG1E,2CAAuC;;;;;IAGvC,6CAA8E;;;;;IAG9E,6CAA8E;;;;;IAM9E,wCAAwB;;;;;;IAMxB,mCAAgD;;;;;IAQhD,+CAAwC;;;;;;IAwBxC,0CAA8B;;;;;;IAG9B,gDAA0E;;;;;;IAG1E,mDAAiF;;;;;;IAGjF,0DAA6D;;;;;;IAG7D,mDAAgD;;;;;IAGhD,iDAA0C;;IAE1C,8CAA8C;;;;;IAG9C,gDAAkD;;;;;IAEtC,yCAAyB;;;;;IACzB,wCAAuB;;;;;IACvB,kDAA2C;;;;;IAC3C,gDAA8D;;;;;IAC9D,6CAAkD;;;;;IAClD,qCAAwC;;;;;IACxC,0CAAoD;;;;;;;;;;;;ACrPlE,MAAa,gBAAgB;;;;;;;;;;;IAG3B,OAAO,KAAK,CACV,WAA6B,EAC7B,WAA0B,EAC1B,KAAuB,EACvB,MAAe,EACf,oBAAuC,IAAI;QAC3C;;;QAAO;;kBACC,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,iBAAiB,IAAI,WAAW,CAAC,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC;;kBACtG,KAAK,GAAG,CAAC,WAAW,IAAI,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9D,OAAO,KAAK,GAAG,IAAI,GAAG,EAAC,kBAAkB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC,EAAC,CAAC;SAC7D,EAAC;KACH;;;;;;;;IAGD,OAAO,GAAG,CAAI,WAA6B,EAAE,GAAM;QACjD;;;;QAAO,CAAC,OAAwB;;kBACxB,YAAY,GAAG,kBAAkB,CAAC,WAAW,EAAE,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC5F,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY;gBACzB,WAAW,CAAC,WAAW,CAAC,GAAG,EAAE,YAAY,CAAC,IAAI,CAAC;gBAC/C,IAAI,GAAG,EAAC,gBAAgB,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,YAAY,EAAC,EAAC,CAAC;SACrE,EAAC;KACH;;;;;;;;IAGD,OAAO,GAAG,CAAI,WAA6B,EAAE,GAAM;QACjD;;;;QAAO,CAAC,OAAwB;;kBAC1B,YAAY,GAAG,kBAAkB,CAAC,WAAW,EAAE,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC5F,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY;gBACzB,WAAW,CAAC,WAAW,CAAC,GAAG,EAAE,YAAY,CAAC,IAAI,CAAC;gBAC/C,IAAI,GAAG,EAAC,gBAAgB,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,YAAY,EAAC,EAAC,CAAC;SACnE,EAAC;KACH;;;;;;;;IAGD,OAAO,MAAM,CACT,WAA6B,EAC7B,UAAuC;QAEzC;;;;QAAO,CAAC,OAAwB;;kBACxB,YAAY,GAAG,kBAAkB,CAAC,WAAW,EAAE,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC5F,OAAO,CAAC,UAAU,IAAI,CAAC,YAAY,IAAI,UAAU,CAAC,YAAY,CAAC;gBAC3D,IAAI,GAAG,EAAC,mBAAmB,EAAE,IAAI,EAAC,CAAC;SACxC,EAAC;KACH;CACF;;;;;;;AAED,SAAS,kBAAkB,CAAI,WAA6B,EAAE,GAAQ;IACpE,OAAO,CAAC,WAAW,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC;CACnF;;;;;;;AC1DD;;;;;;;;;AA0CA,MAAa,2BAA2B,GAAQ;IAC9C,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU;;;IAAC,MAAM,oBAAoB,EAAC;IACnD,KAAK,EAAE,IAAI;CACZ;;AAED,MAAa,uBAAuB,GAAQ;IAC1C,OAAO,EAAE,aAAa;IACtB,WAAW,EAAE,UAAU;;;IAAC,MAAM,oBAAoB,EAAC;IACnD,KAAK,EAAE,IAAI;CACZ;;;;;;;AAOD,MAAa,sBAAsB;;;;;IAIjC,YAES,MAA+B,EAE/B,aAA0B;QAF1B,WAAM,GAAN,MAAM,CAAyB;QAE/B,kBAAa,GAAb,aAAa,CAAa;QACjC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;KAChC;CACF;;;;;;IATC,uCAAgB;;;;;IAId,wCAAsC;;;;;IAEtC,+CAAiC;;;;;;AA6BrC,MAAa,oBAAoB;;;;;;;IAiJ/B,YACY,WAAuB,EACZ,YAA8B,EACJ,YAA2B,EACpD,UAAgC;QAH5C,gBAAW,GAAX,WAAW,CAAY;QACZ,iBAAY,GAAZ,YAAY,CAAkB;QACJ,iBAAY,GAAZ,YAAY,CAAe;QACpD,eAAU,GAAV,UAAU,CAAsB;;;;QAjJjD,yBAAoB,GAAG,IAAI,CAAC;QAkE3B,YAAO,GAAY,IAAI,CAAC;;;;QA0Cb,eAAU,GACzB,IAAI,YAAY,EAA6B,CAAC;;;;QAG/B,cAAS,GACxB,IAAI,YAAY,EAA6B,CAAC;;;;QAGlD,iBAAY,GAAG,IAAI,YAAY,EAAY,CAAC;;;;QAG5C,oBAAe,GAAG,IAAI,YAAY,EAAW,CAAC;QAE9C,eAAU;;;QAAG,SAAQ,EAAC;QAEd,iBAAY;;;QAAyB,SAAQ,EAAC;QAE9C,uBAAkB;;;QAAG,SAAQ,EAAC;QAE9B,4BAAuB,GAAG,YAAY,CAAC,KAAK,CAAC;QAE7C,wBAAmB,GAAG,YAAY,CAAC,KAAK,CAAC;QAiB/C,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,0BAA0B,CAAC,aAAa,CAAC,CAAC;SACjD;QACD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,0BAA0B,CAAC,iBAAiB,CAAC,CAAC;SACrD;;QAGD,IAAI,CAAC,mBAAmB,GAAG,YAAY,CAAC,aAAa,CAAC,SAAS;;;QAAC;YAC9D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;SACzB,EAAC,CAAC;KACJ;;;;;;IA1JD,IACI,UAAU,CAAC,KAA+B;QAC5C,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;KAChC;;;;;;IAGO,kBAAkB,CAAC,KAA+B;QACxD,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;SACtC;KACF;;;;;;IAGD,IACI,eAAe,CAAC,KAAkC;QACpD,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC3B;;;;;IAKD,IACI,KAAK,KAAe,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE;;;;;IAC7C,IAAI,KAAK,CAAC,KAAe;QACvB,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC7C,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;;cAClC,OAAO,GAAG,IAAI,CAAC,KAAK;QAC1B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9B,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;YAC/C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC/B;KACF;;;;;IAID,IACI,GAAG,KAAe,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE;;;;;IACzC,IAAI,GAAG,CAAC,KAAe;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QAC3E,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC3B;;;;;IAID,IACI,GAAG,KAAe,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE;;;;;IACzC,IAAI,GAAG,CAAC,KAAe;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QAC3E,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC3B;;;;;IAID,IACI,MAAM,KAAK,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE;;;;;IACrC,IAAI,MAAM,CAAC,KAAU;QACnB,IAAI,CAAC,OAAO,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;;QAE5C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;KACrD;;;;;IAID,IACI,WAAW,KAAK,OAAO,IAAI,CAAC,YAAY,CAAC,EAAE;;;;;IAC/C,IAAI,WAAW,CAAC,KAAwB;QACtC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;;QAE1B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;KACrD;;;;;IAID,IACI,aAAa,KAAK,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE;;;;;IACnD,IAAI,aAAa,CAAC,KAAa;QAC7B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC/B;;;;;IAID,IACI,QAAQ,KAAc,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;;;;;IACpD,IAAI,QAAQ,CAAC,KAAc;;cACnB,QAAQ,GAAG,qBAAqB,CAAC,KAAK,CAAC;QAE7C,IAAI,IAAI,CAAC,SAAS,KAAK,QAAQ,EAAE;YAC/B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACrC;QAED,IAAI,QAAQ,EAAE;;;;YAIZ,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;SACvC;KACF;;;;;;;;IAiCM,MAAM;QACX,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;KACzB;;;;IAoBD,kBAAkB;QAChB,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,uBAAuB;gBACxB,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,SAAS;;;;gBAAC,CAAC,QAAW;oBACrD,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;oBACtB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;oBAC5B,IAAI,CAAC,UAAU,EAAE,CAAC;oBAClB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,sBAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC;oBACtF,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,sBAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC;iBACxF,EAAC,CAAC;SACR;KACF;;;;IAED,WAAW;QACT,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;QACvC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC7B,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;KACjC;;;;;;IAGD,yBAAyB,CAAC,EAAc;QACtC,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;KAC9B;;;;;;IAGD,QAAQ,CAAC,CAAkB;;cACnB,SAAS,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QAC1D,OAAO,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;KACxC;;;;;;;IAOD,4BAA4B;QAC1B,OAAO,IAAI,CAAC,yBAAyB,EAAE,CAAC;KACzC;;;;;;;IAQD,yBAAyB;;;QAGvB,OAAO,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,yBAAyB,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;KACzF;;;;;;IAGD,UAAU,CAAC,KAAQ;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACpB;;;;;;IAGD,gBAAgB,CAAC,EAAwB;QACvC,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;KACxB;;;;;;IAGD,iBAAiB,CAAC,EAAc;QAC9B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;KACtB;;;;;;IAGD,gBAAgB,CAAC,UAAmB;QAClC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;KAC5B;;;;;IAED,UAAU,CAAC,KAAoB;QAC7B,IAAI,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO,KAAK,UAAU,EAAE;YAChD,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YACxB,KAAK,CAAC,cAAc,EAAE,CAAC;SACxB;KACF;;;;;IAED,QAAQ,CAAC,KAAa;;YAChB,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC;QAC9G,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QAEnB,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAClD,IAAI,EACJ,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAC3D,CAAC;SACH;aAAM;YACL,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;SAClC;QAED,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE7B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,sBAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC;KACvF;;;;IAED,SAAS;QACP,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,sBAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC;KACxF;;;;IAED,MAAM;QACJ,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;KACxC;;;;IAED,OAAO;;QAEL,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC/B;QACD,IAAI,CAAC,UAAU,EAAE,CAAC;KACnB;;;;;IAGD,aAAa;QACX,OAAO;YACL,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC;YAC7H,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,GAAG,CAAC;YACjD,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,GAAG,CAAC;YACjD,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC;SAC7D,CAAC;KACH;;;;;;;IAGO,YAAY,CAAC,KAAe;QAClC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,GAAG,KAAK;YAC1C,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;KACpG;;;;;;IAMO,mBAAmB,CAAC,GAAQ;QAClC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC;KAC/F;;;YAjUF,SAAS,SAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,SAAS,EAAE;oBACT,2BAA2B;oBAC3B,uBAAuB;;oBAEvB,EAAE,OAAO,EAAE,uBAAuB,EAAE,WAAW,EAAE,oBAAoB,EAAE;iBACxE;gBACD,IAAI,EAAE;oBACJ,sBAAsB,EAAE,MAAM;oBAC9B,kBAAkB,EAAE,iDAAiD;oBACrE,YAAY,EAAE,0CAA0C;oBACxD,YAAY,EAAE,0CAA0C;oBACxD,YAAY,EAAE,UAAU;oBACxB,SAAS,EAAE,+BAA+B;oBAC1C,UAAU,EAAE,aAAa;oBACzB,QAAQ,EAAE,WAAW;oBACrB,WAAW,EAAE,oBAAoB;iBAClC;gBACD,QAAQ,EAAE,aAAa;aACxB;;;;YAxFC,UAAU;YAqBc,aAAa,uBAuNhC,QAAQ;4CACR,QAAQ,YAAI,MAAM,SAAC,eAAe;YApPhC,oBAAoB,uBAqPtB,QAAQ;;;yBA9IZ,KAAK,SAAC,cAAc;8BAcpB,KAAK,SAAC,mBAAmB;oBASzB,KAAK;kBAeL,KAAK,SAAC,OAAO;kBASb,KAAK,SAAC,OAAO;qBASb,KAAK,SAAC,UAAU;0BAUhB,KAAK,SAAC,eAAe;4BAUrB,KAAK,SAAC,iBAAiB;uBASvB,KAAK;yBAoBL,MAAM;wBAIN,MAAM;;;;;;;IAhHP,oDAAmC;;IAOnC,2CAAsC;;IAgBtC,2CAAyC;;;;;IAezC,sCAAyB;;;;;IASzB,oCAAuB;;;;;IASvB,oCAAuB;;;;;IAUvB,uCAAgC;;;;;IAUhC,4CAAwC;;;;;IASxC,8CAA+B;;;;;IAoB/B,yCAA2B;;;;;IAG3B,0CACkD;;;;;IAGlD,yCACkD;;;;;IAGlD,4CAA4C;;;;;IAG5C,+CAA8C;;IAE9C,0CAAsB;;;;;IAEtB,4CAAsD;;;;;IAEtD,kDAAsC;;;;;IAEtC,uDAAqD;;;;;IAErD,mDAAiD;;;;;IAa7C,2CAA+B;;IAC/B,4CAAiD;;;;;IACjD,4CAAwE;;;;;IACxE,0CAAoD;;;;;;;;;;;;ACrN1D,MAAa,+BAA+B;;;YAJ3C,SAAS,SAAC;gBACT,QAAQ,EAAE,0BAA0B;aACrC;;;;;AAgBD,MAAa,2BAA2B;;;;;;IA8CtC,YAAmB,KAAuB,EAAU,kBAAqC,EAC/B,eAAyC;QADhF,UAAK,GAAL,KAAK,CAAkB;QAAU,uBAAkB,GAAlB,kBAAkB,CAAmB;QAC/B,oBAAe,GAAf,eAAe,CAA0B;QA9C3F,kBAAa,GAAG,YAAY,CAAC,KAAK,CAAC;QAGnC,cAAS,GAAW,CAAC,CAAC;QA4C1B,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,kBAAkB,EAAE;YACnE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC;SAC1D;KACF;;;;;;IAzCH,IACI,UAAU,CAAC,KAA+B;QAC5C,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;KAChC;;;;IACD,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;KACzB;;;;;;IAGO,kBAAkB,CAAC,KAA+B;QACxD,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SACvC;KACF;;;;;IAGD,IACI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,KAAK,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;KACnF;;;;;IACD,IAAI,QAAQ,CAAC,KAAc;QACzB,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;KAC/C;;;;;;IAGD,IACI,QAAQ,CAAC,KAAa;QACxB,IAAI,IAAI,CAAC,SAAS,KAAK,KAAK,EAAE;YAC5B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;SACxB;KACF;;;;IACD,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;;;;IASD,WAAW,CAAC,OAAsB;QAChC,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC3B;KACF;;;;IAED,WAAW;QACT,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;KAClC;;;;IAED,kBAAkB;QAChB,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC3B;;;;;IAED,KAAK,CAAC,KAAY;QAChB,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACrC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;YACvB,KAAK,CAAC,eAAe,EAAE,CAAC;SACzB;KACF;;;;;IAEO,kBAAkB;;cAClB,kBAAkB,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,GAAGE,EAAY,EAAE;;cACvF,aAAa,GAAG,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,gBAAgB;YACrE,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,eAAe,GAAGA,EAAY,EAAE;;cAC/D,iBAAiB,GAAG,IAAI,CAAC,UAAU;YACrC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC;YACjEA,EAAY,EAAE;QAElB,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;QACjC,IAAI,CAAC,aAAa,GAAG,KAAK,CACxB,IAAI,CAAC,KAAK,CAAC,OAAO,EAClB,kBAAkB,EAClB,aAAa,EACb,iBAAiB,CAClB,CAAC,SAAS;;;QAAC,MAAM,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,EAAC,CAAC;KAC3D;;;YArGF,SAAS,SAAC;gBACT,QAAQ,EAAE,sBAAsB;gBAChC,o2CAAqC;gBAErC,IAAI,EAAE;oBACJ,OAAO,EAAE,sBAAsB;oBAC/B,qCAAqC,EAAE,iCAAiC;oBACxE,wCAAwC,EAAE,UAAU;iBACrD;gBACD,QAAQ,EAAE,oBAAoB;gBAC9B,eAAe,EAAE,uBAAuB,CAAC,MAAM;;aAChD;;;;YArBQ,gBAAgB;YAbvB,iBAAiB;4CAkFd,QAAQ,YAAI,MAAM,SAAC,0BAA0B;;;0BAxC/C,YAAY,SAAC,+BAA+B,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;yBAG7D,KAAK,SAAC,KAAK;uBAiBX,KAAK;uBASL,KAAK;;;;;;;IAnCN,oDAA2C;;;;;IAE3C,gDAA2B;;;;;IAC3B,gDAA8B;;;;;IAG9B,kDAA6G;;IAU7G,kDAAsC;;IA6B1B,4CAA8B;;;;;IAAE,yDAA6C;;;;;IACvF,sDAAiG;;;;;;;;AC7FrG,MA6Da,iBAAiB;;;YAxC7B,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,YAAY;oBACZ,aAAa;oBACb,UAAU;oBACV,YAAY;iBACb;gBACD,SAAS,EAAE;;oBAET,uBAAuB;oBACvB,gBAAgB;oBAChB,sCAAsC;iBACvC;gBACD,YAAY,EAAE;oBACZ,oBAAoB;oBACpB,qBAAqB;oBACrB,+BAA+B;oBAC/B,2BAA2B;oBAC3B,4BAA4B;oBAC5B,mBAAmB;oBACnB,uBAAuB;oBACvB,oBAAoB;oBACpB,wBAAwB;oBACxB,mBAAmB;iBACpB;gBACD,OAAO,EAAE;oBACP,oBAAoB;oBACpB,qBAAqB;oBACrB,+BAA+B;oBAC/B,2BAA2B;oBAC3B,mBAAmB;oBACnB,uBAAuB;oBACvB,oBAAoB;oBACpB,wBAAwB;oBACxB,mBAAmB;iBACpB;gBACD,eAAe,EAAE;oBACf,4BAA4B;iBAC7B;aACF;;;;;;;;;;;;;;;;;"}