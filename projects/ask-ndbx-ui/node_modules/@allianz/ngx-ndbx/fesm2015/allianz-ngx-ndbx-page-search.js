import { NxGridModule } from '@allianz/ngx-ndbx/grid';
import { EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Output, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NxAutocompleteModule } from '@allianz/ngx-ndbx/autocomplete';
import { NxFormfieldModule } from '@allianz/ngx-ndbx/formfield';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { NxButtonModule } from '@allianz/ngx-ndbx/button';

/**
 * @fileoverview added by tsickle
 * Generated from: page-search.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxPageSearchComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * An event emitted when the user clicks the search button.
         */
        this.buttonClick = new EventEmitter();
        this._buttonLabel = null;
        this._hideSearchButton = false;
        this._buttonLayout = '12,12,12,2';
        this._contentLayout = null;
    }
    /**
     * Sets the text label of the button.
     * @param {?} value
     * @return {?}
     */
    set buttonLabel(value) {
        if (this._buttonLabel !== value) {
            this._buttonLabel = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get buttonLabel() {
        return this._buttonLabel;
    }
    /**
     * Whether the search button should be hidden.
     * @param {?} value
     * @return {?}
     */
    set hideSearchButton(value) {
        this._hideSearchButton = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get hideSearchButton() {
        return this._hideSearchButton;
    }
    /**
     * Layout of the search button inside of a NxGrid. Default: 12,12,12,2.
     * @param {?} value
     * @return {?}
     */
    set buttonLayout(value) {
        if (this._buttonLayout !== value) {
            this._buttonLayout = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get buttonLayout() {
        return this._buttonLayout;
    }
    /**
     * Layout of the content area inside of a NxGrid. Default: 12,12,12,10 | 12 (if search button is hidden).
     * @param {?} value
     * @return {?}
     */
    set contentLayout(value) {
        if (this._contentLayout !== value) {
            this._contentLayout = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get contentLayout() {
        if (this._contentLayout) {
            return this._contentLayout;
        }
        return !this.hideSearchButton ? '12,12,12,10' : '12';
    }
    /**
     * \@docs-private
     * @return {?}
     */
    onButtonClick() {
        this.buttonClick.emit();
    }
}
NxPageSearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-page-search',
                template: "<div class=\"nx-pagesearch\">\n  <div nxLayout=\"grid\">\n    <div nxRow>\n      <div [nxCol]=\"contentLayout\" class=\"nx-pagesearch--content\">\n        <ng-content></ng-content>\n      </div>\n      <div [nxCol]=\"buttonLayout\" *ngIf=\"!hideSearchButton\" class=\"nx-pagesearch__actions\">\n        <button nxButton=\"primary medium\" (click)=\"onButtonClick()\" type=\"button\">{{buttonLabel}}</button>\n      </div>\n    </div>\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[attr.role]': '"search"'
                },
                styles: [".nx-pagesearch{padding:32px 0;background:#fff;background:var(--page-search-background-color,#fff);box-shadow:0 2px 4px rgba(65,65,65,.5);box-shadow:var(--page-search-box-shadow,0 2px 4px rgba(65,65,65,.5))}.nx-pagesearch ::ng-deep .nx-formfield__wrapper{padding-bottom:0}.nx-pagesearch ::ng-deep .c-input{height:auto;font-size:30px;font-size:var(--page-search-font-size,30px);line-height:36px;line-height:var(--page-search-line-height,36px);font-weight:600;font-weight:var(--page-search-font-weight,600);letter-spacing:.3px;letter-spacing:var(--page-search-letter-spacing,.3px)}.nx-pagesearch ::ng-deep .c-input.is-filled{font-weight:600}.nx-pagesearch ::ng-deep .c-input::-webkit-input-placeholder{font-weight:300}.nx-pagesearch ::ng-deep .c-input::-moz-placeholder{font-weight:300}.nx-pagesearch ::ng-deep .c-input:-ms-input-placeholder{font-weight:300}.nx-pagesearch ::ng-deep .c-input::-ms-input-placeholder{font-weight:300}.nx-pagesearch ::ng-deep .c-input::placeholder{font-weight:300}.nx-pagesearch ::ng-deep .nx-formfield__input-container{align-items:center}.nx-pagesearch ::ng-deep .nx-formfield__prefix,.nx-pagesearch ::ng-deep .nx-formfield__suffix{color:#007ab3;color:var(--page-search-icon-color,#007ab3)}.nx-pagesearch ::ng-deep .nx-formfield__suffix{cursor:pointer}.nx-pagesearch ::ng-deep button{margin:0}.nx-pagesearch ::ng-deep .nx-icon--auto{font-size:24px}.nx-pagesearch .nx-pagesearch__actions{display:flex;align-items:center;margin-top:0}@media (max-width:991px){.nx-pagesearch .nx-pagesearch__actions{margin-top:16px}}"]
            }] }
];
/** @nocollapse */
NxPageSearchComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NxPageSearchComponent.propDecorators = {
    buttonClick: [{ type: Output, args: ['nxButtonClick',] }],
    buttonLabel: [{ type: Input, args: ['nxButtonLabel',] }],
    hideSearchButton: [{ type: Input, args: ['nxHideSearchButton',] }],
    buttonLayout: [{ type: Input, args: ['nxButtonLayout',] }],
    contentLayout: [{ type: Input, args: ['nxContentLayout',] }]
};
if (false) {
    /**
     * An event emitted when the user clicks the search button.
     * @type {?}
     */
    NxPageSearchComponent.prototype.buttonClick;
    /**
     * @type {?}
     * @private
     */
    NxPageSearchComponent.prototype._buttonLabel;
    /**
     * @type {?}
     * @private
     */
    NxPageSearchComponent.prototype._hideSearchButton;
    /**
     * @type {?}
     * @private
     */
    NxPageSearchComponent.prototype._buttonLayout;
    /**
     * @type {?}
     * @private
     */
    NxPageSearchComponent.prototype._contentLayout;
    /**
     * @type {?}
     * @private
     */
    NxPageSearchComponent.prototype._changeDetectorRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: page-search.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxPageSearchModule {
}
NxPageSearchModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    NxAutocompleteModule,
                    NxFormfieldModule,
                    NxButtonModule,
                    NxGridModule
                ],
                declarations: [
                    NxPageSearchComponent
                ],
                exports: [
                    NxPageSearchComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: allianz-ngx-ndbx-page-search.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxPageSearchComponent, NxPageSearchModule };
//# sourceMappingURL=allianz-ngx-ndbx-page-search.js.map
