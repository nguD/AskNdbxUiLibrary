{"version":3,"file":"allianz-ngx-ndbx-message.js","sources":["ng://@allianz/ngx-ndbx/message/message/message.component.ts","ng://@allianz/ngx-ndbx/message/message-toast/message-toast-animations.ts","ng://@allianz/ngx-ndbx/message/message-toast/message-toast-config.ts","ng://@allianz/ngx-ndbx/message/message-toast/message-toast.component.ts","ng://@allianz/ngx-ndbx/message/message.module.ts","ng://@allianz/ngx-ndbx/message/message-toast/message-toast-ref.ts","ng://@allianz/ngx-ndbx/message/message-toast/message-toast.service.ts"],"sourcesContent":["import { ChangeDetectionStrategy, Component, Input, ChangeDetectorRef, Output, EventEmitter } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/** The contextual type of a message. */\nexport type CONTEXT = 'regular' | 'info' | 'error' | 'success' | 'warning';\n\nconst ICONS = {\n  info: 'info-circle',\n  error: 'exclamation-triangle',\n  success: 'check-circle',\n  warning: 'exclamation-circle'\n};\n\n@Component({\n  selector: 'nx-message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'nxMessage',\n  host: {\n    '[class.context-info]': 'context === \"info\"',\n    '[class.context-error]': 'context === \"error\"',\n    '[class.context-success]': 'context === \"success\"',\n    '[class.context-warning]': 'context === \"warning\"',\n    '[class.nx-message--closable]': 'closable'\n\n  }\n})\nexport class NxMessageComponent {\n\n  private _context: CONTEXT = 'regular';\n\n  /**\n   * Sets the context of the message.\n   * The message box will color accordingly. Default: 'regular' */\n  @Input('nxContext')\n  set context(value: CONTEXT) {\n    if (value !== this._context) {\n      this._context = value;\n      this._icon = this.getIconName();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get context(): CONTEXT {\n    return this._context;\n  }\n\n  private _showIcon: boolean = false;\n\n  /**\n   * Whether an icon that belongs to the context of the message should be displayed.\n   *\n   * **Important:** The `showIcon` attribute should always be set to `true` due to deprecation.\n   *\n   * @deprecated The `showIcon` attribute should be always true in future. Messages without an icon are deprecated.\n   * @deletion-target 9.0.0\n   * */\n  @Input()\n  set showIcon(value: boolean) {\n    this._showIcon = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get showIcon(): boolean {\n    return this._showIcon;\n  }\n\n  private _closable: boolean = false;\n\n  /** Whether a message should have a close icon in order to be dismissed. */\n  @Input()\n  set closable(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._closable) {\n      this._closable = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get closable(): boolean {\n    return this._closable;\n  }\n\n  private _icon: string;\n\n  /** @docs-private */\n  get icon(): string {\n    return this._icon;\n  }\n\n  private _closeButtonLabel: string = 'Close dialog';\n\n  /** Sets the label of the close button of the message. */\n  @Input()\n  set closeButtonLabel(value: string) {\n    if (value !== this._closeButtonLabel) {\n      this._closeButtonLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get closeButtonLabel(): string {\n    return this._closeButtonLabel;\n  }\n\n  /** Event emitted when the close icon of the message has been clicked. */\n  @Output('close') closeEvent = new EventEmitter<void>();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) { }\n\n  /** @docs-private */\n  _emitCloseEvent() {\n    this.closeEvent.emit();\n  }\n\n  /** @docs-private */\n  getIconName(): string {\n    if (this._context === 'info') {\n      return ICONS.info;\n    } else if (this._context === 'error') {\n      return ICONS.error;\n    } else if (this._context === 'success') {\n      return ICONS.success;\n    } else if (this._context === 'warning') {\n      return ICONS.warning;\n    }\n    return '';\n  }\n}\n","import {\n  AnimationTriggerMetadata,\n  trigger,\n  state,\n  transition,\n  style,\n  animate,\n} from '@angular/animations';\n\n/**\n * Animations used by the Message Toast.\n * @docs-private\n */\nexport const messageToastAnimations: {\n   toastState: AnimationTriggerMetadata\n} = {\n  toastState: trigger('state', [\n    state('initial, void, hidden', style({ opacity: 0, transform: 'translateY(100%)' })),\n    state('visible', style({ opacity: 1 })),\n    transition('* => visible', animate('300ms cubic-bezier(0, 0, 0.2, 1)',\n      style({ opacity: 1, transform: 'translateY(0)' })\n    )),\n    transition('* => hidden', animate('300ms cubic-bezier(0, 0, 0.2, 1)',\n      style({ opacity: 0, transform: 'translateY(200%)' }))),\n  ])\n};\n\n/** @docs-private */\nexport type NxMessageToastAnimationState = 'void' | 'visible' | 'hidden';\n","\nimport { AriaLivePoliteness } from '@angular/cdk/a11y';\n\n/** The contextual type of a message. */\nexport type NxMessageToastContext = 'info' | 'success';\n\n/**\n * Configuration used when opening a message toast.\n */\nexport class NxMessageToastConfig {\n  /** The politeness level for the LiveAnnouncer announcement.\n   *\n   *  Default value: 'polite'.\n   */\n  politeness?: AriaLivePoliteness = 'polite';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a toast message without a custom\n   * component or template, the announcement message will default to the specified message.\n   *\n   * Default value: ''.\n   */\n  announcementMessage?: string = '';\n\n  /** The length of time in milliseconds to wait before automatically dismissing the message toast.\n   *\n   * Default value: 3000.\n   */\n  duration?: number = 3000;\n\n  /** Context of the message toast.\n   *\n   * Default value: 'info'. */\n  context?: NxMessageToastContext = 'info';\n}\n\n/**\n * @docs-private\n * Needed so that the user text data can be injected in the message toastcomponent\n */\nexport class NxMessageToastData {\n  constructor(public data: string) { }\n}\n","import { Component, OnDestroy, ViewChild, NgZone, ChangeDetectorRef, ComponentRef, EmbeddedViewRef } from '@angular/core';\nimport { messageToastAnimations } from './message-toast-animations';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { NxMessageToastConfig, NxMessageToastData } from './message-toast-config';\nimport { take } from 'rxjs/operators';\nimport { AnimationEvent } from '@angular/animations';\n\nconst ICONS = {\n  info: 'info-circle',\n  success: 'check-circle',\n};\n\n/**\n * Internal component that wraps user-provided message toastcontent.\n * @docs-private\n */\n@Component({\n  selector: 'nx-message-toast',\n  templateUrl: './message-toast.component.html',\n  styleUrls: ['./message-toast.component.scss'],\n  host: {\n    '[attr.role]': '_role',\n    '[class.context-info]': '_context === \"info\"',\n    '[class.context-success]': '_context === \"success\"',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [messageToastAnimations.toastState]\n})\nexport class NxMessageToastComponent extends BasePortalOutlet implements OnDestroy {\n\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the message toastcontent will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the message toasthas exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the message toasthas finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the message toastanimations. */\n  _animationState = 'void';\n\n  /** ARIA role for the message toastcontainer. */\n  _role: 'alert' | 'status' | null;\n\n  _context;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The message toastconfiguration. */\n    public config: NxMessageToastConfig,\n    /** Injected data into the notifciation. */\n    public data?: NxMessageToastData\n  ) {\n    super();\n\n    this._context = this.config.context;\n    this._setAriaLabels();\n  }\n\n  /** Attach a component portal as content to this message toastcontainer. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this message toastcontainer. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the notification. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of message toastentrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the message toastexiting from view. */\n  exit() {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple notifications are opened in quick succession (e.g. two consecutive calls to\n    // `NxMessageToastService.open`).\n    this._animationState = 'hidden';\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach message toastcontent after content is already attached');\n    }\n  }\n\n  _getIconName(): string {\n    return this._context === 'success' ? ICONS.success : ICONS.info;\n  }\n\n  _setAriaLabels() {\n     // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (this.config.politeness === 'assertive' && !this.config.announcementMessage) {\n      this._role = 'alert';\n    } else if (this.config.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxMessageComponent } from './message/message.component';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { NxMessageToastComponent } from './message-toast/message-toast.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxIconModule,\n    OverlayModule,\n    PortalModule\n  ],\n  declarations: [\n    NxMessageComponent,\n    NxMessageToastComponent\n  ],\n  exports: [\n    NxMessageComponent\n  ],\n  entryComponents: [\n    NxMessageToastComponent\n  ]\n})\nexport class NxMessageModule {\n}\n","import { OverlayRef } from '@angular/cdk/overlay';\nimport { Subject, Observable } from 'rxjs';\nimport { NxMessageToastComponent } from './message-toast.component';\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n\nexport class NxMessageToastRef {\n\n  /**\n   * The instance of the component making up the content of the message toast.\n   * @docs-private\n   */\n  toastInstance: NxMessageToastComponent;\n\n  /** Subject for notifying the user that the message toasthas been dismissed. */\n  private readonly _afterDismissed = new Subject<any>();\n\n  /** Subject for notifying the user that the message toasthas opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the message toastis\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: any;\n\n  constructor(toastInstance: NxMessageToastComponent,\n              private _overlayRef: OverlayRef) {\n    this.toastInstance = toastInstance;\n    toastInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the message toast. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.toastInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Dismisses the message toastafter some duration */\n  _dismissAfter(duration: number): void {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n\n  /** Marks the message toastas opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    this._afterDismissed.next();\n    this._afterDismissed.complete();\n  }\n\n  /** Gets an observable that is notified when the message toastis finished closing. */\n  afterDismissed(): Observable<any> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the message toasthas opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.toastInstance._onEnter;\n  }\n}\n","import { Injectable, Injector, ComponentRef, TemplateRef, InjectionToken, Inject, Optional, SkipSelf, OnDestroy } from '@angular/core';\nimport { Overlay, OverlayRef, OverlayConfig } from '@angular/cdk/overlay';\nimport { ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { NxMessageToastComponent } from './message-toast.component';\nimport { NxMessageToastConfig, NxMessageToastData } from './message-toast-config';\nimport { NxMessageToastRef } from './message-toast-ref';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { NxMessageModule } from '../message.module';\n\n/** Injection token that can be used to specify default message toast. */\nexport const NX_MESSAGE_TOAST_DEFAULT_CONFIG =\n  new InjectionToken<NxMessageToastConfig>('NX_MESSAGE_TOAST_DEFAULT_CONFIG');\n\n/** A service for dispatching and displaying toast messages. */\n@Injectable({ providedIn: NxMessageModule })\nexport class NxMessageToastService implements OnDestroy {\n\n/**\n * Reference to the current message toast in the view *at this level* (in the Angular injector tree).\n * If there is a parent message toast service, all operations should delegate to that parent\n * via `_oldToastMessageRef`.\n */\n  private _toastRefAtThisLevel: NxMessageToastRef | null = null;\n\n  /** Reference to the currently opened message toastat *any* level. */\n  get _oldToastMessageRef(): NxMessageToastRef | null {\n    const parent = this._parentMessageToastService;\n    return parent ? parent._oldToastMessageRef : this._toastRefAtThisLevel;\n  }\n\n  set _oldToastMessageRef(value: NxMessageToastRef | null) {\n    if (this._parentMessageToastService) {\n      this._parentMessageToastService._oldToastMessageRef = value;\n    } else {\n      this._toastRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n    private _overlay: Overlay,\n    private _injector: Injector,\n    private _live: LiveAnnouncer,\n    @Optional() @SkipSelf() private _parentMessageToastService: NxMessageToastService,\n    @Optional() @Inject(NX_MESSAGE_TOAST_DEFAULT_CONFIG) private _defaultConfig: NxMessageToastConfig) { }\n\n  /** Creates and dispatches a message toastwith a custom text.\n   *\n   * @param text Text to be used for the message toast.\n   * @param config Extra configuration for the message toast.\n  */\n  open(text: string, config?: NxMessageToastConfig): NxMessageToastRef {\n    const currentConfig = { ...new NxMessageToastConfig(), ...this._defaultConfig, ...config };\n    const overlayRef = this._createOverlay(currentConfig);\n    const injector = this._createInjector(currentConfig, new NxMessageToastData(text), this._injector);\n\n    const componentPortal = new ComponentPortal(NxMessageToastComponent, undefined, injector);\n    const componentRef = overlayRef.attach(componentPortal);\n    const toastRef = new NxMessageToastRef(componentRef.instance, overlayRef);\n\n    this._animateToast(toastRef, currentConfig);\n    this._oldToastMessageRef = toastRef;\n    return this._oldToastMessageRef;\n  }\n\n  /** Creates and dispatches a message toastwith a custom template for the content.\n   *\n   * @param template Template to be used for the message toast.\n   * @param config Extra configuration for the message toast.\n  */\n  openFromTemplate(template: TemplateRef<any>, config?: NxMessageToastConfig): NxMessageToastRef {\n    const currentConfig = { ...new NxMessageToastConfig(), ...this._defaultConfig, ...config };\n    const overlayRef = this._createOverlay(currentConfig);\n    const container = this._attachToastComponent(overlayRef, currentConfig);\n    const toastRef = new NxMessageToastRef(container, overlayRef);\n    const portal = new TemplatePortal(template, null!, toastRef);\n\n    container.attachTemplatePortal(portal);\n    this._animateToast(toastRef, currentConfig);\n    this._oldToastMessageRef = toastRef;\n    return this._oldToastMessageRef;\n  }\n\n  // Attaches the message toastcontainer component to the overlay.\n  private _attachToastComponent(overlayRef: OverlayRef, config: NxMessageToastConfig): NxMessageToastComponent {\n    const injector = this._createInjector(config, null, this._injector);\n    const containerPortal = new ComponentPortal(NxMessageToastComponent, null, injector);\n    const containerRef: ComponentRef<NxMessageToastComponent> = overlayRef.attach(containerPortal);\n    containerRef.instance.config = config;\n\n    return containerRef.instance;\n  }\n\n  // Creates a new overlay and places it in the correct place.\n  private _createOverlay(config: NxMessageToastConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    const positionStrategy = this._overlay.position().global();\n\n    positionStrategy.bottom('0');\n    positionStrategy.centerHorizontally();\n    overlayConfig.positionStrategy = positionStrategy;\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /** Animates the old message toastout and the new one in. */\n  private _animateToast(toastRef: NxMessageToastRef, config: NxMessageToastConfig) {\n    // When the message toastis dismissed, clear the reference to it.\n    toastRef.afterDismissed().subscribe(() => {\n      // Clear the message toastref if it hasn't already been replaced by a newer message toast.\n      if (this._oldToastMessageRef === toastRef) {\n        this._oldToastMessageRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._oldToastMessageRef) {\n      // If a message toastis opened, dismiss it and enter the\n      // new message toastafter exit animation is complete.\n      this._oldToastMessageRef.afterDismissed().subscribe(() => {\n        toastRef.toastInstance.enter();\n    });\n      this._oldToastMessageRef.dismiss();\n\n    } else {\n      // If no message toastis in view, enter the message toast.\n      toastRef.toastInstance.enter();\n    }\n\n    // If a message toastduration is provided, set up dismiss based on after the message toastis opened.\n    if (config.duration && config.duration > 0) {\n      toastRef.afterOpened().subscribe(() => toastRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  private _createInjector(config: NxMessageToastConfig, data: NxMessageToastData, injector: Injector): PortalInjector {\n    const tokens = new WeakMap();\n    tokens.set(NxMessageToastConfig, config);\n    tokens.set(NxMessageToastData, data);\n\n    return new PortalInjector(injector, tokens);\n  }\n\n  /**\n   * Dismisses the currently visible message toast.\n   */\n  dismiss(): void {\n    if (this._oldToastMessageRef) {\n      this._oldToastMessageRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._toastRefAtThisLevel) {\n      this._toastRefAtThisLevel.dismiss();\n    }\n  }\n}\n"],"names":["ICONS"],"mappings":"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"}