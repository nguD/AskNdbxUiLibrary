{"version":3,"file":"allianz-ngx-ndbx-utils.js","sources":["ng://@allianz/ngx-ndbx/utils/utils.ts"],"sourcesContent":["import { ElementRef, Injectable } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nexport function isString(value: any) {\n  return typeof value === 'string';\n}\n\nexport function pad(str: string, length: number = 2, padCharacter: string = '0'): string {\n    if (!isString(str) || str.length >= length) {\n      return str;\n    }\n    while (str.length < length) {\n      str = padCharacter + str;\n    }\n    return str;\n  }\n\n// DATE -> YYYY-MM-DD\nexport function formatDate(date: Date) {\n    const dateOfBirth =  [\n        String (date.getFullYear()),\n        pad(String(date.getMonth() + 1)),\n        pad(String(date.getDate()))\n      ].join('-');\n\n    return dateOfBirth;\n}\nexport function formatDateHuman(date: Date) {\n    const dateOfBirth =  [\n        pad(String(date.getDate())),\n        pad(String(date.getMonth() + 1)),\n        String (date.getFullYear())\n      ].join('-');\n\n    return dateOfBirth;\n}\n/*\n  Purpose of this function is to allow a list of short keywords\n  expand to longer bem class names with will then be applied to the classname value.\n\n  This function will map a list of keys to values in a MAPPING list.\n  Whatever value is found will replace the keyword.\n  Every keyword not found will just transfered wiithmout modifying.\n*/\n\nexport function mapClassNames(value, DEFAULTS = [], MAPPING = {}) {\n  let sanitizedList = [ ...DEFAULTS ];\n\n  if (typeof value === 'string') {\n    const mappedClasses = getClassNameList(value, MAPPING);\n    sanitizedList = [...sanitizedList, ...mappedClasses];\n  }\n\n  return sanitizedList.join(' ').trim();\n}\n\nexport function getClassNameList(value, MAPPING = {}) {\n  let mappedClasses = [];\n\n  if (typeof value === 'string') {\n    const classNames = value.split(' ');\n    const keys = Object.keys(MAPPING);\n\n    mappedClasses = classNames.map(className => {\n      if (keys.indexOf(className) > -1) {\n        return MAPPING[className];\n      } else {\n        return className;\n      }\n    });\n  }\n\n  return mappedClasses;\n}\n\nexport function appendClasses(renderer: Renderer2, element: ElementRef, classes: string) {\n  if (renderer && element && classes) {\n    classes.split(' ').forEach(item => {\n      renderer.addClass(element.nativeElement, item);\n    });\n  }\n}\n\nexport function removeClasses(renderer: Renderer2, element: ElementRef, classes: string) {\n  if (renderer && element && classes) {\n    classes.split(' ').forEach(item => {\n      renderer.removeClass(element.nativeElement, item);\n    });\n  }\n}\n\n// YYYY-MM-DD -> DATE\nexport function parseDate(dateString) {\n  return new Date(dateString);\n}\n\n// Manually compose a font shorthand defintion as it's not\n// guaranteed to be given by the computed style object.\nexport function getFontShorthand(style: CSSStyleDeclaration) {\n  const {\n    font, fontStyle, fontVariant, fontWeight, fontSize, lineHeight, fontFamily\n  } = style;\n\n  if (font.length > 0) {\n    return font;\n  }\n\n  return `${fontStyle} ${fontVariant} ${fontWeight} ${fontSize}/${lineHeight} ${fontFamily}`;\n}\n\nexport function numberOfDecimals(number) {\n  const parsed = Number(number);\n  if (Number.isNaN(parsed) || Number.isInteger(parsed)) {\n    return 0;\n  }\n  const match = (parsed.toString()).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n  if (!match[1]) {\n      return 0;\n  }\n  return match[1].length;\n}\n\nexport function clamp(value: number, min = 0, max = 1) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/** Provider that defines when form controls have an error. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n"],"names":[],"mappings":"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"}