{"version":3,"file":"allianz-ngx-ndbx-menu.js","sources":["ng://@allianz/ngx-ndbx/menu/menu.component.ts","ng://@allianz/ngx-ndbx/menu/menu-link.directive.ts","ng://@allianz/ngx-ndbx/menu/menu-item.directive.ts","ng://@allianz/ngx-ndbx/menu/menu-button.component.ts","ng://@allianz/ngx-ndbx/menu/menu.module.ts"],"sourcesContent":["import { Component, ChangeDetectionStrategy, ChangeDetectorRef, Input } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/**\n  This components is a collapsible menu for usage on smaller devices.\n  Can contain any content, but usually [nxMenuLink], [nxMenuGroup] and [nxAction].\n*/\n@Component({\n  selector: 'nx-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[attr.aria-expanded]': 'open'\n  }\n})\nexport class NxMenuComponent {\n  private _open: boolean = false;\n\n  /** Whether the menu is open or closed. */\n  @Input()\n  set open(value: boolean) {\n    const open = coerceBooleanProperty(value);\n    if (open !== this._open) {\n      this._open = open;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get open(): boolean {\n    return this._open;\n  }\n\n  /* Toggles the open state of the menu. */\n  toggle() {\n    this.open = !this.open;\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n}\n","import { Directive } from '@angular/core';\n\n/**\n  This is a menu link.\n  It adds styling to a link and is usually used within a [nxMenuItem].\n */\n@Directive({\n  selector: 'a[nxMenuLink]',\n  host: {\n    class: 'nx-menu__link'\n  }\n})\nexport class NxMenuLinkDirective {}\n","import { Directive, Input } from '@angular/core';\n\n/**\n  This is a menu item is used to structure content whithin a menu.\n */\n@Directive({\n  selector: '[nxMenuItem]',\n  host: {\n    class: 'nx-menu__item',\n    '[class.nx-menu__item--small]': 'size === \"s\"',\n    '[class.nx-menu__item--large]': 'size === \"l\"'\n  }\n})\nexport class NxMenuItemDirective {\n  @Input('nxMenuItem')\n  set size(value: string) {\n    this._size = value === 'l' ? 'l' : 's';\n  }\n  get size(): string {\n    return this._size;\n  }\n  private _size: string = 's';\n}\n","import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, Attribute, Directive } from '@angular/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\n\nexport type NxMenuButtonType = 'root' | 'nested';\n\n/**\n * @title MenuButton\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: '[nxMenuButton]',\n  templateUrl: 'menu-button.component.html',\n  styleUrls: ['menu-button.component.scss'],\n  host: {\n    '[class.is-expanded]': 'expandable && expanded',\n    '[class.is-expandable]': 'expandable',\n    '[class.nx-menu-button--nested]': 'type === \"nested\"',\n    '[class.nx-menu-button--root]': 'type === \"root\"',\n    'class': 'nx-menu-button'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxMenuButtonComponent {\n  /** Whether this menu button is expandable or not. Will add a caret icon. */\n  @Input()\n  set expandable(value: boolean) {\n    this._expandable = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get expandable(): boolean {\n    return this._expandable;\n  }\n  private _expandable: boolean = false;\n\n  /**\n   * Whether this menu button is expanded or not.\n   * Only works in combination with the `expandable` option set to `true`.\n   */\n  @Input()\n  set expanded(value: boolean) {\n    this._expanded = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get expanded() {\n    return this._expanded;\n  }\n  private _expanded: boolean = false;\n\n  /**\n   * The type of this menu button.\n   * Can be `primary` or `secondary`, defaults to `primary`.\n   */\n  @Input('nxType')\n  set type(value: NxMenuButtonType) {\n    if (value === 'root' || value === 'nested') {\n      this._type = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get type(): NxMenuButtonType {\n    return this._type;\n  }\n  private _type: NxMenuButtonType = 'root';\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n}\n\n/**\n * Icon that can be added to a [nxButton].\n */\n@Directive({\n  selector: '[nxMenuButtonIcon]',\n  host: {\n    class: 'nx-menu-button__icon'\n  }\n})\nexport class NxMenuButtonIconDirective {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NxMenuComponent } from './menu.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxMenuLinkDirective } from './menu-link.directive';\nimport { NxMenuItemDirective } from './menu-item.directive';\nimport { NxMenuButtonComponent, NxMenuButtonIconDirective } from './menu-button.component';\n\nconst EXPORTED_MODULES = [\n  NxMenuComponent,\n  NxMenuLinkDirective,\n  NxMenuItemDirective,\n  NxMenuButtonComponent,\n  NxMenuButtonIconDirective,\n];\n\n@NgModule({\n  imports: [ CommonModule, NxIconModule ],\n  declarations: EXPORTED_MODULES,\n  exports: EXPORTED_MODULES\n})\nexport class NxMenuModule { }\n"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;AAgBA,MAAa,eAAe;;;;IAsB1B,YAAoB,kBAAqC;QAArC,uBAAkB,GAAlB,kBAAkB,CAAmB;QArBjD,UAAK,GAAY,KAAK,CAAC;KAqB8B;;;;;;IAlB7D,IACI,IAAI,CAAC,KAAc;;cACf,IAAI,GAAG,qBAAqB,CAAC,KAAK,CAAC;QACzC,IAAI,IAAI,KAAK,IAAI,CAAC,KAAK,EAAE;YACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;SACxC;KACF;;;;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;KACnB;;;;;IAGD,MAAM;QACJ,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;KACxB;;;YA7BF,SAAS,SAAC;gBACT,QAAQ,EAAE,SAAS;gBACnB,kGAAwB;gBAExB,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,IAAI,EAAE;oBACJ,sBAAsB,EAAE,MAAM;iBAC/B;;aACF;;;;YAf4C,iBAAiB;;;mBAoB3D,KAAK;;;;;;;IAHN,gCAA+B;;;;;IAqBnB,6CAA6C;;;;;;;;ACtC3D;;;;AAYA,MAAa,mBAAmB;;;YAN/B,SAAS,SAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,IAAI,EAAE;oBACJ,KAAK,EAAE,eAAe;iBACvB;aACF;;;;;;;;ACXD;;;AAaA,MAAa,mBAAmB;IARhC;QAgBU,UAAK,GAAW,GAAG,CAAC;KAC7B;;;;;IARC,IACI,IAAI,CAAC,KAAa;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;KACxC;;;;IACD,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;KACnB;;;YAfF,SAAS,SAAC;gBACT,QAAQ,EAAE,cAAc;gBACxB,IAAI,EAAE;oBACJ,KAAK,EAAE,eAAe;oBACtB,8BAA8B,EAAE,cAAc;oBAC9C,8BAA8B,EAAE,cAAc;iBAC/C;aACF;;;mBAEE,KAAK,SAAC,YAAY;;;;;;;IAOnB,oCAA4B;;;;;;;;ACrB9B;;;AAsBA,MAAa,qBAAqB;;;;IA0ChC,YAAoB,kBAAqC;QAArC,uBAAkB,GAAlB,kBAAkB,CAAmB;QAhCjD,gBAAW,GAAY,KAAK,CAAC;QAc7B,cAAS,GAAY,KAAK,CAAC;QAgB3B,UAAK,GAAqB,MAAM,CAAC;KAEoB;;;;;;IAxC7D,IACI,UAAU,CAAC,KAAc;QAC3B,IAAI,CAAC,WAAW,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAChD,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;KACxC;;;;IACD,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;KACzB;;;;;;;IAOD,IACI,QAAQ,CAAC,KAAc;QACzB,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;KACxC;;;;IACD,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;;;;;;IAOD,IACI,IAAI,CAAC,KAAuB;QAC9B,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,QAAQ,EAAE;YAC1C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;SACxC;KACF;;;;IACD,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;KACnB;;;YArDF,SAAS,SAAC;;gBAET,QAAQ,EAAE,gBAAgB;gBAC1B,yPAAyC;gBAEzC,IAAI,EAAE;oBACJ,qBAAqB,EAAE,wBAAwB;oBAC/C,uBAAuB,EAAE,YAAY;oBACrC,gCAAgC,EAAE,mBAAmB;oBACrD,8BAA8B,EAAE,iBAAiB;oBACjD,OAAO,EAAE,gBAAgB;iBAC1B;gBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;;aAChD;;;;YArBmD,iBAAiB;;;yBAwBlE,KAAK;uBAcL,KAAK;mBAcL,KAAK,SAAC,QAAQ;;;;;;;IApBf,4CAAqC;;;;;IAcrC,0CAAmC;;;;;IAgBnC,sCAAyC;;;;;IAE7B,mDAA6C;;;;;AAY3D,MAAa,yBAAyB;;;YANrC,SAAS,SAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,IAAI,EAAE;oBACJ,KAAK,EAAE,sBAAsB;iBAC9B;aACF;;;;;;;;AC3ED;MAQM,gBAAgB,GAAG;IACvB,eAAe;IACf,mBAAmB;IACnB,mBAAmB;IACnB,qBAAqB;IACrB,yBAAyB;CAC1B;AAOD,MAAa,YAAY;;;YALxB,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAE,YAAY,EAAE,YAAY,CAAE;gBACvC,YAAY,EAAE,gBAAgB;gBAC9B,OAAO,EAAE,gBAAgB;aAC1B;;;;;;;;;;;;;;;;;"}