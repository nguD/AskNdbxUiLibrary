import { EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Attribute, Input, Output, NgModule, forwardRef, Self, Optional, ContentChildren } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { CommonModule } from '@angular/common';
import { Subject } from 'rxjs';
import { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';
import { NgControl, NgForm, FormGroupDirective } from '@angular/forms';
import { NxErrorComponent, NxErrorModule } from '@allianz/ngx-ndbx/base';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';

/**
 * @fileoverview added by tsickle
 * Generated from: card.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxCardComponent {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} tabindex
     */
    constructor(_changeDetectorRef, tabindex) {
        this._changeDetectorRef = _changeDetectorRef;
        this._disabled = false;
        /**
         * Event emitted when the selected value has changed.
         *
         * This output  property of the card is deprecated,
         * as its selectable properties are deprecated as well.
         * Please use the selectable card component instead.
         *
         * @deprecated
         * \@deletion-target 10.0.0
         */
        this.selectedChange = new EventEmitter();
        this._tabindex = tabindex;
    }
    /**
     * Whether this card is selectable or not.
     *
     * The selectable property of the card is deprecated.
     * Please use the selectable card component instead.
     *
     * @deprecated
     * \@deletion-target 10.0.0
     * @param {?} value
     * @return {?}
     */
    set selectable(value) {
        this._selectable = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get selectable() {
        return this._selectable;
    }
    /**
     * Whether this card is selected or not.
     *
     * The selected property of the card is deprecated.
     * Please use the selectable card component instead.
     *
     * @deprecated
     * \@deletion-target 10.0.0
     * @param {?} value
     * @return {?}
     */
    set selected(value) {
        this._selected = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * Whether a selectable card is disabled or not.
     *
     * The disabled property of the card will be deprecated,
     * as its selectable properties are deprecated as well.
     * Please use the selectable card component instead.
     *
     * @deprecated
     * \@deletion-target 10.0.0
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @return {?}
     */
    _toggleSelected() {
        if (this.selectable && !this.disabled) {
            this.selected = !this.selected;
            this.selectedChange.emit(this.selected);
        }
    }
    /**
     * @return {?}
     */
    _getTabindex() {
        if (this.disabled) {
            return '-1';
        }
        if (this.selectable) {
            return this._tabindex || '0';
        }
        return this._tabindex || '';
    }
}
NxCardComponent.decorators = [
    { type: Component, args: [{
                template: '<ng-content></ng-content>',
                selector: 'nx-card',
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    'class': 'nx-card',
                    '[class.is-selectable]': 'selectable',
                    '[class.is-selected]': 'selected',
                    '[class.is-disabled]': 'disabled',
                    '[attr.aria-disabled]': 'disabled',
                    '(click)': '_toggleSelected()',
                    '(keydown.enter)': '_toggleSelected()',
                    '[attr.tabindex]': '_getTabindex()'
                },
                styles: [":host{background:#fff;background:var(--card-background-color,#fff);border-color:var(--card-border-color,#d9d9d9);border-width:var(--card-border-width,1px);border-radius:4px;border-radius:var(--card-border-radius,4px);box-shadow:none;display:inline-block;margin-bottom:24px;padding:23px;transition:background-color .2s,box-shadow .2s;border:1px solid #d9d9d9}:host:focus,:host:hover{outline:0}:host.is-selectable{cursor:pointer}:host.is-selectable:hover{background:#f5f5f5;background:var(--card-background-hover-color,#f5f5f5)}:host.is-selected{box-shadow:0 8px 24px rgba(65,65,65,.35);background:#f5f5f5;background:var(--card-background-selected-color,#f5f5f5)}:host.is-disabled{cursor:not-allowed;opacity:.4}:host.is-disabled:hover{background:#fff;background:var(--card-background-color,#fff)}:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}:host.is-selectable{border-color:buttonText}:host.is-selected{border-width:3px;padding:21px;border-color:highlight}:host.is-disabled{opacity:1;border-color:GrayText;color:GrayText}}"]
            }] }
];
/** @nocollapse */
NxCardComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }
];
NxCardComponent.propDecorators = {
    selectable: [{ type: Input }],
    selected: [{ type: Input }],
    disabled: [{ type: Input }],
    selectedChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    NxCardComponent.prototype._tabindex;
    /**
     * @type {?}
     * @private
     */
    NxCardComponent.prototype._selectable;
    /**
     * @type {?}
     * @private
     */
    NxCardComponent.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    NxCardComponent.prototype._disabled;
    /**
     * Event emitted when the selected value has changed.
     *
     * This output  property of the card is deprecated,
     * as its selectable properties are deprecated as well.
     * Please use the selectable card component instead.
     *
     * @deprecated
     * \@deletion-target 10.0.0
     * @type {?}
     */
    NxCardComponent.prototype.selectedChange;
    /**
     * @type {?}
     * @private
     */
    NxCardComponent.prototype._changeDetectorRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: card.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxCardModule {
}
NxCardModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NxCardComponent],
                exports: [NxCardComponent],
                imports: [
                    CommonModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: selectable-card.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docs-private
 * @abstract
 */
class SelectableCard {
}
if (false) {
    /** @type {?} */
    SelectableCard.prototype.id;
    /** @type {?} */
    SelectableCard.prototype.value;
    /** @type {?} */
    SelectableCard.prototype.checked;
    /** @type {?} */
    SelectableCard.prototype.name;
    /** @type {?} */
    SelectableCard.prototype.negative;
    /** @type {?} */
    SelectableCard.prototype.disabled;
    /** @type {?} */
    SelectableCard.prototype.checkedChange;
    /** @type {?} */
    SelectableCard.prototype.selectionChange;
}

/**
 * @fileoverview added by tsickle
 * Generated from: selectable-card-change-event.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxSelectableCardChangeEvent {
    /**
     * @param {?} checked
     * @param {?} value
     * @param {?} card
     */
    constructor(checked, value, card) {
        this.checked = checked;
        this.value = value;
        this.card = card;
    }
}
if (false) {
    /**
     * The checked value of the selectable card.
     * @type {?}
     */
    NxSelectableCardChangeEvent.prototype.checked;
    /**
     * The value of the selectable card.
     * @type {?}
     */
    NxSelectableCardChangeEvent.prototype.value;
    /**
     * The component instance of the selectable card which emitted the change event.
     * @type {?}
     */
    NxSelectableCardChangeEvent.prototype.card;
}

/**
 * @fileoverview added by tsickle
 * Generated from: selectable-card.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let nextId = 0;
class NxSelectableCardComponent extends SelectableCard {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} _errorStateMatcher
     * @param {?} ngControl
     * @param {?} _parentForm
     * @param {?} _parentFormGroup
     */
    constructor(_changeDetectorRef, _errorStateMatcher, ngControl, _parentForm, _parentFormGroup) {
        super();
        this._changeDetectorRef = _changeDetectorRef;
        this._errorStateMatcher = _errorStateMatcher;
        this.ngControl = ngControl;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this._id = (nextId++).toString();
        this._checked = false;
        this._disabled = false;
        this._negative = false;
        this._tabindex = '0';
        /**
         * \@docs-private
         */
        this._errorListIds = '';
        /**
         * \@docs-private
         */
        this.errorState = false;
        /**
         * \@docs-private
         */
        this.stateChanges = new Subject();
        /**
         * An event is dispatched each time the selectable card value is changed
         */
        this.selectionChange = new EventEmitter();
        /**
         * An event is dispatched each time the selectable card value is changed
         */
        this.checkedChange = new EventEmitter();
        /**
         * \@docs-private
         */
        this.onChangeCallback = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
        this.onTouchedCallback = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    /**
     * Id of the selectable card.
     *
     * If not set, the selectable card gets an incremented value by default.
     * @param {?} value
     * @return {?}
     */
    set id(value) {
        if (value !== this._id) {
            this._id = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get id() {
        return `nx-selectable-card-${this._id}`;
    }
    /**
     * Whether the selectable card  is checked.
     * @param {?} value
     * @return {?}
     */
    set checked(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._checked) {
            this._checked = newValue;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get checked() {
        return this._checked;
    }
    /**
     * The value attribute of the native input element
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        if (value) {
            this._value = value;
        }
        this._changeDetectorRef.markForCheck();
    }
    /**
     * Whether the selectable card is disabled.
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._disabled) {
            this._disabled = newValue;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled || null;
    }
    /**
     * Whether the selectable card is negative.
     * @param {?} value
     * @return {?}
     */
    set negative(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._negative) {
            this._negative = newValue;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get negative() {
        return this._negative || null;
    }
    /**
     * Whether the selectable card is required.
     * @return {?}
     */
    get required() {
        return this._required;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set required(value) {
        this._required = coerceBooleanProperty(value);
    }
    /**
     * Name of the selectable card.
     * @return {?}
     */
    get name() {
        return this._name;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set name(value) {
        this._name = value;
    }
    /**
     * The tabIndex of the element
     * @return {?}
     */
    get tabindex() {
        if (this.disabled) {
            return '-1';
        }
        return this._tabindex;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set tabindex(value) {
        this._tabindex = value;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._errorList.changes.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            this._errorListIds = value.map((/**
             * @param {?} errorItem
             * @return {?}
             */
            (errorItem) => {
                return errorItem.id;
            })).join(' ');
            this._changeDetectorRef.markForCheck();
        }));
        this._errorListIds = this._errorList.map((/**
         * @param {?} errorItem
         * @return {?}
         */
        (errorItem) => {
            return errorItem.id;
        })).join(' ');
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} onTouched
     * @return {?}
     */
    registerOnTouched(onTouched) {
        this.onTouchedCallback = onTouched;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.checked = !!value;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    }
    /**
     * \@docs-private
     * @return {?}
     */
    updateErrorState() {
        /** @type {?} */
        const oldState = this.errorState;
        /** @type {?} */
        const parent = this._parentFormGroup || this._parentForm;
        /** @type {?} */
        const control = this.ngControl ? (/** @type {?} */ (this.ngControl.control)) : null;
        /** @type {?} */
        const newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
            this.stateChanges.next();
        }
    }
    /**
     * Toggles the checked state of the selectable card .
     * @return {?}
     */
    toggle() {
        if (!this.disabled) {
            this.checked = !this.checked;
        }
    }
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    _onInputClick(event) {
        // We have to stop propagation for click events on the visual hidden input element.
        // By default, when a user clicks on a label element, a generated click event will be
        // stop the propagation of the native click on the checkbox input so that a click is not triggered twice
        // Preventing bubbling for the second event will solve that issue.
        event.stopPropagation();
        if (!this.disabled) {
            this.toggle();
            this._emitChangeEvent();
        }
    }
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    _onInteractionEvent(event) {
        // We always have to stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        // emit its event object to the `change` output.
        event.stopPropagation();
    }
    /**
     * \@docs-private
     * @private
     * @return {?}
     */
    _emitChangeEvent() {
        /** @type {?} */
        const event = new NxSelectableCardChangeEvent(this.checked, this.value, this);
        this.onChangeCallback(this.checked);
        this.selectionChange.emit(event);
        this.checkedChange.emit(this.checked);
    }
}
NxSelectableCardComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-selectable-card',
                template: "<input #input\n       type=\"checkbox\"\n       [checked]=\"checked\"\n       [value]=\"value || null\"\n       [attr.disabled]=\"disabled\"\n       (change)=\"_onInteractionEvent($event)\"\n       (blur)=\"onTouchedCallback($event)\"\n       [attr.id]=\"id\"\n       [attr.name]=\"name\"\n       (click)=\"_onInputClick($event)\"\n       [required]=\"required\"\n       [attr.aria-required]=\"required\"\n       [attr.tabindex]=\"tabindex\"\n       [attr.aria-invalid]=\"errorState\"\n       [attr.aria-describedby]=\"_errorListIds || null\"\n>\n\n<label [attr.for]=\"id\" [class.is-disabled]=\"disabled\">\n  <ng-container *ngTemplateOutlet=\"selectableCardContent\"></ng-container>\n</label>\n\n<ng-content *ngIf=\"errorState\" select=\"nx-error\"></ng-content>\n\n<ng-template #selectableCardContent>\n  <nx-icon name=\"check-circle\" size=\"s\" class=\"checked-icon\"></nx-icon>\n  <div class=\"nx-selectable-card--headline\">\n    <ng-content select=\"nx-card-header\"></ng-content>\n  </div>\n  <div class=\"nx-selectable-card--content\">\n    <ng-content></ng-content>\n  </div>\n  <div class=\"nx-selectable-card--footer\">\n    <ng-content select=\"nx-card-footer\"></ng-content>\n  </div>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [{ provide: SelectableCard, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NxSelectableCardComponent)) }],
                host: {
                    '[class.is-checked]': 'checked',
                    '[class.is-disabled]': 'disabled',
                    '[class.has-error]': 'errorState',
                    '[attr.aria-invalid]': 'errorState',
                    '[attr.role]': '"checkbox"',
                    '[attr.aria-checked]': 'checked'
                },
                styles: [":host{display:block}:host input{position:absolute;height:0;width:0;overflow:hidden;opacity:0}:host label{border:1px solid #999;border:var(--selectable-card-border-width,1px) solid var(--selectable-card-border-color,#999);display:block;position:relative;padding:16px;cursor:pointer;width:100%;margin-bottom:8px;border-radius:4px;border-radius:var(--selectable-card-border-radius,4px);background:#fff;background:var(--selectable-card-background-color,#fff)}:host:focus{outline:0}:host::-moz-focus-inner{border:0}:host input:checked+label{background:#f5f5f5;background:var(--selectable-card-background-selected-color,#f5f5f5);border-color:#414141;border-color:var(--selectable-card-border-selected-color,#414141)}:host input:checked+label ::ng-deep nx-icon.checked-icon{display:block}:host label:active,:host label:hover{background:#f5f5f5;background:var(--selectable-card-background-hover-color,#f5f5f5);border-color:#414141;border-color:var(--selectable-card-border-hover-color,#414141)}:host input:checked+label:hover{background:#ececec;background:var(--selectable-card-background-selected-hover-color,#ececec)}:host ::ng-deep nx-icon.checked-icon{position:absolute;right:8px;top:8px;display:none}:host(.is-disabled) label{border-color:#ececec;border-color:var(--selectable-card-border-disabled-color,#ececec);cursor:not-allowed}:host(.is-disabled) label:hover{background:#fff;background:var(--selectable-card-background-disabled-color,#fff)}:host(.is-disabled) input:checked+label{background:#f5f5f5;background:var(--selectable-card-background-disabled-selected-color,#f5f5f5);border-color:#c2c2c2;border-color:var(--selectable-card-border-disabled-selected-color,#c2c2c2)}:host(.is-disabled) input:checked+label ::ng-deep nx-icon.checked-icon{display:block;color:#c2c2c2;color:var(--selectable-card-icon-diabled-color,#c2c2c2)}:host(.has-error) input:checked+label,:host(.has-error) input:checked+label:hover,:host(.has-error) label,:host(.has-error) label:hover{border-color:#dc3149;border-color:var(--selectable-card-border-error-color,#dc3149)}:host-context([data-whatinput=keyboard]) :host:focus label,:host-context([data-whatinput=keyboard]) input:focus+label{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]) :host:focus label,:host-context([data-whatinput=keyboard]) input:focus+label{box-shadow:0 0 0 2px background,0 0 0 6px windowText}:host label{border-color:buttonText}:host input:checked+label{border-width:3px;padding:14px;border-color:highlight}:host(.is-disabled) input:checked+label,:host(.is-disabled) label{border-color:GrayText;color:GrayText}:host(.is-disabled) input:checked+label ::ng-deep nx-icon.checked-icon,:host(.is-disabled) label ::ng-deep nx-icon.checked-icon{color:GrayText}}"]
            }] }
];
/** @nocollapse */
NxSelectableCardComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ErrorStateMatcher },
    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },
    { type: NgForm, decorators: [{ type: Optional }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }] }
];
NxSelectableCardComponent.propDecorators = {
    _errorList: [{ type: ContentChildren, args: [NxErrorComponent,] }],
    selectionChange: [{ type: Output }],
    checkedChange: [{ type: Output }],
    id: [{ type: Input }],
    checked: [{ type: Input }],
    value: [{ type: Input }],
    disabled: [{ type: Input }],
    negative: [{ type: Input }],
    required: [{ type: Input }],
    name: [{ type: Input }],
    tabindex: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._id;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._checked;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._name;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._tabindex;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._required;
    /**
     * \@docs-private
     * @type {?}
     */
    NxSelectableCardComponent.prototype._errorListIds;
    /**
     * \@docs-private
     * @type {?}
     */
    NxSelectableCardComponent.prototype._errorList;
    /**
     * \@docs-private
     * @type {?}
     */
    NxSelectableCardComponent.prototype.errorState;
    /**
     * \@docs-private
     * @type {?}
     */
    NxSelectableCardComponent.prototype.stateChanges;
    /**
     * An event is dispatched each time the selectable card value is changed
     * @type {?}
     */
    NxSelectableCardComponent.prototype.selectionChange;
    /**
     * An event is dispatched each time the selectable card value is changed
     * @type {?}
     */
    NxSelectableCardComponent.prototype.checkedChange;
    /**
     * \@docs-private
     * @type {?}
     */
    NxSelectableCardComponent.prototype.onChangeCallback;
    /** @type {?} */
    NxSelectableCardComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._errorStateMatcher;
    /** @type {?} */
    NxSelectableCardComponent.prototype.ngControl;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._parentForm;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._parentFormGroup;
}

/**
 * @fileoverview added by tsickle
 * Generated from: card-header.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxCardHeaderComponent {
}
NxCardHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-card-header',
                template: "<ng-content></ng-content>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: card-footer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxCardFooterComponent {
}
NxCardFooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-card-footer',
                template: "<ng-content></ng-content>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: selectable-card.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxSelectableCardModule {
}
NxSelectableCardModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    NxSelectableCardComponent,
                    NxCardHeaderComponent,
                    NxCardFooterComponent
                ],
                exports: [
                    NxSelectableCardComponent,
                    NxCardHeaderComponent,
                    NxCardFooterComponent
                ],
                imports: [
                    CommonModule,
                    NxIconModule,
                    NxErrorModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: allianz-ngx-ndbx-card.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxCardComponent, NxCardFooterComponent, NxCardHeaderComponent, NxCardModule, NxSelectableCardComponent, NxSelectableCardModule, SelectableCard as ɵa };
//# sourceMappingURL=allianz-ngx-ndbx-card.js.map
