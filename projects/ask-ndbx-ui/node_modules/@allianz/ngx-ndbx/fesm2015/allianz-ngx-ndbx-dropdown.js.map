{"version":3,"file":"allianz-ngx-ndbx-dropdown.js","sources":["ng://@allianz/ngx-ndbx/dropdown/dropdown-errors.ts","ng://@allianz/ngx-ndbx/dropdown/dropdown.control.ts","ng://@allianz/ngx-ndbx/dropdown/group/dropdown-group.ts","ng://@allianz/ngx-ndbx/dropdown/item/dropdown-item.ts","ng://@allianz/ngx-ndbx/dropdown/closed-label.directive.ts","ng://@allianz/ngx-ndbx/dropdown/dropdown.ts","ng://@allianz/ngx-ndbx/dropdown/dropdown.module.ts"],"sourcesContent":["\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getNxDropdownDynamicMultipleError(): Error {\n  return Error('Cannot change `multiselect` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiselect` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getNxDropdownNonArrayValueError(): Error {\n  return Error('Value must be an array in multiselect mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getNxDropdownNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","import { NxFormfieldControl } from '@allianz/ngx-ndbx/formfield';\nimport { Input } from '@angular/core';\n\nexport abstract class NxDropdownControl extends NxFormfieldControl<any> {\n  /**\n   * Whether the dropdown should allow multi selection and additional checkboxes are shown.\n   *\n   * Note: Please make sure the value you bind is an array. If not an error is thrown! */\n  @Input('nxIsMultiselect') isMultiSelect: boolean = false;\n\n  /** @docs-private */\n  abstract formatValue?(value): string;\n\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'nx-dropdown-group',\n  templateUrl: 'dropdown-group.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['dropdown-group.scss']\n})\nexport class NxDropdownGroupComponent {\n  /** Label displayed in the group. */\n  @Input('nxLabel') label: string;\n}\n","import { Highlightable } from '@angular/cdk/a11y';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { NxDropdownComponent } from '../dropdown';\nimport { NxDropdownControl } from '../dropdown.control';\nimport { NxDropdownGroupComponent } from './../group/dropdown-group';\n\nexport class NxDropdownItemChange {\n\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public item: NxDropdownItemComponent,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/** the unique id counter */\nlet nextId = 0;\n\n@Component({\n  selector: 'nx-dropdown-item',\n  templateUrl: 'dropdown-item.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [\n    'dropdown-item.scss'\n  ],\n  host: {\n    '[id]': 'id',\n    'role': 'option',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[class.nx-hidden]': '_hidden',\n    '[class.nx-dropdown-item--active]': 'active',\n    '[class.nx-selected]': 'selected',\n    '[class.nx-multiselect]': 'multiselect',\n    '(click)': '_onClick($event)'\n  }\n})\nexport class NxDropdownItemComponent implements Highlightable, OnDestroy, AfterViewChecked {\n  _hidden = false;\n\n  private _mostRecentViewValue = '';\n\n  private _id = `nx-dropdown-item-${nextId++}`;\n\n  /**\n   * The value of the dropdown item.\n   * You can't use undefined, null and '' (empty strings)\n   * as they are sentinel values signalling empty data.\n   */\n  @Input('nxValue') value;\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  private _selected: boolean = false;\n\n  /** Whether the item is selected. */\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  private _active: boolean;\n\n  /** Whether the item is active. */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * @docs-private\n   * Whether the parent dropdown is in multiselect mode.\n   */\n  get multiselect(): boolean {\n    return this._dropdown && this._dropdown.isMultiSelect;\n  }\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<NxDropdownItemChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * @docs-private\n   * The wrapping div in the template. Used by dropdown to use the container height for scrolling.\n   */\n  @ViewChild('container', { static: true }) containerElement;\n\n  constructor(\n    @Inject(NxDropdownControl) private _dropdown: NxDropdownControl,\n    /** @docs-private */\n    @Optional() readonly group: NxDropdownGroupComponent,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef) {\n    (this._dropdown as NxDropdownComponent).filterChanges.pipe(takeUntil(this._destroy)).subscribe((value) => {\n      this._showOrHideByFilter(value);\n    });\n    // reset the hidden state when dropdown closes that on next open the user is seeing the full list again\n    (this._dropdown as NxDropdownComponent)._closedStream.pipe(takeUntil(this._destroy)).subscribe(() => {\n      this._hidden = false;\n    });\n  }\n\n  ngAfterViewChecked() {\n    // Since the parent dropdown component could be using the item's label to display the selected values\n    // and it doesn't have a way of knowing if the item's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._destroy.next();\n    this._destroy.complete();\n  }\n\n  _onClick(event) {\n    /* preventDefault to stop triggering the event twice when you click on the checkbox or the label inside the item */\n    event.preventDefault();\n    event.stopPropagation();\n    this._selectViaInteraction();\n  }\n\n  /**\n  * `Selects the option while indicating the selection came from the user. Used to\n  * determine if the select's view -> model callback should be invoked.`\n  */\n  _selectViaInteraction(): void {\n    this._selected = this.multiselect ? !this._selected : true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent(true);\n  }\n\n  /** @docs-private */\n  show() {\n    this._hidden = false;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** @docs-private */\n  hide() {\n    this._hidden = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  private _showOrHideByFilter(search) {\n    const constraint = (this._dropdown as NxDropdownComponent).filterFn(search, this.viewValue);\n    this._hidden = constraint ? false : true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  get _formattedValue() {\n    return (this._dropdown as NxDropdownComponent).valueFormatter(this.value);\n  }\n\n  /** @docs-private */\n  get viewValue() {\n    return (this._elementRef.nativeElement.textContent || '').trim();\n  }\n\n  /** @docs-private */\n  get elementRef() {\n    return this._elementRef;\n  }\n\n  select() {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** @docs-private */\n  deselect() {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** @docs-private */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  private _emitSelectionChangeEvent(isUserInput: boolean = false) {\n    this.onSelectionChange.emit(new NxDropdownItemChange(this, isUserInput));\n  }\n\n  /** @docs-private */\n  setActiveStyles(): void {\n    this._active = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** @docs-private */\n  setInactiveStyles(): void {\n    this._active = false;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the ListKeyManagerOption.\n   * @docs-private */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  _isContentEmpty(element) {\n    return element.children.length === 0 && !element.textContent.trim();\n  }\n\n  _onLabelChange() {\n    // trigger change detection when the label content changes for the case that ng-content was empty before.\n    // this is also important when the label comes in deferred, e.g. by a delayed observable,\n    // then first the default label derived from the value is shown\n    // and after the value from the async observable is ready we need to trigger change detection that the derived label\n    // gets hidden again.\n    // Notice(!): the event of (cdkObserveContent) is run outside of the ngZone\n    // We run detectChanges directly here as markForCheck wasn't enough to always trigger change detection correctly\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n// This Directive solely purpose is to mark given ng-template and project it into the required destination.\n@Directive({\n  selector: '[nxClosedLabel]'\n})\nexport class NxDropdownClosedLabelDirective {\n  constructor(public templateRef: TemplateRef<any>) {}\n}\n","import { NxFormfieldComponent, NxFormfieldControl } from '@allianz/ngx-ndbx/formfield';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, SHIFT, TAB } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, ConnectionPositionPair, FlexibleConnectedPositionStrategy } from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  isDevMode,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  Self,\n  ViewChild,\n  TemplateRef,\n  ContentChild,\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {delay, filter, map, startWith, switchMap, take, takeUntil} from 'rxjs/operators';\n\nimport { getNxDropdownNonArrayValueError, getNxDropdownNonFunctionValueError } from './dropdown-errors';\nimport { NxDropdownControl } from './dropdown.control';\nimport { NxDropdownGroupComponent } from './group/dropdown-group';\nimport { NxDropdownItemChange, NxDropdownItemComponent } from './item/dropdown-item';\nimport { NxDropdownClosedLabelDirective } from './closed-label.directive';\n\n/** Change event object that is emitted when the select value has changed. */\nexport class NxDropdownSelectChange<T = any> {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: NxDropdownComponent,\n    /** Current value of the select that emitted the event. */\n    public value: T) { }\n}\n\nfunction getPositions(): ConnectionPositionPair[] {\n  return [{\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'top'\n  }, {\n    originX: 'start',\n    originY: 'center',\n    overlayX: 'start',\n    overlayY: 'center'\n  }, {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'bottom'\n  }];\n}\n\n@Component({\n  selector: 'nx-dropdown',\n  templateUrl: 'dropdown.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['dropdown.scss'],\n  providers: [\n    { provide: NxDropdownControl, useExisting: NxDropdownComponent },\n    { provide: NxFormfieldControl, useExisting: NxDropdownComponent },\n  ],\n  host: {\n    'role': 'button',\n    '[class.nx-dropdown]': 'true',\n    '[class.is-filled]': 'hasValue',\n    '[class.has-focus]': 'focused',\n    '[class.nx-dropdown--negative]': '_negative',\n    '[class.nx-dropdown--disabled]': 'disabled',\n    '[attr.aria-describedby]': 'ariaDescribedby || null',\n    '[attr.aria-required]': 'required',\n    '[attr.aria-label]': '_getAriaLabel()',\n    'aria-haspopup': 'listbox',\n    '[attr.aria-expanded]': 'panelOpen',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.tabindex]': 'tabIndex',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': 'openPanel()'\n  }\n})\nexport class NxDropdownComponent extends NxDropdownControl implements ControlValueAccessor,\n  OnInit, AfterContentInit, OnDestroy, DoCheck {\n\n  // The dropdown currently doesn't support readonly of the NxFormfieldControl so we hardcode it here\n  readonly readonly: boolean = false;\n\n  private _selectionModel: SelectionModel<NxDropdownItemComponent>;\n\n  protected _disabled: boolean = false;\n\n  private _focused: boolean = false;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** @docs-private */\n  errorState: boolean = false;\n\n  /** @docs-private */\n  isStable: boolean = false;\n\n  /**\n   * Name of this control that is used inside the formfield component\n   * @docs-private\n   */\n  controlType = 'nx-dropdown';\n\n  /** Holds the value from nxValue. */\n  private _value: any;\n\n  /** The minimal space between the viewport and the overlay */\n  _overlayViewportMargin: number = 16;\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** Holds the panelWidth after panel was attached. */\n  _panelWidth: number;\n\n  /**\n   * @docs-private\n   * Emits when internal state changes to inform formfield about it.\n   */\n  readonly stateChanges = new Subject<any>();\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** @docs-private */\n  ariaDescribedby: string;\n\n  private _tabIndex: number = 0;\n\n  /** @docs-private */\n  currentFilter: string = '';\n\n  @Input()\n  get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n\n  /** Label to describe the component. */\n  @Input('nxAriaLabel') _ariaLabel: string = '';\n\n  /** Selected value */\n  @Input('nxValue')\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n      this._onChange(newValue);\n    }\n  }\n\n  /** Whether the dropdown is disabled. */\n  @Input('nxDisabled')\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n  }\n\n  /** Whether the component is required. This adds an aria-required label to the component. */\n  @Input('nxRequired') required: boolean;\n\n  private _style: string = '';\n  /** Whether the dropdown should render in its negative style or not. */\n  _negative: boolean = false;\n\n  /** If set to 'negative', the component is displayed with the negative set of styles. */\n  @Input('nxStyle')\n  set styles(value: string) {\n\n    if (this._style === value) {\n      return;\n    }\n\n    this._style = value;\n    this._negative = !!this._style.match(/negative/);\n  }\n\n  /** Whether the dropdown should be shown with an additional filter input. */\n  @Input('nxShowFilter') showFilter: boolean = false;\n\n  /** Text displayed as placeholder for the filter. */\n  @Input('nxFilterPlaceholder') filterPlaceholder: string = '';\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n    this.openedChange.pipe(filter(o => o), map(() => { }));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n    this.openedChange.pipe(filter(o => !o), map(() => { }));\n\n  /** Event emitted when the user types in the filter input. */\n  @Output('filterInput') readonly filterChanges: Subject<any> = new Subject<any>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output('nxValueChange') readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** Event emitted when the selected value has been changed. */\n  @Output() readonly selectionChange: EventEmitter<NxDropdownSelectChange> =\n    new EventEmitter<NxDropdownSelectChange>();\n\n  /** @docs-private */\n  readonly optionSelectionChanges: Observable<NxDropdownItemChange> = defer<Observable<NxDropdownItemChange>>(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions:  ConnectionPositionPair[];\n\n  /**\n   * @docs-private\n   * Panel containing the select options.\n   */\n  @ViewChild('panel', { static: false }) panel: ElementRef;\n\n  /** @docs-private */\n  @ViewChild('panelBody', { static: false }) panelBody: ElementRef;\n\n  /** @docs-private */\n  @ViewChild('trigger', { static: true }) trigger: ElementRef;\n\n  /** @docs-private */\n  @ViewChild('filterInput', { static: false }) filterInput: ElementRef;\n\n  /**\n   * @docs-private\n   * Overlay pane containing the options.\n   */\n  @ViewChild(CdkConnectedOverlay, { static: true }) overlayDir: CdkConnectedOverlay;\n\n  /** @docs-private */\n  @ContentChildren(NxDropdownItemComponent, { descendants: true }) options;\n\n  /** @docs-private */\n  @ContentChildren(NxDropdownGroupComponent) groups;\n\n  @ContentChild(NxDropdownClosedLabelDirective, {static: false})\n  _customClosedDropdownLabel: NxDropdownClosedLabelDirective;\n\n  @ViewChild('defaultClosedDropdownLabel', { static: true })\n  private _defaultClosedDropdownLabel: TemplateRef<any>;\n\n  /** @docs-private */\n  get closedDropdownLabel(): TemplateRef<any> {\n    return this._closedDropdownLabel;\n  }\n  private _closedDropdownLabel: TemplateRef<any>;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /**\n   * @docs-private\n   * The currently selected option.\n   */\n  get selected(): NxDropdownItemComponent | NxDropdownItemComponent[] {\n    return this.isMultiSelect ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  private _keyManager: ActiveDescendantKeyManager<NxDropdownItemComponent>;\n\n  /** @docs-private */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n  set panelOpen(value: boolean) {\n    this._panelOpen = value;\n  }\n\n  /**\n   * Function that transforms the value into a string.\n   * This function is used for displaying and filtering the content\n   * ( Default: (value) => value ? value.toString() : null; ).\n   */\n  @Input('nxValueFormatter') valueFormatter = (value) => {\n    return value == null ? '' : value.toString();\n  }\n\n  /** @docs-private */\n  get label(): string {\n    return this.formFieldComponent ? this.formFieldComponent.label : '';\n  }\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getNxDropdownNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  private _filterFn = (search: string, itemValue: string) => {\n    return itemValue.toLocaleLowerCase().indexOf(search.toLocaleLowerCase()) >= 0;\n  }\n\n  /**\n   * Function to be used when the user types into the search filter. The first argument is the user input,\n   * the second argument is the dropdown item value. The dropdown items will use this function to set their\n   * visibility state.\n   * A boolean should be returned.\n   */\n  @Input()\n  get filterFn() { return this._filterFn; }\n  set filterFn(fn: (search: string, itemValue: string) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getNxDropdownNonFunctionValueError();\n    }\n    this._filterFn = fn;\n  }\n\n  /**\n   * @docs-private\n   * Whether the select is focused.\n   */\n  get focused(): boolean {\n    return this._focused || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => { };\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => { };\n\n  /** @docs-private */\n  get elementRef(): ElementRef {\n    return this._elementRef;\n  }\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Attribute('tabindex') tabIndex: string,\n    @Optional() private formFieldComponent: NxFormfieldComponent,\n    /** @docs-private */\n    @Self() @Optional() public ngControl: NgControl,\n    @Optional() private _parentForm: NgForm,\n    @Optional() private _parentFormGroup: FormGroupDirective) {\n    super();\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._positions = getPositions();\n    this.tabIndex = parseInt(tabIndex, 10) || 0;\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<NxDropdownItemComponent>(this.isMultiSelect);\n  }\n\n  ngAfterContentInit() {\n    this._closedDropdownLabel =\n      this._customClosedDropdownLabel && this._customClosedDropdownLabel.templateRef || this._defaultClosedDropdownLabel;\n    this._initKeyManager();\n\n    this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n  }\n\n  /** @docs-private */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n\n  /** @docs-private */\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const control = this.ngControl ? this.ngControl.control as FormControl : null;\n    const newState = this.isErrorState(control, parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<NxDropdownItemComponent>(this.options)\n      .withTypeAhead()\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation('ltr')\n      .skipPredicate(item => item._hidden);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.closePanel();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        // Delay the auto scrolling until all items have settled otherwise the item containers might\n        // not exist yet\n        this._ngZone.onStable\n          .asObservable()\n          .pipe(take(1)).subscribe(() => {\n            this._scrollActiveOptionIntoView();\n          });\n      } else if (!this._panelOpen && !this.isMultiSelect && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.item, event.isUserInput);\n\n      if (event.isUserInput && !this.isMultiSelect && this._panelOpen) {\n        this.closePanel();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        // defer it for the next cycle to not run in changed after checked errors\n        // the combination of dropdown-item notifying parent and when the parent\n        // tries to fetch the triggerValue from the child throws these errors\n        setTimeout(() => {\n          this._changeDetectorRef.markForCheck();\n          this.stateChanges.next();\n        });\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: NxDropdownItemComponent, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this.isMultiSelect) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.isMultiSelect) {\n        this._sortValues();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.isMultiSelect && value) {\n      if (!Array.isArray(value)) {\n        throw getNxDropdownNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): NxDropdownItemComponent | undefined {\n    const correspondingOption = this.options.find((option: NxDropdownItemComponent) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value, value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n    return correspondingOption;\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.isMultiSelect) {\n      valueToEmit = (this.selected as NxDropdownItemComponent[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as NxDropdownItemComponent).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new NxDropdownSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.isMultiSelect) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Adds a offset to the overlay position, so the formfield label and the dropdown panel header are vertically aligned. */\n  private _updatePositionOffset() {\n    let offset = 0;\n\n    if (this.formFieldComponent !== null) {\n      const formFieldRect = this.formFieldComponent.elementRef.nativeElement.getBoundingClientRect();\n      const dropdownRect = this._elementRef.nativeElement.getBoundingClientRect();\n      const panelHeader = this.overlayDir.overlayRef.overlayElement.querySelector('.nx-dropdown__panel-header');\n      const panelHeaderPaddingTop = panelHeader ? parseInt(getComputedStyle(panelHeader).paddingTop, 10) : 0;\n      offset = formFieldRect.top - dropdownRect.top - panelHeaderPaddingTop;\n    }\n\n    this._positions[0].offsetY = offset;\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Opens the panel of the dropdown. */\n  openPanel() {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n    this._panelOpen = true;\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    this._keyManager.withHorizontalOrientation(null);\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Closes the panel of the dropdown. */\n  closePanel() {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this.isStable = false;\n      this._keyManager.withHorizontalOrientation('ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n      this.openedChange.emit(false);\n      // defer the focus if the dropdown triggers actions that detach\n      // a template/view from the DOM to prevent changed after checked errors\n      setTimeout(() => this.focus());\n    }\n  }\n\n  // calculate inital scrollTop when the dropdown opens\n  // scrolls the selected item to the middle of the panel if possible\n  private _calculateScrollTop() {\n    // reset the scrolltop to make calculation easier\n    this.panelBody.nativeElement.scrollTop = 0;\n\n    if (!this.empty) {\n      const offset = this._getItemOffset(this._keyManager.activeItem);\n      const panelHeight = this.panelBody.nativeElement.offsetHeight;\n      const panelRect = this.panelBody.nativeElement.getBoundingClientRect();\n      const middleOfPanel = panelRect.top + panelHeight / 2;\n\n      if (offset > middleOfPanel) {\n        // because we reset the scrollTop to 0 at the top we can simply take the middleOfPanel which is our\n        // target position for the item and subtract it from the offset (which is now always relative to the viewport)\n        this.panelBody.nativeElement.scrollTop = offset - middleOfPanel;\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    if (!this.panelOpen || !this._keyManager.activeItem) {\n      return;\n    }\n\n    const activeItem = this._keyManager.activeItem.containerElement.nativeElement;\n    const panel = this.panelBody.nativeElement;\n    const panelOffset = panel.offsetTop;   // how much the overlay is repositioned on the page\n    const panelTopScrollPosition = panel.scrollTop;\n    const panelHeight = panel.clientHeight;\n    const itemTop = activeItem.offsetTop - panelOffset;\n    const itemBottom = activeItem.offsetTop - panelOffset + activeItem.getBoundingClientRect().height;\n\n    // item half or less visible on top\n    if (itemTop < panelTopScrollPosition) {\n      this.panelBody.nativeElement.scrollTop = itemTop;\n      // item half or less visible on bottom\n    } else if (itemBottom > (panelTopScrollPosition + panelHeight)) {\n      this.panelBody.nativeElement.scrollTop = itemBottom - panelHeight;\n    }\n  }\n\n  /** @docs-private */\n  private _getItemOffset(item) {\n    const itemRect = item.containerElement.nativeElement.getBoundingClientRect();\n\n    return itemRect.top + (itemRect.height / 2); // get position of the item's center\n  }\n\n  /**\n   * @docs-private\n   * Formfield Implementation\n   */\n  setDescribedByIds(ids: string[]): void {\n    this.ariaDescribedby = ids.join(' ');\n  }\n\n  /** @docs-private */\n  setAriaLabel(value: string) {\n    this._ariaLabel = value;\n  }\n\n  _getAriaLabel() {\n    return this._ariaLabel || (this.formFieldComponent ? this.formFieldComponent.label : null);\n  }\n\n  get _isInOutlineField(): boolean {\n    return this.formFieldComponent !== null\n      && this.formFieldComponent.appearance === 'outline';\n  }\n\n  /**\n   * @docs-private\n   * Whether the select has a value.\n   */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  /** @docs-private */\n  get hasValue() {\n    return this._selectionModel.hasValue();\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean {\n    return this.focused || !this.empty;\n  }\n  /** End Formfield */\n\n  /** ControlValueAccessor */\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n  /** End ControlValueAccessor */\n\n  _handleKeydown(event: KeyboardEvent) {\n    this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n  }\n\n  private _handleClosedKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n      keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.isMultiSelect || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.openPanel();\n    } else if (!this.isMultiSelect && !this.disabled) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  private _handleOpenKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    // if has filter all events other than the listed ones should be ignored or handled in _onFilter()\n    if (!([DOWN_ARROW, UP_ARROW, HOME, END, ENTER, LEFT_ARROW, RIGHT_ARROW, SHIFT, SPACE, TAB].indexOf(keyCode) >= 0)\n         && this.showFilter) {\n      return;\n    }\n\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    const allHidden = this.options.map(option => option._hidden).every(option => Boolean(option));\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.closePanel();\n    } else if (keyCode === ENTER && manager.activeItem && !allHidden) {\n      event.preventDefault();\n\n      manager.activeItem._selectViaInteraction();\n    } else if (keyCode === ENTER && allHidden) {\n      event.preventDefault();\n\n      this.closePanel();\n    } else if (!this.showFilter && keyCode === SPACE && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (keyCode === TAB) {\n      this.closePanel();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n      manager.onKeydown(event);\n\n      this._ngZone.onStable\n        .asObservable()\n      .pipe(\n        take(1),\n        delay(251) // we need to defer to get the new activeItemIndex. delay > debouncing of the typeAhead\n       ).subscribe(() => {\n          this.isStable = true;\n          this._changeDetectorRef.detectChanges();\n        });\n\n      if (this.isMultiSelect && isArrowKey && event.shiftKey && manager.activeItem &&\n        manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /** @docs-private */\n  formatValue(value): string {\n    return this.valueFormatter(value);\n  }\n\n  /** Called when the user types in the filter input */\n  _onFilter(event) {\n    event.preventDefault();\n    this.currentFilter = event.target.value;\n    this.filterChanges.next(event.target.value);\n    const allHidden = this.options.map(option => option._hidden).every(option => Boolean(option));\n    if (allHidden) {\n      this._keyManager.setActiveItem(null);\n    } else {\n      this._keyManager.setFirstItemActive();\n    }\n  }\n\n  /**\n   * @docs-private\n   * The value displayed in the trigger.\n   */\n  get triggerValue(): string {\n\n    if (this.empty) {\n      return '';\n    }\n\n    if (this.isMultiSelect) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      return selectedOptions.join(', ');\n    }\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      const overlayRef = this.overlayDir.overlayRef;\n      const positionStrategy = overlayRef.getConfig()\n        .positionStrategy as FlexibleConnectedPositionStrategy;\n\n      this._updatePositionOffset();\n      positionStrategy.withPositions(this._positions.slice());\n      overlayRef.updatePosition();\n\n      if (this._keyManager.activeItem) {\n        this._calculateScrollTop();\n      }\n\n      this._changeDetectorRef.markForCheck();\n      this.openedChange.emit(true);\n\n      // If there is no item selected, the filter takes the focus.\n      if (this.showFilter && !this._value) {\n        this.filterInput.nativeElement.focus();\n      } else {\n        this.panelBody.nativeElement.focus();\n      }\n    });\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (this.filterInput && this.showFilter) {\n      this._clearFilter();\n    }\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /** @docs-private */\n  get isFilterEmpty() {\n    return this.currentFilter.length === 0;\n  }\n\n  /** @docs-private */\n  _clearFilter() {\n    this.filterInput.nativeElement.value = '';\n    this.currentFilter = '';\n    this.filterChanges.next('');\n  }\n\n  /** @docs-private determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n}\n","import { NxFormfieldModule } from '@allianz/ngx-ndbx/formfield';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxCheckboxModule } from '@allianz/ngx-ndbx/checkbox';\nimport { NxDropdownComponent } from './dropdown';\nimport { NxDropdownGroupComponent } from './group/dropdown-group';\nimport { NxDropdownItemComponent } from './item/dropdown-item';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { NxDropdownClosedLabelDirective } from './closed-label.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NxFormfieldModule,\n    NxCheckboxModule,\n    OverlayModule,\n    A11yModule,\n    NxIconModule,\n    ObserversModule\n  ],\n  declarations: [\n    NxDropdownComponent,\n    NxDropdownItemComponent,\n    NxDropdownGroupComponent,\n    NxDropdownClosedLabelDirective\n  ],\n  exports: [\n    NxDropdownComponent,\n    NxDropdownItemComponent,\n    NxDropdownGroupComponent,\n    NxDropdownClosedLabelDirective\n  ]\n})\nexport class NxDropdownModule {\n\n}\n"],"names":[],"mappings":"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"}