import { Subject } from 'rxjs';
import { Injectable, Directive, ElementRef, Renderer2, ChangeDetectorRef, HostBinding, Input, forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewChild, Output, NgModule } from '@angular/core';
import { getFontShorthand, mapClassNames, pad } from '@allianz/ngx-ndbx/utils';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { CommonModule } from '@angular/common';
import { NxButtonModule } from '@allianz/ngx-ndbx/button';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { NxInputModule } from '@allianz/ngx-ndbx/input';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';
import { MappedStyles } from '@allianz/ngx-ndbx/core';
import { Decimal } from 'decimal.js';

/**
 * @fileoverview added by tsickle
 * Generated from: number-stepper-intl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxNumberStepperIntl {
    constructor() {
        /**
         * Stream that emits whenever the labels here are changed. Use this to notify
         * components if the labels have changed after initialization.
         */
        this.changes = new Subject();
        /**
         * The aria label for the decrement '-' button
         */
        this.decrementAriaLabel = 'Decrement';
        /**
         * The aria label for the increment '+' button
         */
        this.incrementAriaLabel = 'Increment';
    }
}
NxNumberStepperIntl.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * Stream that emits whenever the labels here are changed. Use this to notify
     * components if the labels have changed after initialization.
     * @type {?}
     */
    NxNumberStepperIntl.prototype.changes;
    /**
     * The aria label for the decrement '-' button
     * @type {?}
     */
    NxNumberStepperIntl.prototype.decrementAriaLabel;
    /**
     * The aria label for the increment '+' button
     * @type {?}
     */
    NxNumberStepperIntl.prototype.incrementAriaLabel;
}

/**
 * @fileoverview added by tsickle
 * Generated from: auto-resize.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docs-private
 */
class NxAutoResizeDirective {
    /**
     * @param {?} _element
     * @param {?} _renderer
     * @param {?} _cdr
     */
    constructor(_element, _renderer, _cdr) {
        this._element = _element;
        this._renderer = _renderer;
        this._cdr = _cdr;
        this._resize = true;
        this.updateInputWidth = this.updateInputWidth.bind(this);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set resize(value) {
        this._resize = coerceBooleanProperty(value);
        if (this._resize) {
            this._addEventListener();
            this.updateInputWidth();
        }
        else {
            this._removeEventListener();
        }
    }
    /**
     * @return {?}
     */
    get resize() {
        return this._resize;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.resize) {
            this._addEventListener();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._removeEventListener();
    }
    /**
     * @return {?}
     */
    updateInputWidth() {
        /** @type {?} */
        const measureCanvas = this._renderer.createElement('canvas');
        /** @type {?} */
        const ctx = measureCanvas.getContext('2d');
        /** @type {?} */
        const styles = window.getComputedStyle(this._element.nativeElement);
        ctx.font = getFontShorthand(styles);
        /** @type {?} */
        const metrics = ctx.measureText(this._element.nativeElement.value);
        /** @type {?} */
        const padding = this.sumStyles(styles.paddingLeft, styles.paddingRight);
        /** @type {?} */
        const border = this.sumStyles(styles.borderLeftWidth, styles.borderRightWidth);
        // the pixels are needed, because despite the correct calculation the last pixels of a number are always cut
        /** @type {?} */
        const newWidth = metrics.width + padding + border + 16;
        // Limit to own given minimal width
        /** @type {?} */
        const parsed = parseFloat(styles.minWidth);
        this.width = Math.max(Number.isNaN(parsed) ? 0 : parsed, newWidth);
        // needed when the outer component is onPush
        this._cdr.markForCheck();
    }
    /**
     * @return {?}
     */
    _addEventListener() {
        this._element.nativeElement.addEventListener('input', this.updateInputWidth, true);
        this._element.nativeElement.addEventListener('change', this.updateInputWidth, true);
    }
    /**
     * @return {?}
     */
    _removeEventListener() {
        this._element.nativeElement.removeEventListener('input', this.updateInputWidth, true);
        this._element.nativeElement.removeEventListener('change', this.updateInputWidth, true);
    }
    /**
     * @param {?} left
     * @param {?} right
     * @return {?}
     */
    sumStyles(left, right) {
        left = parseInt(left, 10);
        right = parseInt(right, 10);
        left = Number.isNaN(left) ? 0 : left;
        right = Number.isNaN(right) ? 0 : right;
        return left + right;
    }
}
NxAutoResizeDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[nxAutoResize]'
            },] }
];
/** @nocollapse */
NxAutoResizeDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef }
];
NxAutoResizeDirective.propDecorators = {
    width: [{ type: HostBinding, args: ['style.width.px',] }],
    resize: [{ type: Input, args: ['nxAutoResize',] }]
};
if (false) {
    /** @type {?} */
    NxAutoResizeDirective.prototype.width;
    /**
     * @type {?}
     * @private
     */
    NxAutoResizeDirective.prototype._resize;
    /**
     * @type {?}
     * @private
     */
    NxAutoResizeDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    NxAutoResizeDirective.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    NxAutoResizeDirective.prototype._cdr;
}

/**
 * @fileoverview added by tsickle
 * Generated from: number-stepper.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const SIZE_MAPPING = {
    big: 'nx-stepper--big',
    normal: ''
};
/** @type {?} */
const DEFAULT_CLASSES = ['nx-stepper'];
/** @type {?} */
const INPUT_CLASSES = ['nx-stepper__input'];
/** @type {?} */
const ALLOWED_CHARACTERS = new RegExp(/^-?[0-9]\d*(\.\d+)?$/g);
/** @type {?} */
const CUSTOM_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => NxNumberStepperComponent)),
    multi: true
};
/** @type {?} */
const CUSTOM_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => NxNumberStepperComponent)),
    multi: true
};
/** @type {?} */
let nextUniqueId = 0;
class NxNumberStepperComponent extends MappedStyles {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} _renderer
     * @param {?} _elementRef
     * @param {?} _intl
     */
    constructor(_changeDetectorRef, _renderer, _elementRef, _intl) {
        super(SIZE_MAPPING, DEFAULT_CLASSES, _elementRef, _renderer);
        this._changeDetectorRef = _changeDetectorRef;
        this._intl = _intl;
        this._step = 1;
        this._min = 0;
        this._max = 100;
        this._value = 0;
        this._label = null;
        this._resize = false;
        this._negative = false;
        this._leadingZero = true;
        /**
         * \@docs-private
         */
        this.inputClassNames = mapClassNames('regular', INPUT_CLASSES);
        /**
         * \@docs-private
         */
        this.inputId = `nx-number-stepper-${nextUniqueId++}`;
        /**
         * \@docs-private
         */
        this.ariaDescribedBy = null;
        /**
         * An event emitted on value change.
         */
        this.valueChange = new EventEmitter();
        this.onChangeCallback = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
        /**
         * \@docs-private
         */
        this.onTouchedCallback = (/**
         * @return {?}
         */
        () => { });
        this._intlSubscription = this._intl.changes.subscribe((/**
         * @return {?}
         */
        () => this._changeDetectorRef.markForCheck()));
    }
    /**
     * Whether the input should be resized. Default: false
     * @param {?} value
     * @return {?}
     */
    set resize(value) {
        this._resize = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get resize() {
        return this._resize;
    }
    /**
     * @return {?}
     */
    get label() {
        return this._label;
    }
    /**
     * Defines the the label shown above the stepper input.
     * @param {?} value
     * @return {?}
     */
    set label(value) {
        if (this._label !== value) {
            this._label = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * Sets the step size. Default: 1
     * @param {?} value
     * @return {?}
     */
    set step(value) {
        // only internal changes no need to call markForCheck
        this._step = Number(value);
    }
    /**
     * @return {?}
     */
    get step() {
        return this._step;
    }
    /**
     * Sets the minimum accepted number. Default: 0
     * @param {?} value
     * @return {?}
     */
    set min(value) {
        this._min = Number(value);
    }
    /**
     * @return {?}
     */
    get min() {
        return this._min;
    }
    /**
     * Sets the maximum accepted number. Default: 100
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        this._max = Number(value);
    }
    /**
     * @return {?}
     */
    get max() {
        return this._max;
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * Sets the value of the number-stepper.
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this._value = value;
        if (this._value !== null) {
            this.setInputValue(this._value);
        }
        else {
            this.setInputValue(0);
        }
        this._changeDetectorRef.markForCheck();
    }
    /**
     * Whether the negative set of styling should be used.
     * @param {?} value
     * @return {?}
     */
    set negative(value) {
        if (this._negative !== value) {
            this._negative = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get negative() {
        return this._negative;
    }
    /**
     * Whether the number stepper value should have a leading zero.
     *
     * Default value is true.
     * @param {?} value
     * @return {?}
     */
    set leadingZero(value) {
        if (this._leadingZero !== value) {
            this._leadingZero = coerceBooleanProperty(value);
            this.setInputValue(this.value);
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get leadingZero() {
        return this._leadingZero;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setInputValue(this._value);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.ngContentWrapper) {
            this.ariaDescribedBy = this.ngContentWrapper.nativeElement.children.length > 0 ? `label-for-${this.inputId}` : null;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._intlSubscription.unsubscribe();
    }
    /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    setInputValue(value) {
        if (this.leadingZero) {
            this.numberInputValue = pad(value.toString(), 2);
        }
        else {
            this.numberInputValue = value.toString();
        }
        // use timeout to get the current value of numberInputValue
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.triggerResize();
        }));
    }
    /* ControlValueAccessor Implementations */
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * @param {?} onChange
     * @return {?}
     */
    registerOnChange(onChange) {
        this.onChangeCallback = onChange;
    }
    /**
     * @param {?} onTouched
     * @return {?}
     */
    registerOnTouched(onTouched) {
        this.onTouchedCallback = onTouched;
    }
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    onInputChange(event) {
        if (!this.validateUserInput(event.target.value)) {
            this._value = null;
        }
        else {
            this._value = Number(event.target.value);
        }
        // setInputValue() should be called so that numberInputValue is updated with the user input
        if (this._value !== null) {
            this.setInputValue(this._value);
        }
        this.valueChange.emit(this._value);
        this.onChangeCallback(this._value);
    }
    /**
     * \@docs-private
     * @param {?} input
     * @return {?}
     */
    validateUserInput(input) {
        return !!input.match(ALLOWED_CHARACTERS);
    }
    /**
     * \@docs-private
     * @return {?}
     */
    incrementOnClick() {
        this._increment();
        this.onTouchedCallback();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    incrementOnKey() {
        this._increment();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    _increment() {
        /** @type {?} */
        let newValue;
        if (this.isBetweenLimits(this._value)) {
            newValue = this.getNextGreaterValue(this._value);
        }
        else {
            newValue = this.enforceLimits(this._value);
        }
        this.value = newValue;
        this.valueChange.emit(this._value);
        this.onChangeCallback(this._value);
    }
    /**
     * \@docs-private
     * @return {?}
     */
    triggerResize() {
        if (this.resize) {
            this.autoResize.updateInputWidth();
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * \@docs-private
     * @return {?}
     */
    decrementOnClick() {
        this._decrement();
        this.onTouchedCallback();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    decrementOnKey() {
        this._decrement();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    _decrement() {
        /** @type {?} */
        let newValue;
        if (this.isBetweenLimits(this._value)) {
            newValue = this.getNextLowerValue(this._value);
        }
        else {
            newValue = this.enforceLimits(this._value);
        }
        this.value = newValue;
        this.valueChange.emit(this._value);
        this.onChangeCallback(this._value);
    }
    /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    enforceLimits(value) {
        if (value > this._max) {
            return this._max;
        }
        else if (value < this._min) {
            return this._min;
        }
        return value;
    }
    /**
     * \@docs-private
     * @param {?} start
     * @return {?}
     */
    getNextLowerValue(start) {
        // if there is an invalid input start is null
        if (!start) {
            start = 0;
        }
        /** @type {?} */
        let next;
        if (this.isValidStep(start)) {
            next = (new Decimal(start).minus(new Decimal(this._step))).toNumber();
        }
        else {
            next = new Decimal(start).toNearest(this._step, Decimal.ROUND_DOWN).toNumber();
        }
        return this.enforceLimits(next);
    }
    /**
     * \@docs-private
     * @param {?} start
     * @return {?}
     */
    getNextGreaterValue(start) {
        /** @type {?} */
        let next;
        if (!start) {
            start = 0;
        }
        if (this.isValidStep(start)) {
            next = (new Decimal(start).plus(new Decimal(this._step))).toNumber();
        }
        else {
            next = new Decimal(start).toNearest(this._step, Decimal.ROUND_UP).toNumber();
        }
        return this.enforceLimits(next);
    }
    /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    isBetweenLimits(value) {
        return value <= this._max && value >= this._min;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    isMinimum() {
        return this._value === this._min;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    isMaximum() {
        return this._value === this._max;
    }
    /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    isValidStep(value) {
        if (value === null) {
            value = new Decimal(0);
        }
        /** @type {?} */
        const min = new Decimal(this._min);
        /** @type {?} */
        const valueDec = new Decimal(value);
        /** @type {?} */
        const checkValue = (min.minus(valueDec)).mod(new Decimal(this._step)).toNumber();
        if (this.isBetweenLimits(value) && ((this.isMinimum() || this.isMaximum()) ||
            checkValue === 0)) {
            return true;
        }
        return false;
    }
    /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    userInputToNumber(value) {
        /** @type {?} */
        const current = value === '' ? 0 : value;
        return parseInt(current, 10);
    }
    /**
     * @return {?}
     */
    _validateFn() {
        // the manual user input must match min + n * step, e.g. minimum 1 step 2: 1, 3, 5, 7 etc.
        if (!this.isValidStep(this._value)) {
            return { nxNumberStepperStepError: 'Value is not a valid step' };
        }
        else if (this._value === null) {
            return { nxNumberStepperFormatError: 'Not a valid number' };
        }
        return null;
    }
    /**
     * \@docs-private
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return this._validateFn();
    }
    /**
     * @return {?}
     */
    get _buttonType() {
        return 'secondary' + (this.negative ? ' negative' : '');
    }
}
NxNumberStepperComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-number-stepper',
                template: "<div *ngIf=\"label\" class=\"nx-stepper__label\">\n  <label [for]=\"inputId\">\n    {{label}}\n  </label>\n</div>\n<div class=\"nx-stepper__label\" #customLabel *ngIf=\"!label\" [id]=\"ariaDescribedBy\">\n  <ng-content></ng-content>\n</div>\n<div class=\"nx-stepper__input-container\">\n  <button\n    [attr.aria-label]=\"_intl.decrementAriaLabel\"\n    [nxButton]=\"_buttonType\"\n    class=\"nx-stepper__down nx-stepper__control\"\n    (click)=\"decrementOnClick()\"\n    [disabled]=\"value <= min\"\n    type=\"button\">\n    <nx-icon name=\"minus\" size=\"s\"></nx-icon>\n  </button>\n  <div class=\"nx-stepper__input-wrapper\">\n    <div class=\"nx-stepper__inner-wrapper\">\n        <ng-content select=\"nx-number-stepper-prefix\"></ng-content>\n\n        <input [nxAutoResize]=\"resize\" [value]=\"numberInputValue\"\n        [attr.aria-describedby]=\"ariaDescribedBy\"\n        [id]=\"inputId\" [ngClass]=\"inputClassNames\"\n        (input)=\"onInputChange($event)\"\n        (keydown.arrowup)=\"incrementOnKey()\"\n        (keydown.arrowdown)=\"decrementOnKey()\"\n        (blur)=\"onTouchedCallback()\"/>\n\n        <ng-content select=\"nx-number-stepper-suffix\"></ng-content>\n    </div>\n    <div class=\"nx-stepper__input-underline\"></div>\n  </div>\n\n  <button\n    [attr.aria-label]=\"_intl.incrementAriaLabel\"\n    [nxButton]=\"_buttonType\"\n    class=\"nx-stepper__up nx-stepper__control\"\n    (click)=\"incrementOnClick()\"\n    [disabled]=\"value >= max\"\n    type=\"button\">\n    <nx-icon name=\"plus\" size=\"s\"></nx-icon>\n  </button>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: ['classNames: nxSize'],
                host: {
                    '[class.is-negative]': 'negative'
                },
                providers: [CUSTOM_VALUE_ACCESSOR, CUSTOM_VALIDATOR],
                styles: [":host{display:block}:host input{padding:0}.nx-stepper__input-container{align-items:flex-end;display:flex;margin-top:12px}.nx-stepper__label{display:flex;font-size:20px;font-size:var(--number-stepper-label-font-size,20px);line-height:28px;line-height:var(--number-stepper-label-line-height,28px);font-weight:400;font-weight:var(--number-stepper-label-font-weight,400);letter-spacing:.2px;letter-spacing:var(--number-stepper-label-letter-spacing,.2px)}.nx-stepper__control{width:32px;height:32px;min-height:32px;font-size:24px;margin:0;padding:0}.nx-stepper__input{width:56px;min-width:56px}.nx-stepper__input,::ng-deep .nx-stepper__prefix,::ng-deep .nx-stepper__suffix{font-size:20px;font-size:var(--number-stepper-small-font-size,20px);line-height:28px;line-height:var(--number-stepper-small-line-height,28px);font-weight:400;font-weight:var(--number-stepper-small-font-weight,400);letter-spacing:.2px;letter-spacing:var(--number-stepper-small-letter-spacing,.2px);color:#414141;color:var(--number-stepper-color,#414141);background:0 0;outline:0;border:0;text-align:center}::ng-deep .nx-stepper__suffix{margin-left:4px}::ng-deep .nx-stepper__prefix{margin-right:4px}.nx-stepper__input-wrapper{display:flex;align-items:center;flex-direction:column;margin:0 16px}.nx-stepper__inner-wrapper{height:28px;display:flex;align-items:baseline}.nx-stepper__input-underline{width:100%;margin-top:2px;height:2px;background:#414141;background:var(--number-stepper-underline-color,#414141)}:host.nx-stepper--big .nx-stepper__control{width:72px;min-height:48px;margin-bottom:0}:host.nx-stepper--big .nx-stepper__input{width:72px;min-width:72px}:host.nx-stepper--big .nx-stepper__input,:host.nx-stepper--big ::ng-deep .nx-stepper__prefix,:host.nx-stepper--big ::ng-deep .nx-stepper__suffix{font-size:40px;font-size:var(--number-stepper-large-font-size,40px);line-height:48px;line-height:var(--number-stepper-large-line-height,48px);font-weight:400;font-weight:var(--number-stepper-large-font-weight,400);letter-spacing:.3px;letter-spacing:var(--number-stepper-large-letter-spacing,.3px);height:48px;padding:0;margin-bottom:0}:host.nx-stepper--big .nx-stepper__input-wrapper{margin:0 24px}:host.nx-stepper--big .nx-stepper__input-underline{margin-top:-2px}:host.nx-stepper--big .nx-stepper__inner-wrapper{height:48px}:host.is-negative .nx-stepper__label,:host.is-negative ::ng-deep .nx-stepper__prefix,:host.is-negative ::ng-deep .nx-stepper__suffix{color:#fff}:host.is-negative .nx-stepper__input{color:#fff}:host.is-negative .nx-stepper__input-underline{background:#fff}@media screen and (-ms-high-contrast:active){button.nx-stepper__control:disabled{border-color:GrayText;color:GrayText;opacity:1}.nx-stepper__input{color:buttonText}::ng-deep .nx-stepper__prefix,::ng-deep .nx-stepper__suffix,:host.nx-stepper--big ::ng-deep .nx-stepper__prefix,:host.nx-stepper--big ::ng-deep .nx-stepper__suffix{-ms-high-contrast-adjust:none;color:windowText}.nx-stepper__inner-wrapper{background:buttonFace}.nx-stepper__input-underline{background:buttonText}}"]
            }] }
];
/** @nocollapse */
NxNumberStepperComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: ElementRef },
    { type: NxNumberStepperIntl }
];
NxNumberStepperComponent.propDecorators = {
    ngContentWrapper: [{ type: ViewChild, args: ['customLabel', { static: false },] }],
    autoResize: [{ type: ViewChild, args: [NxAutoResizeDirective, { static: true },] }],
    valueChange: [{ type: Output, args: ['nxValueChange',] }],
    resize: [{ type: Input, args: ['nxResize',] }],
    label: [{ type: Input, args: ['nxLabel',] }],
    step: [{ type: Input, args: ['nxStep',] }],
    min: [{ type: Input, args: ['nxMin',] }],
    max: [{ type: Input, args: ['nxMax',] }],
    value: [{ type: Input, args: ['nxValue',] }],
    negative: [{ type: Input }],
    leadingZero: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxNumberStepperComponent.prototype._step;
    /**
     * @type {?}
     * @private
     */
    NxNumberStepperComponent.prototype._min;
    /**
     * @type {?}
     * @private
     */
    NxNumberStepperComponent.prototype._max;
    /**
     * @type {?}
     * @private
     */
    NxNumberStepperComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    NxNumberStepperComponent.prototype._label;
    /**
     * @type {?}
     * @private
     */
    NxNumberStepperComponent.prototype._resize;
    /**
     * @type {?}
     * @private
     */
    NxNumberStepperComponent.prototype._intlSubscription;
    /**
     * @type {?}
     * @private
     */
    NxNumberStepperComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxNumberStepperComponent.prototype._leadingZero;
    /**
     * \@docs-private
     * @type {?}
     */
    NxNumberStepperComponent.prototype.numberInputValue;
    /**
     * Defines the size of the number stepper.
     *
     * Values: big | normal. Default: normal
     * @type {?}
     */
    NxNumberStepperComponent.prototype.classNames;
    /**
     * \@docs-private
     * @type {?}
     */
    NxNumberStepperComponent.prototype.inputClassNames;
    /**
     * \@docs-private
     * @type {?}
     */
    NxNumberStepperComponent.prototype.inputId;
    /**
     * \@docs-private
     * @type {?}
     */
    NxNumberStepperComponent.prototype.inputWidth;
    /**
     * \@docs-private
     * @type {?}
     */
    NxNumberStepperComponent.prototype.ariaDescribedBy;
    /**
     * \@docs-private
     * @type {?}
     */
    NxNumberStepperComponent.prototype.ngContentWrapper;
    /**
     * \@docs-private
     * @type {?}
     */
    NxNumberStepperComponent.prototype.autoResize;
    /**
     * An event emitted on value change.
     * @type {?}
     */
    NxNumberStepperComponent.prototype.valueChange;
    /**
     * @type {?}
     * @private
     */
    NxNumberStepperComponent.prototype.onChangeCallback;
    /**
     * \@docs-private
     * @type {?}
     */
    NxNumberStepperComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    NxNumberStepperComponent.prototype._changeDetectorRef;
    /** @type {?} */
    NxNumberStepperComponent.prototype._intl;
}

/**
 * @fileoverview added by tsickle
 * Generated from: number-stepper-prefix.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Directive used to pass a suffix to the number stepper.
 */
class NxNumberStepperPrefixDirective {
}
NxNumberStepperPrefixDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'nx-number-stepper-prefix',
                host: {
                    'class': 'nx-stepper__prefix'
                }
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: number-stepper-suffix.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Directive used to pass a suffix to the number stepper.
 */
class NxNumberStepperSuffixDirective {
}
NxNumberStepperSuffixDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'nx-number-stepper-suffix',
                host: {
                    'class': 'nx-stepper__suffix'
                }
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: number-stepper.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxNumberStepperModule {
}
NxNumberStepperModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    NxInputModule,
                    FormsModule,
                    NxIconModule,
                    NxButtonModule,
                    CommonModule
                ],
                exports: [
                    NxNumberStepperComponent,
                    NxAutoResizeDirective,
                    NxNumberStepperPrefixDirective,
                    NxNumberStepperSuffixDirective
                ],
                declarations: [
                    NxNumberStepperComponent,
                    NxAutoResizeDirective,
                    NxNumberStepperPrefixDirective,
                    NxNumberStepperSuffixDirective
                ],
                providers: [NxNumberStepperIntl],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: allianz-ngx-ndbx-number-stepper.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxNumberStepperComponent, NxNumberStepperIntl, NxNumberStepperModule, NxNumberStepperPrefixDirective, NxNumberStepperSuffixDirective, NxAutoResizeDirective as ɵa };
//# sourceMappingURL=allianz-ngx-ndbx-number-stepper.js.map
