import { Directive, Input, InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Renderer2, ChangeDetectorRef, Optional, Inject, ContentChild, ContentChildren, ViewChild, NgModule } from '@angular/core';
import { startWith, delay } from 'rxjs/operators';
import { getClassNameList } from '@allianz/ngx-ndbx/utils';
import { CommonModule } from '@angular/common';
import { NxErrorModule, NxLabelModule } from '@allianz/ngx-ndbx/base';

/**
 * @fileoverview added by tsickle
 * Generated from: appendix.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let uniqueId = 0;
// This Directive solely purpose is to mark given ng-content and project it into the required destination.
class NxFormfieldAppendixDirective {
    constructor() {
        /**
         * Sets the id of the formfield appendix.
         */
        this.id = `nx-formfield-appendix-${uniqueId++}`;
    }
}
NxFormfieldAppendixDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nxFormfieldAppendix]',
                host: {
                    '[attr.id]': 'id'
                }
            },] }
];
NxFormfieldAppendixDirective.propDecorators = {
    id: [{ type: Input }]
};
if (false) {
    /**
     * Sets the id of the formfield appendix.
     * @type {?}
     */
    NxFormfieldAppendixDirective.prototype.id;
}

/**
 * @fileoverview added by tsickle
 * Generated from: error.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let uniqueId$1 = 0;
class NxFormfieldErrorDirective {
    constructor() {
        // create a unique id to be used by aria-described-by
        /**
         * Sets the id of the formfield error.
         */
        this.id = `nx-formfield-error-${uniqueId$1++}`;
    }
}
NxFormfieldErrorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nxFormfieldError], [nxError]',
                host: {
                    role: 'alert',
                    '[attr.id]': 'id'
                }
            },] }
];
NxFormfieldErrorDirective.propDecorators = {
    id: [{ type: Input }]
};
if (false) {
    /**
     * Sets the id of the formfield error.
     * @type {?}
     */
    NxFormfieldErrorDirective.prototype.id;
}

/**
 * @fileoverview added by tsickle
 * Generated from: formfield-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docs-private
 * @abstract
 * @template T
 */
class NxFormfieldControl {
}
if (false) {
    /** @type {?} */
    NxFormfieldControl.prototype.value;
    /** @type {?} */
    NxFormfieldControl.prototype.stateChanges;
    /** @type {?} */
    NxFormfieldControl.prototype.empty;
    /** @type {?} */
    NxFormfieldControl.prototype.id;
    /** @type {?} */
    NxFormfieldControl.prototype.ngControl;
    /** @type {?} */
    NxFormfieldControl.prototype.focused;
    /** @type {?} */
    NxFormfieldControl.prototype.required;
    /** @type {?} */
    NxFormfieldControl.prototype.disabled;
    /** @type {?} */
    NxFormfieldControl.prototype.readonly;
    /** @type {?} */
    NxFormfieldControl.prototype.shouldLabelFloat;
    /** @type {?} */
    NxFormfieldControl.prototype.errorState;
    /**
     * The placeholder for this control.
     * @type {?}
     */
    NxFormfieldControl.prototype.placeholder;
    /**
     * An optional name for the control type that can be used to distinguish `nx-formfield` elements
     * based on their control type. The form field will add a class,
     * `nx-formfield--type-{{controlType}}` to its root element.
     * @type {?}
     */
    NxFormfieldControl.prototype.controlType;
    /**
     * @abstract
     * @param {?} ids
     * @return {?}
     */
    NxFormfieldControl.prototype.setDescribedByIds = function (ids) { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    NxFormfieldControl.prototype.setAriaLabel = function (value) { };
    /**
     * @abstract
     * @return {?}
     */
    NxFormfieldControl.prototype.elementRef = function () { };
}

/**
 * @fileoverview added by tsickle
 * Generated from: hint.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let uniqueId$2 = 0;
// This Directive solely purpose is to mark given ng-content and project it into the required destination.
class NxFormfieldHintDirective {
    constructor() {
        /**
         * Sets the id of the formfield hint.
         */
        this.id = `nx-formfield-hint-${uniqueId$2++}`;
    }
}
NxFormfieldHintDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nxFormfieldHint]',
                host: {
                    '[attr.id]': 'id'
                }
            },] }
];
NxFormfieldHintDirective.propDecorators = {
    id: [{ type: Input }]
};
if (false) {
    /**
     * Sets the id of the formfield hint.
     * @type {?}
     */
    NxFormfieldHintDirective.prototype.id;
}

/**
 * @fileoverview added by tsickle
 * Generated from: note.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let uniqueId$3 = 0;
// This Directive solely purpose is to mark given ng-content and project it into the required destination.
class NxFormfieldNoteDirective {
    constructor() {
        /**
         * Sets the id of the formfield note.
         */
        this.id = `nx-formfield-note-${uniqueId$3++}`;
    }
}
NxFormfieldNoteDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nxFormfieldNote]',
                host: {
                    '[attr.id]': 'id'
                }
            },] }
];
NxFormfieldNoteDirective.propDecorators = {
    id: [{ type: Input }]
};
if (false) {
    /**
     * Sets the id of the formfield note.
     * @type {?}
     */
    NxFormfieldNoteDirective.prototype.id;
}

/**
 * @fileoverview added by tsickle
 * Generated from: suffix.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// This Directive solely purpose is to mark given ng-content and project it into the required destination.
class NxFormfieldSuffixDirective {
}
NxFormfieldSuffixDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nxFormfieldSuffix]'
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: prefix.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// This Directive solely purpose is to mark given ng-content and project it into the required destination.
class NxFormfieldPrefixDirective {
}
NxFormfieldPrefixDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nxFormfieldPrefix]'
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: label.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A directive for passing more complex custom label content.
 */
class NxFormfieldLabelDirective {
}
NxFormfieldLabelDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'nx-formfield-label'
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: formfield.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NX_STYLES = {
    'negative': 'nx-formfield--negative'
};
/**
 * Represents the default options for the form field that can be configured
 * using the `FORMFIELD_DEFAULT_OPTIONS` injection token.
 * @record
 */
function FormfieldDefaultOptions() { }
if (false) {
    /**
     * Sets the default appearance. (optional)
     * @type {?|undefined}
     */
    FormfieldDefaultOptions.prototype.appearance;
    /**
     * Sets the default float label type. (optional)
     * @type {?|undefined}
     */
    FormfieldDefaultOptions.prototype.nxFloatLabel;
}
/** @type {?} */
const FORMFIELD_DEFAULT_OPTIONS = new InjectionToken('FORMFIELD_DEFAULT_OPTIONS');
class NxFormfieldComponent {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} _changeDetectorRef
     * @param {?} _defaultOptions
     */
    constructor(elementRef, renderer, _changeDetectorRef, _defaultOptions) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this._changeDetectorRef = _changeDetectorRef;
        this._defaultOptions = _defaultOptions;
        this._styles = '';
        this._subscriptions = [];
    }
    /**
     * Whether the label should float once the input is focused or filled (auto, default)
     * or force it to always float with a value of always to simulate a more static form.
     * @return {?}
     */
    get floatLabel() {
        return this._floatLabel || (this._defaultOptions && this._defaultOptions.nxFloatLabel) || 'auto';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set floatLabel(value) {
        if (value !== this._floatLabel) {
            this._floatLabel = value || 'auto';
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * Sets the styling of the formfield.
     * If 'negative', a negative set of stylings is used.
     * @param {?} value
     * @return {?}
     */
    set styles(value) {
        if (this._styles === value) {
            return;
        }
        /** @type {?} */
        const classNames = getClassNameList(value, NX_STYLES);
        classNames.forEach((/**
         * @param {?} classStr
         * @return {?}
         */
        classStr => {
            this.renderer.addClass(this.elementRef.nativeElement, classStr);
        }));
        this._styles = value;
    }
    /**
     * **NDBX Expert option**
     *
     * Sets the appearance of the formfield.
     * @param {?} value
     * @return {?}
     */
    set appearance(value) {
        if (this._appearance !== value) {
            this._appearance = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get appearance() {
        return this._appearance || (this._defaultOptions && this._defaultOptions.appearance) || 'auto';
    }
    /**
     * @return {?}
     */
    get _shouldAlwaysFloat() {
        return this.floatLabel === 'always';
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get shouldLabelFloat() {
        return (this._control.shouldLabelFloat || this._shouldAlwaysFloat);
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get control() {
        return this._control;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        /** @type {?} */
        let subscription;
        /** @type {?} */
        const subscriptions = [];
        this._validateControlChild();
        if (this._control.controlType) {
            this.elementRef.nativeElement.classList.add(`nx-formfield--type-${this._control.controlType}`);
        }
        // Subscribe to changes in the child control state in order to update the form field UI.
        subscription = this._control.stateChanges.pipe(startWith(null), delay(0)).subscribe((/**
         * @return {?}
         */
        () => {
            this._syncDescribedByIds();
            this._changeDetectorRef.markForCheck();
        }));
        subscriptions.push(subscription);
        // Re-validate when the number of hints changes.
        subscription = this._hintChildren.changes.pipe(startWith(null), delay(0)).subscribe((/**
         * @return {?}
         */
        () => {
            this._changeDetectorRef.markForCheck();
        }));
        subscriptions.push(subscription);
        // Update the aria-described by when the number of errors changes.
        subscription = this._errorChildren.changes.pipe(startWith(null), delay(0)).subscribe((/**
         * @return {?}
         */
        () => {
            this._syncDescribedByIds();
            this._changeDetectorRef.markForCheck();
        }));
        subscriptions.push(subscription);
        this._subscriptions = subscriptions;
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this._validateControlChild();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        (subscription) => subscription.unsubscribe()));
    }
    /**
     * \@docs-private
     * @return {?}
     */
    getDisplayedMessage() {
        if (this._control.errorState && this._errorChildren && this._errorChildren.length > 0) {
            return 'error';
        }
        if (this._noteChildren && this._noteChildren.length > 0) {
            return 'note';
        }
        return '';
    }
    /**
     * @private
     * @return {?}
     */
    _syncDescribedByIds() {
        if (this._control) {
            /** @type {?} */
            let ids = [];
            ids = this._hintChildren.map((/**
             * @param {?} hint
             * @return {?}
             */
            hint => hint.id));
            if (this.getDisplayedMessage() === 'note') {
                ids = [...this._noteChildren.map((/**
                     * @param {?} hint
                     * @return {?}
                     */
                    hint => hint.id)), ...ids];
            }
            else if (this._errorChildren) {
                ids = [...this._errorChildren.map((/**
                     * @param {?} error
                     * @return {?}
                     */
                    error => error.id)), ...ids];
            }
            this._control.setDescribedByIds(ids);
        }
    }
    // Fail if the required control is missing.
    /**
     * @protected
     * @return {?}
     */
    _validateControlChild() {
        if (!this._control) {
            throw new Error('Formfield must contain a NxFormfieldControl like input[nxInput] or a custom implementation');
        }
    }
    /**
     * \@docs-private
     * @return {?}
     */
    getConnectedOverlayOrigin() {
        return this._connectionContainerRef || this.elementRef;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    _hasLabel() {
        return !!this._labelChild || !!this.label;
    }
    /**
     * \@docs-private
     * The placeholder is hidden when
     *  - the control is not empty
     *  - The label is not floated
     *
     * @return {?}
     */
    _hideControlPlaceholder() {
        return !this.shouldLabelFloat && this._hasLabel() || this._control.empty === false;
    }
}
NxFormfieldComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-formfield',
                template: "<!--\nWe are building the following structure.\n\n+-----------------------------+ +-----------+\n| Prefix |   Input   | Suffix | |  Appendix |\n+-----------------------------+ +-----------+\n|-----------------Border--------------------|\n+-------------------------------------------+\n|                 Hints                     |\n+-------------------------------------------+\n|                                           |\n|                Messages                   |\n|                                           |\n+-------------------------------------------+\n\n-->\n\n<div class=\"nx-formfield__wrapper\">\n\n\n  <!-- Give a flex context to properly align suffix, input & postfix -->\n  <div class=\"nx-formfield__row\" #connectionContainer>\n    <div class=\"nx-formfield__flexfield\">\n\n\n      <div class=\"nx-formfield__input-container\">\n        <div class=\"nx-formfield__prefix\" *ngIf=\"_prefixChildren.length\">\n          <ng-content select=\"[nxFormfieldPrefix]\"></ng-content>\n        </div>\n\n        <div class=\"nx-formfield__input\">\n          <ng-content></ng-content>\n\n          <!-- This handles the floating whole behavior -->\n          <span class=\"nx-formfield__label-holder\">\n            <label class=\"nx-formfield__label\" [attr.aria-owns]=\"_control.id\"\n              [attr.for]=\"_control.id\">\n              <ng-container *ngIf=\"!_labelChild\">\n                {{ label }}\n              </ng-container>\n              <ng-content select=\"nx-formfield-label\"></ng-content>\n            </label>\n          </span>\n        </div>\n\n        <div class=\"nx-formfield__suffix\" *ngIf=\"_suffixChildren.length\">\n          <ng-content select=\"[nxFormfieldSuffix]\"></ng-content>\n        </div>\n      </div>\n      <!-- Space to render the hints below the textfield -->\n      <div class=\"nx-formfield__hints\" *ngIf=\"_hintChildren.length\">\n        <ng-content select=\"[nxFormfieldHint]\"></ng-content>\n      </div>\n    </div>\n\n    <!-- Appendix is similar to a suffix but visibly outside of the input  -->\n    <div class=\"nx-formfield__appendix\" *ngIf=\"_appendixChildren.length\">\n      <ng-content select=\"[nxFormfieldAppendix]\"></ng-content>\n    </div>\n  </div>\n\n  <!-- In case we got some additional information we render them below the given input -->\n  <ng-container [ngSwitch]=\"getDisplayedMessage()\">\n    <div class=\"nx-formfield__message\" *ngSwitchCase=\"'error'\">\n      <ng-content select=\"[nxFormfieldError]\"></ng-content>\n    </div>\n\n    <div class=\"nx-formfield__message\" *ngSwitchCase=\"'note'\">\n      <ng-content select=\"[nxFormfieldNote]\"></ng-content>\n    </div>\n  </ng-container>\n</div>\n",
                host: {
                    '[class.nx-formfield]': 'true',
                    '[class.is-disabled]': 'this._control.disabled',
                    '[class.is-readonly]': 'this._control.readonly',
                    '[class.is-filled]': 'this._control.empty === false',
                    '[class.is-focused]': 'this._control.focused',
                    '[class.is-floating]': 'this.shouldLabelFloat',
                    '[class.has-error]': 'this._control.errorState',
                    '[class.has-outline]': 'this.appearance === "outline"',
                    '[class.has-hint]': 'this._hintChildren?.length > 0',
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".nx-formfield{display:block;color:#414141;color:var(--text-01,#414141)}.nx-formfield__wrapper{padding-bottom:24px;padding-bottom:var(--formfield-bottom-padding,24px);padding-top:16px;padding-top:var(--formfield-label-height,16px)}.has-hint .nx-formfield__wrapper{padding-bottom:0}.nx-formfield__row{min-height:32px;min-height:var(--formfield-control-height,32px);background-color:transparent;background-color:var(--formfield-background-color,transparent);display:flex;align-items:stretch;width:100%}.nx-formfield__row:after{content:'';font-size:0;display:block;min-height:inherit}.nx-formfield__flexfield{font-size:20px;font-size:var(--formfield-control-font-size,20px);line-height:28px;line-height:var(--formfield-control-line-height,28px);font-weight:600;font-weight:var(--formfield-control-font-weight,600);letter-spacing:.2px;letter-spacing:var(--formfield-control-letter-spacing,.2px);align-items:stretch;flex-direction:column;display:inline-flex;width:100%;position:relative;min-width:0;flex:0 1 auto}.nx-formfield__input-container{display:flex;border-bottom:1px solid #414141;border-bottom:var(--formfield-border-width,1px) solid var(--formfield-border-color,#414141);height:32px;height:var(--formfield-control-height,32px);flex:auto;padding:0 0 3px;padding:var(--formfield-input-padding,0 0 3px 0)}.nx-formfield__input{position:relative;flex:auto;min-width:0;display:flex}.nx-formfield__label-holder{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none;z-index:10}.nx-formfield__label{font-size:20px;font-size:var(--formfield-placeholder-label-font-size,20px);line-height:28px;line-height:var(--formfield-placeholder-label-line-height,28px);font-weight:300;font-weight:var(--formfield-placeholder-label-font-weight,300);letter-spacing:.2px;letter-spacing:var(--formfield-placeholder-label-letter-spacing,.2px);color:#414141;color:var(--formfield-label-color,#414141);display:block;position:absolute;left:0;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform .15s ease-out,font-size .15s ease-out;-webkit-text-size-adjust:100%;-moz-text-size-adjust:100%;-ms-text-size-adjust:100%;text-size-adjust:100%}.nx-formfield__appendix,.nx-formfield__prefix,.nx-formfield__suffix{align-items:center;flex:none;white-space:nowrap;color:#414141;color:var(--formfield-control-color,#414141)}.nx-formfield__appendix nx-icon.nx-icon--auto,.nx-formfield__prefix nx-icon.nx-icon--auto,.nx-formfield__suffix nx-icon.nx-icon--auto{font-size:24px;font-size:var(--formfield-icon-size,24px);font-weight:400}.nx-formfield__appendix nx-icon,.nx-formfield__prefix nx-icon,.nx-formfield__suffix nx-icon{display:block}.nx-formfield__prefix,.nx-formfield__suffix{display:inline-flex}.nx-formfield__appendix{height:32px;height:var(--formfield-control-height,32px);margin-left:8px;display:flex;border-bottom-width:var(--formfield-border-width,1px);padding:0 0 3px;padding:var(--formfield-input-padding,0 0 3px 0);border-bottom:1px solid transparent}.nx-formfield__prefix{margin-right:8px}.nx-formfield__suffix{margin-left:8px}.nx-formfield__hints{color:#414141;color:var(--text-01,#414141);font-size:12px;font-size:var(--formfield-hint-font-size,12px);line-height:16px;line-height:var(--formfield-hint-line-height,16px);font-weight:400;font-weight:var(--formfield-hint-font-weight,400);letter-spacing:.5px;letter-spacing:var(--formfield-hint-letter-spacing,.5px);padding-top:8px;text-align:right}[nxformfieldhint]{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.nx-formfield__message{margin-top:4px}.nx-formfield:not(.nx-formfield--negative) .nx-formfield__appendix nx-icon{color:#006192;color:var(--formfield-active-color,#006192)}.nx-formfield.is-focused .nx-formfield__label{text-overflow:ellipsis}.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error){color:#006192;color:var(--formfield-active-color,#006192)}.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error) .nx-formfield__input-container{border-bottom-color:#007ab3;border-bottom-color:var(--formfield-active-border-color,#007ab3)}.nx-formfield.is-focused:not(.nx-formfield--negative):not(.has-error).nx-formfield--negative{color:#fff}.nx-formfield:not(.nx-formfield--negative):not(.has-error):not(.is-disabled):not(.is-focused):not(.has-outline) .nx-formfield__row:hover .nx-formfield__input-container{border-bottom-color:#414141;border-bottom-color:var(--formfield-hover-border-color,#414141)}.nx-formfield.is-focused:not(.nx-formfield--negative).has-outline .nx-formfield__input-container{border-color:#006192;border-color:var(--formfield-outline-active-border-color,#006192);box-shadow:0 0 0 2px #009de6;box-shadow:var(--formfield-outline-focus-box-shadow,0 0 0 2px #009de6)}.nx-formfield.is-focused:not(.nx-formfield--negative).has-outline.has-error .nx-formfield__input-container{border-bottom-color:#dc3149;border-bottom-color:var(--danger,#dc3149)}.nx-formfield.has-outline{font-size:16px;font-size:var(--formfield-outline-control-font-size,16px);line-height:24px;line-height:var(--formfield-outline-control-line-height,24px);font-weight:400;font-weight:var(--formfield-outline-control-font-weight,400);letter-spacing:0;letter-spacing:var(--formfield-outline-control-letter-spacing,0)}.nx-formfield.has-outline.nx-formfield--type-textarea .nx-formfield__input-container{height:auto}.nx-formfield.has-outline .nx-formfield__wrapper{padding-top:28px;padding-top:var(--formfield-outline-label-height,28px)}.nx-formfield.has-outline .nx-formfield__row{min-height:40px;min-height:var(--formfield-outline-control-height,40px)}.nx-formfield.has-outline .nx-formfield__flexfield{font-size:16px;font-size:var(--formfield-outline-control-font-size,16px);line-height:24px;line-height:var(--formfield-outline-control-line-height,24px);font-weight:400;font-weight:var(--formfield-outline-control-font-weight,400);letter-spacing:0;letter-spacing:var(--formfield-outline-control-letter-spacing,0);padding:0}.nx-formfield.has-outline .nx-formfield__input-container{padding:0;border-width:var(--formfield-border-width,1px);border-color:var(--formfield-outline-border-color,#767676);border-radius:4px;height:40px;height:var(--formfield-outline-control-height,40px);border:1px solid #767676}.nx-formfield.has-outline input,.nx-formfield.has-outline nx-dropdown .nx-dropdown__container{padding:0 7px}.nx-formfield.has-outline .nx-formfield__suffix{margin-right:7px;margin-left:0}.nx-formfield.has-outline .nx-formfield__prefix{margin-left:7px;margin-right:0}.nx-formfield.has-outline .nx-formfield__input textarea[nxInput]{line-height:24px;padding:7px}.nx-formfield.has-outline .nx-formfield__appendix{height:40px;height:var(--formfield-outline-control-height,40px);margin-left:8px;display:flex;border-top:1px solid transparent;border-top:var(--formfield-border-width,1px) solid transparent;border-bottom:1px solid transparent;border-bottom:var(--formfield-border-width,1px) solid transparent;padding:0}.nx-formfield.has-outline .nx-formfield__hints{text-align:left;font-size:16px;font-size:var(--formfield-outline-hint-font-size,16px);line-height:1em;line-height:var(--formfield-outline-hint-line-height,1em);font-weight:400;font-weight:var(--formfield-outline-hint-font-weight,400);letter-spacing:0;letter-spacing:var(--formfield-outline-hint-letter-spacing,0)}.nx-formfield.has-outline input::-ms-input-placeholder{font-size:16px;font-size:var(--formfield-outline-input-native-placeholder-font-size,16px);line-height:40px;line-height:var(--formfield-outline-input-native-placeholder-line-height,40px);font-weight:200;font-weight:var(--formfield-outline-input-native-placeholder-font-weight,200);letter-spacing:0;letter-spacing:var(--formfield-outline-input-native-placeholder-letter-spacing,0);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676)}.nx-formfield.has-outline input::placeholder{font-size:16px;font-size:var(--formfield-outline-input-native-placeholder-font-size,16px);line-height:40px;line-height:var(--formfield-outline-input-native-placeholder-line-height,40px);font-weight:200;font-weight:var(--formfield-outline-input-native-placeholder-font-weight,200);letter-spacing:0;letter-spacing:var(--formfield-outline-input-native-placeholder-letter-spacing,0);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676)}.nx-formfield.has-outline input::-moz-placeholder{font-size:16px;font-size:var(--formfield-outline-input-native-placeholder-font-size,16px);line-height:40px;line-height:var(--formfield-outline-input-native-placeholder-line-height,40px);font-weight:200;font-weight:var(--formfield-outline-input-native-placeholder-font-weight,200);letter-spacing:0;letter-spacing:var(--formfield-outline-input-native-placeholder-letter-spacing,0);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676)}.nx-formfield.has-outline input::-webkit-input-placeholder{font-size:16px;font-size:var(--formfield-outline-input-native-placeholder-font-size,16px);line-height:40px;line-height:var(--formfield-outline-input-native-placeholder-line-height,40px);font-weight:200;font-weight:var(--formfield-outline-input-native-placeholder-font-weight,200);letter-spacing:0;letter-spacing:var(--formfield-outline-input-native-placeholder-letter-spacing,0);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676)}.nx-formfield.has-outline input:-ms-input-placeholder{font-size:16px;font-size:var(--formfield-outline-input-native-placeholder-font-size,16px);line-height:40px;line-height:var(--formfield-outline-input-native-placeholder-line-height,40px);font-weight:200;font-weight:var(--formfield-outline-input-native-placeholder-font-weight,200);letter-spacing:0;letter-spacing:var(--formfield-outline-input-native-placeholder-letter-spacing,0);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676)}.nx-formfield.has-outline.is-readonly .nx-formfield__input-container{border-color:#c2c2c2;border-color:var(--formfield-readonly-border-color,#c2c2c2);background-color:#f5f5f5;background-color:var(--formfield-readonly-background-color,#f5f5f5)}.nx-formfield.is-floating .nx-formfield__label{transform:translateY(-16px);transform:translateY(var(--formfield-floating-distance,-16px));font-size:12px;font-size:var(--formfield-label-font-size,12px);line-height:16px;line-height:var(--formfield-label-line-height,16px);font-weight:600;font-weight:var(--formfield-label-font-weight,600);letter-spacing:.5px;letter-spacing:var(--formfield-label-letter-spacing,.5px)}.nx-formfield.is-floating.is-filled .nx-formfield__label{transition:none}.nx-formfield.is-floating.has-outline .nx-formfield__label{padding-top:0;transform:translateY(-29px);transform:translateY(var(--formfield-outline-floating-distance,-29px));font-size:16px;font-size:var(--formfield-outline-label-font-size,16px);line-height:24px;line-height:var(--formfield-outline-label-line-height,24px);font-weight:600;font-weight:var(--formfield-outline-label-font-weight,600);letter-spacing:0;letter-spacing:var(--formfield-outline-label-letter-spacing,0)}.nx-formfield.is-floating.has-outline .nx-formfield__prefix~.nx-formfield__input .nx-formfield__label{padding:0 7px}.nx-formfield.has-error:not(.has-outline) .nx-formfield__input input[nxInput],.nx-formfield.has-error:not(.has-outline) .nx-formfield__prefix,.nx-formfield.has-error:not(.has-outline) .nx-formfield__suffix,.nx-formfield.has-error:not(.has-outline):not(.is-floating) .nx-formfield__label{font-weight:700;font-weight:var(--formfield-error-input-font-weight,700)}.nx-formfield.has-error:not(.nx-formfield--negative),.nx-formfield.has-error:not(.nx-formfield--negative):not(.has-outline) .nx-formfield__label,.nx-formfield.has-error:not(.nx-formfield--negative):not(.has-outline) .nx-formfield__prefix,.nx-formfield.has-error:not(.nx-formfield--negative):not(.has-outline) .nx-formfield__suffix{color:#dc3149;color:var(--danger,#dc3149)}.nx-formfield.has-error:not(.nx-formfield--negative) .nx-formfield__input-container{border-bottom-color:#dc3149;border-bottom-color:var(--danger,#dc3149)}.nx-formfield.has-error:not(.nx-formfield--negative).is-floating .nx-formfield__label{color:#414141;color:var(--formfield-label-color,#414141)}.nx-formfield.has-error:not(.nx-formfield--negative).has-outline{color:#414141;color:var(--text-01,#414141)}.nx-formfield.has-error:not(.nx-formfield--negative).has-outline .nx-formfield__input-container{border-color:#dc3149;border-color:var(--danger,#dc3149)}.nx-formfield.is-disabled{color:#c2c2c2;color:var(--formfield-disabled-text-color,#c2c2c2);-webkit-text-fill-color:#c2c2c2;-webkit-text-fill-color:var(--formfield-disabled-text-color,#c2c2c2);cursor:not-allowed}.nx-formfield.is-disabled .nx-formfield__hints{color:inherit}.nx-formfield.is-disabled .nx-formfield__input-container{border-bottom-color:#c2c2c2;border-bottom-color:var(--formfield-disabled-border-color,#c2c2c2)}.nx-formfield.is-disabled.has-outline .nx-formfield__input-container{border-color:#c2c2c2;border-color:var(--formfield-disabled-border-color,#c2c2c2)}.nx-formfield.is-disabled nx-datepicker-toggle button{color:#c2c2c2;color:var(--formfield-disabled-text-color,#c2c2c2)}.nx-formfield--negative{color:#fff}.nx-formfield--negative .nx-formfield__hints{color:inherit}.nx-formfield--negative .nx-formfield__input-container,.nx-formfield--negative.has-outline .nx-formfield__input-container{border-color:#fff}.nx-formfield--negative .nx-formfield__appendix,.nx-formfield--negative .nx-formfield__label,.nx-formfield--negative .nx-formfield__prefix,.nx-formfield--negative .nx-formfield__suffix{color:#fff}.nx-formfield--type-nx-dropdown .nx-formfield__label{width:calc(100% - 24px);width:calc(100% - var(--formfield-icon-size,24px))}.nx-formfield__input textarea[nxInput]{vertical-align:bottom}@media screen and (-ms-high-contrast:active){.nx-formfield.is-focused:not(.nx-formfield--negative).has-outline .nx-formfield__input-container{box-shadow:0 0 0 2px windowText}.nx-formfield__input-container{border-bottom-color:buttonText}.nx-formfield.has-outline .nx-formfield__input-container{border-color:buttonText}.nx-formfield.has-outline .nx-formfield__appendix{border-bottom-color:window;border-top-color:window}.nx-formfield.is-disabled{color:GrayText;-webkit-text-fill-color:GrayText}.nx-formfield.is-disabled .nx-formfield__input-container{border-bottom-color:GrayText}.nx-formfield.is-disabled .nx-formfield__hints{color:windowText}.nx-formfield.is-disabled.has-outline .nx-formfield__input-container{border-color:GrayText}.nx-formfield.is-focused:not(.has-outline) .nx-formfield__input-container{border-bottom-color:highlight}.nx-formfield:not(.nx-formfield--negative) .nx-formfield__appendix nx-icon{color:inherit}}.nx-formfield--type-textarea .nx-formfield__flexfield{padding:0}.nx-formfield--type-textarea .nx-formfield__input-container{height:auto}input:-webkit-autofill{transition:background-color 5000s ease-in-out}input:-webkit-autofill::first-line{font-size:20px;font-size:var(--formfield-control-font-size,20px);line-height:28px;line-height:var(--formfield-control-line-height,28px);font-weight:600;font-weight:var(--formfield-control-font-weight,600);letter-spacing:.2px;letter-spacing:var(--formfield-control-letter-spacing,.2px);font-family:'Allianz Neo',sans-serif!important}", "@-webkit-keyframes cdk-text-field-autofill-start{/*!*/}@keyframes cdk-text-field-autofill-start{/*!*/}@-webkit-keyframes cdk-text-field-autofill-end{/*!*/}@keyframes cdk-text-field-autofill-end{/*!*/}.cdk-text-field-autofill-monitored:-webkit-autofill{-webkit-animation:0s 1ms cdk-text-field-autofill-start;animation:0s 1ms cdk-text-field-autofill-start}.cdk-text-field-autofill-monitored:not(:-webkit-autofill){-webkit-animation:0s 1ms cdk-text-field-autofill-end;animation:0s 1ms cdk-text-field-autofill-end}textarea.cdk-textarea-autosize{resize:none}textarea.cdk-textarea-autosize-measuring{height:auto!important;overflow:hidden!important;padding:2px 0!important;box-sizing:content-box!important}.c-input{text-align:inherit;font-size:inherit;font-weight:inherit;background:0 0;color:inherit;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%}.c-input::-ms-clear{display:none}.c-input::-webkit-search-cancel-button,.c-input::-webkit-search-decoration,.c-input::-webkit-search-results-button,.c-input::-webkit-search-results-decoration{display:none;-webkit-appearance:none}.c-input::-ms-input-placeholder{-ms-user-select:none;user-select:none;font-size:20px;font-size:var(--formfield-input-native-placeholder-font-size,20px);line-height:28px;line-height:var(--formfield-input-native-placeholder-line-height,28px);font-weight:200;font-weight:var(--formfield-input-native-placeholder-font-weight,200);letter-spacing:.2px;letter-spacing:var(--formfield-input-native-placeholder-letter-spacing,.2px);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676);transition:color .1s ease-in .2s}.c-input::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;font-size:20px;font-size:var(--formfield-input-native-placeholder-font-size,20px);line-height:28px;line-height:var(--formfield-input-native-placeholder-line-height,28px);font-weight:200;font-weight:var(--formfield-input-native-placeholder-font-weight,200);letter-spacing:.2px;letter-spacing:var(--formfield-input-native-placeholder-letter-spacing,.2px);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676);transition:color .1s ease-in .2s}.c-input::-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.c-input::placeholder:-ms-input-placeholder{-ms-user-select:text}.c-input::-moz-placeholder{-moz-user-select:none;user-select:none;font-size:20px;font-size:var(--formfield-input-native-placeholder-font-size,20px);line-height:28px;line-height:var(--formfield-input-native-placeholder-line-height,28px);font-weight:200;font-weight:var(--formfield-input-native-placeholder-font-weight,200);letter-spacing:.2px;letter-spacing:var(--formfield-input-native-placeholder-letter-spacing,.2px);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676);transition:color .1s ease-in .2s}.c-input::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.c-input::-webkit-input-placeholder{-webkit-user-select:none;user-select:none;font-size:20px;font-size:var(--formfield-input-native-placeholder-font-size,20px);line-height:28px;line-height:var(--formfield-input-native-placeholder-line-height,28px);font-weight:200;font-weight:var(--formfield-input-native-placeholder-font-weight,200);letter-spacing:.2px;letter-spacing:var(--formfield-input-native-placeholder-letter-spacing,.2px);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676);transition:color .1s ease-in .2s}.c-input::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.c-input:-ms-input-placeholder{-ms-user-select:none;user-select:none;font-size:20px;font-size:var(--formfield-input-native-placeholder-font-size,20px);line-height:28px;line-height:var(--formfield-input-native-placeholder-line-height,28px);font-weight:200;font-weight:var(--formfield-input-native-placeholder-font-weight,200);letter-spacing:.2px;letter-spacing:var(--formfield-input-native-placeholder-letter-spacing,.2px);color:#767676;color:var(--formfield-input-native-placeholder-color,#767676);transition:color .1s ease-in .2s}.c-input:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}textarea.c-input{height:auto;font-family:inherit}.c-input.is-focused{border:none;outline:0;box-shadow:none}.c-input.is-focused::-ms-input-placeholder{opacity:1;transition:opacity .2s ease-in 150ms}.c-input.is-focused::placeholder{opacity:1;transition:opacity .2s ease-in 150ms}.c-input.is-focused::-moz-placeholder{opacity:1;transition:opacity .2s ease-in 150ms}.c-input.is-focused::-webkit-input-placeholder{opacity:1;transition:opacity .2s ease-in 150ms}.c-input.is-focused:-ms-input-placeholder{opacity:1;transition:opacity .2s ease-in 150ms}.c-input.is-disabled{cursor:not-allowed}textarea.nx-input-element{resize:vertical;overflow:auto}.c-input:invalid,.c-input:required{box-shadow:none}"]
            }] }
];
/** @nocollapse */
NxFormfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FORMFIELD_DEFAULT_OPTIONS,] }] }
];
NxFormfieldComponent.propDecorators = {
    _control: [{ type: ContentChild, args: [NxFormfieldControl, { static: false },] }],
    label: [{ type: Input, args: ['nxLabel',] }],
    _labelChild: [{ type: ContentChild, args: [NxFormfieldLabelDirective, { static: false },] }],
    _hintChildren: [{ type: ContentChildren, args: [NxFormfieldHintDirective,] }],
    _noteChildren: [{ type: ContentChildren, args: [NxFormfieldNoteDirective,] }],
    _errorChildren: [{ type: ContentChildren, args: [NxFormfieldErrorDirective,] }],
    _suffixChildren: [{ type: ContentChildren, args: [NxFormfieldSuffixDirective,] }],
    _prefixChildren: [{ type: ContentChildren, args: [NxFormfieldPrefixDirective,] }],
    _appendixChildren: [{ type: ContentChildren, args: [NxFormfieldAppendixDirective,] }],
    _connectionContainerRef: [{ type: ViewChild, args: ['connectionContainer', { static: true },] }],
    floatLabel: [{ type: Input, args: ['nxFloatLabel',] }],
    styles: [{ type: Input, args: ['nxStyle',] }],
    appearance: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxFormfieldComponent.prototype._styles;
    /**
     * @type {?}
     * @private
     */
    NxFormfieldComponent.prototype._subscriptions;
    /** @type {?} */
    NxFormfieldComponent.prototype._control;
    /**
     * Sets the label which will act as a floating label.
     * In addition, the component uses input and label to properly support accessibility.
     * @type {?}
     */
    NxFormfieldComponent.prototype.label;
    /** @type {?} */
    NxFormfieldComponent.prototype._labelChild;
    /** @type {?} */
    NxFormfieldComponent.prototype._hintChildren;
    /** @type {?} */
    NxFormfieldComponent.prototype._noteChildren;
    /** @type {?} */
    NxFormfieldComponent.prototype._errorChildren;
    /** @type {?} */
    NxFormfieldComponent.prototype._suffixChildren;
    /** @type {?} */
    NxFormfieldComponent.prototype._prefixChildren;
    /** @type {?} */
    NxFormfieldComponent.prototype._appendixChildren;
    /** @type {?} */
    NxFormfieldComponent.prototype._connectionContainerRef;
    /**
     * @type {?}
     * @private
     */
    NxFormfieldComponent.prototype._floatLabel;
    /**
     * @type {?}
     * @private
     */
    NxFormfieldComponent.prototype._appearance;
    /**
     * \@docs-private
     * @type {?}
     */
    NxFormfieldComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    NxFormfieldComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NxFormfieldComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxFormfieldComponent.prototype._defaultOptions;
}

/**
 * @fileoverview added by tsickle
 * Generated from: formfield.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxFormfieldModule {
}
NxFormfieldModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    NxFormfieldComponent,
                    NxFormfieldHintDirective,
                    NxFormfieldErrorDirective,
                    NxFormfieldNoteDirective,
                    NxFormfieldPrefixDirective,
                    NxFormfieldSuffixDirective,
                    NxFormfieldAppendixDirective,
                    NxFormfieldLabelDirective
                ],
                exports: [
                    NxFormfieldComponent,
                    NxFormfieldHintDirective,
                    NxFormfieldErrorDirective,
                    NxFormfieldNoteDirective,
                    NxFormfieldPrefixDirective,
                    NxFormfieldSuffixDirective,
                    NxFormfieldAppendixDirective,
                    NxFormfieldLabelDirective,
                    NxErrorModule,
                    NxLabelModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: allianz-ngx-ndbx-formfield.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FORMFIELD_DEFAULT_OPTIONS, NxFormfieldAppendixDirective, NxFormfieldComponent, NxFormfieldControl, NxFormfieldErrorDirective, NxFormfieldHintDirective, NxFormfieldLabelDirective, NxFormfieldModule, NxFormfieldNoteDirective, NxFormfieldPrefixDirective, NxFormfieldSuffixDirective };
//# sourceMappingURL=allianz-ngx-ndbx-formfield.js.map
