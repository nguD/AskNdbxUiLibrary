import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { Injectable, Directive, EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, Output, TemplateRef, ViewContainerRef, NgModule } from '@angular/core';
import { Subject, Subscription } from 'rxjs';
import { EventManager } from '@angular/platform-browser';
import { animation, style, animate, trigger, transition, useAnimation, query, animateChild } from '@angular/animations';
import { CommonModule } from '@angular/common';
import { A11yModule } from '@angular/cdk/a11y';

/**
 * @fileoverview added by tsickle
 * Generated from: modal.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docs-private
 */
class NxModalService {
    constructor() {
        this.subject = new Subject();
        this.close$ = this.subject.asObservable();
    }
    /**
     * @return {?}
     */
    close() {
        this.subject.next();
    }
}
NxModalService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxModalService.prototype.subject;
    /** @type {?} */
    NxModalService.prototype.close$;
}

/**
 * @fileoverview added by tsickle
 * Generated from: animations.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const fadeIn = animation([
    style({ opacity: 0 }),
    animate('300ms', style({ opacity: 1 }))
]);
/** @type {?} */
const fadeOut = animation(animate('300ms', style({ opacity: 0 })));
/** @type {?} */
const scaleUp = animation([
    style({ transform: 'scale(1)', opacity: 1 }),
    animate('250ms', style({ transform: 'scale(1.3)', opacity: 0 }))
]);
/** @type {?} */
const scaleDown = animation([
    style({ transform: 'scale(1.3)', opacity: 0 }),
    animate('250ms', style({ transform: 'scale(1)', opacity: 1 }))
]);

/**
 * @fileoverview added by tsickle
 * Generated from: modal.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Container for the action buttons in a modal. Has a fixed position at the bottom of the modal on scroll.
 */
class NxModalActionsDirective {
}
NxModalActionsDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nxModalActions]',
                host: {
                    '[class.nx-modal__actions]': 'true'
                }
            },] }
];
/**
 * Scrollable container for the content of a modal.
 */
class NxModalContentDirective {
}
NxModalContentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nxModalContent]',
                host: {
                    '[class.nx-modal__content]': 'true'
                }
            },] }
];
class NxModalComponent {
    /**
     * @param {?} modalService
     * @param {?} eventManager
     * @param {?} _changeDetectorRef
     */
    constructor(modalService, eventManager, _changeDetectorRef) {
        this.modalService = modalService;
        this.eventManager = eventManager;
        this._changeDetectorRef = _changeDetectorRef;
        this._closeButtonLabel = 'Close dialog';
        /**
         * Whether the modal view should close when the user hits the escape key.
         * Default is true.
         */
        this.hideOnEsc = true;
        /**
         * Whether the modal view should close when the user clicks on the backdrop.
         * Default is true.
         */
        this.hideOnClickOutside = true;
        /**
         * Whether the modal view should have a close icon in the upper right corner.
         * Default is true.
         */
        this.showCloseIcon = true;
        /**
         * An event emitted when the user clicks on the backdrop or uses the built-in close button.
         * This event can be applied in conjunction with the custom open state handling
         * of a modal to close it when requested by the user.
         */
        this.closeEvent = new EventEmitter();
        this.closeSubscription = Subscription.EMPTY;
        this.removeEventListener = undefined;
    }
    /**
     * Sets the 'aria-label' of the modal close button needed for accessibility.
     *
     * Default value is 'Close dialog'.
     * @param {?} value
     * @return {?}
     */
    set closeButtonLabel(value) {
        if (value !== this._closeButtonLabel) {
            this._closeButtonLabel = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get closeButtonLabel() {
        return this._closeButtonLabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.closeSubscription = this.modalService.close$.subscribe((/**
         * @return {?}
         */
        () => this.closeEvent.emit()));
        this.removeEventListener = this.eventManager.addGlobalEventListener('window', 'keyup.esc', (/**
         * @return {?}
         */
        () => {
            if (this.hideOnEsc) {
                this.modalService.close();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeEventListener();
        this.closeSubscription.unsubscribe();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    clickOutsideModal() {
        if (this.hideOnClickOutside) {
            this.modalService.close();
        }
    }
    /**
     * \@docs-private
     * @return {?}
     */
    closeButtonClick() {
        this.modalService.close();
    }
    /**
     * \@docs-private
     * @param {?} evt
     * @return {?}
     */
    cancelClick(evt) {
        evt.stopPropagation();
    }
}
NxModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-modal',
                template: "<div class=\"nx-modal\" role=\"dialog\" cdkTrapFocus cdkTrapFocusAutoCapture cdkFocusInitial>\n  <div class=\"nx-modal__backdrop\" (click)=\"clickOutsideModal()\">\n    <div class=\"nx-modal__position\">\n      <div class=\"nx-modal__container\" (click)=\"cancelClick($event)\" [@scaleUpDown]>\n\n        <button\n          (click)=\"closeButtonClick()\"\n          *ngIf=\"showCloseIcon\"\n          [attr.aria-label]=\"closeButtonLabel\"\n          class=\"nx-modal__close\"\n          type=\"button\">\n          <nx-icon name=\"close\"></nx-icon>\n        </button>\n\n        <div class=\"nx-modal__content-wrapper\">\n          <ng-container *ngIf=\"body else projectContent\">\n            <ng-container *ngTemplateOutlet=\"body\"></ng-container>\n          </ng-container>\n\n          <ng-template #projectContent>\n            <ng-content></ng-content>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [
                    trigger('fadeInOut', [
                        transition(':enter', [
                            useAnimation(fadeIn),
                            query('@scaleUpDown', [
                                animateChild()
                            ])
                        ]),
                        transition(':leave', [
                            query('@scaleUpDown', [
                                animateChild()
                            ]),
                            useAnimation(fadeOut)
                        ])
                    ]),
                    trigger('scaleUpDown', [
                        transition(':enter', useAnimation(scaleDown)),
                        transition(':leave', useAnimation(scaleUp))
                    ])
                ],
                host: {
                    '[@fadeInOut]': '',
                    '[class.nx-modal--fixed-width]': 'size === "fixed"'
                },
                styles: [":host{position:relative;z-index:1000}.nx-modal{display:flex;position:fixed;width:100vw;height:100vh;top:0;bottom:0;left:0;right:0;z-index:1000;align-items:center;justify-content:center;transition:opacity .3s}.nx-modal__backdrop{background-color:rgba(0,0,0,.35);height:100%;left:0;position:absolute;top:0;width:100%;z-index:-1}.nx-modal__position{position:absolute;display:inline-block;top:50%;left:50%;transform:translate(-50%,-50%);z-index:20}.nx-modal__container{border-radius:4px;box-shadow:0 8px 24px rgba(65,65,65,.35);background:#fff;background:var(--modal-background-color,#fff);color:#414141;color:var(--modal-text-color,#414141)}.nx-modal__content-wrapper{padding:40px 40px 48px;max-height:calc(100vh - 48px);overflow-y:auto}@media (max-width:703px){.nx-modal__content-wrapper{max-height:70vh;padding:40px 32px 48px}}.nx-modal__close{background-color:transparent;border:none;cursor:pointer;position:absolute;top:16px;right:16px;height:24px;outline:0;padding:0;color:#414141;color:var(--modal-close-icon-color,#414141)}.nx-modal__close nx-icon{font-size:24px}.nx-modal__close::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]) .nx-modal__close:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6);border-radius:4px}@media (max-width:703px){.nx-modal__position{width:100%}.nx-modal__container{position:relative;max-width:calc(100vw - 16px);max-height:70vh;margin:0 auto}}:host(.nx-modal--fixed-width) .nx-modal__container{width:736px;max-width:calc(100vw - 16px)}::ng-deep .nx-modal__actions{height:72px;border-top:1px solid #d9d9d9;border-top:1px solid var(--modal-actions-border-color,#d9d9d9);display:flex;align-items:center;justify-content:flex-end;padding:0 40px;position:absolute;bottom:0;left:0;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px;background:#fff;background:var(--modal-actions-background-color,#fff)}::ng-deep .nx-modal__content{overflow-y:auto;max-height:calc(100vh - 72px - 48px)}@media (max-width:703px){::ng-deep .nx-modal__content{max-height:calc(70vh - 72px - 48px)}}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]) .nx-modal__close:focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}.nx-modal__content-wrapper,::ng-deep .nx-modal__actions{border:2px solid windowText}}"]
            }] }
];
/** @nocollapse */
NxModalComponent.ctorParameters = () => [
    { type: NxModalService },
    { type: EventManager },
    { type: ChangeDetectorRef }
];
NxModalComponent.propDecorators = {
    closeButtonLabel: [{ type: Input }],
    body: [{ type: Input, args: ['nxBody',] }],
    hideOnEsc: [{ type: Input, args: ['nxHideOnEsc',] }],
    hideOnClickOutside: [{ type: Input, args: ['nxHideOnClickOutside',] }],
    showCloseIcon: [{ type: Input, args: ['nxShowCloseIcon',] }],
    size: [{ type: Input, args: ['nxSize',] }],
    closeEvent: [{ type: Output, args: ['nxClose',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxModalComponent.prototype._closeButtonLabel;
    /**
     * A template reference variable pointing to the template
     * which contains the content of the modal view.
     * @type {?}
     */
    NxModalComponent.prototype.body;
    /**
     * Whether the modal view should close when the user hits the escape key.
     * Default is true.
     * @type {?}
     */
    NxModalComponent.prototype.hideOnEsc;
    /**
     * Whether the modal view should close when the user clicks on the backdrop.
     * Default is true.
     * @type {?}
     */
    NxModalComponent.prototype.hideOnClickOutside;
    /**
     * Whether the modal view should have a close icon in the upper right corner.
     * Default is true.
     * @type {?}
     */
    NxModalComponent.prototype.showCloseIcon;
    /**
     * Controls the width of the dialog.
     * On `auto` the width is controlled by the content width,
     * on `fixed` the dialog gets a fixed width of 736px if the viewport is big enough.
     * @type {?}
     */
    NxModalComponent.prototype.size;
    /**
     * An event emitted when the user clicks on the backdrop or uses the built-in close button.
     * This event can be applied in conjunction with the custom open state handling
     * of a modal to close it when requested by the user.
     * @type {?}
     */
    NxModalComponent.prototype.closeEvent;
    /**
     * @type {?}
     * @private
     */
    NxModalComponent.prototype.closeSubscription;
    /**
     * @type {?}
     * @private
     */
    NxModalComponent.prototype.removeEventListener;
    /**
     * @type {?}
     * @private
     */
    NxModalComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    NxModalComponent.prototype.eventManager;
    /**
     * @type {?}
     * @private
     */
    NxModalComponent.prototype._changeDetectorRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: modal-open-on-click.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxOpenModalOnClickDirective {
    /**
     * @param {?} templateRef
     * @param {?} viewContainer
     * @param {?} modalService
     */
    constructor(templateRef, viewContainer, modalService) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.modalService = modalService;
        /**
         * \@docs-private
         */
        this.clickHandler = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.viewContainer.clear();
            // instantiate the template onto which this directive is applied
            /** @type {?} */
            const viewRef = this.viewContainer.createEmbeddedView(this.templateRef);
            // we need to mark the viewRef explicitly if the modal is used inside another
            // component that is using onPush change detection
            viewRef.markForCheck();
            event.preventDefault();
            event.stopPropagation();
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subscription = this.modalService.close$.subscribe((/**
         * @return {?}
         */
        () => this.viewContainer.clear()));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.elements.forEach((/**
         * @param {?} el
         * @return {?}
         */
        el => {
            if (el.removeEventListener) {
                el.removeEventListener('click', this.clickHandler);
            }
        }));
        this.subscription.unsubscribe();
    }
    /**
     * One or multiple template reference variables pointing to elements
     * which should trigger opening the modal on click.
     *
     * Value: A single template reference variable or an array of template reference variables.
     * @param {?} elements
     * @return {?}
     */
    set nxOpenModalOnClick(elements) {
        // also support the case where only one element is passed, check for the length property to be sure elements is an array
        if (elements.length) {
            this.elements = elements;
        }
        else {
            this.elements = [elements];
        }
        // add a click event listener to any element passed as property to this directive
        this.elements.forEach((/**
         * @param {?} el
         * @return {?}
         */
        el => {
            if (el.addEventListener) {
                el.addEventListener('click', this.clickHandler);
                // workaround until refactoring: if the reference is a component
                // reference the component has to implement a getter to its own elementRef
            }
            else if (el.elementRef) {
                el.elementRef.nativeElement.addEventListener('click', this.clickHandler);
            }
            else {
                console.warn(`nxOpenModalOnClick: Given Element doesn't appear to be an ElementRef.`, el);
            }
        }));
    }
}
NxOpenModalOnClickDirective.decorators = [
    { type: Directive, args: [{ selector: '[nxOpenModalOnClick]' },] }
];
/** @nocollapse */
NxOpenModalOnClickDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: NxModalService }
];
NxOpenModalOnClickDirective.propDecorators = {
    nxOpenModalOnClick: [{ type: Input }]
};
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxOpenModalOnClickDirective.prototype.elements;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.subscription;
    /**
     * \@docs-private
     * @type {?}
     */
    NxOpenModalOnClickDirective.prototype.clickHandler;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.modalService;
}

/**
 * @fileoverview added by tsickle
 * Generated from: modal.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NxModalModule {
    // define the modal service on root level as an application wide singleton,
    // assuming that we only display one modal at a time, which seems quite reasonable
    // this is static and named "forRoot" by convention
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: NxModalModule,
            providers: [NxModalService]
        };
    }
}
NxModalModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, A11yModule, NxIconModule],
                declarations: [
                    NxModalComponent,
                    NxOpenModalOnClickDirective,
                    NxModalActionsDirective,
                    NxModalContentDirective
                ],
                exports: [
                    NxModalComponent,
                    NxOpenModalOnClickDirective,
                    NxModalActionsDirective,
                    NxModalContentDirective
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: allianz-ngx-ndbx-modal.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxModalActionsDirective, NxModalComponent, NxModalContentDirective, NxModalModule, NxModalService, NxOpenModalOnClickDirective, fadeIn as ɵa, fadeOut as ɵb, scaleUp as ɵc, scaleDown as ɵd };
//# sourceMappingURL=allianz-ngx-ndbx-modal.js.map
