import { ElementRef, ChangeDetectorRef, EventEmitter } from '@angular/core';
/** Option selected event */
export declare class NxAutocompleteOptionSelected {
    /** The option that is selected or deselected. */
    source: NxAutocompleteOptionComponent;
    /** Whether the input was triggered by the user. */
    isUserInput: boolean;
    constructor(
    /** The option that is selected or deselected. */
    source: NxAutocompleteOptionComponent, 
    /** Whether the input was triggered by the user. */
    isUserInput?: boolean);
}
export declare class NxAutocompleteOptionComponent {
    /** @docs-private */ elementRef: ElementRef;
    private _changeDetectorRef;
    /** Id of the autocomplete option. By default it is set to an incremented value. */
    readonly id: string;
    private _id;
    /** Whether or not the option is currently selected. */
    readonly selected: boolean;
    private _selected;
    /**
     * Whether or not the option is currently active and ready to be selected.
     * An active option displays styles as if it is focused, but the
     * focus is actually retained somewhere else. This comes in handy
     * for components like autocomplete where focus must remain on the input.
     */
    readonly active: boolean;
    private _active;
    /** Whether the option is disabled. */
    disabled: boolean;
    private _disabled;
    /** The value of the autocomplete option. */
    value: any;
    /** Event emitted when the option is selected or deselected. */
    readonly onSelectionChange: EventEmitter<NxAutocompleteOptionSelected>;
    constructor(
    /** @docs-private */ elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef);
    /** Ensures the option is selected when activated from the keyboard. */
    _handleKeydown(event: KeyboardEvent): void;
    /**
     * `Selects the option while indicating the selection came from the user. Used to
     * determine if the select's view -> model callback should be invoked.`
     */
    _selectViaInteraction(): void;
    /** Returns the correct tabindex for the option depending on disabled state. */
    _getTabIndex(): string;
    /** Emits the selection change event. */
    private _emitSelectionChangeEvent;
    /** @docs-private */
    readonly viewValue: string;
    /**
     * @docs-private
     * This method sets display styles on the option to make it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     */
    setActiveStyles(): void;
    /**
     * @docs-private
     * This method removes display styles on the option that made it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     */
    setInactiveStyles(): void;
    /**
     * @docs-private
     * Gets the label to be used when determining whether the option should be focused.
     */
    getLabel(): string;
    /** Selects the option. */
    select(): void;
    /** Deselects the option. */
    deselect(): void;
    /**
     * @docs-private
     * Sets focus onto this option.
     */
    focus(): void;
}
