import { Directionality } from '@angular/cdk/bidi';
import { Overlay } from '@angular/cdk/overlay';
import { AfterContentInit, ElementRef, EventEmitter, OnDestroy, ViewContainerRef } from '@angular/core';
import { NxContextMenuComponent } from './context-menu.component';
import { NxContextMenuItemComponent } from './context-menu-item.component';
/** Default top padding of the menu panel. */
export declare const MENU_PANEL_TOP_PADDING = 16;
export declare const MENU_PANEL_OFFSET = 8;
export declare type NxContextMenuScrollStrategy = 'close' | 'reposition';
/**
 * This directive is intended to be used in conjunction with an nx-context-menu tag.
 * It is responsible for toggling the display of the provided context menu instance.
 */
export declare class NxContextMenuTriggerDirective implements AfterContentInit, OnDestroy {
    private _overlay;
    private _element;
    private _viewContainerRef;
    private _parentMenu;
    private _contextMenuItemInstance;
    private _dir;
    private _portal;
    private _overlayRef;
    private _contextMenuOpen;
    private _closingActionsSubscription;
    private _hoverSubscription;
    private _contextMenuCloseSubscription;
    private _documentClickObservable;
    private _scrollStrategy;
    /** References the context menu instance that the trigger is associated with. */
    contextMenu: NxContextMenuComponent;
    private _contextMenu;
    scrollStrategy: NxContextMenuScrollStrategy;
    /** Whether the context menu is open. */
    readonly contextMenuOpen: boolean;
    /** The text direction of the containing app. */
    private readonly dir;
    /** Data to be passed along to any lazily-rendered content. */
    contextMenuData: any;
    /** Event emitted when the associated context menu is opened. */
    readonly contextMenuOpened: EventEmitter<void>;
    /** Event emitted when the associated context menu is closed. */
    readonly contextMenuClosed: EventEmitter<void>;
    constructor(_overlay: Overlay, _element: ElementRef<HTMLElement>, _viewContainerRef: ViewContainerRef, _parentMenu: NxContextMenuComponent, _contextMenuItemInstance: NxContextMenuItemComponent, _dir: Directionality);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /** Whether the context menu triggers a sub-menu or a top-level one. */
    triggersSubmenu(): boolean;
    /** Toggles the context menu between the open and closed states. */
    toggleContextMenu(): void;
    /** Opens the context menu. */
    openContextMenu(): void;
    /** Closes the context menu. */
    closeContextMenu(): void;
    /** Closes the context menu and does the necessary cleanup. */
    private _destroyMenu;
    /**
     * This method sets the context menu state to open and focuses the first item if
     * the context menu was opened via the keyboard.
     */
    private _initContextMenu;
    /**
     * Focuses the context menu trigger.
     */
    focus(): void;
    /**
     * This method resets the context menu when it's closed, most importantly restoring
     * focus to the context menu trigger if the context menu was opened via the keyboard.
     */
    private _resetContextMenu;
    /** Set state rather than toggle to support triggers sharing a menu. */
    private _setIsContextMenuOpen;
    /**
     * This method checks that a valid instance of NxContextMenuComponent has been passed into
     * nxContextMenuTriggerFor. If not, an exception is thrown.
     */
    private _checkContextMenu;
    /**
     * This method creates the overlay from the provided menu's template and saves its
     * OverlayRef so that it can be attached to the DOM when openContextMenu is called.
     */
    private _createOverlay;
    /**
     * This method builds the configuration object needed to create the overlay, the OverlayState.
     * @returns OverlayConfig
     */
    private _getOverlayConfig;
    /**
     * Sets the appropriate positions on a position strategy
     * so the overlay connects with the trigger correctly.
     * @param positionStrategy Strategy whose position to update.
     */
    private _setPosition;
    /**
     * Returns a stream that emits whenever an action that should close the context menu occurs. */
    private _contextMenuClosingActions;
    /** Handles mouse presses on the trigger. */
    _handleMousedown(event: MouseEvent): void;
    /** Handles key presses on the trigger. */
    _handleKeydown(event: KeyboardEvent): void;
    /** Handles click events on the trigger. */
    _handleClick(event: MouseEvent): void;
    private _waitForClose;
    /** Handles the cases where the user hovers over the trigger. */
    private _handleHover;
    /** Gets the portal that should be attached to the overlay. */
    private _getPortal;
}
