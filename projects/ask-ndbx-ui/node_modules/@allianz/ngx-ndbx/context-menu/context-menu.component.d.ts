import { Direction } from '@angular/cdk/bidi';
import { AfterContentInit, EventEmitter, NgZone, OnDestroy, TemplateRef } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { NxContextMenuContentDirective } from './context-menu-content.directive';
import { NxContextMenuItemComponent } from './context-menu-item.component';
import { AnimationEvent } from '@angular/animations';
export declare class NxContextMenuComponent implements AfterContentInit, OnDestroy {
    private _ngZone;
    private _keyManager;
    /** Menu items inside the current menu. */
    private _items;
    /** Emits whenever the amount of menu items changes. */
    private _itemChanges;
    /** Subscription to tab events on the menu panel */
    private _tabSubscription;
    /** Config object to be passed into the menu's ngClass */
    _classList: {
        [key: string]: boolean;
    };
    /** Current state of the panel animation. */
    _panelAnimationState: 'void' | 'enter';
    /** Emits whenever an animation on the menu completes. */
    _animationDone: Subject<AnimationEvent>;
    /** Whether the menu is animating. */
    _isAnimating: boolean;
    /** Parent menu of the current menu panel. */
    parentMenu: NxContextMenuComponent | undefined;
    /**
     * @docs-private
     * Layout direction of the menu.
     */
    direction: Direction;
    /** @docs-private */
    templateRef: TemplateRef<any>;
    /**
     * Menu content that will be rendered lazily.
     * @docs-private
     */
    lazyContent: NxContextMenuContentDirective;
    /** Event emitted when the menu is closed. */
    readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;
    constructor(_ngZone: NgZone);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /** Stream that emits whenever the hovered menu item changes. */
    _hovered(): Observable<NxContextMenuItemComponent>;
    /** Handle a keyboard event from the menu, delegating to the appropriate action. */
    _handleKeydown(event: KeyboardEvent): void;
    /**
     * Focus the first item in the menu.
     */
    focusFirstItem(): void;
    /**
     * Resets the active item in the menu. This is used when the menu is opened, allowing
     * the user to start from the first option when pressing the down arrow.
     */
    resetActiveItem(): void;
    /**
     * Registers a menu item with the context menu.
     * @docs-private
     */
    addItem(item: NxContextMenuItemComponent): void;
    /**
     * Removes an item from the context menu.
     * @docs-private
     */
    removeItem(item: NxContextMenuItemComponent): void;
    /** Starts the enter animation. */
    _startAnimation(): void;
    /** Resets the panel animation to its initial state. */
    _resetAnimation(): void;
    /** Callback that is invoked when the panel animation completes. */
    _onAnimationDone(event: AnimationEvent): void;
    _onAnimationStart(event: AnimationEvent): void;
}
