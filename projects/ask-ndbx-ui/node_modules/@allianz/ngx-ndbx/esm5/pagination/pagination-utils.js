/**
 * @fileoverview added by tsickle
 * Generated from: pagination/pagination-utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
/**
 * \@docs-private
 */
var NxPaginationUtils = /** @class */ (function () {
    function NxPaginationUtils() {
        this._pagesMobile = 3;
        this._elipsisText = '...';
        this._classExpanded = 'expanded-view';
    }
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    NxPaginationUtils.prototype.getPages = /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    function (currentPage, totalPages) {
        /** @type {?} */
        var pages = [];
        /** @type {?} */
        var start = [];
        /** @type {?} */
        var middle = [];
        /** @type {?} */
        var end = [];
        // First array -> start
        start = this.getStartArray(currentPage, totalPages);
        // Second array -> middle
        middle = this.getMiddleArray(currentPage, totalPages);
        // Third array -> end
        end = this.getEndArray(currentPage, totalPages);
        pages = tslib_1.__spread(start, middle, end);
        return pages;
    };
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    NxPaginationUtils.prototype.getMiddleArray = /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    function (currentPage, totalPages) {
        /** @type {?} */
        var pageNumber = currentPage < 6 ? 4 : currentPage - 1;
        /** @type {?} */
        var middle = [];
        while (middle.length < 3 &&
            pageNumber >= 2 &&
            pageNumber <= totalPages - 3 &&
            (pageNumber <= currentPage + 1 && pageNumber >= currentPage - 1)) {
            middle.push(this.createPaginationItem(pageNumber, pageNumber));
            pageNumber++;
        }
        return middle;
    };
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    NxPaginationUtils.prototype.getEndArray = /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    function (currentPage, totalPages) {
        /** @type {?} */
        var end = [];
        /** @type {?} */
        var currentItemToShow = totalPages <= 3 ? totalPages + 1 :
            totalPages <= 6 ? totalPages - (totalPages - 4) : totalPages - 2;
        /** @type {?} */
        var showEllipsis = currentPage < totalPages - 4;
        while (currentItemToShow <= totalPages) {
            /** @type {?} */
            var endItem = end.length === 0 && showEllipsis ?
                this.createPaginationItem(this._elipsisText, currentItemToShow, true) :
                this.createPaginationItem(currentItemToShow, currentItemToShow, true);
            end.push(endItem);
            currentItemToShow++;
        }
        return end;
    };
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    NxPaginationUtils.prototype.getStartArray = /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    function (currentPage, totalPages) {
        /** @type {?} */
        var counterPages = 0;
        /** @type {?} */
        var start = [];
        /** @type {?} */
        var maxSizeArray = 3;
        while (counterPages < maxSizeArray && counterPages < totalPages) {
            /** @type {?} */
            var startItem = counterPages === 2 && currentPage > 5 ?
                this.createPaginationItem(this._elipsisText, counterPages, true) :
                this.createPaginationItem(counterPages + 1, counterPages + 1, true);
            start.push(startItem);
            counterPages++;
        }
        return start;
    };
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    NxPaginationUtils.prototype.getMobilePages = /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    function (currentPage, totalPages) {
        var _this = this;
        // if we have less pages than the number we want to display take all
        if (totalPages < this._pagesMobile) {
            return Array.from(Array(totalPages).keys()).map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return _this.createPaginationItem(item + 1, item + 1); }));
        }
        switch (currentPage) {
            // first page active
            case 1:
                return [1, 2, 3].map((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return _this.createPaginationItem(item, item); }));
            // last page active
            case totalPages:
                return [totalPages - 2, totalPages - 1, totalPages].map((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return _this.createPaginationItem(item, item); }));
            // any other page active
            default:
                return [currentPage - 1, currentPage, currentPage + 1].map((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return _this.createPaginationItem(item, item); }));
        }
    };
    /**
     * @private
     * @param {?} label
     * @param {?} value
     * @param {?=} classExpanded
     * @return {?}
     */
    NxPaginationUtils.prototype.createPaginationItem = /**
     * @private
     * @param {?} label
     * @param {?} value
     * @param {?=} classExpanded
     * @return {?}
     */
    function (label, value, classExpanded) {
        return { label: label, value: value, class: classExpanded ? this._classExpanded : '' };
    };
    NxPaginationUtils.decorators = [
        { type: Injectable }
    ];
    return NxPaginationUtils;
}());
export { NxPaginationUtils };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxPaginationUtils.prototype._pagesMobile;
    /**
     * @type {?}
     * @private
     */
    NxPaginationUtils.prototype._elipsisText;
    /**
     * @type {?}
     * @private
     */
    NxPaginationUtils.prototype._classExpanded;
}
//# sourceMappingURL=data:application/json;base64,