/**
 * @fileoverview added by tsickle
 * Generated from: copytext/copytext.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
/** @type {?} */
var DEFAULT_TYPE = 'normal';
var NxCopytextComponent = /** @class */ (function () {
    function NxCopytextComponent() {
        /**
         * \@docs-private
         */
        this.type = DEFAULT_TYPE;
        /**
         * \@docs-private
         */
        this.negative = false;
    }
    Object.defineProperty(NxCopytextComponent.prototype, "classNames", {
        get: /**
         * @return {?}
         */
        function () {
            return this._classNames;
        },
        /**
         * Sets the type and whether the negative set of styling should be used.
         *
         * You can combine the values of type NxCopytextType and 'negative'.
         *
         * Default type: 'normal'
         */
        set: /**
         * Sets the type and whether the negative set of styling should be used.
         *
         * You can combine the values of type NxCopytextType and 'negative'.
         *
         * Default type: 'normal'
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._classNames === value) {
                return;
            }
            this._classNames = value;
            var _a = tslib_1.__read(this._classNames.match(/small|medium|normal|large/) || [DEFAULT_TYPE], 1), _b = _a[0], type = _b === void 0 ? null : _b;
            this.type = (/** @type {?} */ (type));
            this.negative = !!this._classNames.match(/negative/);
        },
        enumerable: true,
        configurable: true
    });
    NxCopytextComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'p[nxCopytext]',
                    template: "<ng-content></ng-content>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.nx-copy]': 'true',
                        '[class.nx-copy--small]': 'type === "small"',
                        '[class.nx-copy--medium]': 'type === "medium"',
                        '[class.nx-copy--normal]': 'type === "normal"',
                        '[class.nx-copy--large]': 'type === "large"',
                        '[class.nx-copy--negative]': 'negative',
                    },
                    styles: [":host{margin:0 0 32px;font-size:16px;font-size:var(--paragraph-03-font-size,16px);line-height:24px;line-height:var(--paragraph-03-line-height,24px);font-weight:400;font-weight:var(--paragraph-03-font-weight,400);letter-spacing:0;letter-spacing:var(--paragraph-03-letter-spacing,0)}:host.nx-copy.nx-copy{font-weight:400}:host(.nx-copy--negative){color:#fff}:host(.nx-copy--small){font-size:12px;font-size:var(--paragraph-05-font-size,12px);line-height:16px;line-height:var(--paragraph-05-line-height,16px);font-weight:600;font-weight:var(--paragraph-05-font-weight,600);letter-spacing:.5px;letter-spacing:var(--paragraph-05-letter-spacing,.5px)}:host(.nx-copy--medium){font-size:14px;font-size:var(--paragraph-04-font-size,14px);line-height:20px;line-height:var(--paragraph-04-line-height,20px);font-weight:600;font-weight:var(--paragraph-04-font-weight,600);letter-spacing:.2px;letter-spacing:var(--paragraph-04-letter-spacing,.2px)}:host(.nx-copy--large){font-size:18px;font-size:var(--paragraph-02-font-size,18px);line-height:24px;line-height:var(--paragraph-02-line-height,24px);font-weight:400;font-weight:var(--paragraph-02-font-weight,400);letter-spacing:.2px;letter-spacing:var(--paragraph-02-letter-spacing,.2px)}"]
                }] }
    ];
    NxCopytextComponent.propDecorators = {
        classNames: [{ type: Input, args: ['nxCopytext',] }]
    };
    return NxCopytextComponent;
}());
export { NxCopytextComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxCopytextComponent.prototype._classNames;
    /**
     * \@docs-private
     * @type {?}
     */
    NxCopytextComponent.prototype.type;
    /**
     * \@docs-private
     * @type {?}
     */
    NxCopytextComponent.prototype.negative;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weXRleHQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvIiwic291cmNlcyI6WyJjb3B5dGV4dC9jb3B5dGV4dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7O0lBS3BFLFlBQVksR0FBRyxRQUFRO0FBRTdCO0lBQUE7Ozs7UUFtQkUsU0FBSSxHQUFtQixZQUFZLENBQUM7Ozs7UUFHcEMsYUFBUSxHQUFZLEtBQUssQ0FBQztJQXlCNUIsQ0FBQztJQWhCQyxzQkFDSSwyQ0FBVTs7OztRQVdkO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzFCLENBQUM7UUFyQkQ7Ozs7OztXQU1HOzs7Ozs7Ozs7O1FBQ0gsVUFDZSxLQUFhO1lBQzFCLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxLQUFLLEVBQUU7Z0JBQzlCLE9BQU87YUFDUjtZQUNELElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBQ25CLElBQUEsNkZBQXFGLEVBQXBGLFVBQVcsRUFBWCxnQ0FBb0Y7WUFDM0YsSUFBSSxDQUFDLElBQUksR0FBRyxtQkFBQSxJQUFJLEVBQWtCLENBQUM7WUFFbkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkQsQ0FBQzs7O09BQUE7O2dCQXpDRixTQUFTLFNBQUM7O29CQUVULFFBQVEsRUFBRSxlQUFlO29CQUV6QixRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsSUFBSSxFQUFFO3dCQUNKLGlCQUFpQixFQUFFLE1BQU07d0JBQ3pCLHdCQUF3QixFQUFFLGtCQUFrQjt3QkFDNUMseUJBQXlCLEVBQUUsbUJBQW1CO3dCQUM5Qyx5QkFBeUIsRUFBRSxtQkFBbUI7d0JBQzlDLHdCQUF3QixFQUFFLGtCQUFrQjt3QkFDNUMsMkJBQTJCLEVBQUUsVUFBVTtxQkFDeEM7O2lCQUNGOzs7NkJBaUJFLEtBQUssU0FBQyxZQUFZOztJQWdCckIsMEJBQUM7Q0FBQSxBQS9DRCxJQStDQztTQWhDWSxtQkFBbUI7Ozs7OztJQUM5QiwwQ0FBNEI7Ozs7O0lBRzVCLG1DQUFvQzs7Ozs7SUFHcEMsdUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqIEEgdHlwZSB0aGF0IHNwZWNpZmllcyB0aGUgZm9udCBzaXplIG9mIGEgY29weXRleHQuICovXG5leHBvcnQgdHlwZSBOeENvcHl0ZXh0VHlwZSA9ICdzbWFsbCcgfCAnbWVkaXVtJyB8ICdub3JtYWwnIHwgJ2xhcmdlJztcblxuY29uc3QgREVGQVVMVF9UWVBFID0gJ25vcm1hbCc7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAncFtueENvcHl0ZXh0XScsXG4gIHN0eWxlVXJsczogWydjb3B5dGV4dC5jb21wb25lbnQuc2NzcyddLFxuICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MubngtY29weV0nOiAndHJ1ZScsXG4gICAgJ1tjbGFzcy5ueC1jb3B5LS1zbWFsbF0nOiAndHlwZSA9PT0gXCJzbWFsbFwiJyxcbiAgICAnW2NsYXNzLm54LWNvcHktLW1lZGl1bV0nOiAndHlwZSA9PT0gXCJtZWRpdW1cIicsXG4gICAgJ1tjbGFzcy5ueC1jb3B5LS1ub3JtYWxdJzogJ3R5cGUgPT09IFwibm9ybWFsXCInLFxuICAgICdbY2xhc3MubngtY29weS0tbGFyZ2VdJzogJ3R5cGUgPT09IFwibGFyZ2VcIicsXG4gICAgJ1tjbGFzcy5ueC1jb3B5LS1uZWdhdGl2ZV0nOiAnbmVnYXRpdmUnLFxuICB9XG59KVxuZXhwb3J0IGNsYXNzIE54Q29weXRleHRDb21wb25lbnQge1xuICBwcml2YXRlIF9jbGFzc05hbWVzOiBzdHJpbmc7XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgdHlwZTogTnhDb3B5dGV4dFR5cGUgPSBERUZBVUxUX1RZUEU7XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgbmVnYXRpdmU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogU2V0cyB0aGUgdHlwZSBhbmQgd2hldGhlciB0aGUgbmVnYXRpdmUgc2V0IG9mIHN0eWxpbmcgc2hvdWxkIGJlIHVzZWQuXG4gICAqXG4gICAqIFlvdSBjYW4gY29tYmluZSB0aGUgdmFsdWVzIG9mIHR5cGUgTnhDb3B5dGV4dFR5cGUgYW5kICduZWdhdGl2ZScuXG4gICAqXG4gICAqIERlZmF1bHQgdHlwZTogJ25vcm1hbCdcbiAgICovXG4gIEBJbnB1dCgnbnhDb3B5dGV4dCcpXG4gIHNldCBjbGFzc05hbWVzKHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5fY2xhc3NOYW1lcyA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fY2xhc3NOYW1lcyA9IHZhbHVlO1xuICAgIGNvbnN0IFt0eXBlID0gbnVsbF0gPSB0aGlzLl9jbGFzc05hbWVzLm1hdGNoKC9zbWFsbHxtZWRpdW18bm9ybWFsfGxhcmdlLykgfHwgW0RFRkFVTFRfVFlQRV07XG4gICAgdGhpcy50eXBlID0gdHlwZSBhcyBOeENvcHl0ZXh0VHlwZTtcblxuICAgIHRoaXMubmVnYXRpdmUgPSAhIXRoaXMuX2NsYXNzTmFtZXMubWF0Y2goL25lZ2F0aXZlLyk7XG4gIH1cblxuICBnZXQgY2xhc3NOYW1lcygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9jbGFzc05hbWVzO1xuICB9XG5cbn1cbiJdfQ==