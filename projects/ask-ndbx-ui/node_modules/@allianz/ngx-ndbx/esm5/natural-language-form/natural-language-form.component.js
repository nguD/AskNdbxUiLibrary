/**
 * @fileoverview added by tsickle
 * Generated from: natural-language-form/natural-language-form.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, HostListener, Input, QueryList, } from '@angular/core';
import { merge, Subject, Subscription } from 'rxjs';
import { delay, throttleTime } from 'rxjs/operators';
import { NxWordComponent } from './word.component';
/** @type {?} */
var DEFAULT_SIZE = 'large';
var NxNaturalLanguageFormComponent = /** @class */ (function () {
    function NxNaturalLanguageFormComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._negative = false;
        /**
         * \@docs-private
         */
        this.resizeEvent$ = new Subject();
        /**
         * \@docs-private
         */
        this.updatePopoversSubscription = Subscription.EMPTY;
        /**
         * \@docs-private
         */
        this._size = DEFAULT_SIZE;
    }
    Object.defineProperty(NxNaturalLanguageFormComponent.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Whether the negative set of stylings should be used. */
        set: /**
         * Whether the negative set of stylings should be used.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._negative = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxNaturalLanguageFormComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        /**
         * Sets the size of the NLF. Default value: large
         */
        set: /**
         * Sets the size of the NLF. Default value: large
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._size = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    NxNaturalLanguageFormComponent.prototype.onResize = /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.resizeEvent$.next();
    };
    /**
     * @return {?}
     */
    NxNaturalLanguageFormComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Collect all words and listen for changes so we can update any open error popover
        // which would otherwise get wrongly positioned.
        /** @type {?} */
        var subjects = this._words.map((/**
         * @param {?} word
         * @return {?}
         */
        function (word) { return word.inputChanges; }));
        /** @type {?} */
        var source = merge.apply(void 0, tslib_1.__spread(subjects));
        this.updatePopoversSubscription = source.subscribe((/**
         * @return {?}
         */
        function () {
            _this.updatePositionPopovers();
        }));
        this.resizeObservable = this.resizeEvent$.pipe(throttleTime(500), delay(100));
        this.resizeObservable.subscribe((/**
         * @return {?}
         */
        function () { return _this.resizeWords(); }));
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxNaturalLanguageFormComponent.prototype.resizeWords = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this._words.forEach((/**
         * @param {?} word
         * @return {?}
         */
        function (word) {
            word.updateCurrentTextWidth();
        }));
    };
    /**
     * @return {?}
     */
    NxNaturalLanguageFormComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.updatePopoversSubscription.unsubscribe();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxNaturalLanguageFormComponent.prototype.updatePositionPopovers = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        if (this._words) {
            this._words.forEach((/**
             * @param {?} word
             * @return {?}
             */
            function (word) {
                word.repositionError();
            }));
        }
    };
    NxNaturalLanguageFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-natural-language-form',
                    template: "<div class=\"nx-natural-language-form__wrapper\">\n    <ng-content></ng-content>\n</div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.is-negative]': 'negative',
                        '[class.nx-natural-language-form--small]': 'size === "small"',
                        '[class.nx-natural-language-form--large]': 'size === "large"',
                    },
                    styles: [":host{display:block;font-size:40px;font-size:var(--natural-language-form-large-font-size,40px);line-height:52px;line-height:var(--natural-language-form-large-line-height,52px);font-weight:300;font-weight:var(--natural-language-form-large-font-weight,300);letter-spacing:.3px;letter-spacing:var(--natural-language-form-large-letter-spacing,.3px);color:#414141;color:var(--natural-language-form-text-color,#414141);padding-top:72px;padding-bottom:80px}:host ::ng-deep .c-input{font-size:inherit;line-height:inherit}:host ::ng-deep nx-word+nx-word{margin-left:2px}:host.is-negative{color:#fff}@media (max-width:991px){:host{font-size:26px;font-size:var(--natural-language-form-small-font-size,26px);line-height:36px;line-height:var(--natural-language-form-small-line-height,36px);font-weight:300;font-weight:var(--natural-language-form-small-font-weight,300);letter-spacing:.3px;letter-spacing:var(--natural-language-form-small-letter-spacing,.3px)}}.nx-natural-language-form__wrapper{display:flex;flex-wrap:wrap}.nx-natural-language-form__wrapper>::ng-deep *{margin-bottom:8px}:host(.nx-natural-language-form--small){font-size:26px;font-size:var(--natural-language-form-small-font-size,26px);line-height:36px;line-height:var(--natural-language-form-small-line-height,36px);font-weight:300;font-weight:var(--natural-language-form-small-font-weight,300);letter-spacing:.3px;letter-spacing:var(--natural-language-form-small-letter-spacing,.3px)}:host(.nx-natural-language-form--small) ::ng-deep .c-input{font-size:inherit;line-height:inherit}"]
                }] }
    ];
    /** @nocollapse */
    NxNaturalLanguageFormComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxNaturalLanguageFormComponent.propDecorators = {
        _words: [{ type: ContentChildren, args: [NxWordComponent,] }],
        negative: [{ type: Input, args: ['nxNegative',] }],
        size: [{ type: Input }],
        onResize: [{ type: HostListener, args: ['window:orientationchange', ['$event'],] }, { type: HostListener, args: ['window:resize', ['$event'],] }]
    };
    return NxNaturalLanguageFormComponent;
}());
export { NxNaturalLanguageFormComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxNaturalLanguageFormComponent.prototype._negative;
    /**
     * \@docs-private
     * @type {?}
     */
    NxNaturalLanguageFormComponent.prototype.resizeEvent$;
    /**
     * \@docs-private
     * @type {?}
     */
    NxNaturalLanguageFormComponent.prototype.resizeObservable;
    /** @type {?} */
    NxNaturalLanguageFormComponent.prototype._words;
    /**
     * \@docs-private
     * @type {?}
     */
    NxNaturalLanguageFormComponent.prototype.updatePopoversSubscription;
    /**
     * \@docs-private
     * @type {?}
     * @private
     */
    NxNaturalLanguageFormComponent.prototype._size;
    /**
     * @type {?}
     * @private
     */
    NxNaturalLanguageFormComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0dXJhbC1sYW5ndWFnZS1mb3JtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4LyIsInNvdXJjZXMiOlsibmF0dXJhbC1sYW5ndWFnZS1mb3JtL25hdHVyYWwtbGFuZ3VhZ2UtZm9ybS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDOUQsT0FBTyxFQUVMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULGVBQWUsRUFDZixZQUFZLEVBQ1osS0FBSyxFQUVMLFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsS0FBSyxFQUFjLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEUsT0FBTyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0lBSzdDLFlBQVksR0FBRyxPQUFPO0FBRTVCO0lBbURFLHdDQUFvQixrQkFBcUM7UUFBckMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFtQjtRQXRDakQsY0FBUyxHQUFHLEtBQUssQ0FBQzs7OztRQUcxQixpQkFBWSxHQUFrQixJQUFJLE9BQU8sRUFBUSxDQUFDOzs7O1FBUWxELCtCQUEwQixHQUFpQixZQUFZLENBQUMsS0FBSyxDQUFDOzs7O1FBR3RELFVBQUssR0FBOEIsWUFBWSxDQUFDO0lBd0JLLENBQUM7SUFyQjlELHNCQUNJLG9EQUFROzs7O1FBSVo7WUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDeEIsQ0FBQztRQVJELDJEQUEyRDs7Ozs7O1FBQzNELFVBQ2EsS0FBSztZQUNoQixJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hELENBQUM7OztPQUFBO0lBU0Qsc0JBQ0ksZ0RBQUk7Ozs7UUFJUjtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNwQixDQUFDO1FBVkQ7O1dBRUc7Ozs7OztRQUNILFVBQ1MsS0FBZ0M7WUFDdkMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDbkIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3pDLENBQUM7OztPQUFBO0lBT0Qsb0JBQW9COzs7Ozs7SUFHcEIsaURBQVE7Ozs7O0lBRlIsVUFFUyxLQUFLO1FBQ1osSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7O0lBRUQsMkRBQWtCOzs7SUFBbEI7UUFBQSxpQkFZQzs7OztZQVRPLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFDLElBQXFCLElBQUssT0FBQSxJQUFJLENBQUMsWUFBWSxFQUFqQixDQUFpQixFQUFDOztZQUN4RSxNQUFNLEdBQUcsS0FBSyxnQ0FBSSxRQUFRLEVBQUM7UUFFakMsSUFBSSxDQUFDLDBCQUEwQixHQUFHLE1BQU0sQ0FBQyxTQUFTOzs7UUFBRTtZQUNsRCxLQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUNoQyxDQUFDLEVBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDOUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVM7OztRQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsV0FBVyxFQUFFLEVBQWxCLENBQWtCLEVBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQsb0JBQW9COzs7OztJQUNwQixvREFBVzs7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQyxJQUFxQjtZQUN4QyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUNoQyxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxvREFBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsMEJBQTBCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDaEQsQ0FBQztJQUVELG9CQUFvQjs7Ozs7SUFDcEIsK0RBQXNCOzs7O0lBQXRCO1FBQ0UsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQyxJQUFxQjtnQkFDeEMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3pCLENBQUMsRUFBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOztnQkE1RkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSwwQkFBMEI7b0JBQ3BDLG9HQUFtRDtvQkFDbkQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBRS9DLElBQUksRUFBRTt3QkFDSixxQkFBcUIsRUFBRSxVQUFVO3dCQUNqQyx5Q0FBeUMsRUFBRyxrQkFBa0I7d0JBQzlELHlDQUF5QyxFQUFHLGtCQUFrQjtxQkFDL0Q7O2lCQUNGOzs7O2dCQTVCQyxpQkFBaUI7Ozt5QkF1Q2hCLGVBQWUsU0FBQyxlQUFlOzJCQVMvQixLQUFLLFNBQUMsWUFBWTt1QkFZbEIsS0FBSzsyQkFZTCxZQUFZLFNBQUMsMEJBQTBCLEVBQUUsQ0FBQyxRQUFRLENBQUMsY0FDbkQsWUFBWSxTQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7SUFzQzNDLHFDQUFDO0NBQUEsQUE3RkQsSUE2RkM7U0FqRlksOEJBQThCOzs7Ozs7SUFDekMsbURBQTBCOzs7OztJQUcxQixzREFBa0Q7Ozs7O0lBR2xELDBEQUFtQzs7SUFFbkMsZ0RBQXFFOzs7OztJQUdyRSxvRUFBOEQ7Ozs7OztJQUc5RCwrQ0FBd0Q7Ozs7O0lBd0I1Qyw0REFBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHtcbiAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgSG9zdExpc3RlbmVyLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBRdWVyeUxpc3QsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbWVyZ2UsIE9ic2VydmFibGUsIFN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVsYXksIHRocm90dGxlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgTnhXb3JkQ29tcG9uZW50IH0gZnJvbSAnLi93b3JkLmNvbXBvbmVudCc7XG5cbi8qKiBTaXplIG9mIHRoZSBOTEYuICovXG5leHBvcnQgdHlwZSBOeE5hdHVyYWxMYW5ndWFnZUZvcm1TaXplID0gJ3NtYWxsJyB8ICdsYXJnZSc7XG5cbmNvbnN0IERFRkFVTFRfU0laRSA9ICdsYXJnZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LW5hdHVyYWwtbGFuZ3VhZ2UtZm9ybScsXG4gIHRlbXBsYXRlVXJsOiAnbmF0dXJhbC1sYW5ndWFnZS1mb3JtLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0eWxlVXJsczogWyduYXR1cmFsLWxhbmd1YWdlLWZvcm0uc2NzcyddLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5pcy1uZWdhdGl2ZV0nOiAnbmVnYXRpdmUnLFxuICAgICdbY2xhc3MubngtbmF0dXJhbC1sYW5ndWFnZS1mb3JtLS1zbWFsbF0nIDogJ3NpemUgPT09IFwic21hbGxcIicsXG4gICAgJ1tjbGFzcy5ueC1uYXR1cmFsLWxhbmd1YWdlLWZvcm0tLWxhcmdlXScgOiAnc2l6ZSA9PT0gXCJsYXJnZVwiJyxcbiAgfVxufSlcblxuZXhwb3J0IGNsYXNzIE54TmF0dXJhbExhbmd1YWdlRm9ybUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgX25lZ2F0aXZlID0gZmFsc2U7XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgcmVzaXplRXZlbnQkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICByZXNpemVPYnNlcnZhYmxlOiBPYnNlcnZhYmxlPHZvaWQ+O1xuXG4gIEBDb250ZW50Q2hpbGRyZW4oTnhXb3JkQ29tcG9uZW50KSBfd29yZHM6IFF1ZXJ5TGlzdDxOeFdvcmRDb21wb25lbnQ+O1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHVwZGF0ZVBvcG92ZXJzU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24gPSBTdWJzY3JpcHRpb24uRU1QVFk7XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgcHJpdmF0ZSBfc2l6ZTogTnhOYXR1cmFsTGFuZ3VhZ2VGb3JtU2l6ZSA9IERFRkFVTFRfU0laRTtcblxuICAvKiogV2hldGhlciB0aGUgbmVnYXRpdmUgc2V0IG9mIHN0eWxpbmdzIHNob3VsZCBiZSB1c2VkLiAqL1xuICBASW5wdXQoJ254TmVnYXRpdmUnKVxuICBzZXQgbmVnYXRpdmUodmFsdWUpIHtcbiAgICB0aGlzLl9uZWdhdGl2ZSA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gIH1cblxuICBnZXQgbmVnYXRpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25lZ2F0aXZlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHNpemUgb2YgdGhlIE5MRi4gRGVmYXVsdCB2YWx1ZTogbGFyZ2VcbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCBzaXplKHZhbHVlOiBOeE5hdHVyYWxMYW5ndWFnZUZvcm1TaXplKSB7XG4gICAgdGhpcy5fc2l6ZSA9IHZhbHVlO1xuICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICB9XG4gIGdldCBzaXplKCk6IE54TmF0dXJhbExhbmd1YWdlRm9ybVNpemUge1xuICAgIHJldHVybiB0aGlzLl9zaXplO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7IH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6b3JpZW50YXRpb25jaGFuZ2UnLCBbJyRldmVudCddKVxuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJywgWyckZXZlbnQnXSlcbiAgb25SZXNpemUoZXZlbnQpIHtcbiAgICB0aGlzLnJlc2l6ZUV2ZW50JC5uZXh0KCk7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgLy8gQ29sbGVjdCBhbGwgd29yZHMgYW5kIGxpc3RlbiBmb3IgY2hhbmdlcyBzbyB3ZSBjYW4gdXBkYXRlIGFueSBvcGVuIGVycm9yIHBvcG92ZXJcbiAgICAvLyB3aGljaCB3b3VsZCBvdGhlcndpc2UgZ2V0IHdyb25nbHkgcG9zaXRpb25lZC5cbiAgICBjb25zdCBzdWJqZWN0cyA9IHRoaXMuX3dvcmRzLm1hcCgod29yZDogTnhXb3JkQ29tcG9uZW50KSA9PiB3b3JkLmlucHV0Q2hhbmdlcyk7XG4gICAgY29uc3Qgc291cmNlID0gbWVyZ2UoLi4uc3ViamVjdHMpO1xuXG4gICAgdGhpcy51cGRhdGVQb3BvdmVyc1N1YnNjcmlwdGlvbiA9IHNvdXJjZS5zdWJzY3JpYmUoICgpID0+IHtcbiAgICAgIHRoaXMudXBkYXRlUG9zaXRpb25Qb3BvdmVycygpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5yZXNpemVPYnNlcnZhYmxlID0gdGhpcy5yZXNpemVFdmVudCQucGlwZSh0aHJvdHRsZVRpbWUoNTAwKSwgZGVsYXkoMTAwKSk7XG4gICAgdGhpcy5yZXNpemVPYnNlcnZhYmxlLnN1YnNjcmliZSgoKSA9PiB0aGlzLnJlc2l6ZVdvcmRzKCkpO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgcmVzaXplV29yZHMoKSB7XG4gICAgdGhpcy5fd29yZHMuZm9yRWFjaCgod29yZDogTnhXb3JkQ29tcG9uZW50KSA9PiB7XG4gICAgICB3b3JkLnVwZGF0ZUN1cnJlbnRUZXh0V2lkdGgoKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMudXBkYXRlUG9wb3ZlcnNTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHVwZGF0ZVBvc2l0aW9uUG9wb3ZlcnMoKSB7XG4gICAgaWYgKHRoaXMuX3dvcmRzKSB7XG4gICAgICB0aGlzLl93b3Jkcy5mb3JFYWNoKCh3b3JkOiBOeFdvcmRDb21wb25lbnQpID0+IHtcbiAgICAgICAgd29yZC5yZXBvc2l0aW9uRXJyb3IoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIl19