/**
 * @fileoverview added by tsickle
 * Generated from: checkbox/checkbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, EventEmitter, forwardRef, Input, Output, ChangeDetectorRef, ContentChildren, QueryList, Optional, Self, ContentChild, ViewChild, ElementRef, } from '@angular/core';
import { NgControl, NgForm, FormGroupDirective, } from '@angular/forms';
import { Subject } from 'rxjs';
import { NxLabelComponent } from '@allianz/ngx-ndbx/base';
import { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';
/** @type {?} */
var nextId = 0;
var NxCheckboxChangeEvent = /** @class */ (function () {
    function NxCheckboxChangeEvent(checked, value, checkbox) {
        this.checked = checked;
        this.value = value;
        this.checkbox = checkbox;
    }
    return NxCheckboxChangeEvent;
}());
export { NxCheckboxChangeEvent };
if (false) {
    /**
     * The checked value of the checkbox.
     * @type {?}
     */
    NxCheckboxChangeEvent.prototype.checked;
    /**
     * The value of the checkbox.
     * @type {?}
     */
    NxCheckboxChangeEvent.prototype.value;
    /**
     * The component instance of the checkbox which emitted the change event.
     * @type {?}
     */
    NxCheckboxChangeEvent.prototype.checkbox;
}
var NxCheckboxGroupComponent = /** @class */ (function () {
    function NxCheckboxGroupComponent(_changeDetectorRef, ngControl) {
        this._changeDetectorRef = _changeDetectorRef;
        this.ngControl = ngControl;
        this._stateChanges = new Subject();
        this.selectionChange = new EventEmitter();
        this._id = "nx-checkbox-group-" + nextId++;
        this._disabled = false;
        this._negative = false;
        this._onChange = (/**
         * @return {?}
         */
        function () { });
        this._onTouched = (/**
         * @return {?}
         */
        function () { });
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    Object.defineProperty(NxCheckboxGroupComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this._id;
        },
        /** Sets the Id of the checkbox group. */
        set: /**
         * Sets the Id of the checkbox group.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._id !== value) {
                this._id = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCheckboxGroupComponent.prototype, "name", {
        get: /**
         * @return {?}
         */
        function () {
            return this._name;
        },
        /** Sets the name of the checkboxes inside the nx-checkbox-group. */
        set: /**
         * Sets the name of the checkboxes inside the nx-checkbox-group.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._name = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCheckboxGroupComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /** Disables all checkboxes inside the nx-checkbox-group. */
        set: /**
         * Disables all checkboxes inside the nx-checkbox-group.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = coerceBooleanProperty(value);
            if (this._label) {
                this._label.disabled = this._disabled;
            }
            this._stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCheckboxGroupComponent.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Set the negative styles for all the checkboxes inside the nx-checkbox-group */
        set: /**
         * Set the negative styles for all the checkboxes inside the nx-checkbox-group
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._negative = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
            this._stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCheckboxGroupComponent.prototype, "labelSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._labelSize;
        },
        /** Sets the label size of the checkboxes inside the group */
        set: /**
         * Sets the label size of the checkboxes inside the group
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._labelSize = value;
            this._stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCheckboxGroupComponent.prototype, "required", {
        /** Whether the nx-checkbox-group are required. */
        get: /**
         * Whether the nx-checkbox-group are required.
         * @return {?}
         */
        function () {
            return this._required;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._required = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxCheckboxGroupComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.ngControl) {
            if (!!this._value) {
                this._updateSelectedCheckboxFromValue();
            }
            this._value = this._checkboxes
                .filter((/**
             * @param {?} checkbox
             * @return {?}
             */
            function (checkbox) { return checkbox.checked; }))
                .map((/**
             * @param {?} cb
             * @return {?}
             */
            function (cb) { return cb.value; }));
        }
        this._updateSelectedCheckboxFromValue();
        this._checkboxes.changes.subscribe((/**
         * @return {?}
         */
        function () {
            _this._value = _this._checkboxes.filter((/**
             * @param {?} checkbox
             * @return {?}
             */
            function (checkbox) { return checkbox.checked; })).map((/**
             * @param {?} cb
             * @return {?}
             */
            function (cb) { return cb.value; }));
            if (_this.ngControl) {
                _this.ngControl.control.setValue(_this._value);
            }
            _this._updateSelectedCheckboxFromValue();
        }));
    };
    /**
     * @return {?}
     */
    NxCheckboxGroupComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._stateChanges.complete();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NxCheckboxGroupComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this._value !== value) {
            this._value = value;
            this._updateSelectedCheckboxFromValue();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NxCheckboxGroupComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NxCheckboxGroupComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    NxCheckboxGroupComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @private
     * @return {?}
     */
    NxCheckboxGroupComponent.prototype._updateSelectedCheckboxFromValue = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._checkboxes && this._checkboxes.length && !!this._value && this._value.length) {
            this._checkboxes.map((/**
             * @param {?} checkbox
             * @return {?}
             */
            function (checkbox) {
                checkbox.checked = _this._value.indexOf(checkbox.value) !== -1;
            }));
        }
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    NxCheckboxGroupComponent.prototype.change = /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        value = this._checkboxes.filter((/**
         * @param {?} checkbox
         * @return {?}
         */
        function (checkbox) { return checkbox.checked; })).map((/**
         * @param {?} cb
         * @return {?}
         */
        function (cb) { return cb.value; }));
        this._onChange(value);
        if (this._onTouched) {
            this._onTouched();
        }
        this.selectionChange.emit(new NxCheckboxChangeEvent(value.checked, value.value, value));
    };
    NxCheckboxGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-checkbox-group',
                    template: "<div>\n  <div class=\"nx-checkbox-group__label\">\n    <ng-content select=\"nx-label\"></ng-content>\n  </div>\n  <div class=\"nx-checkbox-group__errors\">\n    <ng-content select=\"nx-error\"></ng-content>\n  </div>\n  <div class=\"nx-checkbox-group__controls\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.nx-checkbox-group]': 'true',
                        '[class.nx-checkbox-group--negative]': 'negative',
                        '[attr.id]': 'id',
                        '[attr.required]': 'required',
                        '[attr.disabled]': 'disabled || null',
                        '[attr.aria-labelledby]': 'this._label?.id  || null',
                        '[attr.role]': '"group"',
                    },
                    styles: [":host ::ng-deep nx-error{margin-bottom:8px}:host ::ng-deep nx-label{margin-bottom:16px;display:block}:host.nx-checkbox-group--negative ::ng-deep nx-error,:host.nx-checkbox-group--negative ::ng-deep nx-icon.nx-error__icon,:host.nx-checkbox-group--negative ::ng-deep nx-label{color:#fff}"]
                }] }
    ];
    /** @nocollapse */
    NxCheckboxGroupComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }
    ]; };
    NxCheckboxGroupComponent.propDecorators = {
        _checkboxes: [{ type: ContentChildren, args: [forwardRef((/**
                     * @return {?}
                     */
                    function () { return NxCheckboxComponent; })), { descendants: true },] }],
        _label: [{ type: ContentChild, args: [forwardRef((/**
                     * @return {?}
                     */
                    function () { return NxLabelComponent; })), { static: false },] }],
        selectionChange: [{ type: Output }],
        id: [{ type: Input }],
        name: [{ type: Input }],
        disabled: [{ type: Input }],
        negative: [{ type: Input }],
        labelSize: [{ type: Input }],
        required: [{ type: Input }]
    };
    return NxCheckboxGroupComponent;
}());
export { NxCheckboxGroupComponent };
if (false) {
    /** @type {?} */
    NxCheckboxGroupComponent.prototype._checkboxes;
    /** @type {?} */
    NxCheckboxGroupComponent.prototype._label;
    /** @type {?} */
    NxCheckboxGroupComponent.prototype._stateChanges;
    /** @type {?} */
    NxCheckboxGroupComponent.prototype.selectionChange;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxGroupComponent.prototype._id;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxGroupComponent.prototype._name;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxGroupComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxGroupComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxGroupComponent.prototype._labelSize;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxGroupComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxGroupComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxGroupComponent.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxGroupComponent.prototype._onTouched;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxGroupComponent.prototype._changeDetectorRef;
    /** @type {?} */
    NxCheckboxGroupComponent.prototype.ngControl;
}
var NxCheckboxComponent = /** @class */ (function () {
    function NxCheckboxComponent(_changeDetectorRef, _errorStateMatcher, checkboxGroup, ngControl, _parentForm, _parentFormGroup) {
        this._changeDetectorRef = _changeDetectorRef;
        this._errorStateMatcher = _errorStateMatcher;
        this.checkboxGroup = checkboxGroup;
        this.ngControl = ngControl;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this._id = (nextId++).toString();
        this._disabled = false;
        this._negative = false;
        this._labelSize = 'small';
        this._checked = false;
        this._name = null;
        this._indeterminate = false;
        /**
         * An event emitted when the indeterminate value has changed
         */
        this.indeterminateChange = new EventEmitter(false);
        /**
         * An event emitted when the checked value has changed.
         *
         * Emits the boolean checked value of the changed checkbox.
         */
        this.checkedChange = new EventEmitter(false);
        /**
         * An event emitted when the checked value has changed.
         *
         * Emits a NxCheckboxChangeEvent.
         */
        this.checkboxChange = new EventEmitter();
        this.onChangeCallback = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) { });
        this.onTouchedCallback = (/**
         * @return {?}
         */
        function () { });
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    Object.defineProperty(NxCheckboxComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return "nx-checkbox-" + this._id;
        },
        /**
         * Id of the checkbox.
         *
         * If not set, the checkbox gets an incremented value by default.
         */
        set: /**
         * Id of the checkbox.
         *
         * If not set, the checkbox gets an incremented value by default.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._id) {
                this._id = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCheckboxComponent.prototype, "name", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.checkboxGroup && this.checkboxGroup.name) ? this.checkboxGroup.name : this._name;
        },
        /** Name of the checkbox. */
        set: /**
         * Name of the checkbox.
         * @param {?} name
         * @return {?}
         */
        function (name) {
            this._name = name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCheckboxComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.checkboxGroup && this.checkboxGroup.disabled) ? this.checkboxGroup.disabled : this._disabled;
        },
        /** Whether the checkbox is disabled. */
        set: /**
         * Whether the checkbox is disabled.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (newValue !== this._disabled) {
                this._disabled = newValue;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCheckboxComponent.prototype, "labelSize", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.checkboxGroup && this.checkboxGroup.labelSize) ? this.checkboxGroup.labelSize : this._labelSize;
        },
        /**
         * Sets the label size of the checkbox. Default value: small
         */
        set: /**
         * Sets the label size of the checkbox. Default value: small
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._labelSize = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCheckboxComponent.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.checkboxGroup && this.checkboxGroup.negative) ? this.checkboxGroup.negative : this._negative;
        },
        /**
         * Whether the checkbox has negative styling.
         */
        set: /**
         * Whether the checkbox has negative styling.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (newValue !== this._negative) {
                this._negative = newValue;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCheckboxComponent.prototype, "checked", {
        get: /**
         * @return {?}
         */
        function () {
            return this._checked;
        },
        /** Whether the checkbox is checked. */
        set: /**
         * Whether the checkbox is checked.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (newValue !== this._checked) {
                if (this._indeterminate) {
                    this._setIndeterminate(false);
                }
                this._setChecked(newValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCheckboxComponent.prototype, "indeterminate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._indeterminate;
        },
        /** Whether the checkbox is indeterminated. */
        set: /**
         * Whether the checkbox is indeterminated.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (this._indeterminate !== newValue) {
                if (this._checked) {
                    this._setChecked(false);
                }
                this._setIndeterminate(newValue);
            }
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCheckboxComponent.prototype, "required", {
        /** Whether the checkbox is required. */
        get: /**
         * Whether the checkbox is required.
         * @return {?}
         */
        function () {
            return this._required;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._required = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCheckboxComponent.prototype, "value", {
        /** Sets the value of the checkbox. Default value is the checked status. */
        get: /**
         * Sets the value of the checkbox. Default value is the checked status.
         * @return {?}
         */
        function () {
            return this._value ? this._value : this.checked.toString();
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCheckboxComponent.prototype, "labelHasContent", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return !!this._checkboxLabelWrapper.nativeElement.innerHTML.trim();
        },
        enumerable: true,
        configurable: true
    });
    /** @docs-private
     * Callback for when the content of the label has changed.
     */
    /**
     * \@docs-private
     * Callback for when the content of the label has changed.
     * @return {?}
     */
    NxCheckboxComponent.prototype.labelContentChanged = /**
     * \@docs-private
     * Callback for when the content of the label has changed.
     * @return {?}
     */
    function () {
        this._changeDetectorRef.detectChanges();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxCheckboxComponent.prototype._controlInvalid = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var parent = this._parentFormGroup || this._parentForm;
        /** @type {?} */
        var control = null;
        if (this.checkboxGroup && this.checkboxGroup.ngControl) {
            control = this.checkboxGroup.ngControl;
        }
        else {
            control = this.ngControl ? (/** @type {?} */ (this.ngControl.control)) : null;
        }
        return this._errorStateMatcher.isErrorState(control, parent);
    };
    /**
     * @return {?}
     */
    NxCheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.checkboxGroup) {
            this.name = this.checkboxGroup.name;
            // when relevant properties of the parent like name and disabled change
            // we need to let change detection know that the template needs an update
            this._parentChangeSubscription = this.checkboxGroup._stateChanges.subscribe((/**
             * @return {?}
             */
            function () {
                _this._changeDetectorRef.markForCheck();
            }));
        }
    };
    /**
     * @return {?}
     */
    NxCheckboxComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._parentChangeSubscription) {
            this._parentChangeSubscription.unsubscribe();
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    NxCheckboxComponent.prototype._setIndeterminate = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._indeterminate = value;
        this.indeterminateChange.emit(this._indeterminate);
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    NxCheckboxComponent.prototype._setChecked = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._checked = value;
        this._changeDetectorRef.markForCheck();
    };
    /** Toggles the checked state of the checkbox. */
    /**
     * Toggles the checked state of the checkbox.
     * @return {?}
     */
    NxCheckboxComponent.prototype.toggle = /**
     * Toggles the checked state of the checkbox.
     * @return {?}
     */
    function () {
        this.checked = !this.checked;
        this.onChangeCallback(this.checked);
        if (this.checkboxGroup !== null) {
            this.checkboxGroup.change(this);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NxCheckboxComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value === null) {
            value = false;
        }
        if (value !== this.checked) {
            this.checked = value;
        }
    };
    /**
     * @param {?} onChange
     * @return {?}
     */
    NxCheckboxComponent.prototype.registerOnChange = /**
     * @param {?} onChange
     * @return {?}
     */
    function (onChange) {
        this.onChangeCallback = onChange;
    };
    /**
     * @param {?} onTouched
     * @return {?}
     */
    NxCheckboxComponent.prototype.registerOnTouched = /**
     * @param {?} onTouched
     * @return {?}
     */
    function (onTouched) {
        this.onTouchedCallback = onTouched;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    NxCheckboxComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxCheckboxComponent.prototype.touch = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this.onTouchedCallback();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    NxCheckboxComponent.prototype._onInputClick = /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // stop the propagation of the native click on the checkbox input so that a click is not triggered twice
        event.stopPropagation();
        if (!this.disabled) {
            this.toggle();
            this.checkedChange.emit(this._checked);
            this.checkboxChange.emit(this._createChangeEvent(this._checked));
        }
    };
    /**@docs-private */
    /**
     * \@docs-private
     * @private
     * @param {?} checkedValue
     * @return {?}
     */
    NxCheckboxComponent.prototype._createChangeEvent = /**
     * \@docs-private
     * @private
     * @param {?} checkedValue
     * @return {?}
     */
    function (checkedValue) {
        /** @type {?} */
        var event = new NxCheckboxChangeEvent(checkedValue, this.value, this);
        event.checked = checkedValue;
        event.value = this.value;
        event.checkbox = this;
        return event;
    };
    NxCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-checkbox',
                    template: "<input\n  type=\"checkbox\"\n  [id]=\"id\"\n  [name]=\"name\"\n  [checked]=\"checked\"\n  [indeterminate]=\"indeterminate\" [disabled]=\"disabled\"\n  (blur)=\"touch()\"\n  [attr.aria-labelledby]=\"id + '-label'\"\n  (click)=\"_onInputClick($event)\"\n  class=\"nx-checkbox__input\"\n  [value]=\"value\"\n>\n\n<label [id]=\"id + '-label'\" [attr.for]=\"id\" class=\"nx-checkbox__label\" [class.has-label]=\"labelHasContent\">\n    <span class=\"nx-checkbox__control\">\n        <nx-icon *ngIf=\"checked\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n        <div *ngIf=\"indeterminate\" class=\"nx-checkbox__indeterminate-indicator\"></div>\n    </span>\n    <div class=\"nx-checkbox__label-text\" #checkboxLabelWrapper (cdkObserveContent)=\"labelContentChanged()\">\n        <ng-content></ng-content>\n    </div>\n</label>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.nx-checkbox]': 'true',
                        '[class.disabled]': 'disabled',
                        '[class.nx-checkbox--label-large]': 'labelSize === "large"',
                        '[class.nx-checkbox--label-small]': 'labelSize === "small"',
                        '[class.nx-checkbox--negative]': 'negative',
                        '[class.has-error]': '_controlInvalid() || null',
                        '[attr.required]': 'required',
                        '[attr.aria-invalid]': '_controlInvalid() || null',
                    },
                    styles: [":host{display:block;position:relative;margin-bottom:16px}:host.has-error .nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{background-color:#dc3149;background-color:var(--danger,#dc3149);border-color:#dc3149;border-color:var(--danger,#dc3149)}:host.has-error .nx-checkbox__control{border-color:#dc3149;border-color:var(--danger,#dc3149)}:host.has-error .nx-checkbox__indeterminate-indicator{background-color:#dc3149;background-color:var(--danger,#dc3149)}.nx-checkbox__input{opacity:0;position:absolute}.nx-checkbox__label{font-size:16px;font-size:var(--checkbox-small-label-font-size,16px);line-height:24px;line-height:var(--checkbox-small-label-line-height,24px);font-weight:400;font-weight:var(--checkbox-small-label-font-weight,400);letter-spacing:0;letter-spacing:var(--checkbox-small-label-letter-spacing,0);color:#414141;color:var(--checkbox-label-color,#414141);cursor:pointer;display:flex}:host(.nx-checkbox--label-large) .nx-checkbox__label{font-size:20px;font-size:var(--checkbox-large-label-font-size,20px);line-height:28px;line-height:var(--checkbox-large-label-line-height,28px);font-weight:400;font-weight:var(--checkbox-large-label-font-weight,400);letter-spacing:.2px;letter-spacing:var(--checkbox-large-label-letter-spacing,.2px)}:host(.nx-checkbox--label-large) .has-label .nx-checkbox__label-text{margin-top:0;margin-top:var(--checkbox-large-label-text-margin-top,0)}:host(.nx-checkbox--label-large) .has-label .nx-checkbox__control{margin-top:2px;margin-top:var(--checkbox-large-label-control-margin-top,2px)}:host(.nx-checkbox--label-large) .nx-checkbox__label-text{margin-left:12px;margin-left:var(--checkbox-large-label-text-margin-left,12px)}:host(.nx-checkbox--label-small) .has-label .nx-checkbox__label-text{margin-top:0;margin-top:var(--checkbox-small-label-text-margin-top,0)}:host(.nx-checkbox--label-small) .has-label .nx-checkbox__control{margin-top:0;margin-top:var(--checkbox-small-label-control-margin-top,0)}.nx-checkbox__label-text{padding:0;margin-left:12px;margin-left:var(--checkbox-small-label-text-margin-left,12px)}.nx-checkbox__label-text:empty{display:none}.nx-checkbox__control{background-color:transparent;background-color:var(--checkbox-background-color,transparent);border-width:var(--checkbox-border-width,2px);border-color:var(--checkbox-border-color,#767676);border-radius:4px;border-radius:var(--checkbox-border-radius,4px);color:#fff;color:var(--checkbox-icon-color,#fff);font-size:20px;font-size:var(--checkbox-icon-size,20px);height:24px;height:var(--checkbox-control-size,24px);width:24px;width:var(--checkbox-control-size,24px);min-width:24px;min-width:var(--checkbox-control-size,24px);display:flex;justify-content:center;align-items:center;z-index:0;cursor:pointer;border:2px solid #767676}.nx-checkbox__indeterminate-indicator{color:#007ab3;color:var(--checkbox-indeterminate-color,#007ab3);box-sizing:content-box;height:0;width:8px;border:1px solid;border-radius:2px}.nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{background-color:#007ab3;background-color:var(--checkbox-selected-background-color,#007ab3);border-color:#007ab3;border-color:var(--checkbox-selected-border-color,#007ab3)}.nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__control{background-color:#ececec;background-color:var(--checkbox-disabled-background-color,#ececec);border-color:#c2c2c2;border-color:var(--checkbox-disabled-border-color,#c2c2c2);color:#fff;color:var(--checkbox-disabled-icon-color,#fff);cursor:not-allowed}.nx-checkbox__input:checked:disabled+.nx-checkbox__label .nx-checkbox__control{background-color:#c2c2c2;background-color:var(--checkbox-disabled-selected-background-color,#c2c2c2)}.nx-checkbox__input:disabled+.nx-checkbox__label{cursor:not-allowed;color:#c2c2c2;color:var(--checkbox-label-disabled-color,#c2c2c2)}.nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{color:#c2c2c2;color:var(--checkbox-disabled-border-color,#c2c2c2)}:host(.nx-checkbox--negative) .nx-checkbox__control{border-color:#fff;background-color:transparent}:host(.nx-checkbox--negative) .nx-checkbox__label{color:#fff}:host(.nx-checkbox--negative) .nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{color:#000;background-color:#fff;border-color:#fff}:host(.nx-checkbox--negative) .nx-checkbox__input:checked:disabled+.nx-checkbox__label .nx-checkbox__control{color:rgba(255,255,255,.4);border-color:transparent;background-color:rgba(194,194,194,.4)}:host(.nx-checkbox--negative) .nx-checkbox__input:disabled+.nx-checkbox__label{color:rgba(255,255,255,.4)}:host(.nx-checkbox--negative) .nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__control{background-color:rgba(153,153,153,.4);border-color:rgba(217,217,217,.4)}:host(.nx-checkbox--negative) .nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:rgba(217,217,217,.4)}:host:not(.nx-checkbox--negative):not(.has-error):hover .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__control{background-color:#006192;background-color:var(--checkbox-hover-background-color,#006192)}:host:not(.nx-checkbox--negative):not(.has-error):hover .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:#006192;background-color:var(--checkbox-hover-background-color,#006192)}:host:not(.nx-checkbox--negative):not(.has-error):hover .nx-checkbox__input:not([disabled])+.nx-checkbox__label .nx-checkbox__control{border-color:#006192;border-color:var(--checkbox-hover-border-color,#006192)}:host:not(.nx-checkbox--negative):active .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__control{background-color:#003781;background-color:var(--checkbox-active-background-color,#003781)}:host:not(.nx-checkbox--negative):active .nx-checkbox__input:not([disabled]):checked+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{background-color:#003781;background-color:var(--checkbox-active-background-color,#003781)}:host:not(.nx-checkbox--negative):active .nx-checkbox__input:not([disabled])+.nx-checkbox__label .nx-checkbox__control{border-color:#003781;border-color:var(--checkbox-active-border-color,#003781)}:host-context([data-whatinput=keyboard]) .nx-checkbox__input:focus+.nx-checkbox__label .nx-checkbox__control{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]) .nx-checkbox__input:focus+.nx-checkbox__label .nx-checkbox__control{box-shadow:0 0 0 2px background,0 0 0 6px windowText}.nx-checkbox__input+.nx-checkbox__label .nx-checkbox__control{border-color:buttonText;background-color:buttonFace}.nx-checkbox__input+.nx-checkbox__label .nx-checkbox__label-text{color:buttonText}.nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control{background-color:highlight;border-color:highlight}.nx-checkbox__input:checked+.nx-checkbox__label .nx-checkbox__control nx-icon{color:highlightText}.nx-checkbox__input:indeterminate+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{color:buttonText}.nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__control nx-icon,.nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__label-text{color:GrayText}.nx-checkbox__input:disabled:indeterminate+.nx-checkbox__label .nx-checkbox__indeterminate-indicator{color:GrayText}.nx-checkbox__input:disabled+.nx-checkbox__label .nx-checkbox__control{border-color:GrayText}.nx-checkbox__input:disabled:checked+.nx-checkbox__label .nx-checkbox__control{background-color:buttonFace}.nx-checkbox__input:disabled:checked+.nx-checkbox__label .nx-checkbox__control nx-icon{color:GrayText}}"]
                }] }
    ];
    /** @nocollapse */
    NxCheckboxComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ErrorStateMatcher },
        { type: NxCheckboxGroupComponent, decorators: [{ type: Optional }] },
        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },
        { type: NgForm, decorators: [{ type: Optional }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }] }
    ]; };
    NxCheckboxComponent.propDecorators = {
        _checkboxLabelWrapper: [{ type: ViewChild, args: ['checkboxLabelWrapper', { static: true },] }],
        id: [{ type: Input }],
        name: [{ type: Input }],
        disabled: [{ type: Input }],
        labelSize: [{ type: Input }],
        negative: [{ type: Input }],
        checked: [{ type: Input }],
        indeterminate: [{ type: Input }],
        required: [{ type: Input }],
        value: [{ type: Input }],
        indeterminateChange: [{ type: Output }],
        checkedChange: [{ type: Output }],
        checkboxChange: [{ type: Output }]
    };
    return NxCheckboxComponent;
}());
export { NxCheckboxComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxCheckboxComponent.prototype._parentChangeSubscription;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxComponent.prototype._id;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxComponent.prototype._labelSize;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxComponent.prototype._checked;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxComponent.prototype._name;
    /**
     * \@docs-private
     * @type {?}
     */
    NxCheckboxComponent.prototype._checkboxLabelWrapper;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxComponent.prototype._indeterminate;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxComponent.prototype._value;
    /**
     * An event emitted when the indeterminate value has changed
     * @type {?}
     */
    NxCheckboxComponent.prototype.indeterminateChange;
    /**
     * An event emitted when the checked value has changed.
     *
     * Emits the boolean checked value of the changed checkbox.
     * @type {?}
     */
    NxCheckboxComponent.prototype.checkedChange;
    /**
     * An event emitted when the checked value has changed.
     *
     * Emits a NxCheckboxChangeEvent.
     * @type {?}
     */
    NxCheckboxComponent.prototype.checkboxChange;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxComponent.prototype.onChangeCallback;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxComponent.prototype._errorStateMatcher;
    /** @type {?} */
    NxCheckboxComponent.prototype.checkboxGroup;
    /** @type {?} */
    NxCheckboxComponent.prototype.ngControl;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxComponent.prototype._parentForm;
    /**
     * @type {?}
     * @private
     */
    NxCheckboxComponent.prototype._parentFormGroup;
}
//# sourceMappingURL=data:application/json;base64,