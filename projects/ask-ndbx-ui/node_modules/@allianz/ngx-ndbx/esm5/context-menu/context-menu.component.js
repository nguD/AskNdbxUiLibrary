/**
 * @fileoverview added by tsickle
 * Generated from: context-menu.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { FocusKeyManager } from '@angular/cdk/a11y';
import { ESCAPE, LEFT_ARROW, RIGHT_ARROW, HOME, END, hasModifierKey } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, NgZone, Output, TemplateRef, ViewChild, } from '@angular/core';
import { merge, Subject, Subscription } from 'rxjs';
import { startWith, switchMap, take } from 'rxjs/operators';
import { nxContextMenuAnimations } from './context-menu-animations';
import { NxContextMenuContentDirective } from './context-menu-content.directive';
var NxContextMenuComponent = /** @class */ (function () {
    function NxContextMenuComponent(_ngZone) {
        this._ngZone = _ngZone;
        /**
         * Menu items inside the current menu.
         */
        this._items = [];
        /**
         * Emits whenever the amount of menu items changes.
         */
        this._itemChanges = new Subject();
        /**
         * Subscription to tab events on the menu panel
         */
        this._tabSubscription = Subscription.EMPTY;
        /**
         * Config object to be passed into the menu's ngClass
         */
        this._classList = {};
        /**
         * Current state of the panel animation.
         */
        this._panelAnimationState = 'void';
        /**
         * Emits whenever an animation on the menu completes.
         */
        this._animationDone = new Subject();
        /**
         * Event emitted when the menu is closed.
         */
        this.closed = new EventEmitter();
    }
    /**
     * @return {?}
     */
    NxContextMenuComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._keyManager = new FocusKeyManager(this._items)
            .withWrap()
            .withTypeAhead();
        this._tabSubscription = this._keyManager.tabOut.subscribe((/**
         * @return {?}
         */
        function () {
            return _this.closed.emit('tab');
        }));
    };
    /**
     * @return {?}
     */
    NxContextMenuComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._tabSubscription.unsubscribe();
        this.closed.complete();
    };
    /** Stream that emits whenever the hovered menu item changes. */
    /**
     * Stream that emits whenever the hovered menu item changes.
     * @return {?}
     */
    NxContextMenuComponent.prototype._hovered = /**
     * Stream that emits whenever the hovered menu item changes.
     * @return {?}
     */
    function () {
        return this._itemChanges.pipe(startWith(this._items), switchMap((/**
         * @param {?} items
         * @return {?}
         */
        function (items) { return merge.apply(void 0, tslib_1.__spread(items.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item._hovered; })))); })));
    };
    /** Handle a keyboard event from the menu, delegating to the appropriate action. */
    /**
     * Handle a keyboard event from the menu, delegating to the appropriate action.
     * @param {?} event
     * @return {?}
     */
    NxContextMenuComponent.prototype._handleKeydown = /**
     * Handle a keyboard event from the menu, delegating to the appropriate action.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var keyCode = event.keyCode;
        /** @type {?} */
        var manager = this._keyManager;
        switch (keyCode) {
            case ESCAPE:
                if (!hasModifierKey(event)) {
                    event.preventDefault();
                    this.closed.emit('keydown');
                }
                break;
            case LEFT_ARROW:
                if (this.parentMenu && this.direction === 'ltr') {
                    this.closed.emit('keydown');
                }
                break;
            case RIGHT_ARROW:
                if (this.parentMenu && this.direction === 'rtl') {
                    this.closed.emit('keydown');
                }
                break;
            case HOME:
            case END:
                if (!hasModifierKey(event)) {
                    keyCode === HOME
                        ? manager.setFirstItemActive()
                        : manager.setLastItemActive();
                    event.preventDefault();
                }
                break;
            default:
                manager.onKeydown(event);
        }
    };
    /**
     * Focus the first item in the menu.
     */
    /**
     * Focus the first item in the menu.
     * @return {?}
     */
    NxContextMenuComponent.prototype.focusFirstItem = /**
     * Focus the first item in the menu.
     * @return {?}
     */
    function () {
        var _this = this;
        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.
        if (this.lazyContent) {
            this._ngZone.onStable
                .asObservable()
                .pipe(take(1))
                .subscribe((/**
             * @return {?}
             */
            function () {
                return _this._keyManager.setFirstItemActive();
            }));
        }
        else {
            this._keyManager.setFirstItemActive();
        }
    };
    /**
     * Resets the active item in the menu. This is used when the menu is opened, allowing
     * the user to start from the first option when pressing the down arrow.
     */
    /**
     * Resets the active item in the menu. This is used when the menu is opened, allowing
     * the user to start from the first option when pressing the down arrow.
     * @return {?}
     */
    NxContextMenuComponent.prototype.resetActiveItem = /**
     * Resets the active item in the menu. This is used when the menu is opened, allowing
     * the user to start from the first option when pressing the down arrow.
     * @return {?}
     */
    function () {
        this._keyManager.setActiveItem(-1);
    };
    /**
     * Registers a menu item with the context menu.
     * @docs-private
     */
    /**
     * Registers a menu item with the context menu.
     * \@docs-private
     * @param {?} item
     * @return {?}
     */
    NxContextMenuComponent.prototype.addItem = /**
     * Registers a menu item with the context menu.
     * \@docs-private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        // We register the items through this method, rather than picking them up through
        // `ContentChildren`, because we need the items to be picked up by their closest
        // `nx-context-menu` ancestor. If we used `@ContentChildren(NxContextMenuItem, {descendants: true})`,
        // all descendant items will bleed into the top-level menu in the case where the consumer
        // has `nx-context-menu` instances nested inside each other.
        if (this._items.indexOf(item) === -1) {
            this._items.push(item);
            this._itemChanges.next(this._items);
        }
    };
    /**
     * Removes an item from the context menu.
     * @docs-private
     */
    /**
     * Removes an item from the context menu.
     * \@docs-private
     * @param {?} item
     * @return {?}
     */
    NxContextMenuComponent.prototype.removeItem = /**
     * Removes an item from the context menu.
     * \@docs-private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var index = this._items.indexOf(item);
        if (this._items.indexOf(item) > -1) {
            this._items.splice(index, 1);
            this._itemChanges.next(this._items);
        }
    };
    /** Starts the enter animation. */
    /**
     * Starts the enter animation.
     * @return {?}
     */
    NxContextMenuComponent.prototype._startAnimation = /**
     * Starts the enter animation.
     * @return {?}
     */
    function () {
        this._panelAnimationState = 'enter';
    };
    /** Resets the panel animation to its initial state. */
    /**
     * Resets the panel animation to its initial state.
     * @return {?}
     */
    NxContextMenuComponent.prototype._resetAnimation = /**
     * Resets the panel animation to its initial state.
     * @return {?}
     */
    function () {
        this._panelAnimationState = 'void';
    };
    /** Callback that is invoked when the panel animation completes. */
    /**
     * Callback that is invoked when the panel animation completes.
     * @param {?} event
     * @return {?}
     */
    NxContextMenuComponent.prototype._onAnimationDone = /**
     * Callback that is invoked when the panel animation completes.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._animationDone.next(event);
        this._isAnimating = false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NxContextMenuComponent.prototype._onAnimationStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._isAnimating = true;
        // Scroll the content element to the top as soon as the animation starts. This is necessary,
        // because we move focus to the first item while it's still being animated, which can throw
        // the browser off when it determines the scroll position. Alternatively we can move focus
        // when the animation is done, however moving focus asynchronously will interrupt screen
        // readers which are in the process of reading out the menu already. We take the `element`
        // from the `event` since we can't use a `ViewChild` to access the pane.
        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {
            event.element.scrollTop = 0;
        }
    };
    NxContextMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-context-menu',
                    template: "<ng-template>\n  <div class=\"nx-context-menu\"\n    [ngClass]=\"_classList\"\n    (keydown)=\"_handleKeydown($event)\"\n    (click)=\"closed.emit('click')\"\n    [@transformContextMenu]=\"_panelAnimationState\"\n    (@transformContextMenu.start)=\"_onAnimationStart($event)\"\n    (@transformContextMenu.done)=\"_onAnimationDone($event)\"\n    tabindex=\"-1\"\n    role=\"menu\">\n    <div class=\"nx-context-menu__content\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    exportAs: 'nxContextMenu',
                    animations: [
                        nxContextMenuAnimations.transformContextMenu
                    ],
                    styles: [".nx-context-menu{border-radius:4px;background:#fff;background:var(--context-menu-background-color,#fff);min-height:64px;box-shadow:0 2px 4px rgba(65,65,65,.5);outline:0}.nx-context-menu.ng-animating{pointer-events:none}.nx-context-menu__content:not(:empty){padding-top:16px;padding-bottom:16px;display:flex;flex-direction:column}@media screen and (-ms-high-contrast:active){.nx-context-menu{border:1px solid windowText}.nx-context-menu__content:not(:empty){background-color:buttonFace}}"]
                }] }
    ];
    /** @nocollapse */
    NxContextMenuComponent.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    NxContextMenuComponent.propDecorators = {
        templateRef: [{ type: ViewChild, args: [TemplateRef, { static: false },] }],
        lazyContent: [{ type: ContentChild, args: [NxContextMenuContentDirective, { static: false },] }],
        closed: [{ type: Output }]
    };
    return NxContextMenuComponent;
}());
export { NxContextMenuComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxContextMenuComponent.prototype._keyManager;
    /**
     * Menu items inside the current menu.
     * @type {?}
     * @private
     */
    NxContextMenuComponent.prototype._items;
    /**
     * Emits whenever the amount of menu items changes.
     * @type {?}
     * @private
     */
    NxContextMenuComponent.prototype._itemChanges;
    /**
     * Subscription to tab events on the menu panel
     * @type {?}
     * @private
     */
    NxContextMenuComponent.prototype._tabSubscription;
    /**
     * Config object to be passed into the menu's ngClass
     * @type {?}
     */
    NxContextMenuComponent.prototype._classList;
    /**
     * Current state of the panel animation.
     * @type {?}
     */
    NxContextMenuComponent.prototype._panelAnimationState;
    /**
     * Emits whenever an animation on the menu completes.
     * @type {?}
     */
    NxContextMenuComponent.prototype._animationDone;
    /**
     * Whether the menu is animating.
     * @type {?}
     */
    NxContextMenuComponent.prototype._isAnimating;
    /**
     * Parent menu of the current menu panel.
     * @type {?}
     */
    NxContextMenuComponent.prototype.parentMenu;
    /**
     * \@docs-private
     * Layout direction of the menu.
     * @type {?}
     */
    NxContextMenuComponent.prototype.direction;
    /**
     * \@docs-private
     * @type {?}
     */
    NxContextMenuComponent.prototype.templateRef;
    /**
     * Menu content that will be rendered lazily.
     * \@docs-private
     * @type {?}
     */
    NxContextMenuComponent.prototype.lazyContent;
    /**
     * Event emitted when the menu is closed.
     * @type {?}
     */
    NxContextMenuComponent.prototype.closed;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuComponent.prototype._ngZone;
}
//# sourceMappingURL=data:application/json;base64,