/**
 * @fileoverview added by tsickle
 * Generated from: context-menu-trigger.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directionality } from '@angular/cdk/bidi';
import { LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { TemplatePortal } from '@angular/cdk/portal';
import { Directive, ElementRef, EventEmitter, Input, Optional, Output, Self, ViewContainerRef } from '@angular/core';
import { normalizePassiveListenerOptions } from '@angular/cdk/platform';
import { asapScheduler, merge, of as observableOf, Subscription, fromEvent } from 'rxjs';
import { delay, filter, take, takeUntil, map } from 'rxjs/operators';
import { NxContextMenuComponent } from './context-menu.component';
import { throwNxContextMenuMissingError } from './context-menu-errors';
import { NxContextMenuItemComponent } from './context-menu-item.component';
/**
 * Default top padding of the menu panel.
 * @type {?}
 */
export var MENU_PANEL_TOP_PADDING = 16;
/** @type {?} */
export var MENU_PANEL_OFFSET = 8;
/**
 * Options for binding a passive event listener.
 * @type {?}
 */
var passiveEventListenerOptions = normalizePassiveListenerOptions({
    passive: true
});
/**
 * This directive is intended to be used in conjunction with an nx-context-menu tag.
 * It is responsible for toggling the display of the provided context menu instance.
 */
var NxContextMenuTriggerDirective = /** @class */ (function () {
    function NxContextMenuTriggerDirective(_overlay, _element, _viewContainerRef, _parentMenu, _contextMenuItemInstance, _dir) {
        this._overlay = _overlay;
        this._element = _element;
        this._viewContainerRef = _viewContainerRef;
        this._parentMenu = _parentMenu;
        this._contextMenuItemInstance = _contextMenuItemInstance;
        this._dir = _dir;
        this._overlayRef = null;
        this._contextMenuOpen = false;
        this._closingActionsSubscription = Subscription.EMPTY;
        this._hoverSubscription = Subscription.EMPTY;
        this._contextMenuCloseSubscription = Subscription.EMPTY;
        /**
         * Event emitted when the associated context menu is opened.
         */
        this.contextMenuOpened = new EventEmitter();
        /**
         * Event emitted when the associated context menu is closed.
         */
        this.contextMenuClosed = new EventEmitter();
        if (_contextMenuItemInstance) {
            _contextMenuItemInstance._triggersSubmenu = this.triggersSubmenu();
        }
        this._scrollStrategy = this._overlay.scrollStrategies.reposition;
        this._documentClickObservable = fromEvent(document, 'click');
    }
    Object.defineProperty(NxContextMenuTriggerDirective.prototype, "contextMenu", {
        /** References the context menu instance that the trigger is associated with. */
        get: /**
         * References the context menu instance that the trigger is associated with.
         * @return {?}
         */
        function () {
            return this._contextMenu;
        },
        set: /**
         * @param {?} contextMenu
         * @return {?}
         */
        function (contextMenu) {
            var _this = this;
            if (contextMenu === this._contextMenu) {
                return;
            }
            this._contextMenu = contextMenu;
            this._contextMenuCloseSubscription.unsubscribe();
            if (contextMenu) {
                this._contextMenuCloseSubscription = contextMenu.closed
                    .asObservable()
                    .subscribe((/**
                 * @param {?} reason
                 * @return {?}
                 */
                function (reason) {
                    _this._destroyMenu();
                    // If a click closed the menu, we should close the entire chain of nested menus.
                    if ((reason === 'click' || reason === 'tab') && _this._parentMenu) {
                        _this._parentMenu.closed.emit(reason);
                    }
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxContextMenuTriggerDirective.prototype, "scrollStrategy", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value === 'close') {
                this._scrollStrategy = this._overlay.scrollStrategies.close;
            }
            else {
                this._scrollStrategy = this._overlay.scrollStrategies.reposition;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxContextMenuTriggerDirective.prototype, "contextMenuOpen", {
        /** Whether the context menu is open. */
        get: /**
         * Whether the context menu is open.
         * @return {?}
         */
        function () {
            return this._contextMenuOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxContextMenuTriggerDirective.prototype, "dir", {
        /** The text direction of the containing app. */
        get: /**
         * The text direction of the containing app.
         * @private
         * @return {?}
         */
        function () {
            return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this._checkContextMenu();
        this._handleHover();
    };
    /**
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._overlayRef = null;
        }
        this._contextMenuCloseSubscription.unsubscribe();
        this._closingActionsSubscription.unsubscribe();
        this._hoverSubscription.unsubscribe();
    };
    /** Whether the context menu triggers a sub-menu or a top-level one. */
    /**
     * Whether the context menu triggers a sub-menu or a top-level one.
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype.triggersSubmenu = /**
     * Whether the context menu triggers a sub-menu or a top-level one.
     * @return {?}
     */
    function () {
        return !!(this._contextMenuItemInstance && this._parentMenu);
    };
    /** Toggles the context menu between the open and closed states. */
    /**
     * Toggles the context menu between the open and closed states.
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype.toggleContextMenu = /**
     * Toggles the context menu between the open and closed states.
     * @return {?}
     */
    function () {
        return this.contextMenuOpen
            ? this.closeContextMenu()
            : this.openContextMenu();
    };
    /** Opens the context menu. */
    /**
     * Opens the context menu.
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype.openContextMenu = /**
     * Opens the context menu.
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.contextMenuOpen) {
            return;
        }
        this._checkContextMenu();
        /** @type {?} */
        var overlayRef = this._createOverlay();
        /** @type {?} */
        var overlayConfig = overlayRef.getConfig();
        this._setPosition((/** @type {?} */ (overlayConfig.positionStrategy)));
        overlayRef.attach(this._getPortal());
        if (this.contextMenu.lazyContent) {
            this.contextMenu.lazyContent.attach(this.contextMenuData);
        }
        this._closingActionsSubscription = this._contextMenuClosingActions().subscribe((/**
         * @return {?}
         */
        function () { return _this.closeContextMenu(); }));
        this._initContextMenu();
        if (this.contextMenu instanceof NxContextMenuComponent) {
            this.contextMenu._startAnimation();
        }
        this._waitForClose();
    };
    /** Closes the context menu. */
    /**
     * Closes the context menu.
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype.closeContextMenu = /**
     * Closes the context menu.
     * @return {?}
     */
    function () {
        this.contextMenu.closed.emit();
    };
    /** Closes the context menu and does the necessary cleanup. */
    /**
     * Closes the context menu and does the necessary cleanup.
     * @private
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype._destroyMenu = /**
     * Closes the context menu and does the necessary cleanup.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._overlayRef || !this.contextMenuOpen) {
            return;
        }
        /** @type {?} */
        var contextMenu = this.contextMenu;
        this._closingActionsSubscription.unsubscribe();
        this._overlayRef.detach();
        contextMenu._resetAnimation();
        if (contextMenu.lazyContent) {
            // Wait for the exit animation to finish before detaching the content.
            contextMenu._animationDone
                .pipe(filter((/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return event.toState === 'void'; })), take(1), 
            // Interrupt if the content got re-attached.
            takeUntil(contextMenu.lazyContent._attached))
                .subscribe({
                next: (/**
                 * @return {?}
                 */
                function () {
                    return contextMenu.lazyContent && contextMenu.lazyContent.detach();
                }),
                // No matter whether the content got re-attached, reset the menu.
                complete: (/**
                 * @return {?}
                 */
                function () { return _this._resetContextMenu(); })
            });
        }
        else {
            this._resetContextMenu();
        }
    };
    /**
     * This method sets the context menu state to open and focuses the first item if
     * the context menu was opened via the keyboard.
     */
    /**
     * This method sets the context menu state to open and focuses the first item if
     * the context menu was opened via the keyboard.
     * @private
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype._initContextMenu = /**
     * This method sets the context menu state to open and focuses the first item if
     * the context menu was opened via the keyboard.
     * @private
     * @return {?}
     */
    function () {
        this.contextMenu.parentMenu = this.triggersSubmenu()
            ? this._parentMenu
            : undefined;
        this.contextMenu.direction = this.dir;
        this._setIsContextMenuOpen(true);
        this.contextMenu.focusFirstItem();
    };
    /**
     * Focuses the context menu trigger.
     */
    /**
     * Focuses the context menu trigger.
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype.focus = /**
     * Focuses the context menu trigger.
     * @return {?}
     */
    function () {
        this._element.nativeElement.focus();
    };
    /**
     * This method resets the context menu when it's closed, most importantly restoring
     * focus to the context menu trigger if the context menu was opened via the keyboard.
     */
    /**
     * This method resets the context menu when it's closed, most importantly restoring
     * focus to the context menu trigger if the context menu was opened via the keyboard.
     * @private
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype._resetContextMenu = /**
     * This method resets the context menu when it's closed, most importantly restoring
     * focus to the context menu trigger if the context menu was opened via the keyboard.
     * @private
     * @return {?}
     */
    function () {
        this._setIsContextMenuOpen(false);
        this.focus();
    };
    /** Set state rather than toggle to support triggers sharing a menu. */
    /**
     * Set state rather than toggle to support triggers sharing a menu.
     * @private
     * @param {?} isOpen
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype._setIsContextMenuOpen = /**
     * Set state rather than toggle to support triggers sharing a menu.
     * @private
     * @param {?} isOpen
     * @return {?}
     */
    function (isOpen) {
        this._contextMenuOpen = isOpen;
        this._contextMenuOpen
            ? this.contextMenuOpened.emit()
            : this.contextMenuClosed.emit();
        if (this.triggersSubmenu()) {
            this._contextMenuItemInstance._highlighted = isOpen;
        }
    };
    /**
     * This method checks that a valid instance of NxContextMenuComponent has been passed into
     * nxContextMenuTriggerFor. If not, an exception is thrown.
     */
    /**
     * This method checks that a valid instance of NxContextMenuComponent has been passed into
     * nxContextMenuTriggerFor. If not, an exception is thrown.
     * @private
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype._checkContextMenu = /**
     * This method checks that a valid instance of NxContextMenuComponent has been passed into
     * nxContextMenuTriggerFor. If not, an exception is thrown.
     * @private
     * @return {?}
     */
    function () {
        if (!this.contextMenu) {
            throwNxContextMenuMissingError();
        }
    };
    /**
     * This method creates the overlay from the provided menu's template and saves its
     * OverlayRef so that it can be attached to the DOM when openContextMenu is called.
     */
    /**
     * This method creates the overlay from the provided menu's template and saves its
     * OverlayRef so that it can be attached to the DOM when openContextMenu is called.
     * @private
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype._createOverlay = /**
     * This method creates the overlay from the provided menu's template and saves its
     * OverlayRef so that it can be attached to the DOM when openContextMenu is called.
     * @private
     * @return {?}
     */
    function () {
        if (!this._overlayRef) {
            /** @type {?} */
            var config = this._getOverlayConfig();
            this._overlayRef = this._overlay.create(config);
            // Consume the `keydownEvents` in order to prevent them from going to another overlay.
            this._overlayRef.keydownEvents().subscribe();
        }
        return this._overlayRef;
    };
    /**
     * This method builds the configuration object needed to create the overlay, the OverlayState.
     * @returns OverlayConfig
     */
    /**
     * This method builds the configuration object needed to create the overlay, the OverlayState.
     * @private
     * @return {?} OverlayConfig
     */
    NxContextMenuTriggerDirective.prototype._getOverlayConfig = /**
     * This method builds the configuration object needed to create the overlay, the OverlayState.
     * @private
     * @return {?} OverlayConfig
     */
    function () {
        return new OverlayConfig({
            positionStrategy: this._overlay
                .position()
                .flexibleConnectedTo(this._element)
                .withLockedPosition()
                .withFlexibleDimensions(false)
                .withTransformOriginOn('.nx-context-menu'),
            scrollStrategy: this._scrollStrategy(),
            direction: this._dir
        });
    };
    /**
     * Sets the appropriate positions on a position strategy
     * so the overlay connects with the trigger correctly.
     * @param positionStrategy Strategy whose position to update.
     */
    /**
     * Sets the appropriate positions on a position strategy
     * so the overlay connects with the trigger correctly.
     * @private
     * @param {?} positionStrategy Strategy whose position to update.
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype._setPosition = /**
     * Sets the appropriate positions on a position strategy
     * so the overlay connects with the trigger correctly.
     * @private
     * @param {?} positionStrategy Strategy whose position to update.
     * @return {?}
     */
    function (positionStrategy) {
        /** @type {?} */
        var originX = 'start';
        /** @type {?} */
        var originFallbackX = 'end';
        /** @type {?} */
        var overlayY = 'top';
        /** @type {?} */
        var overlayFallbackY = 'bottom';
        /** @type {?} */
        var originY = overlayY;
        /** @type {?} */
        var originFallbackY = overlayFallbackY;
        /** @type {?} */
        var overlayX = originX;
        /** @type {?} */
        var overlayFallbackX = originFallbackX;
        /** @type {?} */
        var offsetY = 0;
        if (this.triggersSubmenu()) {
            // When the menu is a sub-menu, it should always align itself
            // to the edges of the trigger, instead of overlapping it.
            overlayFallbackX = originX = 'end';
            originFallbackX = overlayX = 'start';
            offsetY = -MENU_PANEL_TOP_PADDING;
        }
        else {
            offsetY = MENU_PANEL_OFFSET;
            originY = 'bottom';
            originFallbackY = 'top';
        }
        positionStrategy.withPositions((/** @type {?} */ ([
            { originX: originX, originY: originY, overlayX: overlayX, overlayY: overlayY, offsetY: offsetY },
            {
                originX: originFallbackX,
                originY: originY,
                overlayX: overlayFallbackX,
                overlayY: overlayY,
                offsetY: offsetY
            },
            {
                originX: originX,
                originY: originFallbackY,
                overlayX: overlayX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY
            },
            {
                originX: originFallbackX,
                originY: originFallbackY,
                overlayX: overlayFallbackX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY
            }
        ])));
    };
    /**
     * Returns a stream that emits whenever an action that should close the context menu occurs. */
    /**
     * Returns a stream that emits whenever an action that should close the context menu occurs.
     * @private
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype._contextMenuClosingActions = /**
     * Returns a stream that emits whenever an action that should close the context menu occurs.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var backdrop;
        /** @type {?} */
        var detachments;
        if (this._overlayRef) {
            backdrop = this._overlayRef.backdropClick();
            detachments = this._overlayRef.detachments();
        }
        /** @type {?} */
        var parentClose = this._parentMenu
            ? this._parentMenu.closed
            : observableOf();
        /** @type {?} */
        var hover = this._parentMenu
            ? this._parentMenu._hovered().pipe(filter((/**
             * @param {?} active
             * @return {?}
             */
            function (active) { return active !== _this._contextMenuItemInstance; })), filter((/**
             * @return {?}
             */
            function () { return _this._contextMenuOpen; })))
            : observableOf();
        return merge(backdrop, parentClose, hover, detachments);
    };
    /** Handles mouse presses on the trigger. */
    /**
     * Handles mouse presses on the trigger.
     * @param {?} event
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype._handleMousedown = /**
     * Handles mouse presses on the trigger.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // Since right or middle button clicks won't trigger the `click` event,
        // we shouldn't consider the menu as opened by mouse in those cases.
        // this._openedBy = event.button === 0 ? 'mouse' : null;
        // Since clicking on the trigger won't close the menu if it opens a sub-menu,
        // we should prevent focus from moving onto it via click to avoid the
        // highlight from lingering on the menu item.
        if (this.triggersSubmenu()) {
            event.preventDefault();
        }
    };
    /** Handles key presses on the trigger. */
    /**
     * Handles key presses on the trigger.
     * @param {?} event
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype._handleKeydown = /**
     * Handles key presses on the trigger.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var keyCode = event.keyCode;
        if (this.triggersSubmenu() &&
            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||
                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {
            this.openContextMenu();
        }
    };
    /** Handles click events on the trigger. */
    /**
     * Handles click events on the trigger.
     * @param {?} event
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype._handleClick = /**
     * Handles click events on the trigger.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.triggersSubmenu()) {
            // Stop event propagation to avoid closing the parent menu.
            event.stopPropagation();
            this.openContextMenu();
        }
        else {
            this.toggleContextMenu();
        }
    };
    /* Subscribes to document clicks to close the context menu on clicks on the background. */
    /* Subscribes to document clicks to close the context menu on clicks on the background. */
    /**
     * @private
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype._waitForClose = /* Subscribes to document clicks to close the context menu on clicks on the background. */
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        return this._documentClickObservable
            .pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return event.target; })), filter((/**
         * @param {?} target
         * @return {?}
         */
        function (target) { return !_this._element.nativeElement.contains(target); })), takeUntil(this.contextMenu.closed))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this.closeContextMenu();
        }));
    };
    /** Handles the cases where the user hovers over the trigger. */
    /**
     * Handles the cases where the user hovers over the trigger.
     * @private
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype._handleHover = /**
     * Handles the cases where the user hovers over the trigger.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // Subscribe to changes in the hovered item in order to toggle the panel.
        if (!this.triggersSubmenu()) {
            return;
        }
        this._hoverSubscription = this._parentMenu
            ._hovered()
            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu
            // with different data and triggers), we have to delay it by a tick to ensure that
            // it won't be closed immediately after it is opened.
            .pipe(filter((/**
         * @param {?} active
         * @return {?}
         */
        function (active) { return active === _this._contextMenuItemInstance && !active.disabled; })), delay(0, asapScheduler))
            .subscribe((/**
         * @return {?}
         */
        function () {
            // If the same menu is used between multiple triggers, it might still be animating
            // while the new trigger tries to re-open it. Wait for the animation to finish
            // before doing so. Also interrupt if the user moves to another item.
            if (_this.contextMenu._isAnimating) {
                // We need the `delay(0)` here in order to avoid
                // 'changed after checked' errors in some cases.
                _this.contextMenu._animationDone
                    .pipe(take(1), delay(0, asapScheduler), takeUntil(_this._parentMenu._hovered()))
                    .subscribe((/**
                 * @return {?}
                 */
                function () { return _this.openContextMenu(); }));
            }
            else {
                _this.openContextMenu();
            }
        }));
    };
    /** Gets the portal that should be attached to the overlay. */
    /**
     * Gets the portal that should be attached to the overlay.
     * @private
     * @return {?}
     */
    NxContextMenuTriggerDirective.prototype._getPortal = /**
     * Gets the portal that should be attached to the overlay.
     * @private
     * @return {?}
     */
    function () {
        // Note that we can avoid this check by keeping the portal on the context menu panel.
        // While it would be cleaner, we'd have to introduce another required method on
        // `NxContextMenuPanelComponent`, making it harder to consume.
        if (!this._portal ||
            this._portal.templateRef !== this.contextMenu.templateRef) {
            this._portal = new TemplatePortal(this.contextMenu.templateRef, this._viewContainerRef);
        }
        return this._portal;
    };
    NxContextMenuTriggerDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[nxContextMenuTriggerFor]",
                    host: {
                        'aria-haspopup': 'true',
                        '[attr.aria-expanded]': 'contextMenuOpen || null',
                        '(mousedown)': '_handleMousedown($event)',
                        '(keydown)': '_handleKeydown($event)',
                        '(click)': '_handleClick($event)'
                    },
                    exportAs: 'nxContextMenuTrigger'
                },] }
    ];
    /** @nocollapse */
    NxContextMenuTriggerDirective.ctorParameters = function () { return [
        { type: Overlay },
        { type: ElementRef },
        { type: ViewContainerRef },
        { type: NxContextMenuComponent, decorators: [{ type: Optional }] },
        { type: NxContextMenuItemComponent, decorators: [{ type: Optional }, { type: Self }] },
        { type: Directionality, decorators: [{ type: Optional }] }
    ]; };
    NxContextMenuTriggerDirective.propDecorators = {
        contextMenu: [{ type: Input, args: ['nxContextMenuTriggerFor',] }],
        scrollStrategy: [{ type: Input }],
        contextMenuData: [{ type: Input, args: ['nxContextMenuTriggerData',] }],
        contextMenuOpened: [{ type: Output }],
        contextMenuClosed: [{ type: Output }]
    };
    return NxContextMenuTriggerDirective;
}());
export { NxContextMenuTriggerDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._portal;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._overlayRef;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._contextMenuOpen;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._closingActionsSubscription;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._hoverSubscription;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._contextMenuCloseSubscription;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._documentClickObservable;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._scrollStrategy;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._contextMenu;
    /**
     * Data to be passed along to any lazily-rendered content.
     * @type {?}
     */
    NxContextMenuTriggerDirective.prototype.contextMenuData;
    /**
     * Event emitted when the associated context menu is opened.
     * @type {?}
     */
    NxContextMenuTriggerDirective.prototype.contextMenuOpened;
    /**
     * Event emitted when the associated context menu is closed.
     * @type {?}
     */
    NxContextMenuTriggerDirective.prototype.contextMenuClosed;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._parentMenu;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._contextMenuItemInstance;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._dir;
}
//# sourceMappingURL=data:application/json;base64,