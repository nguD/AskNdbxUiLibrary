/**
 * @fileoverview added by tsickle
 * Generated from: card/card.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, Attribute } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
var NxCardComponent = /** @class */ (function () {
    function NxCardComponent(_changeDetectorRef, tabindex) {
        this._changeDetectorRef = _changeDetectorRef;
        this._disabled = false;
        /**
         * Event emitted when the selected value has changed.
         *
         * This output  property of the card is deprecated,
         * as its selectable properties are deprecated as well.
         * Please use the selectable card component instead.
         *
         * @deprecated
         * \@deletion-target 10.0.0
         */
        this.selectedChange = new EventEmitter();
        this._tabindex = tabindex;
    }
    Object.defineProperty(NxCardComponent.prototype, "selectable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectable;
        },
        /**
         * Whether this card is selectable or not.
         *
         * The selectable property of the card is deprecated.
         * Please use the selectable card component instead.
         *
         * @deprecated
         * @deletion-target 10.0.0
         */
        set: /**
         * Whether this card is selectable or not.
         *
         * The selectable property of the card is deprecated.
         * Please use the selectable card component instead.
         *
         * @deprecated
         * \@deletion-target 10.0.0
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selectable = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCardComponent.prototype, "selected", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selected;
        },
        /**
         * Whether this card is selected or not.
         *
         * The selected property of the card is deprecated.
         * Please use the selectable card component instead.
         *
         * @deprecated
         * @deletion-target 10.0.0
        */
        set: /**
         * Whether this card is selected or not.
         *
         * The selected property of the card is deprecated.
         * Please use the selectable card component instead.
         *
         * @deprecated
         * \@deletion-target 10.0.0
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selected = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCardComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * Whether a selectable card is disabled or not.
         *
         * The disabled property of the card will be deprecated,
         * as its selectable properties are deprecated as well.
         * Please use the selectable card component instead.
         *
         * @deprecated
         * @deletion-target 10.0.0
        */
        set: /**
         * Whether a selectable card is disabled or not.
         *
         * The disabled property of the card will be deprecated,
         * as its selectable properties are deprecated as well.
         * Please use the selectable card component instead.
         *
         * @deprecated
         * \@deletion-target 10.0.0
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxCardComponent.prototype._toggleSelected = /**
     * @return {?}
     */
    function () {
        if (this.selectable && !this.disabled) {
            this.selected = !this.selected;
            this.selectedChange.emit(this.selected);
        }
    };
    /**
     * @return {?}
     */
    NxCardComponent.prototype._getTabindex = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return '-1';
        }
        if (this.selectable) {
            return this._tabindex || '0';
        }
        return this._tabindex || '';
    };
    NxCardComponent.decorators = [
        { type: Component, args: [{
                    template: '<ng-content></ng-content>',
                    selector: 'nx-card',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        'class': 'nx-card',
                        '[class.is-selectable]': 'selectable',
                        '[class.is-selected]': 'selected',
                        '[class.is-disabled]': 'disabled',
                        '[attr.aria-disabled]': 'disabled',
                        '(click)': '_toggleSelected()',
                        '(keydown.enter)': '_toggleSelected()',
                        '[attr.tabindex]': '_getTabindex()'
                    },
                    styles: [":host{background:#fff;background:var(--card-background-color,#fff);border-color:var(--card-border-color,#d9d9d9);border-width:var(--card-border-width,1px);border-radius:4px;border-radius:var(--card-border-radius,4px);box-shadow:none;display:inline-block;margin-bottom:24px;padding:23px;transition:background-color .2s,box-shadow .2s;border:1px solid #d9d9d9}:host:focus,:host:hover{outline:0}:host.is-selectable{cursor:pointer}:host.is-selectable:hover{background:#f5f5f5;background:var(--card-background-hover-color,#f5f5f5)}:host.is-selected{box-shadow:0 8px 24px rgba(65,65,65,.35);background:#f5f5f5;background:var(--card-background-selected-color,#f5f5f5)}:host.is-disabled{cursor:not-allowed;opacity:.4}:host.is-disabled:hover{background:#fff;background:var(--card-background-color,#fff)}:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}:host.is-selectable{border-color:buttonText}:host.is-selected{border-width:3px;padding:21px;border-color:highlight}:host.is-disabled{opacity:1;border-color:GrayText;color:GrayText}}"]
                }] }
    ];
    /** @nocollapse */
    NxCardComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }
    ]; };
    NxCardComponent.propDecorators = {
        selectable: [{ type: Input }],
        selected: [{ type: Input }],
        disabled: [{ type: Input }],
        selectedChange: [{ type: Output }]
    };
    return NxCardComponent;
}());
export { NxCardComponent };
if (false) {
    /** @type {?} */
    NxCardComponent.prototype._tabindex;
    /**
     * @type {?}
     * @private
     */
    NxCardComponent.prototype._selectable;
    /**
     * @type {?}
     * @private
     */
    NxCardComponent.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    NxCardComponent.prototype._disabled;
    /**
     * Event emitted when the selected value has changed.
     *
     * This output  property of the card is deprecated,
     * as its selectable properties are deprecated as well.
     * Please use the selectable card component instead.
     *
     * @deprecated
     * \@deletion-target 10.0.0
     * @type {?}
     */
    NxCardComponent.prototype.selectedChange;
    /**
     * @type {?}
     * @private
     */
    NxCardComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbImNhcmQvY2FyZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM1SCxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUU1RDtJQStGRSx5QkFDWSxrQkFBcUMsRUFDdEIsUUFBZ0I7UUFEL0IsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFtQjtRQWZ6QyxjQUFTLEdBQVksS0FBSyxDQUFDOzs7Ozs7Ozs7OztRQVl6QixtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFLckQsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7SUFDNUIsQ0FBQztJQXZFRCxzQkFDSSx1Q0FBVTs7OztRQUtkO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzFCLENBQUM7UUFqQkQ7Ozs7Ozs7O1dBUUc7Ozs7Ozs7Ozs7OztRQUNILFVBQ2UsS0FBYztZQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN6QyxDQUFDOzs7T0FBQTtJQWlCRCxzQkFDSSxxQ0FBUTs7OztRQUtaO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7UUFqQkQ7Ozs7Ozs7O1VBUUU7Ozs7Ozs7Ozs7OztRQUNGLFVBQ2EsS0FBYztZQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN6QyxDQUFDOzs7T0FBQTtJQWtCRCxzQkFDSSxxQ0FBUTs7OztRQUtaO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7UUFsQkQ7Ozs7Ozs7OztVQVNFOzs7Ozs7Ozs7Ozs7O1FBQ0YsVUFDYSxLQUFjO1lBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3pDLENBQUM7OztPQUFBOzs7O0lBMEJELHlDQUFlOzs7SUFBZjtRQUNFLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDckMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDL0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3pDO0lBQ0gsQ0FBQzs7OztJQUVELHNDQUFZOzs7SUFBWjtRQUNFLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLE9BQU8sSUFBSSxDQUFDLFNBQVMsSUFBSSxHQUFHLENBQUM7U0FDOUI7UUFFRCxPQUFPLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO0lBQzlCLENBQUM7O2dCQXRIRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDJCQUEyQjtvQkFFckMsUUFBUSxFQUFFLFNBQVM7b0JBQ25CLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxJQUFJLEVBQUU7d0JBQ0osT0FBTyxFQUFFLFNBQVM7d0JBQ2xCLHVCQUF1QixFQUFFLFlBQVk7d0JBQ3JDLHFCQUFxQixFQUFFLFVBQVU7d0JBQ2pDLHFCQUFxQixFQUFFLFVBQVU7d0JBQ2pDLHNCQUFzQixFQUFFLFVBQVU7d0JBQ2xDLFNBQVMsRUFBRSxtQkFBbUI7d0JBQzlCLGlCQUFpQixFQUFFLG1CQUFtQjt3QkFDdEMsaUJBQWlCLEVBQUUsZ0JBQWdCO3FCQUNwQzs7aUJBQ0Y7Ozs7Z0JBbEJ3RSxpQkFBaUI7NkNBb0duRixTQUFTLFNBQUMsVUFBVTs7OzZCQXJFeEIsS0FBSzsyQkFxQkwsS0FBSzsyQkFzQkwsS0FBSztpQ0FzQkwsTUFBTTs7SUEwQlQsc0JBQUM7Q0FBQSxBQXZIRCxJQXVIQztTQXZHWSxlQUFlOzs7SUFDMUIsb0NBQWtCOzs7OztJQXFCbEIsc0NBQTZCOzs7OztJQXFCN0Isb0NBQTJCOzs7OztJQXNCM0Isb0NBQW1DOzs7Ozs7Ozs7Ozs7SUFZbkMseUNBQXVEOzs7OztJQUduRCw2Q0FBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEF0dHJpYnV0ZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2NvZXJjZUJvb2xlYW5Qcm9wZXJ0eX0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIHN0eWxlVXJsczogWydjYXJkLnNjc3MnXSxcbiAgc2VsZWN0b3I6ICdueC1jYXJkJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGhvc3Q6IHtcbiAgICAnY2xhc3MnOiAnbngtY2FyZCcsXG4gICAgJ1tjbGFzcy5pcy1zZWxlY3RhYmxlXSc6ICdzZWxlY3RhYmxlJyxcbiAgICAnW2NsYXNzLmlzLXNlbGVjdGVkXSc6ICdzZWxlY3RlZCcsXG4gICAgJ1tjbGFzcy5pcy1kaXNhYmxlZF0nOiAnZGlzYWJsZWQnLFxuICAgICdbYXR0ci5hcmlhLWRpc2FibGVkXSc6ICdkaXNhYmxlZCcsXG4gICAgJyhjbGljayknOiAnX3RvZ2dsZVNlbGVjdGVkKCknLFxuICAgICcoa2V5ZG93bi5lbnRlciknOiAnX3RvZ2dsZVNlbGVjdGVkKCknLFxuICAgICdbYXR0ci50YWJpbmRleF0nOiAnX2dldFRhYmluZGV4KCknXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnhDYXJkQ29tcG9uZW50IHtcbiAgX3RhYmluZGV4OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBjYXJkIGlzIHNlbGVjdGFibGUgb3Igbm90LlxuICAgKlxuICAgKiBUaGUgc2VsZWN0YWJsZSBwcm9wZXJ0eSBvZiB0aGUgY2FyZCBpcyBkZXByZWNhdGVkLlxuICAgKiBQbGVhc2UgdXNlIHRoZSBzZWxlY3RhYmxlIGNhcmQgY29tcG9uZW50IGluc3RlYWQuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIEBkZWxldGlvbi10YXJnZXQgMTAuMC4wXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgc2VsZWN0YWJsZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3NlbGVjdGFibGUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgZ2V0IHNlbGVjdGFibGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbGVjdGFibGU7XG4gIH1cblxuICBwcml2YXRlIF9zZWxlY3RhYmxlOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoaXMgY2FyZCBpcyBzZWxlY3RlZCBvciBub3QuXG4gICAqXG4gICAqIFRoZSBzZWxlY3RlZCBwcm9wZXJ0eSBvZiB0aGUgY2FyZCBpcyBkZXByZWNhdGVkLlxuICAgKiBQbGVhc2UgdXNlIHRoZSBzZWxlY3RhYmxlIGNhcmQgY29tcG9uZW50IGluc3RlYWQuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIEBkZWxldGlvbi10YXJnZXQgMTAuMC4wXG4gICovXG4gIEBJbnB1dCgpXG4gIHNldCBzZWxlY3RlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3NlbGVjdGVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIGdldCBzZWxlY3RlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWQ7XG4gIH1cblxuICBwcml2YXRlIF9zZWxlY3RlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogV2hldGhlciBhIHNlbGVjdGFibGUgY2FyZCBpcyBkaXNhYmxlZCBvciBub3QuXG4gICAqXG4gICAqIFRoZSBkaXNhYmxlZCBwcm9wZXJ0eSBvZiB0aGUgY2FyZCB3aWxsIGJlIGRlcHJlY2F0ZWQsXG4gICAqIGFzIGl0cyBzZWxlY3RhYmxlIHByb3BlcnRpZXMgYXJlIGRlcHJlY2F0ZWQgYXMgd2VsbC5cbiAgICogUGxlYXNlIHVzZSB0aGUgc2VsZWN0YWJsZSBjYXJkIGNvbXBvbmVudCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBAZGVsZXRpb24tdGFyZ2V0IDEwLjAuMFxuICAqL1xuICBASW5wdXQoKVxuICBzZXQgZGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kaXNhYmxlZCA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG5cbiAgcHJpdmF0ZSBfZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogRXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBzZWxlY3RlZCB2YWx1ZSBoYXMgY2hhbmdlZC5cbiAgICpcbiAgICogVGhpcyBvdXRwdXQgIHByb3BlcnR5IG9mIHRoZSBjYXJkIGlzIGRlcHJlY2F0ZWQsXG4gICAqIGFzIGl0cyBzZWxlY3RhYmxlIHByb3BlcnRpZXMgYXJlIGRlcHJlY2F0ZWQgYXMgd2VsbC5cbiAgICogUGxlYXNlIHVzZSB0aGUgc2VsZWN0YWJsZSBjYXJkIGNvbXBvbmVudCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBAZGVsZXRpb24tdGFyZ2V0IDEwLjAuMFxuICAqL1xuICBAT3V0cHV0KCkgc2VsZWN0ZWRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgICBwcml2YXRlIF9jaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICBAQXR0cmlidXRlKCd0YWJpbmRleCcpIHRhYmluZGV4OiBzdHJpbmcpIHtcbiAgICB0aGlzLl90YWJpbmRleCA9IHRhYmluZGV4O1xuICB9XG5cbiAgX3RvZ2dsZVNlbGVjdGVkKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnNlbGVjdGFibGUgJiYgIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSAhdGhpcy5zZWxlY3RlZDtcbiAgICAgIHRoaXMuc2VsZWN0ZWRDaGFuZ2UuZW1pdCh0aGlzLnNlbGVjdGVkKTtcbiAgICB9XG4gIH1cblxuICBfZ2V0VGFiaW5kZXgoKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuICctMSc7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2VsZWN0YWJsZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RhYmluZGV4IHx8ICcwJztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fdGFiaW5kZXggfHwgJyc7XG4gIH1cbn1cbiJdfQ==