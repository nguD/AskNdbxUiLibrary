/**
 * @fileoverview added by tsickle
 * Generated from: dropdown/item/dropdown-item.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, Optional, Output, ViewChild, } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { NxDropdownControl } from '../dropdown.control';
import { NxDropdownGroupComponent } from './../group/dropdown-group';
var NxDropdownItemChange = /** @class */ (function () {
    function NxDropdownItemChange(item, isUserInput) {
        if (isUserInput === void 0) { isUserInput = false; }
        this.item = item;
        this.isUserInput = isUserInput;
    }
    return NxDropdownItemChange;
}());
export { NxDropdownItemChange };
if (false) {
    /**
     * Reference to the option that emitted the event.
     * @type {?}
     */
    NxDropdownItemChange.prototype.item;
    /**
     * Whether the change in the option's value was a result of a user action.
     * @type {?}
     */
    NxDropdownItemChange.prototype.isUserInput;
}
/**
 * the unique id counter
 * @type {?}
 */
var nextId = 0;
var NxDropdownItemComponent = /** @class */ (function () {
    function NxDropdownItemComponent(_dropdown, group, _changeDetectorRef, _elementRef) {
        var _this = this;
        this._dropdown = _dropdown;
        this.group = group;
        this._changeDetectorRef = _changeDetectorRef;
        this._elementRef = _elementRef;
        this._hidden = false;
        this._mostRecentViewValue = '';
        this._id = "nx-dropdown-item-" + nextId++;
        this._selected = false;
        /**
         * Emits whenever the component is destroyed.
         */
        this._destroy = new Subject();
        /**
         * Event emitted when the option is selected or deselected.
         */
        // tslint:disable-next-line:no-output-on-prefix
        this.onSelectionChange = new EventEmitter();
        /**
         * Emits when the state of the option changes and any parents have to be notified.
         */
        this._stateChanges = new Subject();
        ((/** @type {?} */ (this._dropdown))).filterChanges.pipe(takeUntil(this._destroy)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this._showOrHideByFilter(value);
        }));
        // reset the hidden state when dropdown closes that on next open the user is seeing the full list again
        ((/** @type {?} */ (this._dropdown)))._closedStream.pipe(takeUntil(this._destroy)).subscribe((/**
         * @return {?}
         */
        function () {
            _this._hidden = false;
        }));
    }
    Object.defineProperty(NxDropdownItemComponent.prototype, "id", {
        /** The unique ID of the option. */
        get: /**
         * The unique ID of the option.
         * @return {?}
         */
        function () { return this._id; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDropdownItemComponent.prototype, "selected", {
        /** Whether the item is selected. */
        get: /**
         * Whether the item is selected.
         * @return {?}
         */
        function () {
            return this._selected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDropdownItemComponent.prototype, "active", {
        /** Whether the item is active. */
        get: /**
         * Whether the item is active.
         * @return {?}
         */
        function () {
            return this._active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDropdownItemComponent.prototype, "multiselect", {
        /**
         * @docs-private
         * Whether the parent dropdown is in multiselect mode.
         */
        get: /**
         * \@docs-private
         * Whether the parent dropdown is in multiselect mode.
         * @return {?}
         */
        function () {
            return this._dropdown && this._dropdown.isMultiSelect;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxDropdownItemComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        // Since the parent dropdown component could be using the item's label to display the selected values
        // and it doesn't have a way of knowing if the item's label has changed
        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are
        // relatively cheap, however we still limit them only to selected options in order to avoid
        // hitting the DOM too often.
        if (this._selected) {
            /** @type {?} */
            var viewValue = this.viewValue;
            if (viewValue !== this._mostRecentViewValue) {
                this._mostRecentViewValue = viewValue;
                this._stateChanges.next();
            }
        }
    };
    /**
     * @return {?}
     */
    NxDropdownItemComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._stateChanges.complete();
        this._destroy.next();
        this._destroy.complete();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NxDropdownItemComponent.prototype._onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /* preventDefault to stop triggering the event twice when you click on the checkbox or the label inside the item */
        event.preventDefault();
        event.stopPropagation();
        this._selectViaInteraction();
    };
    /**
    * `Selects the option while indicating the selection came from the user. Used to
    * determine if the select's view -> model callback should be invoked.`
    */
    /**
     * `Selects the option while indicating the selection came from the user. Used to
     * determine if the select's view -> model callback should be invoked.`
     * @return {?}
     */
    NxDropdownItemComponent.prototype._selectViaInteraction = /**
     * `Selects the option while indicating the selection came from the user. Used to
     * determine if the select's view -> model callback should be invoked.`
     * @return {?}
     */
    function () {
        this._selected = this.multiselect ? !this._selected : true;
        this._changeDetectorRef.markForCheck();
        this._emitSelectionChangeEvent(true);
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxDropdownItemComponent.prototype.show = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this._hidden = false;
        this._changeDetectorRef.markForCheck();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxDropdownItemComponent.prototype.hide = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this._hidden = true;
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @private
     * @param {?} search
     * @return {?}
     */
    NxDropdownItemComponent.prototype._showOrHideByFilter = /**
     * @private
     * @param {?} search
     * @return {?}
     */
    function (search) {
        /** @type {?} */
        var constraint = ((/** @type {?} */ (this._dropdown))).filterFn(search, this.viewValue);
        this._hidden = constraint ? false : true;
        this._changeDetectorRef.markForCheck();
    };
    Object.defineProperty(NxDropdownItemComponent.prototype, "_formattedValue", {
        get: /**
         * @return {?}
         */
        function () {
            return ((/** @type {?} */ (this._dropdown))).valueFormatter(this.value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDropdownItemComponent.prototype, "viewValue", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return (this._elementRef.nativeElement.textContent || '').trim();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDropdownItemComponent.prototype, "elementRef", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._elementRef;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxDropdownItemComponent.prototype.select = /**
     * @return {?}
     */
    function () {
        if (!this._selected) {
            this._selected = true;
            this._changeDetectorRef.markForCheck();
            this._emitSelectionChangeEvent();
        }
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxDropdownItemComponent.prototype.deselect = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        if (this._selected) {
            this._selected = false;
            this._changeDetectorRef.markForCheck();
            this._emitSelectionChangeEvent();
        }
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxDropdownItemComponent.prototype.focus = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this._elementRef.nativeElement.focus();
    };
    /**
     * @private
     * @param {?=} isUserInput
     * @return {?}
     */
    NxDropdownItemComponent.prototype._emitSelectionChangeEvent = /**
     * @private
     * @param {?=} isUserInput
     * @return {?}
     */
    function (isUserInput) {
        if (isUserInput === void 0) { isUserInput = false; }
        this.onSelectionChange.emit(new NxDropdownItemChange(this, isUserInput));
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxDropdownItemComponent.prototype.setActiveStyles = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this._active = true;
        this._changeDetectorRef.markForCheck();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxDropdownItemComponent.prototype.setInactiveStyles = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this._active = false;
        this._changeDetectorRef.markForCheck();
    };
    /**
     * Returns the list item's text label. Implemented as a part of the ListKeyManagerOption.
     * @docs-private */
    /**
     * Returns the list item's text label. Implemented as a part of the ListKeyManagerOption.
     * \@docs-private
     * @return {?}
     */
    NxDropdownItemComponent.prototype.getLabel = /**
     * Returns the list item's text label. Implemented as a part of the ListKeyManagerOption.
     * \@docs-private
     * @return {?}
     */
    function () {
        return this.viewValue;
    };
    /**
     * @param {?} element
     * @return {?}
     */
    NxDropdownItemComponent.prototype._isContentEmpty = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        return element.children.length === 0 && !element.textContent.trim();
    };
    /**
     * @return {?}
     */
    NxDropdownItemComponent.prototype._onLabelChange = /**
     * @return {?}
     */
    function () {
        // trigger change detection when the label content changes for the case that ng-content was empty before.
        // this is also important when the label comes in deferred, e.g. by a delayed observable,
        // then first the default label derived from the value is shown
        // and after the value from the async observable is ready we need to trigger change detection that the derived label
        // gets hidden again.
        // Notice(!): the event of (cdkObserveContent) is run outside of the ngZone
        // We run detectChanges directly here as markForCheck wasn't enough to always trigger change detection correctly
        this._changeDetectorRef.detectChanges();
    };
    NxDropdownItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-dropdown-item',
                    template: "<div #container class=\"nx-dropdown-results__option\"\n     [ngClass]=\"{'nx-dropdown-results__option--selected': selected}\">\n\n   <nx-checkbox *ngIf=\"multiselect\" [checked]=\"selected\">\n      <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </nx-checkbox>\n\n    <span *ngIf=\"!multiselect\" class=\"nx-dropdown-results__option-checkicon\">\n       <nx-icon name=\"check\" aria-hidden=\"true\"></nx-icon>\n    </span>\n\n    <ng-container *ngIf=\"!multiselect\">\n      <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </ng-container>\n</div>\n\n<ng-template #contentTemplate>\n  <div class=\"nx-dropdown-results__option-label\" >\n    <span #content (cdkObserveContent)=\"_onLabelChange()\">\n      <ng-content></ng-content>\n    </span>\n    <ng-container *ngIf=\"_isContentEmpty(content)\">\n      {{_formattedValue}}\n    </ng-container>\n  </div>\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[id]': 'id',
                        'role': 'option',
                        '[attr.aria-selected]': 'selected.toString()',
                        '[class.nx-hidden]': '_hidden',
                        '[class.nx-dropdown-item--active]': 'active',
                        '[class.nx-selected]': 'selected',
                        '[class.nx-multiselect]': 'multiselect',
                        '(click)': '_onClick($event)'
                    },
                    styles: [":host{display:block}:host(.nx-hidden){display:none}:host:first-child .nx-dropdown-results__option{padding-top:16px}:host:last-child .nx-dropdown-results__option{padding-bottom:16px}nx-checkbox{margin-bottom:0}.nx-dropdown-results__option{font-size:20px;font-size:var(--dropdown-item-font-size,20px);line-height:28px;line-height:var(--dropdown-item-line-height,28px);font-weight:400;font-weight:var(--dropdown-item-font-weight,400);letter-spacing:.2px;letter-spacing:var(--dropdown-item-letter-spacing,.2px);padding:8px 32px 8px 8px;cursor:pointer;position:relative;display:flex;max-width:100%;white-space:nowrap}.nx-dropdown-results__option-label{padding:0 12px;margin:0 -12px;color:#414141;color:var(--dropdown-item-text-color,#414141);white-space:pre-line}@media screen and (-ms-high-contrast:active){.nx-dropdown-results__option-label{-ms-high-contrast-adjust:none;color:buttonText;background-color:buttonFace;border-radius:4px}}:host(.nx-multiselect) .nx-dropdown-results__option{display:block;padding-left:32px}:host(.nx-selected):hover .nx-dropdown-results__option-checkicon,:host(.nx-selected):hover .nx-dropdown-results__option-label,:host:hover .nx-dropdown-results__option-label{color:#006192;color:var(--hover-primary,#006192)}@media screen and (-ms-high-contrast:active){:host(.nx-dropdown-item--active):not(.nx-multiselect) .nx-dropdown-results__option-label,:host:hover .nx-dropdown-results__option-label{color:highlightText;background-color:highlight}:host(.nx-dropdown-item--active):not(.nx-multiselect) .nx-dropdown-results__option-checkicon{-ms-high-contrast-adjust:none;color:highlightText;background:highlight;z-index:1}}:host(.nx-selected) .nx-dropdown-results__option-checkicon{opacity:1}:host(.nx-selected) .nx-dropdown-results__option-label{color:#414141;color:var(--dropdown-item-selected-color,#414141)}.nx-dropdown-results__option-checkicon{opacity:0;margin-right:8px;height:28px;height:var(--dropdown-item-line-height,28px);color:#414141;color:var(--dropdown-item-checkmark-color,#414141)}.nx-dropdown-results__option-checkicon nx-icon{line-height:28px;line-height:var(--dropdown-item-line-height,28px);font-size:16px}\n:host-context([data-whatinput=\"keyboard\"] .nx-dropdown__panel-body.is-stable).nx-dropdown-item--active .nx-dropdown-results__option .nx-dropdown-results__option-label {\n  border-radius: 4px;\n  box-shadow: 0 0 0 2px #ffffff, 0 0 0 6px #009DE6;\n  box-shadow: var(--focus-box-shadow, 0 0 0 2px #ffffff, 0 0 0 6px #009DE6); }\n  @media screen and (-ms-high-contrast: active) {\n    :host-context([data-whatinput=\"keyboard\"] .nx-dropdown__panel-body.is-stable).nx-dropdown-item--active .nx-dropdown-results__option .nx-dropdown-results__option-label {\n      box-shadow: 0 0 0 2px background, 0 0 0 6px windowText; } }\n\n\n:host-context([data-whatinput=\"keyboard\"] .nx-dropdown__panel-body.is-stable).nx-multiselect.nx-dropdown-item--active .nx-dropdown-results__option .nx-dropdown-results__option-label {\n  box-shadow: none; }\n  @media screen and (-ms-high-contrast: active) {\n    :host-context([data-whatinput=\"keyboard\"] .nx-dropdown__panel-body.is-stable).nx-multiselect.nx-dropdown-item--active .nx-dropdown-results__option .nx-dropdown-results__option-label {\n      box-shadow: none; } }\n\n:host-context([data-whatinput=\"keyboard\"] .nx-dropdown__panel-body.is-stable).nx-multiselect.nx-dropdown-item--active ::ng-deep .nx-checkbox__label {\n  border-radius: 4px;\n  box-shadow: 0 0 0 2px #ffffff, 0 0 0 6px #009DE6;\n  box-shadow: var(--focus-box-shadow, 0 0 0 2px #ffffff, 0 0 0 6px #009DE6); }\n  @media screen and (-ms-high-contrast: active) {\n    :host-context([data-whatinput=\"keyboard\"] .nx-dropdown__panel-body.is-stable).nx-multiselect.nx-dropdown-item--active ::ng-deep .nx-checkbox__label {\n      box-shadow: 0 0 0 2px background, 0 0 0 6px windowText; } }\n\n:host(.nx-selected.nx-dropdown-item--active) .nx-dropdown-results__option-label{padding-left:24px;margin-left:-24px}:host ::ng-deep .nx-checkbox__label{padding:0 4px;margin:0 -4px}"]
                }] }
    ];
    /** @nocollapse */
    NxDropdownItemComponent.ctorParameters = function () { return [
        { type: NxDropdownControl, decorators: [{ type: Inject, args: [NxDropdownControl,] }] },
        { type: NxDropdownGroupComponent, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef },
        { type: ElementRef }
    ]; };
    NxDropdownItemComponent.propDecorators = {
        value: [{ type: Input, args: ['nxValue',] }],
        onSelectionChange: [{ type: Output }],
        containerElement: [{ type: ViewChild, args: ['container', { static: true },] }]
    };
    return NxDropdownItemComponent;
}());
export { NxDropdownItemComponent };
if (false) {
    /** @type {?} */
    NxDropdownItemComponent.prototype._hidden;
    /**
     * @type {?}
     * @private
     */
    NxDropdownItemComponent.prototype._mostRecentViewValue;
    /**
     * @type {?}
     * @private
     */
    NxDropdownItemComponent.prototype._id;
    /**
     * The value of the dropdown item.
     * You can't use undefined, null and '' (empty strings)
     * as they are sentinel values signalling empty data.
     * @type {?}
     */
    NxDropdownItemComponent.prototype.value;
    /**
     * @type {?}
     * @private
     */
    NxDropdownItemComponent.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    NxDropdownItemComponent.prototype._active;
    /**
     * Emits whenever the component is destroyed.
     * @type {?}
     * @private
     */
    NxDropdownItemComponent.prototype._destroy;
    /**
     * Event emitted when the option is selected or deselected.
     * @type {?}
     */
    NxDropdownItemComponent.prototype.onSelectionChange;
    /**
     * Emits when the state of the option changes and any parents have to be notified.
     * @type {?}
     */
    NxDropdownItemComponent.prototype._stateChanges;
    /**
     * \@docs-private
     * The wrapping div in the template. Used by dropdown to use the container height for scrolling.
     * @type {?}
     */
    NxDropdownItemComponent.prototype.containerElement;
    /**
     * @type {?}
     * @private
     */
    NxDropdownItemComponent.prototype._dropdown;
    /**
     * \@docs-private
     * @type {?}
     */
    NxDropdownItemComponent.prototype.group;
    /**
     * @type {?}
     * @private
     */
    NxDropdownItemComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxDropdownItemComponent.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24taXRlbS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4LyIsInNvdXJjZXMiOlsiZHJvcGRvd24vaXRlbS9kcm9wZG93bi1pdGVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUVMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFFTCxRQUFRLEVBQ1IsTUFBTSxFQUNOLFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUczQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVyRTtJQUVFLDhCQUVTLElBQTZCLEVBRTdCLFdBQW1CO1FBQW5CLDRCQUFBLEVBQUEsbUJBQW1CO1FBRm5CLFNBQUksR0FBSixJQUFJLENBQXlCO1FBRTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFRO0lBQUksQ0FBQztJQUNuQywyQkFBQztBQUFELENBQUMsQUFQRCxJQU9DOzs7Ozs7O0lBSEcsb0NBQW9DOzs7OztJQUVwQywyQ0FBMEI7Ozs7OztJQUkxQixNQUFNLEdBQUcsQ0FBQztBQUVkO0lBeUVFLGlDQUNxQyxTQUE0QixFQUUxQyxLQUErQixFQUM1QyxrQkFBcUMsRUFDckMsV0FBdUI7UUFMakMsaUJBYUM7UUFab0MsY0FBUyxHQUFULFNBQVMsQ0FBbUI7UUFFMUMsVUFBSyxHQUFMLEtBQUssQ0FBMEI7UUFDNUMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFtQjtRQUNyQyxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQTNEakMsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUVSLHlCQUFv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bEMsMENBQWdCOzs7OztJQUVoQix1REFBa0M7Ozs7O0lBRWxDLHNDQUE2Qzs7Ozs7OztJQU83Qyx3Q0FBd0I7Ozs7O0lBS3hCLDRDQUFtQzs7Ozs7SUFPbkMsMENBQXlCOzs7Ozs7SUFnQnpCLDJDQUFnRDs7Ozs7SUFJaEQsb0RBQWdGOzs7OztJQUdoRixnREFBNkM7Ozs7OztJQU03QyxtREFBMkQ7Ozs7O0lBR3pELDRDQUErRDs7Ozs7SUFFL0Qsd0NBQW9EOzs7OztJQUNwRCxxREFBNkM7Ozs7O0lBQzdDLDhDQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhpZ2hsaWdodGFibGUgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQge1xuICBBZnRlclZpZXdDaGVja2VkLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9wdGlvbmFsLFxuICBPdXRwdXQsXG4gIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IE54RHJvcGRvd25Db21wb25lbnQgfSBmcm9tICcuLi9kcm9wZG93bic7XG5pbXBvcnQgeyBOeERyb3Bkb3duQ29udHJvbCB9IGZyb20gJy4uL2Ryb3Bkb3duLmNvbnRyb2wnO1xuaW1wb3J0IHsgTnhEcm9wZG93bkdyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi8uLi9ncm91cC9kcm9wZG93bi1ncm91cCc7XG5cbmV4cG9ydCBjbGFzcyBOeERyb3Bkb3duSXRlbUNoYW5nZSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgLyoqIFJlZmVyZW5jZSB0byB0aGUgb3B0aW9uIHRoYXQgZW1pdHRlZCB0aGUgZXZlbnQuICovXG4gICAgcHVibGljIGl0ZW06IE54RHJvcGRvd25JdGVtQ29tcG9uZW50LFxuICAgIC8qKiBXaGV0aGVyIHRoZSBjaGFuZ2UgaW4gdGhlIG9wdGlvbidzIHZhbHVlIHdhcyBhIHJlc3VsdCBvZiBhIHVzZXIgYWN0aW9uLiAqL1xuICAgIHB1YmxpYyBpc1VzZXJJbnB1dCA9IGZhbHNlKSB7IH1cbn1cblxuLyoqIHRoZSB1bmlxdWUgaWQgY291bnRlciAqL1xubGV0IG5leHRJZCA9IDA7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LWRyb3Bkb3duLWl0ZW0nLFxuICB0ZW1wbGF0ZVVybDogJ2Ryb3Bkb3duLWl0ZW0uaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZVVybHM6IFtcbiAgICAnZHJvcGRvd24taXRlbS5zY3NzJ1xuICBdLFxuICBob3N0OiB7XG4gICAgJ1tpZF0nOiAnaWQnLFxuICAgICdyb2xlJzogJ29wdGlvbicsXG4gICAgJ1thdHRyLmFyaWEtc2VsZWN0ZWRdJzogJ3NlbGVjdGVkLnRvU3RyaW5nKCknLFxuICAgICdbY2xhc3MubngtaGlkZGVuXSc6ICdfaGlkZGVuJyxcbiAgICAnW2NsYXNzLm54LWRyb3Bkb3duLWl0ZW0tLWFjdGl2ZV0nOiAnYWN0aXZlJyxcbiAgICAnW2NsYXNzLm54LXNlbGVjdGVkXSc6ICdzZWxlY3RlZCcsXG4gICAgJ1tjbGFzcy5ueC1tdWx0aXNlbGVjdF0nOiAnbXVsdGlzZWxlY3QnLFxuICAgICcoY2xpY2spJzogJ19vbkNsaWNrKCRldmVudCknXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnhEcm9wZG93bkl0ZW1Db21wb25lbnQgaW1wbGVtZW50cyBIaWdobGlnaHRhYmxlLCBPbkRlc3Ryb3ksIEFmdGVyVmlld0NoZWNrZWQge1xuICBfaGlkZGVuID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBfbW9zdFJlY2VudFZpZXdWYWx1ZSA9ICcnO1xuXG4gIHByaXZhdGUgX2lkID0gYG54LWRyb3Bkb3duLWl0ZW0tJHtuZXh0SWQrK31gO1xuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGRyb3Bkb3duIGl0ZW0uXG4gICAqIFlvdSBjYW4ndCB1c2UgdW5kZWZpbmVkLCBudWxsIGFuZCAnJyAoZW1wdHkgc3RyaW5ncylcbiAgICogYXMgdGhleSBhcmUgc2VudGluZWwgdmFsdWVzIHNpZ25hbGxpbmcgZW1wdHkgZGF0YS5cbiAgICovXG4gIEBJbnB1dCgnbnhWYWx1ZScpIHZhbHVlO1xuXG4gIC8qKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBvcHRpb24uICovXG4gIGdldCBpZCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5faWQ7IH1cblxuICBwcml2YXRlIF9zZWxlY3RlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKiBXaGV0aGVyIHRoZSBpdGVtIGlzIHNlbGVjdGVkLiAqL1xuICBnZXQgc2VsZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkO1xuICB9XG5cbiAgcHJpdmF0ZSBfYWN0aXZlOiBib29sZWFuO1xuXG4gIC8qKiBXaGV0aGVyIHRoZSBpdGVtIGlzIGFjdGl2ZS4gKi9cbiAgZ2V0IGFjdGl2ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkb2NzLXByaXZhdGVcbiAgICogV2hldGhlciB0aGUgcGFyZW50IGRyb3Bkb3duIGlzIGluIG11bHRpc2VsZWN0IG1vZGUuXG4gICAqL1xuICBnZXQgbXVsdGlzZWxlY3QoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Ryb3Bkb3duICYmIHRoaXMuX2Ryb3Bkb3duLmlzTXVsdGlTZWxlY3Q7XG4gIH1cblxuICAvKiogRW1pdHMgd2hlbmV2ZXIgdGhlIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQuICovXG4gIHByaXZhdGUgcmVhZG9ubHkgX2Rlc3Ryb3kgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIC8qKiBFdmVudCBlbWl0dGVkIHdoZW4gdGhlIG9wdGlvbiBpcyBzZWxlY3RlZCBvciBkZXNlbGVjdGVkLiAqL1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tb3V0cHV0LW9uLXByZWZpeFxuICBAT3V0cHV0KCkgcmVhZG9ubHkgb25TZWxlY3Rpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPE54RHJvcGRvd25JdGVtQ2hhbmdlPigpO1xuXG4gIC8qKiBFbWl0cyB3aGVuIHRoZSBzdGF0ZSBvZiB0aGUgb3B0aW9uIGNoYW5nZXMgYW5kIGFueSBwYXJlbnRzIGhhdmUgdG8gYmUgbm90aWZpZWQuICovXG4gIHJlYWRvbmx5IF9zdGF0ZUNoYW5nZXMgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIC8qKlxuICAgKiBAZG9jcy1wcml2YXRlXG4gICAqIFRoZSB3cmFwcGluZyBkaXYgaW4gdGhlIHRlbXBsYXRlLiBVc2VkIGJ5IGRyb3Bkb3duIHRvIHVzZSB0aGUgY29udGFpbmVyIGhlaWdodCBmb3Igc2Nyb2xsaW5nLlxuICAgKi9cbiAgQFZpZXdDaGlsZCgnY29udGFpbmVyJywgeyBzdGF0aWM6IHRydWUgfSkgY29udGFpbmVyRWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KE54RHJvcGRvd25Db250cm9sKSBwcml2YXRlIF9kcm9wZG93bjogTnhEcm9wZG93bkNvbnRyb2wsXG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgICBAT3B0aW9uYWwoKSByZWFkb25seSBncm91cDogTnhEcm9wZG93bkdyb3VwQ29tcG9uZW50LFxuICAgIHByaXZhdGUgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgKHRoaXMuX2Ryb3Bkb3duIGFzIE54RHJvcGRvd25Db21wb25lbnQpLmZpbHRlckNoYW5nZXMucGlwZSh0YWtlVW50aWwodGhpcy5fZGVzdHJveSkpLnN1YnNjcmliZSgodmFsdWUpID0+IHtcbiAgICAgIHRoaXMuX3Nob3dPckhpZGVCeUZpbHRlcih2YWx1ZSk7XG4gICAgfSk7XG4gICAgLy8gcmVzZXQgdGhlIGhpZGRlbiBzdGF0ZSB3aGVuIGRyb3Bkb3duIGNsb3NlcyB0aGF0IG9uIG5leHQgb3BlbiB0aGUgdXNlciBpcyBzZWVpbmcgdGhlIGZ1bGwgbGlzdCBhZ2FpblxuICAgICh0aGlzLl9kcm9wZG93biBhcyBOeERyb3Bkb3duQ29tcG9uZW50KS5fY2xvc2VkU3RyZWFtLnBpcGUodGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3kpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5faGlkZGVuID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0NoZWNrZWQoKSB7XG4gICAgLy8gU2luY2UgdGhlIHBhcmVudCBkcm9wZG93biBjb21wb25lbnQgY291bGQgYmUgdXNpbmcgdGhlIGl0ZW0ncyBsYWJlbCB0byBkaXNwbGF5IHRoZSBzZWxlY3RlZCB2YWx1ZXNcbiAgICAvLyBhbmQgaXQgZG9lc24ndCBoYXZlIGEgd2F5IG9mIGtub3dpbmcgaWYgdGhlIGl0ZW0ncyBsYWJlbCBoYXMgY2hhbmdlZFxuICAgIC8vIHdlIGhhdmUgdG8gY2hlY2sgZm9yIGNoYW5nZXMgaW4gdGhlIERPTSBvdXJzZWx2ZXMgYW5kIGRpc3BhdGNoIGFuIGV2ZW50LiBUaGVzZSBjaGVja3MgYXJlXG4gICAgLy8gcmVsYXRpdmVseSBjaGVhcCwgaG93ZXZlciB3ZSBzdGlsbCBsaW1pdCB0aGVtIG9ubHkgdG8gc2VsZWN0ZWQgb3B0aW9ucyBpbiBvcmRlciB0byBhdm9pZFxuICAgIC8vIGhpdHRpbmcgdGhlIERPTSB0b28gb2Z0ZW4uXG4gICAgaWYgKHRoaXMuX3NlbGVjdGVkKSB7XG4gICAgICBjb25zdCB2aWV3VmFsdWUgPSB0aGlzLnZpZXdWYWx1ZTtcblxuICAgICAgaWYgKHZpZXdWYWx1ZSAhPT0gdGhpcy5fbW9zdFJlY2VudFZpZXdWYWx1ZSkge1xuICAgICAgICB0aGlzLl9tb3N0UmVjZW50Vmlld1ZhbHVlID0gdmlld1ZhbHVlO1xuICAgICAgICB0aGlzLl9zdGF0ZUNoYW5nZXMubmV4dCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX3N0YXRlQ2hhbmdlcy5jb21wbGV0ZSgpO1xuICAgIHRoaXMuX2Rlc3Ryb3kubmV4dCgpO1xuICAgIHRoaXMuX2Rlc3Ryb3kuY29tcGxldGUoKTtcbiAgfVxuXG4gIF9vbkNsaWNrKGV2ZW50KSB7XG4gICAgLyogcHJldmVudERlZmF1bHQgdG8gc3RvcCB0cmlnZ2VyaW5nIHRoZSBldmVudCB0d2ljZSB3aGVuIHlvdSBjbGljayBvbiB0aGUgY2hlY2tib3ggb3IgdGhlIGxhYmVsIGluc2lkZSB0aGUgaXRlbSAqL1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5fc2VsZWN0VmlhSW50ZXJhY3Rpb24oKTtcbiAgfVxuXG4gIC8qKlxuICAqIGBTZWxlY3RzIHRoZSBvcHRpb24gd2hpbGUgaW5kaWNhdGluZyB0aGUgc2VsZWN0aW9uIGNhbWUgZnJvbSB0aGUgdXNlci4gVXNlZCB0b1xuICAqIGRldGVybWluZSBpZiB0aGUgc2VsZWN0J3MgdmlldyAtPiBtb2RlbCBjYWxsYmFjayBzaG91bGQgYmUgaW52b2tlZC5gXG4gICovXG4gIF9zZWxlY3RWaWFJbnRlcmFjdGlvbigpOiB2b2lkIHtcbiAgICB0aGlzLl9zZWxlY3RlZCA9IHRoaXMubXVsdGlzZWxlY3QgPyAhdGhpcy5fc2VsZWN0ZWQgOiB0cnVlO1xuICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIHRoaXMuX2VtaXRTZWxlY3Rpb25DaGFuZ2VFdmVudCh0cnVlKTtcbiAgfVxuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHNob3coKSB7XG4gICAgdGhpcy5faGlkZGVuID0gZmFsc2U7XG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBoaWRlKCkge1xuICAgIHRoaXMuX2hpZGRlbiA9IHRydWU7XG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBwcml2YXRlIF9zaG93T3JIaWRlQnlGaWx0ZXIoc2VhcmNoKSB7XG4gICAgY29uc3QgY29uc3RyYWludCA9ICh0aGlzLl9kcm9wZG93biBhcyBOeERyb3Bkb3duQ29tcG9uZW50KS5maWx0ZXJGbihzZWFyY2gsIHRoaXMudmlld1ZhbHVlKTtcbiAgICB0aGlzLl9oaWRkZW4gPSBjb25zdHJhaW50ID8gZmFsc2UgOiB0cnVlO1xuICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgZ2V0IF9mb3JtYXR0ZWRWYWx1ZSgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2Ryb3Bkb3duIGFzIE54RHJvcGRvd25Db21wb25lbnQpLnZhbHVlRm9ybWF0dGVyKHRoaXMudmFsdWUpO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgZ2V0IHZpZXdWYWx1ZSgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudC50ZXh0Q29udGVudCB8fCAnJykudHJpbSgpO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgZ2V0IGVsZW1lbnRSZWYoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRSZWY7XG4gIH1cblxuICBzZWxlY3QoKSB7XG4gICAgaWYgKCF0aGlzLl9zZWxlY3RlZCkge1xuICAgICAgdGhpcy5fc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgICB0aGlzLl9lbWl0U2VsZWN0aW9uQ2hhbmdlRXZlbnQoKTtcbiAgICB9XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBkZXNlbGVjdCgpIHtcbiAgICBpZiAodGhpcy5fc2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMuX3NlbGVjdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIHRoaXMuX2VtaXRTZWxlY3Rpb25DaGFuZ2VFdmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIGZvY3VzKCk6IHZvaWQge1xuICAgIHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICB9XG5cbiAgcHJpdmF0ZSBfZW1pdFNlbGVjdGlvbkNoYW5nZUV2ZW50KGlzVXNlcklucHV0OiBib29sZWFuID0gZmFsc2UpIHtcbiAgICB0aGlzLm9uU2VsZWN0aW9uQ2hhbmdlLmVtaXQobmV3IE54RHJvcGRvd25JdGVtQ2hhbmdlKHRoaXMsIGlzVXNlcklucHV0KSk7XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBzZXRBY3RpdmVTdHlsZXMoKTogdm9pZCB7XG4gICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHNldEluYWN0aXZlU3R5bGVzKCk6IHZvaWQge1xuICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxpc3QgaXRlbSdzIHRleHQgbGFiZWwuIEltcGxlbWVudGVkIGFzIGEgcGFydCBvZiB0aGUgTGlzdEtleU1hbmFnZXJPcHRpb24uXG4gICAqIEBkb2NzLXByaXZhdGUgKi9cbiAgZ2V0TGFiZWwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy52aWV3VmFsdWU7XG4gIH1cblxuICBfaXNDb250ZW50RW1wdHkoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmNoaWxkcmVuLmxlbmd0aCA9PT0gMCAmJiAhZWxlbWVudC50ZXh0Q29udGVudC50cmltKCk7XG4gIH1cblxuICBfb25MYWJlbENoYW5nZSgpIHtcbiAgICAvLyB0cmlnZ2VyIGNoYW5nZSBkZXRlY3Rpb24gd2hlbiB0aGUgbGFiZWwgY29udGVudCBjaGFuZ2VzIGZvciB0aGUgY2FzZSB0aGF0IG5nLWNvbnRlbnQgd2FzIGVtcHR5IGJlZm9yZS5cbiAgICAvLyB0aGlzIGlzIGFsc28gaW1wb3J0YW50IHdoZW4gdGhlIGxhYmVsIGNvbWVzIGluIGRlZmVycmVkLCBlLmcuIGJ5IGEgZGVsYXllZCBvYnNlcnZhYmxlLFxuICAgIC8vIHRoZW4gZmlyc3QgdGhlIGRlZmF1bHQgbGFiZWwgZGVyaXZlZCBmcm9tIHRoZSB2YWx1ZSBpcyBzaG93blxuICAgIC8vIGFuZCBhZnRlciB0aGUgdmFsdWUgZnJvbSB0aGUgYXN5bmMgb2JzZXJ2YWJsZSBpcyByZWFkeSB3ZSBuZWVkIHRvIHRyaWdnZXIgY2hhbmdlIGRldGVjdGlvbiB0aGF0IHRoZSBkZXJpdmVkIGxhYmVsXG4gICAgLy8gZ2V0cyBoaWRkZW4gYWdhaW4uXG4gICAgLy8gTm90aWNlKCEpOiB0aGUgZXZlbnQgb2YgKGNka09ic2VydmVDb250ZW50KSBpcyBydW4gb3V0c2lkZSBvZiB0aGUgbmdab25lXG4gICAgLy8gV2UgcnVuIGRldGVjdENoYW5nZXMgZGlyZWN0bHkgaGVyZSBhcyBtYXJrRm9yQ2hlY2sgd2Fzbid0IGVub3VnaCB0byBhbHdheXMgdHJpZ2dlciBjaGFuZ2UgZGV0ZWN0aW9uIGNvcnJlY3RseVxuICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgfVxufVxuIl19