/**
 * @fileoverview added by tsickle
 * Generated from: password-toggle.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Component, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';
import { ENTER, SPACE } from '@angular/cdk/keycodes';
/** @type {?} */
var visibilityIcons = {
    show: 'password-show-o',
    hide: 'password-hide-o'
};
var NxPasswordToggleComponent = /** @class */ (function () {
    function NxPasswordToggleComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * \@docs-private
         */
        this._currentIcon = visibilityIcons['show'];
        /**
         * \@docs-private
         */
        this._pressed = false;
        this._ariaLabel = 'Show password';
    }
    Object.defineProperty(NxPasswordToggleComponent.prototype, "ariaLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return this._ariaLabel;
        },
        /** Sets the aria-label needed for accessibility.
         * Notice that this `aria-label` should describe the initial action according to the status of the visibility.
         * E.g if you have an `input[type=password]` at the beginning then the
         * password will be hidden and the correct aria-label would be 'Show password.'
         */
        set: /**
         * Sets the aria-label needed for accessibility.
         * Notice that this `aria-label` should describe the initial action according to the status of the visibility.
         * E.g if you have an `input[type=password]` at the beginning then the
         * password will be hidden and the correct aria-label would be 'Show password.'
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._ariaLabel) {
                this._ariaLabel = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxPasswordToggleComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!this.control) {
            console.warn('You need to pass an input as a control to the password toggle.');
        }
        else {
            // show the right icon according to the initial type of the input
            this._currentIcon = this.control.type === 'password' ? visibilityIcons['show'] : visibilityIcons['hide'];
        }
    };
    /** Toggles the type of the input. */
    /**
     * Toggles the type of the input.
     * @return {?}
     */
    NxPasswordToggleComponent.prototype.toggleInputType = /**
     * Toggles the type of the input.
     * @return {?}
     */
    function () {
        if (this.control) {
            this.control.type = this.control.type === 'password' ? 'text' : 'password';
            this._pressed = !this._pressed;
            this.toggleIcon();
            this._changeDetectorRef.markForCheck();
        }
    };
    /**@docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxPasswordToggleComponent.prototype.toggleIcon = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this._currentIcon = this._currentIcon === visibilityIcons['show'] ? visibilityIcons['hide'] : visibilityIcons['show'];
    };
    /**@docs-private */
    /**
     * \@docs-private
     * @param {?} $event
     * @return {?}
     */
    NxPasswordToggleComponent.prototype._onKeydown = /**
     * \@docs-private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {
            this.toggleInputType();
        }
    };
    Object.defineProperty(NxPasswordToggleComponent.prototype, "tabindex", {
        /**@docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            if (this.control) {
                return this.control.disabled ? -1 : 0;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    NxPasswordToggleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-password-toggle',
                    template: "<nx-icon\n      aria-hidden=\"true\"\n      [name]=\"_currentIcon\">\n    </nx-icon>",
                    host: {
                        '[attr.aria-label]': 'ariaLabel',
                        '[attr.tabindex]': 'tabindex',
                        '[attr.aria-pressed]': '_pressed',
                        'role': 'button',
                        '(click)': 'toggleInputType()',
                        '(keydown)': '_onKeydown($event)'
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{position:relative;display:inline-block;height:24px;width:24px;cursor:pointer}:host:focus{outline:0}:host:hover{color:#006192;color:var(--hover-primary,#006192)}:host-context([data-whatinput=keyboard]):focus ::ng-deep nx-icon{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6);border-radius:4px}@media screen and (-ms-high-contrast:active){:host{color:buttonText}:host-context([data-whatinput=keyboard]):focus ::ng-deep nx-icon{box-shadow:0 0 0 2px background,0 0 0 6px windowText}}:host-context(.is-disabled){pointer-events:none}"]
                }] }
    ];
    /** @nocollapse */
    NxPasswordToggleComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxPasswordToggleComponent.propDecorators = {
        control: [{ type: Input }],
        ariaLabel: [{ type: Input }]
    };
    return NxPasswordToggleComponent;
}());
export { NxPasswordToggleComponent };
if (false) {
    /**
     * Input element using the toggle functionality.
     * @type {?}
     */
    NxPasswordToggleComponent.prototype.control;
    /**
     * \@docs-private
     * @type {?}
     */
    NxPasswordToggleComponent.prototype._currentIcon;
    /**
     * \@docs-private
     * @type {?}
     */
    NxPasswordToggleComponent.prototype._pressed;
    /**
     * @type {?}
     * @private
     */
    NxPasswordToggleComponent.prototype._ariaLabel;
    /**
     * @type {?}
     * @private
     */
    NxPasswordToggleComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtdG9nZ2xlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4L2lucHV0LyIsInNvdXJjZXMiOlsicGFzc3dvcmQtdG9nZ2xlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFpQixpQkFBaUIsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLHVCQUF1QixDQUFDOztJQUUvQyxlQUFlLEdBQUc7SUFDdEIsSUFBSSxFQUFFLGlCQUFpQjtJQUN2QixJQUFJLEVBQUUsaUJBQWlCO0NBQ3hCO0FBRUQ7SUE2Q0UsbUNBQXFCLGtCQUFxQztRQUFyQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1COzs7O1FBckIxRCxpQkFBWSxHQUFXLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7OztRQUUvQyxhQUFRLEdBQVksS0FBSyxDQUFDO1FBQ2xCLGVBQVUsR0FBVyxlQUFlLENBQUM7SUFrQmlCLENBQUM7SUFYL0Qsc0JBQ0ksZ0RBQVM7Ozs7UUFNYjtZQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN6QixDQUFDO1FBZEQ7Ozs7V0FJRzs7Ozs7Ozs7O1FBQ0gsVUFDYyxLQUFhO1lBQ3pCLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQzdCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO2dCQUN4QixJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDeEM7UUFDSCxDQUFDOzs7T0FBQTs7OztJQU9ELG1EQUFlOzs7SUFBZjtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0VBQWdFLENBQUMsQ0FBQztTQUNoRjthQUFNO1lBQ0wsaUVBQWlFO1lBQ2pFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMxRztJQUNILENBQUM7SUFFRCxxQ0FBcUM7Ozs7O0lBQ3JDLG1EQUFlOzs7O0lBQWY7UUFDRSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztZQUMzRSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUMvQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQztJQUVELG1CQUFtQjs7Ozs7SUFDbkIsOENBQVU7Ozs7SUFBVjtRQUNFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksS0FBSyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hILENBQUM7SUFFRCxtQkFBbUI7Ozs7OztJQUNuQiw4Q0FBVTs7Ozs7SUFBVixVQUFXLE1BQU07UUFDZixJQUFJLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEtBQUssS0FBSyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEtBQUssS0FBSyxDQUFDLEVBQUU7WUFDcEUsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztJQUdELHNCQUFJLCtDQUFRO1FBRFosbUJBQW1COzs7OztRQUNuQjtZQUNFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDaEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN2QztZQUNELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQzs7O09BQUE7O2dCQXBGRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsUUFBUSxFQUNOLHNGQUdXO29CQUViLElBQUksRUFBRTt3QkFDSixtQkFBbUIsRUFBRSxXQUFXO3dCQUNoQyxpQkFBaUIsRUFBRSxVQUFVO3dCQUM3QixxQkFBcUIsRUFBRSxVQUFVO3dCQUNqQyxNQUFNLEVBQUUsUUFBUTt3QkFDaEIsU0FBUyxFQUFFLG1CQUFtQjt3QkFDOUIsV0FBVyxFQUFFLG9CQUFvQjtxQkFDbEM7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O2lCQUNoRDs7OztnQkF6QnlDLGlCQUFpQjs7OzBCQTZCeEQsS0FBSzs0QkFhTCxLQUFLOztJQW1EUCxnQ0FBQztDQUFBLEFBckZGLElBcUZFO1NBbkVXLHlCQUF5Qjs7Ozs7O0lBR3BDLDRDQUFtQzs7Ozs7SUFHbkMsaURBQStDOzs7OztJQUUvQyw2Q0FBMEI7Ozs7O0lBQzFCLCtDQUE2Qzs7Ozs7SUFrQmhDLHVEQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBDb21wb25lbnQsIEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdG9yUmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRU5URVIsIFNQQUNFIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2tleWNvZGVzJztcblxuY29uc3QgdmlzaWJpbGl0eUljb25zID0ge1xuICBzaG93OiAncGFzc3dvcmQtc2hvdy1vJyxcbiAgaGlkZTogJ3Bhc3N3b3JkLWhpZGUtbydcbn07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LXBhc3N3b3JkLXRvZ2dsZScsXG4gIHRlbXBsYXRlOlxuICAgIGA8bngtaWNvblxuICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgIFtuYW1lXT1cIl9jdXJyZW50SWNvblwiPlxuICAgIDwvbngtaWNvbj5gLFxuICBzdHlsZVVybHM6IFsnLi9wYXNzd29yZC10b2dnbGUuY29tcG9uZW50LnNjc3MnXSxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5hcmlhLWxhYmVsXSc6ICdhcmlhTGFiZWwnLFxuICAgICdbYXR0ci50YWJpbmRleF0nOiAndGFiaW5kZXgnLFxuICAgICdbYXR0ci5hcmlhLXByZXNzZWRdJzogJ19wcmVzc2VkJyxcbiAgICAncm9sZSc6ICdidXR0b24nLFxuICAgICcoY2xpY2spJzogJ3RvZ2dsZUlucHV0VHlwZSgpJyxcbiAgICAnKGtleWRvd24pJzogJ19vbktleWRvd24oJGV2ZW50KSdcbiAgfSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgTnhQYXNzd29yZFRvZ2dsZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXG4gIC8qKiBJbnB1dCBlbGVtZW50IHVzaW5nIHRoZSB0b2dnbGUgZnVuY3Rpb25hbGl0eS4gKi9cbiAgQElucHV0KCkgY29udHJvbDogSFRNTElucHV0RWxlbWVudDtcblxuICAvKipAZG9jcy1wcml2YXRlICovXG4gIF9jdXJyZW50SWNvbjogc3RyaW5nID0gdmlzaWJpbGl0eUljb25zWydzaG93J107XG4gIC8qKkBkb2NzLXByaXZhdGUgKi9cbiAgX3ByZXNzZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfYXJpYUxhYmVsOiBzdHJpbmcgPSAnU2hvdyBwYXNzd29yZCc7XG5cbiAgLyoqIFNldHMgdGhlIGFyaWEtbGFiZWwgbmVlZGVkIGZvciBhY2Nlc3NpYmlsaXR5LlxuICAgKiBOb3RpY2UgdGhhdCB0aGlzIGBhcmlhLWxhYmVsYCBzaG91bGQgZGVzY3JpYmUgdGhlIGluaXRpYWwgYWN0aW9uIGFjY29yZGluZyB0byB0aGUgc3RhdHVzIG9mIHRoZSB2aXNpYmlsaXR5LlxuICAgKiBFLmcgaWYgeW91IGhhdmUgYW4gYGlucHV0W3R5cGU9cGFzc3dvcmRdYCBhdCB0aGUgYmVnaW5uaW5nIHRoZW4gdGhlXG4gICAqIHBhc3N3b3JkIHdpbGwgYmUgaGlkZGVuIGFuZCB0aGUgY29ycmVjdCBhcmlhLWxhYmVsIHdvdWxkIGJlICdTaG93IHBhc3N3b3JkLidcbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCBhcmlhTGFiZWwodmFsdWU6IHN0cmluZykge1xuICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5fYXJpYUxhYmVsKSB7XG4gICAgICB0aGlzLl9hcmlhTGFiZWwgPSB2YWx1ZTtcbiAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgfVxuICBnZXQgYXJpYUxhYmVsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2FyaWFMYWJlbDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yIChwcml2YXRlIF9jaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHsgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAoIXRoaXMuY29udHJvbCkge1xuICAgICAgY29uc29sZS53YXJuKCdZb3UgbmVlZCB0byBwYXNzIGFuIGlucHV0IGFzIGEgY29udHJvbCB0byB0aGUgcGFzc3dvcmQgdG9nZ2xlLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzaG93IHRoZSByaWdodCBpY29uIGFjY29yZGluZyB0byB0aGUgaW5pdGlhbCB0eXBlIG9mIHRoZSBpbnB1dFxuICAgICAgdGhpcy5fY3VycmVudEljb24gPSB0aGlzLmNvbnRyb2wudHlwZSA9PT0gJ3Bhc3N3b3JkJyA/IHZpc2liaWxpdHlJY29uc1snc2hvdyddIDogdmlzaWJpbGl0eUljb25zWydoaWRlJ107XG4gICAgfVxuICB9XG5cbiAgLyoqIFRvZ2dsZXMgdGhlIHR5cGUgb2YgdGhlIGlucHV0LiAqL1xuICB0b2dnbGVJbnB1dFR5cGUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY29udHJvbCkge1xuICAgICAgdGhpcy5jb250cm9sLnR5cGUgPSB0aGlzLmNvbnRyb2wudHlwZSA9PT0gJ3Bhc3N3b3JkJyA/ICd0ZXh0JyA6ICdwYXNzd29yZCc7XG4gICAgICB0aGlzLl9wcmVzc2VkID0gIXRoaXMuX3ByZXNzZWQ7XG4gICAgICB0aGlzLnRvZ2dsZUljb24oKTtcbiAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKkBkb2NzLXByaXZhdGUgKi9cbiAgdG9nZ2xlSWNvbigpOiB2b2lkIHtcbiAgICB0aGlzLl9jdXJyZW50SWNvbiA9IHRoaXMuX2N1cnJlbnRJY29uID09PSB2aXNpYmlsaXR5SWNvbnNbJ3Nob3cnXSA/IHZpc2liaWxpdHlJY29uc1snaGlkZSddIDogdmlzaWJpbGl0eUljb25zWydzaG93J107XG4gIH1cblxuICAvKipAZG9jcy1wcml2YXRlICovXG4gIF9vbktleWRvd24oJGV2ZW50KSB7XG4gICAgaWYgKCRldmVudCAmJiAoJGV2ZW50LmtleUNvZGUgPT09IEVOVEVSIHx8ICRldmVudC5rZXlDb2RlID09PSBTUEFDRSkpIHtcbiAgICAgIHRoaXMudG9nZ2xlSW5wdXRUeXBlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqQGRvY3MtcHJpdmF0ZSAqL1xuICBnZXQgdGFiaW5kZXgoKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5jb250cm9sKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250cm9sLmRpc2FibGVkID8gLTEgOiAwO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuIH1cbiJdfQ==