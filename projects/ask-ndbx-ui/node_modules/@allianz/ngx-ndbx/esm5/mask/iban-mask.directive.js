/**
 * @fileoverview added by tsickle
 * Generated from: iban-mask.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Inject, forwardRef } from '@angular/core';
import * as IBAN from 'iban';
import { NG_VALIDATORS } from '@angular/forms';
import { NxMaskDirective } from './mask.directive';
/** @type {?} */
export var NX_IBAN_MASK_VALIDATORS = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return NxIbanMaskDirective; })),
    multi: true
};
/**
 * To use the `NxIbanMaskDirective`, you have to install the **peer dependency** `iban.js`.
 */
var NxIbanMaskDirective = /** @class */ (function () {
    function NxIbanMaskDirective(_elementRef, maskDirective) {
        var _this = this;
        this._elementRef = _elementRef;
        this.maskDirective = maskDirective;
        this._afterInputHook = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var input = (/** @type {?} */ (event.target));
            _this._setCountryCode(input.value.substr(0, 2));
        });
        this._beforePasteHook = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            // change the country code here if necessary
            /** @type {?} */
            var input = (/** @type {?} */ (event.target));
            /** @type {?} */
            var pastedData = (event.clipboardData || ((/** @type {?} */ (window))).clipboardData).getData('text');
            /** @type {?} */
            var enteredCountryCode = (_this.maskDirective.elementRefValue.substr(0, input.selectionStart)
                + _this.maskDirective.getMaskedString(pastedData, input.selectionStart)).substr(0, 2);
            _this._setCountryCode(enteredCountryCode);
        });
        this.maskDirective.registerAfterInputHook(this._afterInputHook);
        this.maskDirective.registerBeforePasteHook(this._beforePasteHook);
        this.maskDirective.cvaModelChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var enteredCountryCode = _this.maskDirective.getMaskedString(value).substr(0, 2);
            _this._setCountryCode(enteredCountryCode);
        }));
    }
    /**
     * @private
     * @param {?} code
     * @return {?}
     */
    NxIbanMaskDirective.prototype._setCountryCode = /**
     * @private
     * @param {?} code
     * @return {?}
     */
    function (code) {
        code = code.toUpperCase();
        if (code.length === 2 && this._countryCode !== code) {
            if (this._countryCodeExists(code)) {
                this._countryCode = code;
                this.maskDirective.setMask(this._getMask(this._countryCode));
            }
            else {
                this._countryCode = null;
                this.maskDirective.setMask('SS');
            }
        }
    };
    /**
     * @return {?}
     */
    NxIbanMaskDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // set only first two letters as I don't know a country yet
        this.maskDirective.mask = 'SS';
        this.maskDirective.convertTo = 'upper';
    };
    /**
     * @private
     * @param {?} countryCode
     * @return {?}
     */
    NxIbanMaskDirective.prototype._getMask = /**
     * @private
     * @param {?} countryCode
     * @return {?}
     */
    function (countryCode) {
        // the countrySpecs of a country contain: countryCode ("DE"), length (22), structure ("F08F10")
        // and an example belonging to each country
        /** @type {?} */
        var countrySpecs = IBAN['countries'][countryCode];
        // 'SS' for country code + '00' for IBAN checksum
        /** @type {?} */
        var mask = 'SS00';
        // split up after every third character
        /** @type {?} */
        var characterDefs = countrySpecs['structure'].match(/.{1,3}/g);
        characterDefs.forEach((/**
         * @param {?} charDef
         * @return {?}
         */
        function (charDef) {
            /** @type {?} */
            var character = charDef[0];
            /** @type {?} */
            var count = Number(charDef.substring(1, 3));
            switch (character) {
                // [0-9]
                case 'F':
                    mask = mask + '0'.repeat(count);
                    break;
                // [0-9A-Za-z]
                case 'A':
                    mask = mask + 'A'.repeat(count);
                    break;
                // [A-Z]
                // 'S' in nxMask does accept also [a-z].
                // There is no option for only accepting capital letters at the moment.
                case 'U':
                    mask = mask + 'S'.repeat(count);
                    break;
            }
        }));
        // insert whitespaces after every 4 characters
        mask = mask.match(/.{1,4}/g).join(' ');
        return mask;
    };
    /**
     * @private
     * @param {?} countryCode
     * @return {?}
     */
    NxIbanMaskDirective.prototype._countryCodeExists = /**
     * @private
     * @param {?} countryCode
     * @return {?}
     */
    function (countryCode) {
        return (!!IBAN['countries'][countryCode]);
    };
    /**
     * @private
     * @return {?}
     */
    NxIbanMaskDirective.prototype._validateFn = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var enteredCountryCode = this._elementRef.nativeElement.value.substr(0, 2);
        if (enteredCountryCode.length === 2 && !this._countryCodeExists(enteredCountryCode)) {
            // immediately show error to user
            this.maskDirective._touch();
            return { nxIbanInvalidCountryError: 'no valid country code' };
        }
        if (!IBAN.isValid(this.maskDirective.getUnmaskedValue())) {
            return { nxIbanParseError: 'no valid iban' };
        }
        return null;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxIbanMaskDirective.prototype.validate = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        return this.maskDirective.validateMask ? this._validateFn() : null;
    };
    NxIbanMaskDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[nxIbanMask]',
                    exportAs: 'nxIbanMaskDirective',
                    providers: [
                        NX_IBAN_MASK_VALIDATORS
                    ]
                },] }
    ];
    /** @nocollapse */
    NxIbanMaskDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NxMaskDirective, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NxMaskDirective; })),] }] }
    ]; };
    return NxIbanMaskDirective;
}());
export { NxIbanMaskDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxIbanMaskDirective.prototype._countryCode;
    /**
     * @type {?}
     * @private
     */
    NxIbanMaskDirective.prototype._afterInputHook;
    /**
     * @type {?}
     * @private
     */
    NxIbanMaskDirective.prototype._beforePasteHook;
    /**
     * @type {?}
     * @private
     */
    NxIbanMaskDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    NxIbanMaskDirective.prototype.maskDirective;
}
//# sourceMappingURL=data:application/json;base64,