/**
 * @fileoverview added by tsickle
 * Generated from: error/error.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, InjectionToken, Inject, Optional } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
/** @type {?} */
var nextId = 0;
/**
 * Represents the default options for the error notification that can be configured
 * using the `ERROR_DEFAULT_OPTIONS` injection token.
 * @record
 */
export function ErrorDefaultOptions() { }
if (false) {
    /**
     * Defines the style type of the error notification.
     * @type {?|undefined}
     */
    ErrorDefaultOptions.prototype.appearance;
}
/** @type {?} */
export var ERROR_DEFAULT_OPTIONS = new InjectionToken('ERROR_DEFAULT_OPTIONS');
var NxErrorComponent = /** @class */ (function () {
    function NxErrorComponent(_changeDetectorRef, _defaultOptions) {
        this._changeDetectorRef = _changeDetectorRef;
        this._defaultOptions = _defaultOptions;
        this._showIcon = true;
        this._appearance = 'message';
        this._id = "nx-error-" + nextId++;
        if (this._defaultOptions && this._defaultOptions.appearance) {
            this.appearance = this._defaultOptions.appearance;
        }
    }
    Object.defineProperty(NxErrorComponent.prototype, "showIcon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._showIcon;
        },
        /** Whether an icon should be displayed. */
        set: /**
         * Whether an icon should be displayed.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showIcon = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxErrorComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this._id;
        },
        /**
         * Id of the nx-error.
         *
         * If not set, the selectable card gets an incremented value by default.
         */
        set: /**
         * Id of the nx-error.
         *
         * If not set, the selectable card gets an incremented value by default.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && value !== this._id) {
                this._id = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxErrorComponent.prototype, "appearance", {
        get: /**
         * @return {?}
         */
        function () {
            return this._appearance;
        },
        /**
         * Whether the error should have message or text styling.
         *
         * Default is 'message'.
         */
        set: /**
         * Whether the error should have message or text styling.
         *
         * Default is 'message'.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this.appearance) {
                this._appearance = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    NxErrorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-error',
                    template: "<!-- b2b (expert) error notification -->\n<ng-container *ngIf=\"appearance === 'text'\">\n  <nx-icon *ngIf=\"showIcon\" class=\"nx-error__icon\" [name]=\"'exclamation-triangle'\">\n  </nx-icon>\n  <div class=\"nx-error__content-wrapper\">\n    <div class=\"nx-error__content\">\n      <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n    </div>\n  </div>\n</ng-container>\n\n<!-- b2c error notification -->\n<nx-message *ngIf=\"appearance === 'message'\" [showIcon]=\"showIcon\" nxContext=\"error\">\n  <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n</nx-message>\n\n<ng-template #errorContent>\n  <ng-content></ng-content>\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[attr.role]': '"alert"',
                        '[attr.id]': 'id',
                        '[class.nx-error--message]': 'appearance == "message"'
                    },
                    styles: [":host{font-size:16px;font-size:var(--base-error-simple-font-size,16px);line-height:20px;line-height:var(--base-error-simple-line-height,20px);font-weight:400;font-weight:var(--base-error-simple-font-weight,400);letter-spacing:0;letter-spacing:var(--base-error-simple-letter-spacing,0);color:#dc3149;color:var(--base-error-color,#dc3149);width:100%;display:block;text-align:left}:host .nx-error__icon{font-size:20px;font-size:var(--base-error-simple-icon-size,20px);line-height:20px;line-height:var(--base-error-simple-line-height,20px);margin-right:8px;float:left}@media screen and (-ms-high-contrast:active){:host .nx-error__icon{color:windowText}}:host.nx-error--message{margin:12px 0}:host.nx-error--message nx-message{margin:0}"]
                }] }
    ];
    /** @nocollapse */
    NxErrorComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ERROR_DEFAULT_OPTIONS,] }] }
    ]; };
    NxErrorComponent.propDecorators = {
        showIcon: [{ type: Input }],
        id: [{ type: Input }],
        appearance: [{ type: Input }]
    };
    return NxErrorComponent;
}());
export { NxErrorComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._showIcon;
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._appearance;
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._id;
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvYmFzZS8iLCJzb3VyY2VzIjpbImVycm9yL2Vycm9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdILE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDOztJQUt4RCxNQUFNLEdBQUcsQ0FBQzs7Ozs7O0FBTWQseUNBR0M7Ozs7OztJQURDLHlDQUE0Qjs7O0FBRzlCLE1BQU0sS0FBTyxxQkFBcUIsR0FBRyxJQUFJLGNBQWMsQ0FBc0IsdUJBQXVCLENBQUM7QUFFckc7SUEyREUsMEJBQW9CLGtCQUFxQyxFQUNKLGVBQW9DO1FBRHJFLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7UUFDSixvQkFBZSxHQUFmLGVBQWUsQ0FBcUI7UUFoRGpGLGNBQVMsR0FBWSxJQUFJLENBQUM7UUFDMUIsZ0JBQVcsR0FBbUIsU0FBUyxDQUFDO1FBQ3hDLFFBQUcsR0FBVyxjQUFZLE1BQU0sRUFBSSxDQUFDO1FBK0N6QyxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEVBQUU7WUFDM0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQztTQUNuRDtJQUNILENBQUM7SUEvQ0gsc0JBQ0ksc0NBQVE7Ozs7UUFJWjtZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDO1FBUkQsMkNBQTJDOzs7Ozs7UUFDM0MsVUFDYSxLQUFjO1lBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3pDLENBQUM7OztPQUFBO0lBVUQsc0JBQ0ksZ0NBQUU7Ozs7UUFPTjtZQUNFLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNsQixDQUFDO1FBZkQ7Ozs7V0FJRzs7Ozs7Ozs7UUFDSCxVQUNPLEtBQWE7WUFDbEIsSUFBSSxLQUFLLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQy9CLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO2dCQUNqQixJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDeEM7UUFDSCxDQUFDOzs7T0FBQTtJQVdELHNCQUNJLHdDQUFVOzs7O1FBTWQ7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDMUIsQ0FBQztRQWREOzs7O1dBSUc7Ozs7Ozs7O1FBQ0gsVUFDZSxLQUFxQjtZQUNsQyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUM3QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztnQkFDekIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO2FBQ3hDO1FBQ0gsQ0FBQzs7O09BQUE7O2dCQXRERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFVBQVU7b0JBQ3BCLG1yQkFBcUM7b0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUUvQyxJQUFJLEVBQUU7d0JBQ0osYUFBYSxFQUFFLFNBQVM7d0JBQ3hCLFdBQVcsRUFBRSxJQUFJO3dCQUNqQiwyQkFBMkIsRUFBRSx5QkFBeUI7cUJBQ3ZEOztpQkFDRjs7OztnQkE3QmdDLGlCQUFpQjtnREErRTdDLFFBQVEsWUFBSSxNQUFNLFNBQUMscUJBQXFCOzs7MkJBM0MxQyxLQUFLO3FCQWNMLEtBQUs7NkJBaUJMLEtBQUs7O0lBaUJSLHVCQUFDO0NBQUEsQUFqRUQsSUFpRUM7U0F0RFksZ0JBQWdCOzs7Ozs7SUFDM0IscUNBQWtDOzs7OztJQUNsQyx1Q0FBZ0Q7Ozs7O0lBQ2hELCtCQUE2Qzs7Ozs7SUE2Q2pDLDhDQUE2Qzs7Ozs7SUFDdkQsMkNBQXVGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgSW5wdXQsIEluamVjdGlvblRva2VuLCBJbmplY3QsIE9wdGlvbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Y29lcmNlQm9vbGVhblByb3BlcnR5fSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuXG4vKiBUeXBlcyBvZiBlcnJvciBub3RpZmljYXRpb24gc3R5bGVzICovXG5leHBvcnQgdHlwZSBFcnJvclN0eWxlVHlwZSA9ICdtZXNzYWdlJyB8ICd0ZXh0JztcblxubGV0IG5leHRJZCA9IDA7XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgZGVmYXVsdCBvcHRpb25zIGZvciB0aGUgZXJyb3Igbm90aWZpY2F0aW9uIHRoYXQgY2FuIGJlIGNvbmZpZ3VyZWRcbiAqIHVzaW5nIHRoZSBgRVJST1JfREVGQVVMVF9PUFRJT05TYCBpbmplY3Rpb24gdG9rZW4uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JEZWZhdWx0T3B0aW9ucyB7XG4gIC8qKiBEZWZpbmVzIHRoZSBzdHlsZSB0eXBlIG9mIHRoZSBlcnJvciBub3RpZmljYXRpb24uICovXG4gIGFwcGVhcmFuY2U/OiBFcnJvclN0eWxlVHlwZTtcbn1cblxuZXhwb3J0IGNvbnN0IEVSUk9SX0RFRkFVTFRfT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxFcnJvckRlZmF1bHRPcHRpb25zPignRVJST1JfREVGQVVMVF9PUFRJT05TJyk7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LWVycm9yJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2Vycm9yLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0eWxlVXJsczogWycuL2Vycm9yLmNvbXBvbmVudC5zY3NzJ10sXG4gIGhvc3Q6IHtcbiAgICAnW2F0dHIucm9sZV0nOiAnXCJhbGVydFwiJyxcbiAgICAnW2F0dHIuaWRdJzogJ2lkJyxcbiAgICAnW2NsYXNzLm54LWVycm9yLS1tZXNzYWdlXSc6ICdhcHBlYXJhbmNlID09IFwibWVzc2FnZVwiJ1xuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBOeEVycm9yQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSBfc2hvd0ljb246IGJvb2xlYW4gPSB0cnVlO1xuICBwcml2YXRlIF9hcHBlYXJhbmNlOiBFcnJvclN0eWxlVHlwZSA9ICdtZXNzYWdlJztcbiAgcHJpdmF0ZSBfaWQ6IHN0cmluZyA9IGBueC1lcnJvci0ke25leHRJZCsrfWA7XG5cbiAgLyoqIFdoZXRoZXIgYW4gaWNvbiBzaG91bGQgYmUgZGlzcGxheWVkLiAqL1xuICBASW5wdXQoKVxuICBzZXQgc2hvd0ljb24odmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zaG93SWNvbiA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cbiAgZ2V0IHNob3dJY29uKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zaG93SWNvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZCBvZiB0aGUgbngtZXJyb3IuXG4gICAqXG4gICAqIElmIG5vdCBzZXQsIHRoZSBzZWxlY3RhYmxlIGNhcmQgZ2V0cyBhbiBpbmNyZW1lbnRlZCB2YWx1ZSBieSBkZWZhdWx0LlxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGlkKHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAodmFsdWUgJiYgdmFsdWUgIT09IHRoaXMuX2lkKSB7XG4gICAgICB0aGlzLl9pZCA9IHZhbHVlO1xuICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGlkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2lkO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGVycm9yIHNob3VsZCBoYXZlIG1lc3NhZ2Ugb3IgdGV4dCBzdHlsaW5nLlxuICAgKlxuICAgKiBEZWZhdWx0IGlzICdtZXNzYWdlJy5cbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCBhcHBlYXJhbmNlKHZhbHVlOiBFcnJvclN0eWxlVHlwZSkge1xuICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5hcHBlYXJhbmNlKSB7XG4gICAgICB0aGlzLl9hcHBlYXJhbmNlID0gdmFsdWU7XG4gICAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cbiAgZ2V0IGFwcGVhcmFuY2UoKTogRXJyb3JTdHlsZVR5cGUge1xuICAgIHJldHVybiB0aGlzLl9hcHBlYXJhbmNlO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoRVJST1JfREVGQVVMVF9PUFRJT05TKSBwcml2YXRlIF9kZWZhdWx0T3B0aW9uczogRXJyb3JEZWZhdWx0T3B0aW9ucykge1xuICAgICAgaWYgKHRoaXMuX2RlZmF1bHRPcHRpb25zICYmIHRoaXMuX2RlZmF1bHRPcHRpb25zLmFwcGVhcmFuY2UpIHtcbiAgICAgICAgdGhpcy5hcHBlYXJhbmNlID0gdGhpcy5fZGVmYXVsdE9wdGlvbnMuYXBwZWFyYW5jZTtcbiAgICAgIH1cbiAgICB9XG59XG4iXX0=