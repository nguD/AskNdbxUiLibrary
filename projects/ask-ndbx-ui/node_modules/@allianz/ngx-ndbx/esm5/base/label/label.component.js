/**
 * @fileoverview added by tsickle
 * Generated from: label/label.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input, Optional, Inject, InjectionToken } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Subject } from 'rxjs';
/** @type {?} */
var nextId = 0;
/**
 * @record
 */
export function LabelDefaultOptions() { }
if (false) {
    /**
     * Sets the default appearance. (optional)
     * @type {?|undefined}
     */
    LabelDefaultOptions.prototype.size;
}
/** @type {?} */
var DEFAULT_SIZE = 'large';
/** @type {?} */
export var LABEL_DEFAULT_OPTIONS = new InjectionToken('LABEL_DEFAULT_OPTIONS');
var NxLabelComponent = /** @class */ (function () {
    function NxLabelComponent(_defaultOptions) {
        this._defaultOptions = _defaultOptions;
        this._stateChanges = new Subject();
        this._disabled = false;
        this._negative = false;
        this._id = "nx-label-" + nextId++;
        this._size = (this._defaultOptions && this._defaultOptions.size) ? this._defaultOptions.size : DEFAULT_SIZE;
    }
    Object.defineProperty(NxLabelComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /** Sets the label to disabled */
        set: /**
         * Sets the label to disabled
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = coerceBooleanProperty(value);
            this._stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxLabelComponent.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Sets the label to disabled */
        set: /**
         * Sets the label to disabled
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._negative = coerceBooleanProperty(value);
            this._stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxLabelComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this._id;
        },
        /** Sets the Id of the label */
        set: /**
         * Sets the Id of the label
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._id !== value) {
                this._id = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxLabelComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        /**
         * **NDBX Expert option**
         * Sets the appearance of the label */
        set: /**
         * **NDBX Expert option**
         * Sets the appearance of the label
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._size = value;
            this._stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    NxLabelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-label',
                    template: "<label class=\"nx-label__content\">\n  <ng-content></ng-content>\n</label>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[attr.disabled]': 'disabled',
                        '[attr.aria-labelledby]': 'id || null',
                        '[class.nx-label--negative]': 'negative',
                        '[class.nx-label--large]': 'size === "large"',
                        '[class.nx-label--small]': 'size === "small"',
                        '[attr.id]': 'id',
                    },
                    styles: [":host{display:block;color:#414141;color:var(--text-01,#414141)}:host.nx-label--small{font-size:16px;font-size:var(--base-label-small-font-size,16px);line-height:24px;line-height:var(--base-label-small-line-height,24px);font-weight:600;font-weight:var(--base-label-small-font-weight,600);letter-spacing:0;letter-spacing:var(--base-label-small-letter-spacing,0)}:host.nx-label--large{font-size:20px;font-size:var(--base-label-large-font-size,20px);line-height:28px;line-height:var(--base-label-large-line-height,28px);font-weight:300;font-weight:var(--base-label-large-font-weight,300);letter-spacing:.2px;letter-spacing:var(--base-label-large-letter-spacing,.2px)}:host[disabled=true] label{cursor:not-allowed}:host.nx-label--negative{color:#fff}"]
                }] }
    ];
    /** @nocollapse */
    NxLabelComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LABEL_DEFAULT_OPTIONS,] }] }
    ]; };
    NxLabelComponent.propDecorators = {
        disabled: [{ type: Input }],
        negative: [{ type: Input }],
        id: [{ type: Input }],
        size: [{ type: Input }]
    };
    return NxLabelComponent;
}());
export { NxLabelComponent };
if (false) {
    /** @type {?} */
    NxLabelComponent.prototype._stateChanges;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._size;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._id;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvYmFzZS8iLCJzb3VyY2VzIjpbImxhYmVsL2xhYmVsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVHLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBRTNCLE1BQU0sR0FBRyxDQUFDOzs7O0FBRWQseUNBR0M7Ozs7OztJQURDLG1DQUF1Qjs7O0lBS25CLFlBQVksR0FBRyxPQUFPOztBQUU1QixNQUFNLEtBQU8scUJBQXFCLEdBQ2hDLElBQUksY0FBYyxDQUFzQix1QkFBdUIsQ0FBQztBQUNsRTtJQXFFRSwwQkFBK0QsZUFBb0M7UUFBcEMsb0JBQWUsR0FBZixlQUFlLENBQXFCO1FBckQxRixrQkFBYSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFDckMsY0FBUyxHQUFZLEtBQUssQ0FBQztRQUMzQixjQUFTLEdBQVksS0FBSyxDQUFDO1FBeUIzQixRQUFHLEdBQVcsY0FBWSxNQUFNLEVBQUksQ0FBQztRQTRCM0MsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztJQUM5RyxDQUFDO0lBbERELHNCQUNJLHNDQUFROzs7O1FBS1o7WUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDeEIsQ0FBQztRQVRELGlDQUFpQzs7Ozs7O1FBQ2pDLFVBQ2EsS0FBYztZQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDNUIsQ0FBQzs7O09BQUE7SUFPRCxzQkFDSSxzQ0FBUTs7OztRQUtaO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7UUFURCxpQ0FBaUM7Ozs7OztRQUNqQyxVQUNhLEtBQWM7WUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzVCLENBQUM7OztPQUFBO0lBUUQsc0JBQ0ksZ0NBQUU7Ozs7UUFNTjtZQUNFLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNsQixDQUFDO1FBVkQsK0JBQStCOzs7Ozs7UUFDL0IsVUFDTyxLQUFhO1lBQ2xCLElBQUksSUFBSSxDQUFDLEdBQUcsS0FBSyxLQUFLLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO2FBQ2xCO1FBQ0gsQ0FBQzs7O09BQUE7SUFTRCxzQkFDSSxrQ0FBSTs7OztRQUtSO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUM7UUFYRDs7OENBRXNDOzs7Ozs7O1FBQ3RDLFVBQ1MsS0FBc0I7WUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDbkIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM1QixDQUFDOzs7T0FBQTs7Z0JBL0RGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsVUFBVTtvQkFDcEIsd0ZBQXFDO29CQUVyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsSUFBSSxFQUFFO3dCQUNKLGlCQUFpQixFQUFFLFVBQVU7d0JBQzdCLHdCQUF3QixFQUFFLFlBQVk7d0JBQ3RDLDRCQUE0QixFQUFFLFVBQVU7d0JBQ3hDLHlCQUF5QixFQUFFLGtCQUFrQjt3QkFDN0MseUJBQXlCLEVBQUUsa0JBQWtCO3dCQUM3QyxXQUFXLEVBQUUsSUFBSTtxQkFDbEI7O2lCQUNGOzs7O2dEQXdEYyxRQUFRLFlBQUksTUFBTSxTQUFDLHFCQUFxQjs7OzJCQS9DcEQsS0FBSzsyQkFXTCxLQUFLO3FCQVlMLEtBQUs7dUJBY0wsS0FBSzs7SUFjUix1QkFBQztDQUFBLEFBekVELElBeUVDO1NBMURZLGdCQUFnQjs7O0lBQzNCLHlDQUE2Qzs7Ozs7SUFDN0MscUNBQW1DOzs7OztJQUNuQyxxQ0FBbUM7Ozs7O0lBQ25DLGlDQUErQjs7Ozs7SUF3Qi9CLCtCQUE2Qzs7Ozs7SUEwQmpDLDJDQUF1RiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBPcHRpb25hbCwgSW5qZWN0LCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxubGV0IG5leHRJZCA9IDA7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGFiZWxEZWZhdWx0T3B0aW9ucyB7XG4gIC8qKiBTZXRzIHRoZSBkZWZhdWx0IGFwcGVhcmFuY2UuIChvcHRpb25hbCkgKi9cbiAgc2l6ZT86IExBQkVMX1NJWkVfVFlQRTtcbn1cblxuLyoqIE9wdGlvbnMgZm9yIHNpemluZyBvZiB0aGUgbGFiZWwuICovXG5leHBvcnQgdHlwZSBMQUJFTF9TSVpFX1RZUEUgPSAnc21hbGwnIHwgJ2xhcmdlJztcbmNvbnN0IERFRkFVTFRfU0laRSA9ICdsYXJnZSc7XG5cbmV4cG9ydCBjb25zdCBMQUJFTF9ERUZBVUxUX09QVElPTlMgPVxuICBuZXcgSW5qZWN0aW9uVG9rZW48TGFiZWxEZWZhdWx0T3B0aW9ucz4oJ0xBQkVMX0RFRkFVTFRfT1BUSU9OUycpO1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbngtbGFiZWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vbGFiZWwuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnbGFiZWwuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGhvc3Q6IHtcbiAgICAnW2F0dHIuZGlzYWJsZWRdJzogJ2Rpc2FibGVkJyxcbiAgICAnW2F0dHIuYXJpYS1sYWJlbGxlZGJ5XSc6ICdpZCB8fCBudWxsJyxcbiAgICAnW2NsYXNzLm54LWxhYmVsLS1uZWdhdGl2ZV0nOiAnbmVnYXRpdmUnLFxuICAgICdbY2xhc3MubngtbGFiZWwtLWxhcmdlXSc6ICdzaXplID09PSBcImxhcmdlXCInLFxuICAgICdbY2xhc3MubngtbGFiZWwtLXNtYWxsXSc6ICdzaXplID09PSBcInNtYWxsXCInLFxuICAgICdbYXR0ci5pZF0nOiAnaWQnLFxuICB9LFxufSlcblxuZXhwb3J0IGNsYXNzIE54TGFiZWxDb21wb25lbnQge1xuICByZWFkb25seSBfc3RhdGVDaGFuZ2VzID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgcHJpdmF0ZSBfZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfbmVnYXRpdmU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfc2l6ZTogTEFCRUxfU0laRV9UWVBFO1xuXG4gIC8qKiBTZXRzIHRoZSBsYWJlbCB0byBkaXNhYmxlZCAqL1xuICBASW5wdXQoKVxuICBzZXQgZGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kaXNhYmxlZCA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgdGhpcy5fc3RhdGVDaGFuZ2VzLm5leHQoKTtcbiAgfVxuXG4gIGdldCBkaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cblxuICAvKiogU2V0cyB0aGUgbGFiZWwgdG8gZGlzYWJsZWQgKi9cbiAgQElucHV0KClcbiAgc2V0IG5lZ2F0aXZlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fbmVnYXRpdmUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIHRoaXMuX3N0YXRlQ2hhbmdlcy5uZXh0KCk7XG4gIH1cblxuICBnZXQgbmVnYXRpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX25lZ2F0aXZlO1xuICB9XG5cbiAgcHJpdmF0ZSBfaWQ6IHN0cmluZyA9IGBueC1sYWJlbC0ke25leHRJZCsrfWA7XG4gIC8qKiBTZXRzIHRoZSBJZCBvZiB0aGUgbGFiZWwgKi9cbiAgQElucHV0KClcbiAgc2V0IGlkKHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5faWQgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLl9pZCA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGdldCBpZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiAqKk5EQlggRXhwZXJ0IG9wdGlvbioqXG4gICAqIFNldHMgdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIGxhYmVsICovXG4gIEBJbnB1dCgpXG4gIHNldCBzaXplKHZhbHVlOiBMQUJFTF9TSVpFX1RZUEUpIHtcbiAgICB0aGlzLl9zaXplID0gdmFsdWU7XG4gICAgdGhpcy5fc3RhdGVDaGFuZ2VzLm5leHQoKTtcbiAgfVxuXG4gIGdldCBzaXplKCk6IExBQkVMX1NJWkVfVFlQRSB7XG4gICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KExBQkVMX0RFRkFVTFRfT1BUSU9OUykgcHJpdmF0ZSBfZGVmYXVsdE9wdGlvbnM6IExhYmVsRGVmYXVsdE9wdGlvbnNcbiAgKSB7XG4gICAgdGhpcy5fc2l6ZSA9ICh0aGlzLl9kZWZhdWx0T3B0aW9ucyAmJiB0aGlzLl9kZWZhdWx0T3B0aW9ucy5zaXplKSA/IHRoaXMuX2RlZmF1bHRPcHRpb25zLnNpemUgOiBERUZBVUxUX1NJWkU7XG4gIH1cbn1cbiJdfQ==