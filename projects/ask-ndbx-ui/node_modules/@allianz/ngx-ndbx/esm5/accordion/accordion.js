/**
 * @fileoverview added by tsickle
 * Generated from: accordion/accordion.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input } from '@angular/core';
import { CdkAccordion } from '@angular/cdk/accordion';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
/** @type {?} */
var DEFAULT_TYPE = 'regular';
var NxAccordionDirective = /** @class */ (function (_super) {
    tslib_1.__extends(NxAccordionDirective, _super);
    function NxAccordionDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._style = 'regular';
        _this._negative = null;
        return _this;
    }
    Object.defineProperty(NxAccordionDirective.prototype, "style", {
        get: /**
         * @return {?}
         */
        function () {
            return this._style;
        },
        /**
         * Value for the styling that should be chosen.
         * Default value: 'regular'
         */
        set: /**
         * Value for the styling that should be chosen.
         * Default value: 'regular'
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value = value ? value : DEFAULT_TYPE;
            var _a = tslib_1.__read(value.match(/regular|light/) || [DEFAULT_TYPE], 1), newValue = _a[0];
            this._style = (/** @type {?} */ (newValue));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxAccordionDirective.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Whether the negative set of styles should be used. */
        set: /**
         * Whether the negative set of styles should be used.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._negative = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    NxAccordionDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: 'nx-accordion',
                    host: {
                        '[class.nx-accordion]': 'true',
                        'role': 'presentation'
                    }
                },] }
    ];
    NxAccordionDirective.propDecorators = {
        style: [{ type: Input, args: ['nxStyle',] }],
        negative: [{ type: Input }]
    };
    return NxAccordionDirective;
}(CdkAccordion));
export { NxAccordionDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxAccordionDirective.prototype._style;
    /**
     * @type {?}
     * @private
     */
    NxAccordionDirective.prototype._negative;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvIiwic291cmNlcyI6WyJhY2NvcmRpb24vYWNjb3JkaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7SUFHeEQsWUFBWSxHQUFtQixTQUFTO0FBRTlDO0lBUTBDLGdEQUFZO0lBUnREO1FBQUEscUVBcUNDO1FBM0JTLFlBQU0sR0FBbUIsU0FBUyxDQUFDO1FBaUJuQyxlQUFTLEdBQVksSUFBSSxDQUFDOztJQVVwQyxDQUFDO0lBckJDLHNCQUNJLHVDQUFLOzs7O1FBTVQ7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQztRQWJEOzs7V0FHRzs7Ozs7OztRQUNILFVBQ1UsS0FBcUI7WUFDN0IsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7WUFFL0IsSUFBQSxzRUFBMkQsRUFBMUQsZ0JBQTBEO1lBQ2pFLElBQUksQ0FBQyxNQUFNLEdBQUcsbUJBQUEsUUFBUSxFQUFrQixDQUFDO1FBQzNDLENBQUM7OztPQUFBO0lBUUQsc0JBQ0ksMENBQVE7Ozs7UUFHWjtZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDO1FBUEQseURBQXlEOzs7Ozs7UUFDekQsVUFDYSxLQUFjO1lBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsQ0FBQzs7O09BQUE7O2dCQWpDRixTQUFTLFNBQUM7O29CQUVULFFBQVEsRUFBRSxjQUFjO29CQUN4QixJQUFJLEVBQUU7d0JBQ0osc0JBQXNCLEVBQUUsTUFBTTt3QkFDOUIsTUFBTSxFQUFFLGNBQWM7cUJBQ3ZCO2lCQUNGOzs7d0JBU0UsS0FBSyxTQUFDLFNBQVM7MkJBY2YsS0FBSzs7SUFPUiwyQkFBQztDQUFBLEFBckNELENBUTBDLFlBQVksR0E2QnJEO1NBN0JZLG9CQUFvQjs7Ozs7O0lBRS9CLHNDQUEyQzs7Ozs7SUFpQjNDLHlDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENka0FjY29yZGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hY2NvcmRpb24nO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IEFjY29yZGlvblN0eWxlIH0gZnJvbSAnLi9leHBhbnNpb24tcGFuZWwnO1xuXG5jb25zdCBERUZBVUxUX1RZUEU6IEFjY29yZGlvblN0eWxlID0gJ3JlZ3VsYXInO1xuXG5ARGlyZWN0aXZlKHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICBzZWxlY3RvcjogJ254LWFjY29yZGlvbicsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLm54LWFjY29yZGlvbl0nOiAndHJ1ZScsXG4gICAgJ3JvbGUnOiAncHJlc2VudGF0aW9uJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE54QWNjb3JkaW9uRGlyZWN0aXZlIGV4dGVuZHMgQ2RrQWNjb3JkaW9uIHtcblxuICBwcml2YXRlIF9zdHlsZTogQWNjb3JkaW9uU3R5bGUgPSAncmVndWxhcic7XG5cbiAgLyoqXG4gICAqIFZhbHVlIGZvciB0aGUgc3R5bGluZyB0aGF0IHNob3VsZCBiZSBjaG9zZW4uXG4gICAqIERlZmF1bHQgdmFsdWU6ICdyZWd1bGFyJ1xuICAgKi9cbiAgQElucHV0KCdueFN0eWxlJylcbiAgc2V0IHN0eWxlKHZhbHVlOiBBY2NvcmRpb25TdHlsZSkge1xuICAgIHZhbHVlID0gdmFsdWUgPyB2YWx1ZSA6IERFRkFVTFRfVFlQRTtcblxuICAgIGNvbnN0IFtuZXdWYWx1ZV0gPSB2YWx1ZS5tYXRjaCgvcmVndWxhcnxsaWdodC8pIHx8IFtERUZBVUxUX1RZUEVdO1xuICAgIHRoaXMuX3N0eWxlID0gbmV3VmFsdWUgYXMgQWNjb3JkaW9uU3R5bGU7XG4gIH1cbiAgZ2V0IHN0eWxlKCk6IEFjY29yZGlvblN0eWxlIHtcbiAgICByZXR1cm4gdGhpcy5fc3R5bGU7XG4gIH1cblxuICBwcml2YXRlIF9uZWdhdGl2ZTogYm9vbGVhbiA9IG51bGw7XG5cbiAgLyoqIFdoZXRoZXIgdGhlIG5lZ2F0aXZlIHNldCBvZiBzdHlsZXMgc2hvdWxkIGJlIHVzZWQuICovXG4gIEBJbnB1dCgpXG4gIHNldCBuZWdhdGl2ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX25lZ2F0aXZlID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgfVxuICBnZXQgbmVnYXRpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX25lZ2F0aXZlO1xuICB9XG59XG4iXX0=