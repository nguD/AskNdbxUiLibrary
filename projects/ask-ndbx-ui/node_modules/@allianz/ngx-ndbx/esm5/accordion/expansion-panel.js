/**
 * @fileoverview added by tsickle
 * Generated from: accordion/expansion-panel.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CdkAccordionItem } from '@angular/cdk/accordion';
import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { TemplatePortal } from '@angular/cdk/portal';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Input, Optional, SkipSelf, ViewContainerRef } from '@angular/core';
import { Subject } from 'rxjs';
import { filter, startWith, take } from 'rxjs/operators';
import { NxAccordionDirective } from './accordion';
import { nxAccordionAnimations } from './accordion-animations';
import { NxExpansionPanelBodyDirective } from './expansion-panel-body';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
/** @type {?} */
var nextId = 0;
/** @type {?} */
var DEFAULT_TYPE = 'regular';
var ɵ0 = undefined;
var NxExpansionPanelComponent = /** @class */ (function (_super) {
    tslib_1.__extends(NxExpansionPanelComponent, _super);
    function NxExpansionPanelComponent(accordion, _changeDetectorRef, _expansionDispatcher, _viewContainerRef) {
        var _this = _super.call(this, accordion, _changeDetectorRef, _expansionDispatcher) || this;
        _this._viewContainerRef = _viewContainerRef;
        _this._negative = null;
        _this._accordionStyle = DEFAULT_TYPE;
        _this._style = null;
        _this._headerId = "nx-expansion-panel-header-" + nextId++;
        /**
         * Stream that emits for changes in `\@Input` properties.
         */
        _this._inputChanges = new Subject();
        _this.accordion = accordion;
        return _this;
    }
    Object.defineProperty(NxExpansionPanelComponent.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Whether the negative set of styles should be used. */
        set: /**
         * Whether the negative set of styles should be used.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._negative = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxExpansionPanelComponent.prototype, "style", {
        get: /**
         * @return {?}
         */
        function () {
            return this._style;
        },
        /**
         * Value for the styling that should be chosen.
         * Default value: 'regular'.
         */
        set: /**
         * Value for the styling that should be chosen.
         * Default value: 'regular'.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value = value ? value : DEFAULT_TYPE;
            var _a = tslib_1.__read(value.match(/regular|light/) || [DEFAULT_TYPE], 1), newValue = _a[0];
            this._style = (/** @type {?} */ (newValue));
            this._accordionStyle = (/** @type {?} */ (newValue));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxExpansionPanelComponent.prototype, "portal", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._portal;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxExpansionPanelComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.lazyContent) {
            // Render the content as soon as the panel becomes open.
            this.opened.pipe(startWith(null), filter((/**
             * @return {?}
             */
            function () { return _this.expanded && !_this._portal; })), take(1)).subscribe((/**
             * @return {?}
             */
            function () {
                _this._portal = new TemplatePortal(_this.lazyContent._template, _this._viewContainerRef);
            }));
        }
        // Inherit appearance given by the accordion (if any).
        if (Boolean(this.accordion)) {
            if (this.style === null && this.accordion.style !== null) {
                this.style = this.accordion.style;
            }
            if (this.negative === null && this.accordion.negative !== null) {
                this.negative = this.accordion.negative;
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NxExpansionPanelComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this._inputChanges.next(changes);
    };
    /**
     * @return {?}
     */
    NxExpansionPanelComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnDestroy.call(this);
        this._inputChanges.complete();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxExpansionPanelComponent.prototype.getOpenState = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        return this.expanded ? 'open' : 'closed';
    };
    NxExpansionPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-expansion-panel',
                    exportAs: 'NxExpansionPanelComponent',
                    template: "<ng-content select=\"nx-expansion-panel-header\"></ng-content>\n\n<div class=\"nx-expansion-panel__content\" role=\"region\" [@bodyExpansion]=\"getOpenState()\"\n  [attr.aria-labelledby]=\"_headerId\" [id]=\"id\">\n  <div class=\"nx-expansion-panel__body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"portal\"></ng-template>\n  </div>\n</div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [nxAccordionAnimations.bodyExpansion],
                    host: {
                        '[class.nx-expanded]': 'expanded',
                        '[class.nx-expansion-panel--light]': '_accordionStyle === "light"',
                        '[class.nx-expansion-panel--regular]': '_accordionStyle === "regular"',
                        '[class.nx-expansion-panel--negative]': 'negative',
                        '[class.is-disabled]': 'disabled',
                    },
                    providers: [
                        // Provide NxAccordionDirective as undefined to prevent nested expansion panels from registering
                        // to the same accordion.
                        { provide: NxAccordionDirective, useValue: ɵ0 },
                    ],
                    styles: [":host{display:block}:host(.nx-expansion-panel--negative) ::ng-deep div.nx-expansion-panel__body *{color:#fff}.nx-expansion-panel__content{overflow:hidden;display:block}.nx-expansion-panel__body{font-size:16px;font-size:var(--accordion-body-font-size,16px);line-height:24px;line-height:var(--accordion-body-line-height,24px);font-weight:400;font-weight:var(--accordion-body-font-weight,400);letter-spacing:0;letter-spacing:var(--accordion-body-letter-spacing,0);padding:24px 88px 32px 32px;padding:var(--accordion-regular-body-padding,24px 88px 32px 32px)}:host(.nx-expansion-panel--regular){margin-top:16px;margin-top:var(--accordion-regular-header-top-margin,16px)}:host(.nx-expansion-panel--regular) ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 transparent;box-shadow:inset 0 1px 0 0 var(--accordion-regular-border-color,transparent)}:host(.nx-expansion-panel--regular):last-child,:host(.nx-expansion-panel--regular):only-child{box-shadow:0 1px 0 0 transparent;box-shadow:0 1px 0 0 var(--accordion-regular-border-color,transparent)}@media (max-width:703px){.nx-expansion-panel__body{padding:24px 16px 32px}:host(.nx-expansion-panel--regular){margin-top:0}:host(.nx-expansion-panel--regular) ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 #d9d9d9}:host(.nx-expansion-panel--regular):last-child ::ng-deep .nx-expansion-panel__header-content,:host(.nx-expansion-panel--regular):only-child ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 #d9d9d9,inset 0 -1px 0 0 #d9d9d9}:host(.nx-expansion-panel--regular).nx-expanded ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 #d9d9d9,inset 0 -1px 0 0 #d9d9d9}}:host(.nx-expansion-panel--light) .nx-expansion-panel__body{padding:24px 88px 32px 32px;padding:var(--accordion-light-body-padding,24px 88px 32px 32px)}:host(.nx-expansion-panel--light):not(.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 #d9d9d9}:host(.nx-expansion-panel--light):not(.nx-expansion-panel--negative):last-child,:host(.nx-expansion-panel--light):not(.nx-expansion-panel--negative):only-child{box-shadow:0 1px 0 0 #d9d9d9}:host(.nx-expansion-panel--light.nx-expansion-panel--negative){color:#fff}:host(.nx-expansion-panel--light.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 #fff}:host(.nx-expansion-panel--light.nx-expansion-panel--negative):last-child,:host(.nx-expansion-panel--light.nx-expansion-panel--negative):only-child{box-shadow:0 1px 0 0 #fff}@media screen and (-ms-high-contrast:active){:host{border-color:windowText;color:buttonText}:host.nx-expansion-panel--regular{border:1px solid buttonText}:host.is-disabled{border-color:GrayText}:host.nx-expansion-panel--light.nx-expansion-panel--negative ::ng-deep .nx-expansion-panel__header-content,:host.nx-expansion-panel--light:not(.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 windowText}:host.nx-expansion-panel--light.nx-expansion-panel--negative:last-child,:host.nx-expansion-panel--light.nx-expansion-panel--negative:only-child,:host.nx-expansion-panel--light:not(.nx-expansion-panel--negative):last-child,:host.nx-expansion-panel--light:not(.nx-expansion-panel--negative):only-child{box-shadow:0 1px 0 0 windowText}}"]
                }] }
    ];
    /** @nocollapse */
    NxExpansionPanelComponent.ctorParameters = function () { return [
        { type: NxAccordionDirective, decorators: [{ type: Optional }, { type: SkipSelf }] },
        { type: ChangeDetectorRef },
        { type: UniqueSelectionDispatcher },
        { type: ViewContainerRef }
    ]; };
    NxExpansionPanelComponent.propDecorators = {
        negative: [{ type: Input }],
        style: [{ type: Input, args: ['nxStyle',] }],
        lazyContent: [{ type: ContentChild, args: [NxExpansionPanelBodyDirective, { static: false },] }]
    };
    return NxExpansionPanelComponent;
}(CdkAccordionItem));
export { NxExpansionPanelComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxExpansionPanelComponent.prototype._negative;
    /** @type {?} */
    NxExpansionPanelComponent.prototype._accordionStyle;
    /**
     * @type {?}
     * @private
     */
    NxExpansionPanelComponent.prototype._style;
    /**
     * \@docs-private
     * @type {?}
     */
    NxExpansionPanelComponent.prototype.lazyContent;
    /**
     * @type {?}
     * @private
     */
    NxExpansionPanelComponent.prototype._portal;
    /**
     * \@docs-private
     * @type {?}
     */
    NxExpansionPanelComponent.prototype.accordion;
    /** @type {?} */
    NxExpansionPanelComponent.prototype._headerId;
    /**
     * Stream that emits for changes in `\@Input` properties.
     * @type {?}
     */
    NxExpansionPanelComponent.prototype._inputChanges;
    /**
     * @type {?}
     * @private
     */
    NxExpansionPanelComponent.prototype._viewContainerRef;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,