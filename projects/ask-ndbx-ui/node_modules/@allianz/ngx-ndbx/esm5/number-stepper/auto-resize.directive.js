/**
 * @fileoverview added by tsickle
 * Generated from: number-stepper/auto-resize.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { getFontShorthand } from '@allianz/ngx-ndbx/utils';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectorRef, Directive, ElementRef, HostBinding, Input, Renderer2, } from '@angular/core';
/**
 * \@docs-private
 */
var NxAutoResizeDirective = /** @class */ (function () {
    function NxAutoResizeDirective(_element, _renderer, _cdr) {
        this._element = _element;
        this._renderer = _renderer;
        this._cdr = _cdr;
        this._resize = true;
        this.updateInputWidth = this.updateInputWidth.bind(this);
    }
    Object.defineProperty(NxAutoResizeDirective.prototype, "resize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._resize;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._resize = coerceBooleanProperty(value);
            if (this._resize) {
                this._addEventListener();
                this.updateInputWidth();
            }
            else {
                this._removeEventListener();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxAutoResizeDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.resize) {
            this._addEventListener();
        }
    };
    /**
     * @return {?}
     */
    NxAutoResizeDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._removeEventListener();
    };
    /**
     * @return {?}
     */
    NxAutoResizeDirective.prototype.updateInputWidth = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var measureCanvas = this._renderer.createElement('canvas');
        /** @type {?} */
        var ctx = measureCanvas.getContext('2d');
        /** @type {?} */
        var styles = window.getComputedStyle(this._element.nativeElement);
        ctx.font = getFontShorthand(styles);
        /** @type {?} */
        var metrics = ctx.measureText(this._element.nativeElement.value);
        /** @type {?} */
        var padding = this.sumStyles(styles.paddingLeft, styles.paddingRight);
        /** @type {?} */
        var border = this.sumStyles(styles.borderLeftWidth, styles.borderRightWidth);
        // the pixels are needed, because despite the correct calculation the last pixels of a number are always cut
        /** @type {?} */
        var newWidth = metrics.width + padding + border + 16;
        // Limit to own given minimal width
        /** @type {?} */
        var parsed = parseFloat(styles.minWidth);
        this.width = Math.max(Number.isNaN(parsed) ? 0 : parsed, newWidth);
        // needed when the outer component is onPush
        this._cdr.markForCheck();
    };
    /**
     * @return {?}
     */
    NxAutoResizeDirective.prototype._addEventListener = /**
     * @return {?}
     */
    function () {
        this._element.nativeElement.addEventListener('input', this.updateInputWidth, true);
        this._element.nativeElement.addEventListener('change', this.updateInputWidth, true);
    };
    /**
     * @return {?}
     */
    NxAutoResizeDirective.prototype._removeEventListener = /**
     * @return {?}
     */
    function () {
        this._element.nativeElement.removeEventListener('input', this.updateInputWidth, true);
        this._element.nativeElement.removeEventListener('change', this.updateInputWidth, true);
    };
    /**
     * @param {?} left
     * @param {?} right
     * @return {?}
     */
    NxAutoResizeDirective.prototype.sumStyles = /**
     * @param {?} left
     * @param {?} right
     * @return {?}
     */
    function (left, right) {
        left = parseInt(left, 10);
        right = parseInt(right, 10);
        left = Number.isNaN(left) ? 0 : left;
        right = Number.isNaN(right) ? 0 : right;
        return left + right;
    };
    NxAutoResizeDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[nxAutoResize]'
                },] }
    ];
    /** @nocollapse */
    NxAutoResizeDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ChangeDetectorRef }
    ]; };
    NxAutoResizeDirective.propDecorators = {
        width: [{ type: HostBinding, args: ['style.width.px',] }],
        resize: [{ type: Input, args: ['nxAutoResize',] }]
    };
    return NxAutoResizeDirective;
}());
export { NxAutoResizeDirective };
if (false) {
    /** @type {?} */
    NxAutoResizeDirective.prototype.width;
    /**
     * @type {?}
     * @private
     */
    NxAutoResizeDirective.prototype._resize;
    /**
     * @type {?}
     * @private
     */
    NxAutoResizeDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    NxAutoResizeDirective.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    NxAutoResizeDirective.prototype._cdr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1yZXNpemUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvIiwic291cmNlcyI6WyJudW1iZXItc3RlcHBlci9hdXRvLXJlc2l6ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RCxPQUFPLEVBRUwsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsV0FBVyxFQUNYLEtBQUssRUFFTCxTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7Ozs7QUFHdkI7SUFzQkUsK0JBQW9CLFFBQW9CLEVBQ3BCLFNBQW9CLEVBQ3BCLElBQXVCO1FBRnZCLGFBQVEsR0FBUixRQUFRLENBQVk7UUFDcEIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixTQUFJLEdBQUosSUFBSSxDQUFtQjtRQWpCbkMsWUFBTyxHQUFZLElBQUksQ0FBQztRQWtCOUIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQWxCRCxzQkFDSSx5Q0FBTTs7OztRQVNWO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLENBQUM7Ozs7O1FBWkQsVUFDVyxLQUFjO1lBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNoQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztnQkFDekIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7YUFDekI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7YUFDN0I7UUFDSCxDQUFDOzs7T0FB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QUFRLEVBQUUscUJBQXFCO2lCQUNoQzs7OztnQkFWQyxVQUFVO2dCQUlWLFNBQVM7Z0JBTlQsaUJBQWlCOzs7d0JBZWhCLFdBQVcsU0FBQyxnQkFBZ0I7eUJBRzVCLEtBQUssU0FBQyxjQUFjOztJQXNFdkIsNEJBQUM7Q0FBQSxBQTlFRCxJQThFQztTQTNFWSxxQkFBcUI7OztJQUVoQyxzQ0FBNkM7Ozs7O0lBRTdDLHdDQUFnQzs7Ozs7SUFlcEIseUNBQTRCOzs7OztJQUM1QiwwQ0FBNEI7Ozs7O0lBQzVCLHFDQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEZvbnRTaG9ydGhhbmQgfSBmcm9tICdAYWxsaWFuei9uZ3gtbmRieC91dGlscyc7XG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIFJlbmRlcmVyMixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKiBAZG9jcy1wcml2YXRlICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdpbnB1dFtueEF1dG9SZXNpemVdJ1xufSlcbmV4cG9ydCBjbGFzcyBOeEF1dG9SZXNpemVEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuXG4gIEBIb3N0QmluZGluZygnc3R5bGUud2lkdGgucHgnKSB3aWR0aDogbnVtYmVyO1xuXG4gIHByaXZhdGUgX3Jlc2l6ZTogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgnbnhBdXRvUmVzaXplJylcbiAgc2V0IHJlc2l6ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3Jlc2l6ZSA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgaWYgKHRoaXMuX3Jlc2l6ZSkge1xuICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcigpO1xuICAgICAgdGhpcy51cGRhdGVJbnB1dFdpZHRoKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3JlbW92ZUV2ZW50TGlzdGVuZXIoKTtcbiAgICB9XG4gIH1cbiAgZ2V0IHJlc2l6ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzaXplO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWxlbWVudDogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgIHRoaXMudXBkYXRlSW5wdXRXaWR0aCA9IHRoaXMudXBkYXRlSW5wdXRXaWR0aC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICh0aGlzLnJlc2l6ZSkge1xuICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcigpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX3JlbW92ZUV2ZW50TGlzdGVuZXIoKTtcbiAgfVxuXG4gIHVwZGF0ZUlucHV0V2lkdGgoKSB7XG4gICAgY29uc3QgbWVhc3VyZUNhbnZhcyA9IHRoaXMuX3JlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuXG4gICAgY29uc3QgY3R4ID0gbWVhc3VyZUNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCk7XG5cbiAgICBjdHguZm9udCA9IGdldEZvbnRTaG9ydGhhbmQoc3R5bGVzKTtcblxuICAgIGNvbnN0IG1ldHJpY3MgPSBjdHgubWVhc3VyZVRleHQodGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LnZhbHVlKTtcblxuICAgIGNvbnN0IHBhZGRpbmcgPSB0aGlzLnN1bVN0eWxlcyhzdHlsZXMucGFkZGluZ0xlZnQsIHN0eWxlcy5wYWRkaW5nUmlnaHQpO1xuICAgIGNvbnN0IGJvcmRlciA9IHRoaXMuc3VtU3R5bGVzKHN0eWxlcy5ib3JkZXJMZWZ0V2lkdGgsIHN0eWxlcy5ib3JkZXJSaWdodFdpZHRoKTtcbiAgICAvLyB0aGUgcGl4ZWxzIGFyZSBuZWVkZWQsIGJlY2F1c2UgZGVzcGl0ZSB0aGUgY29ycmVjdCBjYWxjdWxhdGlvbiB0aGUgbGFzdCBwaXhlbHMgb2YgYSBudW1iZXIgYXJlIGFsd2F5cyBjdXRcbiAgICBjb25zdCBuZXdXaWR0aCA9IG1ldHJpY3Mud2lkdGggKyBwYWRkaW5nICsgYm9yZGVyICsgMTY7XG5cbiAgICAvLyBMaW1pdCB0byBvd24gZ2l2ZW4gbWluaW1hbCB3aWR0aFxuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1pbldpZHRoKTtcbiAgICB0aGlzLndpZHRoID0gTWF0aC5tYXgoTnVtYmVyLmlzTmFOKHBhcnNlZCkgPyAwIDogcGFyc2VkLCBuZXdXaWR0aCk7XG5cbiAgICAvLyBuZWVkZWQgd2hlbiB0aGUgb3V0ZXIgY29tcG9uZW50IGlzIG9uUHVzaFxuICAgIHRoaXMuX2Nkci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIF9hZGRFdmVudExpc3RlbmVyKCkge1xuICAgIHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIHRoaXMudXBkYXRlSW5wdXRXaWR0aCwgdHJ1ZSk7XG4gICAgdGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMudXBkYXRlSW5wdXRXaWR0aCwgdHJ1ZSk7XG4gIH1cblxuICBfcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHtcbiAgICB0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLnVwZGF0ZUlucHV0V2lkdGgsIHRydWUpO1xuICAgIHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLnVwZGF0ZUlucHV0V2lkdGgsIHRydWUpO1xuICB9XG5cbiAgc3VtU3R5bGVzKGxlZnQsIHJpZ2h0KSB7XG4gICAgbGVmdCA9IHBhcnNlSW50KGxlZnQsIDEwKTtcbiAgICByaWdodCA9IHBhcnNlSW50KHJpZ2h0LCAxMCk7XG4gICAgbGVmdCA9IE51bWJlci5pc05hTihsZWZ0KSA/IDAgOiBsZWZ0O1xuICAgIHJpZ2h0ID0gTnVtYmVyLmlzTmFOKHJpZ2h0KSA/IDAgOiByaWdodDtcbiAgICByZXR1cm4gbGVmdCArIHJpZ2h0O1xuICB9XG59XG4iXX0=