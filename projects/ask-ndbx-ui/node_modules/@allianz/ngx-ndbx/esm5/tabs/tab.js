/**
 * @fileoverview added by tsickle
 * Generated from: tabs/tab.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NxTabGroupBase } from './tab-group-base';
import { ChangeDetectionStrategy, Component, Input, TemplateRef, ViewChild, Optional, Inject, Host, ContentChild } from '@angular/core';
import { Subject } from 'rxjs';
import { NxTabLabelDirective } from './tab-label';
import { NxTabContentDirective } from './tab-content';
var NxTabComponent = /** @class */ (function () {
    function NxTabComponent(_tabGroup) {
        this._tabGroup = _tabGroup;
        this._disabled = false;
        /**
         * Emits whenever the internal state of the tab changes.
         */
        this._stateChanges = new Subject();
        /**
         * Whether the tab is currently active.
         */
        this.isActive = false;
        if (!this._tabGroup) {
            throw Error("The nx-tab element has to be wrapped in a nx-tab-group to work.\n      Please provide a nx-tab-group element and place your tabs inside it.");
        }
    }
    Object.defineProperty(NxTabComponent.prototype, "templateLabel", {
        /**
         * Content for the tab label given by `<ng-template nxTabLabel>`.
         * @docs-private
         * */
        get: /**
         * Content for the tab label given by `<ng-template nxTabLabel>`.
         * \@docs-private
         *
         * @return {?}
         */
        function () { return this._templateLabel; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // Only update the templateLabel via query if there is actually
            // a nxTabLabel found. This works around an issue where a user may have
            // manually set `templateLabel` during creation mode, which would then get clobbered
            // by `undefined` when this query resolves.
            if (value) {
                this._templateLabel = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTabComponent.prototype, "label", {
        /** Sets the label of the tab shown in the tablist. */
        get: /**
         * Sets the label of the tab shown in the tablist.
         * @return {?}
         */
        function () {
            return this._label;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._label !== value) {
                this._label = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTabComponent.prototype, "disabled", {
        /** Sets the tab to disabled. */
        get: /**
         * Sets the tab to disabled.
         * @return {?}
         */
        function () {
            return (this._tabGroup && ((/** @type {?} */ (this._tabGroup))).disabled) ?
                ((/** @type {?} */ (this._tabGroup))).disabled : this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._disabled !== value) {
                this._disabled = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTabComponent.prototype, "headerViewRef", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._headerViewRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTabComponent.prototype, "contentViewRef", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            // for lazy loading we only create the viewref when it is asked for
            if (!this._contentViewRef) {
                /** @type {?} */
                var contentTemplate = this._explicitContent || this._implicitContent;
                this._contentViewRef = contentTemplate.createEmbeddedView({});
            }
            return this._contentViewRef;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    NxTabComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.hasOwnProperty('label') || changes.hasOwnProperty('disabled')) {
            this._stateChanges.next();
        }
    };
    /**
     * @return {?}
     */
    NxTabComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this.templateLabel) {
            this._headerViewRef = this.templateLabel.createEmbeddedView({});
        }
    };
    /**
     * @return {?}
     */
    NxTabComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._stateChanges.complete();
        this._contentViewRef.destroy();
        if (this._headerViewRef) {
            this._headerViewRef.destroy();
        }
    };
    NxTabComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-tab',
                    exportAs: 'nxTab',
                    template: "<ng-template><ng-content></ng-content></ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NxTabComponent.ctorParameters = function () { return [
        { type: NxTabGroupBase, decorators: [{ type: Inject, args: [NxTabGroupBase,] }, { type: Optional }, { type: Host }] }
    ]; };
    NxTabComponent.propDecorators = {
        templateLabel: [{ type: ContentChild, args: [NxTabLabelDirective, { read: TemplateRef, static: true },] }],
        _implicitContent: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],
        _explicitContent: [{ type: ContentChild, args: [NxTabContentDirective, { read: TemplateRef, static: true },] }],
        label: [{ type: Input }],
        disabled: [{ type: Input }]
    };
    return NxTabComponent;
}());
export { NxTabComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxTabComponent.prototype._label;
    /**
     * @type {?}
     * @private
     */
    NxTabComponent.prototype._disabled;
    /**
     * Emits whenever the internal state of the tab changes.
     * @type {?}
     */
    NxTabComponent.prototype._stateChanges;
    /**
     * @type {?}
     * @private
     */
    NxTabComponent.prototype._templateLabel;
    /**
     * Template inside the NxTab view that contains an `<ng-content>`.
     * @type {?}
     */
    NxTabComponent.prototype._implicitContent;
    /**
     * Template provided in the tab content that will be used if present, used to enable lazy-loading
     * @type {?}
     */
    NxTabComponent.prototype._explicitContent;
    /**
     * @type {?}
     * @private
     */
    NxTabComponent.prototype._headerViewRef;
    /**
     * @type {?}
     * @private
     */
    NxTabComponent.prototype._contentViewRef;
    /**
     * Whether the tab is currently active.
     * @type {?}
     */
    NxTabComponent.prototype.isActive;
    /**
     * @type {?}
     * @private
     */
    NxTabComponent.prototype._tabGroup;
}
//# sourceMappingURL=data:application/json;base64,