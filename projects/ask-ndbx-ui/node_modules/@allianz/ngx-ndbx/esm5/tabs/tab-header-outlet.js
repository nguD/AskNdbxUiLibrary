/**
 * @fileoverview added by tsickle
 * Generated from: tabs/tab-header-outlet.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EmbeddedViewRef, Input, ViewChild, ViewContainerRef } from '@angular/core';
import { NxTabGroupBase } from './tab-group-base';
/**
 * \@docs-private
 */
var NxTabHeaderOutletComponent = /** @class */ (function () {
    function NxTabHeaderOutletComponent(_tabGroup) {
        this._tabGroup = _tabGroup;
    }
    /**
     * @return {?}
     */
    NxTabHeaderOutletComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._appearanceSubscription = ((/** @type {?} */ (this._tabGroup)))._appearanceChange.subscribe((/**
         * @return {?}
         */
        function () {
            _this.detach();
        }));
        this.attach();
    };
    /**
     * @return {?}
     */
    NxTabHeaderOutletComponent.prototype.attach = /**
     * @return {?}
     */
    function () {
        this._outlet.insert(this.content);
    };
    /**
     * @return {?}
     */
    NxTabHeaderOutletComponent.prototype.detach = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var index = this._outlet.indexOf(this.content);
        if (index !== -1) {
            this._outlet.detach(index);
        }
    };
    /**
     * @return {?}
     */
    NxTabHeaderOutletComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._appearanceSubscription.unsubscribe();
    };
    NxTabHeaderOutletComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-tab-header-outlet',
                    template: '<ng-container #outlet></ng-container>'
                }] }
    ];
    /** @nocollapse */
    NxTabHeaderOutletComponent.ctorParameters = function () { return [
        { type: NxTabGroupBase }
    ]; };
    NxTabHeaderOutletComponent.propDecorators = {
        _outlet: [{ type: ViewChild, args: ['outlet', { static: true, read: ViewContainerRef },] }],
        content: [{ type: Input }]
    };
    return NxTabHeaderOutletComponent;
}());
export { NxTabHeaderOutletComponent };
if (false) {
    /** @type {?} */
    NxTabHeaderOutletComponent.prototype._outlet;
    /** @type {?} */
    NxTabHeaderOutletComponent.prototype.content;
    /**
     * @type {?}
     * @private
     */
    NxTabHeaderOutletComponent.prototype._appearanceSubscription;
    /**
     * @type {?}
     * @private
     */
    NxTabHeaderOutletComponent.prototype._tabGroup;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWhlYWRlci1vdXRsZXQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbInRhYnMvdGFiLWhlYWRlci1vdXRsZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQXFCLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdsSCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7Ozs7QUFJbEQ7SUFTRSxvQ0FBb0IsU0FBeUI7UUFBekIsY0FBUyxHQUFULFNBQVMsQ0FBZ0I7SUFBSSxDQUFDOzs7O0lBSWxELDZDQUFROzs7SUFBUjtRQUFBLGlCQUtDO1FBSkMsSUFBSSxDQUFDLHVCQUF1QixHQUFHLENBQUMsbUJBQUEsSUFBSSxDQUFDLFNBQVMsRUFBdUIsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLFNBQVM7OztRQUFDO1lBQ2pHLEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNoQixDQUFDLEVBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQixDQUFDOzs7O0lBRUQsMkNBQU07OztJQUFOO1FBQ0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Ozs7SUFFRCwyQ0FBTTs7O0lBQU47O1lBQ1EsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDaEQsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDNUI7SUFDSCxDQUFDOzs7O0lBRUQsZ0RBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdDLENBQUM7O2dCQWpDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjtvQkFDaEMsUUFBUSxFQUFFLHVDQUF1QztpQkFDbEQ7Ozs7Z0JBUFEsY0FBYzs7OzBCQVNwQixTQUFTLFNBQUMsUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUU7MEJBRTVELEtBQUs7O0lBMkJSLGlDQUFDO0NBQUEsQUFsQ0QsSUFrQ0M7U0E5QlksMEJBQTBCOzs7SUFDckMsNkNBQXlGOztJQUV6Riw2Q0FBdUM7Ozs7O0lBSXZDLDZEQUE4Qzs7Ozs7SUFGbEMsK0NBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbWJlZGRlZFZpZXdSZWYsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgVmlld0NoaWxkLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgTnhUYWJHcm91cEJhc2UgfSBmcm9tICcuL3RhYi1ncm91cC1iYXNlJztcbmltcG9ydCB7IE54VGFiR3JvdXBDb21wb25lbnQgfSBmcm9tICcuL3RhYi1ncm91cCc7XG5cbi8qKiBAZG9jcy1wcml2YXRlICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdueC10YWItaGVhZGVyLW91dGxldCcsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRhaW5lciAjb3V0bGV0PjwvbmctY29udGFpbmVyPidcbn0pXG5leHBvcnQgY2xhc3MgTnhUYWJIZWFkZXJPdXRsZXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBWaWV3Q2hpbGQoJ291dGxldCcsIHsgc3RhdGljOiB0cnVlLCByZWFkOiBWaWV3Q29udGFpbmVyUmVmIH0pIF9vdXRsZXQ6IFZpZXdDb250YWluZXJSZWY7XG5cbiAgQElucHV0KCkgY29udGVudDogRW1iZWRkZWRWaWV3UmVmPGFueT47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfdGFiR3JvdXA6IE54VGFiR3JvdXBCYXNlKSB7IH1cblxuICBwcml2YXRlIF9hcHBlYXJhbmNlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5fYXBwZWFyYW5jZVN1YnNjcmlwdGlvbiA9ICh0aGlzLl90YWJHcm91cCBhcyBOeFRhYkdyb3VwQ29tcG9uZW50KS5fYXBwZWFyYW5jZUNoYW5nZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5kZXRhY2goKTtcbiAgICB9KTtcbiAgICB0aGlzLmF0dGFjaCgpO1xuICB9XG5cbiAgYXR0YWNoKCkge1xuICAgIHRoaXMuX291dGxldC5pbnNlcnQodGhpcy5jb250ZW50KTtcbiAgfVxuXG4gIGRldGFjaCgpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX291dGxldC5pbmRleE9mKHRoaXMuY29udGVudCk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fb3V0bGV0LmRldGFjaChpbmRleCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fYXBwZWFyYW5jZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=