/**
 * @fileoverview added by tsickle
 * Generated from: radio-toggle/radio-toggle.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { mapClassNames } from '@allianz/ngx-ndbx/utils';
import { ChangeDetectionStrategy, Component, ContentChildren, ElementRef, Input, QueryList, Renderer2, ViewChild, ChangeDetectorRef, Optional, Self } from '@angular/core';
import { FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { Subject, merge } from 'rxjs';
import { filter, startWith, takeUntil } from 'rxjs/operators';
import { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';
import { NxRadioToggleButtonBaseComponent } from './radio-toggle-button-base.component';
/** @type {?} */
var nextId = 0;
/** @type {?} */
var MAPPING = {
    'negative': 'nx-radio-toggle--negative',
    'small': 'nx-radio-toggle--small',
};
var NxRadioToggleComponent = /** @class */ (function () {
    function NxRadioToggleComponent(renderer, _changeDetectorRef, ngControl, _errorStateMatcher, _parentForm, _parentFormGroup) {
        this.renderer = renderer;
        this._changeDetectorRef = _changeDetectorRef;
        this.ngControl = ngControl;
        this._errorStateMatcher = _errorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this._toggleId = (nextId++).toString();
        this._destroyed = new Subject();
        this._disabled = false;
        /**
         * \@docs-private
         */
        this.errorState = false;
        // emits to signal children to run change detection
        this._disableChange = new Subject();
        /**
         * \@docs-private
         */
        this.toggleButtons = new QueryList();
        this.onTouchedCallback = (/**
         * @return {?}
         */
        function () { });
        this.onChangeCallback = (/**
         * @param {?} option
         * @return {?}
         */
        function (option) { });
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    Object.defineProperty(NxRadioToggleComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /** Sets the component to the disabled state.*/
        set: /**
         * Sets the component to the disabled state.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var coerced = coerceBooleanProperty(value);
            if (this._disabled !== coerced) {
                this._disabled = coerced;
                this._disableChange.next();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxRadioToggleComponent.prototype, "name", {
        get: /**
         * @return {?}
         */
        function () {
            return this._name;
        },
        /** Sets the name used for accessibility. */
        set: /**
         * Sets the name used for accessibility.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._name !== value) {
                this._name = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxRadioToggleComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.subscribeToToggleButtonsChange();
    };
    /**
     * @return {?}
     */
    NxRadioToggleComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var changedOrDestroyed = merge(this.toggleButtons.changes, this._destroyed);
        merge.apply(void 0, tslib_1.__spread(this.toggleButtons.map((/**
         * @param {?} button
         * @return {?}
         */
        function (button) { return button.onChecked; })))).pipe(takeUntil(changedOrDestroyed))
            .subscribe((/**
         * @param {?} change
         * @return {?}
         */
        function (change) {
            _this._selection = change.value;
            _this.onChangeCallback(_this._selection);
        }));
    };
    /**
     * @return {?}
     */
    NxRadioToggleComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroyed.next();
        this._destroyed.complete();
        this._disableChange.complete();
    };
    /**
     * @return {?}
     */
    NxRadioToggleComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxRadioToggleComponent.prototype.subscribeToToggleButtonsChange = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        var _this = this;
        this.toggleButtons.changes
            .pipe(startWith(this.toggleButtons), filter((/**
         * @param {?} toggles
         * @return {?}
         */
        function (toggles) { return toggles.length > 0; })), takeUntil(this._destroyed)).subscribe((/**
         * @param {?} toggles
         * @return {?}
         */
        function (toggles) {
            toggles.forEach((/**
             * @param {?} toggle
             * @return {?}
             */
            function (toggle) {
                toggle.resetClasses();
                if (toggle.value === _this.selection) {
                    // We need to defer the selection for the edge case that the button with the value of this.selection
                    // didn't exist yet but was added afterwards to prevent changed after checked errors
                    setTimeout((/**
                     * @return {?}
                     */
                    function () { return toggle.select(); }));
                }
            }));
            toggles.first.setFirstButton();
            toggles.last.setLastButton();
        }));
    };
    /**
     * @param {?} onChangeCallback
     * @return {?}
     */
    NxRadioToggleComponent.prototype.registerOnChange = /**
     * @param {?} onChangeCallback
     * @return {?}
     */
    function (onChangeCallback) {
        this.onChangeCallback = onChangeCallback;
    };
    /**
     * @param {?} onTouchedCallback
     * @return {?}
     */
    NxRadioToggleComponent.prototype.registerOnTouched = /**
     * @param {?} onTouchedCallback
     * @return {?}
     */
    function (onTouchedCallback) {
        this.onTouchedCallback = onTouchedCallback;
    };
    /** Preselects the respective options. */
    /**
     * Preselects the respective options.
     * @param {?} value
     * @return {?}
     */
    NxRadioToggleComponent.prototype.writeValue = /**
     * Preselects the respective options.
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this._selection = value;
        /** @type {?} */
        var correspondingButton = this.toggleButtons.find((/**
         * @param {?} button
         * @return {?}
         */
        function (button) { return button.value === _this._selection; }));
        if (correspondingButton) {
            ((/** @type {?} */ (correspondingButton))).select();
        }
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    NxRadioToggleComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    Object.defineProperty(NxRadioToggleComponent.prototype, "id", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return "nx-radio-toggle-" + this._toggleId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxRadioToggleComponent.prototype, "style", {
        /** Sets the modifiers for the component. */
        set: /**
         * Sets the modifiers for the component.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            /** @type {?} */
            var modifierClasses = mapClassNames(value, [], MAPPING);
            modifierClasses.split(' ')
                .forEach((/**
             * @param {?} className
             * @return {?}
             */
            function (className) { return _this.renderer.addClass(_this.toggleContainer.nativeElement, className); }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxRadioToggleComponent.prototype, "selection", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selection;
        },
        /** @docs-private */
        set: /**
         * \@docs-private
         * @param {?} selection
         * @return {?}
         */
        function (selection) {
            this._selection = selection;
            this.onChangeCallback(selection);
        },
        enumerable: true,
        configurable: true
    });
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    NxRadioToggleComponent.prototype.change = /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.onChangeCallback(value);
        if (this.onTouchedCallback) {
            this.onTouchedCallback();
        }
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxRadioToggleComponent.prototype.updateErrorState = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var oldState = this.errorState;
        /** @type {?} */
        var parent = this._parentFormGroup || this._parentForm;
        /** @type {?} */
        var control = this.ngControl ? (/** @type {?} */ (this.ngControl.control)) : null;
        /** @type {?} */
        var newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
        }
    };
    NxRadioToggleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-radio-toggle',
                    template: "<div #toggleContainer class=\"nx-radio-toggle\" role=\"radiogroup\" [attr.aria-label]=\"name\">\n   <ng-content></ng-content>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block}.nx-radio-toggle{display:flex;height:100%}@media (max-width:703px){.nx-radio-toggle{flex-direction:column;text-align:center;width:100%;justify-content:center;align-items:center}}"]
                }] }
    ];
    /** @nocollapse */
    NxRadioToggleComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
        { type: ErrorStateMatcher },
        { type: NgForm, decorators: [{ type: Optional }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }] }
    ]; };
    NxRadioToggleComponent.propDecorators = {
        disabled: [{ type: Input, args: ['nxDisabled',] }],
        toggleContainer: [{ type: ViewChild, args: ['toggleContainer', { static: true },] }],
        name: [{ type: Input, args: ['nxName',] }],
        toggleButtons: [{ type: ContentChildren, args: [NxRadioToggleButtonBaseComponent,] }],
        writeValue: [{ type: Input, args: ['nxSelection',] }],
        style: [{ type: Input, args: ['nxStyle',] }]
    };
    return NxRadioToggleComponent;
}());
export { NxRadioToggleComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleComponent.prototype._toggleId;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleComponent.prototype._selection;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleComponent.prototype._destroyed;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleComponent.prototype._disabled;
    /**
     * \@docs-private
     * @type {?}
     */
    NxRadioToggleComponent.prototype.errorState;
    /** @type {?} */
    NxRadioToggleComponent.prototype._disableChange;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleComponent.prototype.toggleContainer;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleComponent.prototype._name;
    /**
     * \@docs-private
     * @type {?}
     */
    NxRadioToggleComponent.prototype.toggleButtons;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleComponent.prototype.onChangeCallback;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleComponent.prototype._changeDetectorRef;
    /**
     * \@docs-private
     * @type {?}
     */
    NxRadioToggleComponent.prototype.ngControl;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleComponent.prototype._errorStateMatcher;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleComponent.prototype._parentForm;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleComponent.prototype._parentFormGroup;
}
//# sourceMappingURL=data:application/json;base64,