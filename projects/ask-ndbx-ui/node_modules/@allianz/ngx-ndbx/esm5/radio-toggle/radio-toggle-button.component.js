/**
 * @fileoverview added by tsickle
 * Generated from: radio-toggle/radio-toggle-button.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, forwardRef, Inject, Input, Renderer2, HostListener } from '@angular/core';
import { NxRadioToggleButtonBaseComponent } from './radio-toggle-button-base.component';
import { NxRadioToggleComponent } from './radio-toggle.component';
/**
 * \@docs-private
 */
var /**
 * \@docs-private
 */
NxRadioToggleButtonChange = /** @class */ (function () {
    function NxRadioToggleButtonChange(source, value) {
        this.source = source;
        this.value = value;
    }
    return NxRadioToggleButtonChange;
}());
/**
 * \@docs-private
 */
export { NxRadioToggleButtonChange };
if (false) {
    /** @type {?} */
    NxRadioToggleButtonChange.prototype.source;
    /** @type {?} */
    NxRadioToggleButtonChange.prototype.value;
}
var NxRadioToggleButtonComponent = /** @class */ (function (_super) {
    tslib_1.__extends(NxRadioToggleButtonComponent, _super);
    function NxRadioToggleButtonComponent(radioToggle, 
    /** @docs-private */
    renderer, _changeDetectorRef, _toggleDispatcher) {
        var _this = _super.call(this, renderer) || this;
        _this.radioToggle = radioToggle;
        _this._changeDetectorRef = _changeDetectorRef;
        _this._toggleDispatcher = _toggleDispatcher;
        /**
         * \@docs-private
         */
        // emits when the button is checked to notify the group
        _this.onChecked = new Subject();
        _this._destroyed = new Subject();
        _this._disabled = false;
        _this._selected = false;
        /**
         * Unregister function for _expansionDispatcher.
         */
        _this._removeUniqueSelectionListener = (/**
         * @return {?}
         */
        function () { });
        _this._removeUniqueSelectionListener = _this._toggleDispatcher.listen((/**
         * @param {?} id
         * @param {?} radioToggleId
         * @return {?}
         */
        function (id, radioToggleId) {
            if (_this.radioToggle && _this.radioToggle.id === radioToggleId && _this.id !== id) {
                _this._selected = false;
                // need to let change detector know in case that the select() function was called on another button
                _this._changeDetectorRef.markForCheck();
            }
        }));
        _this.radioToggle._disableChange.pipe(takeUntil(_this._destroyed)).subscribe((/**
         * @return {?}
         */
        function () {
            _this._changeDetectorRef.markForCheck();
        }));
        return _this;
    }
    Object.defineProperty(NxRadioToggleButtonComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled || (this.radioToggle && this.radioToggle.disabled);
        },
        /** @docs-private */
        set: /**
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxRadioToggleButtonComponent.prototype, "selected", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selected;
        },
        /** Sets the checked state and notify siblings and the parent group about the change */
        // Only use this if you want the onChecked event to be fired, this will inform the parent about the change!
        // To select a button without firing the event use the select() function
        set: /**
         * Sets the checked state and notify siblings and the parent group about the change
         * @param {?} value
         * @return {?}
         */
        // Only use this if you want the onChecked event to be fired, this will inform the parent about the change!
        // To select a button without firing the event use the select() function
        function (value) {
            if (this._selected !== value) {
                this._selected = value;
                if (this._selected) {
                    this._notifySiblings();
                    this._emitCheckedEvent();
                    if (this.radioToggle !== null) {
                        this.radioToggle.change(this.value);
                    }
                }
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxRadioToggleButtonComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._removeUniqueSelectionListener();
        this._destroyed.next();
        this._destroyed.complete();
    };
    Object.defineProperty(NxRadioToggleButtonComponent.prototype, "toggleId", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this.radioToggle.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxRadioToggleButtonComponent.prototype, "id", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this.toggleButtonId;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    NxRadioToggleButtonComponent.prototype._notifySiblings = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var toggleId = this.radioToggle ? this.radioToggle.id : this.id;
        this._toggleDispatcher.notify(this.id, toggleId);
    };
    /**
     * @private
     * @return {?}
     */
    NxRadioToggleButtonComponent.prototype._emitCheckedEvent = /**
     * @private
     * @return {?}
     */
    function () {
        this.onChecked.next(new NxRadioToggleButtonChange(this, this.value));
    };
    // Does NOT emit the onChecked event. Useful when you need to set initial
    // state. Used by the parent to set checked states on initialization and during
    // writeValue() changes.
    /** @docs-private */
    // Does NOT emit the onChecked event. Useful when you need to set initial
    // state. Used by the parent to set checked states on initialization and during
    // writeValue() changes.
    /**
     * \@docs-private
     * @return {?}
     */
    NxRadioToggleButtonComponent.prototype.select = 
    // Does NOT emit the onChecked event. Useful when you need to set initial
    // state. Used by the parent to set checked states on initialization and during
    // writeValue() changes.
    /**
     * \@docs-private
     * @return {?}
     */
    function () {
        if (!this._selected) {
            this._selected = true;
            this._notifySiblings();
        }
        this._changeDetectorRef.markForCheck();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxRadioToggleButtonComponent.prototype.onKeyupSpace = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this._selected = false;
        this._notifySiblings();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxRadioToggleButtonComponent.prototype._controlInvalid = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        return !!(this.radioToggle && this.radioToggle.errorState);
    };
    NxRadioToggleButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-radio-toggle-button',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "<input [attr.id]=\"toggleButtonId\"\n    #toggleInput\n    [attr.name]=\"toggleId\"\n    [checked]=\"selected\"\n    class=\"nx-radio-toggle__input\"\n    type=\"radio\"\n    (click)=\"selected = true\"\n    [disabled]=\"disabled\">\n<div (click)=\"triggerInputClick($event)\" #toggleButtonLabelContainer class=\"nx-radio-toggle__label-container\">\n  <label [attr.for]=\"toggleButtonId\" class=\"nx-radio-toggle__label\">\n      <nx-icon class=\"nx-toggle-button__mobile-check\" name=\"check\" aria-hidden=\"true\"></nx-icon>\n      <ng-content></ng-content>\n  </label>\n</div>\n\n\n",
                    providers: [
                        {
                            provide: NxRadioToggleButtonBaseComponent, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NxRadioToggleButtonComponent; }))
                        }
                    ],
                    host: {
                        '[class.has-error]': '_controlInvalid() || null',
                        '[attr.aria-invalid]': '_controlInvalid() || null'
                    },
                    styles: [":host{display:flex;position:relative;flex-direction:row}:host.has-error .nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{border-color:#dc3149;border-color:var(--danger,#dc3149);background-color:#dc3149;background-color:var(--danger,#dc3149)}:host.has-error .nx-radio-toggle__label-container{border-color:#dc3149;border-color:var(--danger,#dc3149);color:#dc3149;color:var(--danger,#dc3149)}:host.has-error:hover .nx-radio-toggle__label-container{color:#fff}.nx-radio-toggle__input{opacity:0;position:absolute}.nx-radio-toggle__input:active+.nx-radio-toggle__label-container{background-color:#003781;background-color:var(--toggle-button-active-background-color,#003781);border-color:#003781;border-color:var(--toggle-button-active-border-color,#003781);color:#fff;color:var(--toggle-button-active-text-color,#fff)}.nx-radio-toggle__input:checked:disabled+.nx-radio-toggle__label-container{background-color:rgba(0,122,179,.4);background-color:var(--toggle-button-disabled-selected-background-color,rgba(0,122,179,.4));border-color:transparent;border-color:var(--toggle-button-disabled-selected-border-color,transparent);color:rgba(255,255,255,.4);color:var(--toggle-button-disabled-selected-text-color,rgba(255,255,255,.4))}.nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container{background-color:#fff;background-color:var(--toggle-button-disabled-background-color,#fff);border-color:rgba(0,122,179,.4);border-color:var(--toggle-button-disabled-border-color,rgba(0,122,179,.4));color:rgba(0,97,146,.4);color:var(--toggle-button-disabled-text-color,rgba(0,97,146,.4));cursor:not-allowed}.nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container .nx-radio-toggle__label{cursor:not-allowed}@media screen and (-ms-high-contrast:active){.nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container{border-color:GrayText;color:GrayText}}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:#007ab3;background-color:var(--toggle-button-selected-background-color,#007ab3);border-color:#007ab3;border-color:var(--toggle-button-selected-border-color,#007ab3);color:#fff;color:var(--toggle-button-selected-text-color,#fff);cursor:default}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-radio-toggle__label{cursor:default}.nx-toggle-button__mobile-check{display:none;font-size:24px;margin-right:8px;height:24px}:host-context(.nx-radio-toggle--small) .nx-radio-toggle__label-container{font-size:14px;font-size:var(--toggle-button-small-font-size,14px);line-height:16px;line-height:var(--toggle-button-small-line-height,16px);font-weight:600;font-weight:var(--toggle-button-small-font-weight,600);letter-spacing:1px;letter-spacing:var(--toggle-button-small-letter-spacing,1px);min-height:16px;padding:6px;text-transform:none}.nx-radio-toggle{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-radius:4px 0 0 4px;border-width:2px 0 2px 2px}@media (max-width:703px){:host{width:100%}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-toggle-button__mobile-check{display:inline-block}:host-context(.nx-radio-toggle--small) .nx-radio-toggle__label-container{font-size:16px;font-size:var(--toggle-button-large-font-size,16px);line-height:24px;line-height:var(--toggle-button-large-line-height,24px);font-weight:600;font-weight:var(--toggle-button-large-font-weight,600);letter-spacing:1px;letter-spacing:var(--toggle-button-large-letter-spacing,1px);padding:11px 31px}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--first{border-width:2px 2px 1px;border-radius:4px 4px 0 0}}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-top-right-radius:4px;border-bottom-right-radius:4px;border-width:2px}.nx-radio-toggle__label-container{font-size:16px;font-size:var(--toggle-button-large-font-size,16px);line-height:24px;line-height:var(--toggle-button-large-line-height,24px);font-weight:600;font-weight:var(--toggle-button-large-font-weight,600);letter-spacing:1px;letter-spacing:var(--toggle-button-large-letter-spacing,1px);padding:10px 30px;color:#006192;color:var(--toggle-button-unselected-text-color,#006192);background-color:transparent;background-color:var(--toggle-button-unselected-background-color,transparent);border-color:#007ab3;border-color:var(--toggle-button-unselected-border-color,#007ab3);border-style:solid;border-radius:0;border-width:2px 0 2px 2px;cursor:pointer;flex-grow:1;text-align:center;text-transform:uppercase;text-transform:var(--button-text-transform,uppercase);transition:background-color .2s,border-color .2s,color .2s;display:flex;align-items:center;height:100%;min-height:24px}@media (max-width:703px){.nx-radio-toggle__label-container.nx-radio-toggle__label-container--last{border-width:1px 2px 2px;border-radius:0 0 4px 4px}.nx-radio-toggle__label-container.nx-radio-toggle__label-container--last.nx-radio-toggle__label-container--first{border-radius:4px;border-width:2px}.nx-radio-toggle__label-container{border-width:1px 2px;justify-content:center;padding:11px 31px}}.nx-radio-toggle__label-container:hover{background-color:#006192;background-color:var(--toggle-button-hover-background-color,#006192);border-color:#006192;border-color:var(--toggle-button-hover-border-color,#006192);color:#fff;color:var(--toggle-button-hover-text-color,#fff)}@media screen and (-ms-high-contrast:active){.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:highlight;border-color:buttonText}.nx-radio-toggle__input:checked+.nx-radio-toggle__label-container .nx-radio-toggle__label{-ms-high-contrast-adjust:none;color:highlightText}.nx-radio-toggle__label-container{border-color:buttonText;background-color:buttonFace;color:buttonText}.nx-radio-toggle__label-container .nx-radio-toggle__label{-ms-high-contrast-adjust:none}}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:focus+.nx-radio-toggle__label-container{background-color:#d9d9d9;border-color:#d9d9d9;color:#007ab3}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:active+.nx-radio-toggle__label-container{background-color:#c2c2c2;border-color:#c2c2c2;color:#007ab3}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:disabled:checked+.nx-radio-toggle__label-container{background-color:rgba(255,255,255,.4);border-color:transparent;color:rgba(65,65,65,.4)}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:disabled+.nx-radio-toggle__label-container{background-color:transparent;border-color:rgba(255,255,255,.4);color:rgba(255,255,255,.4)}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__input:checked+.nx-radio-toggle__label-container{background-color:#fff;border-color:#fff;color:#006192}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__label-container{border-color:#fff;color:#fff}:host-context(.nx-radio-toggle--negative) .nx-radio-toggle__label-container:hover{background-color:#d9d9d9;border-color:#d9d9d9;color:#006192}.nx-radio-toggle__label{display:flex;align-items:center;cursor:pointer}:host-context([data-whatinput=keyboard]) .nx-radio-toggle__input:focus+.nx-radio-toggle__label-container{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6);z-index:1}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]) .nx-radio-toggle__input:focus+.nx-radio-toggle__label-container{box-shadow:0 0 0 2px background,0 0 0 6px windowText}}"]
                }] }
    ];
    /** @nocollapse */
    NxRadioToggleButtonComponent.ctorParameters = function () { return [
        { type: NxRadioToggleComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NxRadioToggleComponent; })),] }] },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: UniqueSelectionDispatcher }
    ]; };
    NxRadioToggleButtonComponent.propDecorators = {
        disabled: [{ type: Input, args: ['nxDisabled',] }],
        selected: [{ type: Input, args: ['nxSelected',] }],
        onKeyupSpace: [{ type: HostListener, args: ['keyup.space',] }]
    };
    return NxRadioToggleButtonComponent;
}(NxRadioToggleButtonBaseComponent));
export { NxRadioToggleButtonComponent };
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxRadioToggleButtonComponent.prototype.onChecked;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._destroyed;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._selected;
    /**
     * Unregister function for _expansionDispatcher.
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._removeUniqueSelectionListener;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype.radioToggle;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxRadioToggleButtonComponent.prototype._toggleDispatcher;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tdG9nZ2xlLWJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbInJhZGlvLXRvZ2dsZS9yYWRpby10b2dnbGUtYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFDLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5QixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRSxPQUFPLEVBQ0wsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFDaEYsWUFBWSxFQUN4QixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN4RixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7OztBQUdsRTs7OztJQUNFLG1DQUNTLE1BQW9DLEVBQ3BDLEtBQVU7UUFEVixXQUFNLEdBQU4sTUFBTSxDQUE4QjtRQUNwQyxVQUFLLEdBQUwsS0FBSyxDQUFLO0lBQ2hCLENBQUM7SUFDTixnQ0FBQztBQUFELENBQUMsQUFMRCxJQUtDOzs7Ozs7O0lBSEcsMkNBQTJDOztJQUMzQywwQ0FBaUI7O0FBSXJCO0lBZWtELHdEQUFnQztJQThDaEYsc0NBQzRELFdBQW1DO0lBQzdGLG9CQUFvQjtJQUNwQixRQUFtQixFQUNYLGtCQUFxQyxFQUNyQyxpQkFBNEM7UUFMdEQsWUFNRSxrQkFBTSxRQUFRLENBQUMsU0FhaEI7UUFsQjJELGlCQUFXLEdBQVgsV0FBVyxDQUF3QjtRQUdyRix3QkFBa0IsR0FBbEIs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Q2pELFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsV0FBVyxFQUFFLFVBQVU7Ozs0QkFBQyxjQUFNLE9BQUEsNEJBQTRCLEVBQTVCLENBQTRCLEVBQUM7eUJBQ3ZHO3FCQUNGO29CQUNELElBQUksRUFBRTt3QkFDSixtQkFBbUIsRUFBRSwyQkFBMkI7d0JBQ2hELHFCQUFxQixFQUFFLDJCQUEyQjtxQkFDbkQ7O2lCQUNGOzs7O2dCQXhCUSxzQkFBc0IsdUJBd0UxQixNQUFNLFNBQUMsVUFBVTs7O3dCQUFDLGNBQU0sT0FBQSxzQkFBc0IsRUFBdEIsQ0FBc0IsRUFBQztnQkE3RWdDLFNBQVM7Z0JBQWxFLGlCQUFpQjtnQkFGbkMseUJBQXlCOzs7MkJBMkMvQixLQUFLLFNBQUMsWUFBWTsyQkFZbEIsS0FBSyxTQUFDLFlBQVk7K0JBa0ZsQixZQUFZLFNBQUMsYUFBYTs7SUFVN0IsbUNBQUM7Q0FBQSxBQWxJRCxDQWVrRCxnQ0FBZ0MsR0FtSGpGO1NBbkhZLDRCQUE0Qjs7Ozs7O0lBSXZDLGlEQUE4RDs7Ozs7SUFFOUQsa0RBQWtEOzs7OztJQUNsRCxpREFBbUM7Ozs7O0lBQ25DLGlEQUFtQzs7Ozs7O0lBb0NuQyxzRUFBK0Q7Ozs7O0lBRzdELG1EQUE2Rjs7Ozs7SUFHN0YsMERBQTZDOzs7OztJQUM3Qyx5REFBb0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1N1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQgeyBVbmlxdWVTZWxlY3Rpb25EaXNwYXRjaGVyIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvbGxlY3Rpb25zJztcbmltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbmplY3QsIElucHV0LCBSZW5kZXJlcjIsXG4gIE9uRGVzdHJveSwgSG9zdExpc3RlbmVyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOeFJhZGlvVG9nZ2xlQnV0dG9uQmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcmFkaW8tdG9nZ2xlLWJ1dHRvbi1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOeFJhZGlvVG9nZ2xlQ29tcG9uZW50IH0gZnJvbSAnLi9yYWRpby10b2dnbGUuY29tcG9uZW50JztcblxuLyoqIEBkb2NzLXByaXZhdGUgKi9cbmV4cG9ydCBjbGFzcyBOeFJhZGlvVG9nZ2xlQnV0dG9uQ2hhbmdlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHNvdXJjZTogTnhSYWRpb1RvZ2dsZUJ1dHRvbkNvbXBvbmVudCxcbiAgICBwdWJsaWMgdmFsdWU6IGFueVxuICApIHt9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LXJhZGlvLXRvZ2dsZS1idXR0b24nLFxuICBzdHlsZVVybHM6IFsncmFkaW8tdG9nZ2xlLWJ1dHRvbi5jb21wb25lbnQuc2NzcyddLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGVVcmw6ICdyYWRpby10b2dnbGUtYnV0dG9uLmNvbXBvbmVudC5odG1sJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTnhSYWRpb1RvZ2dsZUJ1dHRvbkJhc2VDb21wb25lbnQsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE54UmFkaW9Ub2dnbGVCdXR0b25Db21wb25lbnQpXG4gICAgfVxuICBdLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5oYXMtZXJyb3JdJzogJ19jb250cm9sSW52YWxpZCgpIHx8IG51bGwnLFxuICAgICdbYXR0ci5hcmlhLWludmFsaWRdJzogJ19jb250cm9sSW52YWxpZCgpIHx8IG51bGwnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnhSYWRpb1RvZ2dsZUJ1dHRvbkNvbXBvbmVudCBleHRlbmRzIE54UmFkaW9Ub2dnbGVCdXR0b25CYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICAvLyBlbWl0cyB3aGVuIHRoZSBidXR0b24gaXMgY2hlY2tlZCB0byBub3RpZnkgdGhlIGdyb3VwXG4gIHJlYWRvbmx5IG9uQ2hlY2tlZCA9IG5ldyBTdWJqZWN0PE54UmFkaW9Ub2dnbGVCdXR0b25DaGFuZ2U+KCk7XG5cbiAgcHJpdmF0ZSBfZGVzdHJveWVkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3QoKTtcbiAgcHJpdmF0ZSBfZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfc2VsZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBASW5wdXQoJ254RGlzYWJsZWQnKVxuICBzZXQgZGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kaXNhYmxlZCA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cbiAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZCB8fCAodGhpcy5yYWRpb1RvZ2dsZSAmJiB0aGlzLnJhZGlvVG9nZ2xlLmRpc2FibGVkKTtcbiAgfVxuXG4gIC8qKiBTZXRzIHRoZSBjaGVja2VkIHN0YXRlIGFuZCBub3RpZnkgc2libGluZ3MgYW5kIHRoZSBwYXJlbnQgZ3JvdXAgYWJvdXQgdGhlIGNoYW5nZSAqL1xuICAvLyBPbmx5IHVzZSB0aGlzIGlmIHlvdSB3YW50IHRoZSBvbkNoZWNrZWQgZXZlbnQgdG8gYmUgZmlyZWQsIHRoaXMgd2lsbCBpbmZvcm0gdGhlIHBhcmVudCBhYm91dCB0aGUgY2hhbmdlIVxuICAvLyBUbyBzZWxlY3QgYSBidXR0b24gd2l0aG91dCBmaXJpbmcgdGhlIGV2ZW50IHVzZSB0aGUgc2VsZWN0KCkgZnVuY3Rpb25cbiAgQElucHV0KCdueFNlbGVjdGVkJylcbiAgc2V0IHNlbGVjdGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgaWYgKHRoaXMuX3NlbGVjdGVkICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fc2VsZWN0ZWQgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLl9zZWxlY3RlZCkge1xuICAgICAgICB0aGlzLl9ub3RpZnlTaWJsaW5ncygpO1xuICAgICAgICB0aGlzLl9lbWl0Q2hlY2tlZEV2ZW50KCk7XG5cbiAgICAgICAgaWYgKHRoaXMucmFkaW9Ub2dnbGUgIT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnJhZGlvVG9nZ2xlLmNoYW5nZSh0aGlzLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cbiAgZ2V0IHNlbGVjdGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZDtcbiAgfVxuXG4gIC8qKiBVbnJlZ2lzdGVyIGZ1bmN0aW9uIGZvciBfZXhwYW5zaW9uRGlzcGF0Y2hlci4gKi9cbiAgcHJpdmF0ZSBfcmVtb3ZlVW5pcXVlU2VsZWN0aW9uTGlzdGVuZXI6ICgpID0+IHZvaWQgPSAoKSA9PiB7IH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE54UmFkaW9Ub2dnbGVDb21wb25lbnQpKSBwcml2YXRlIHJhZGlvVG9nZ2xlOiBOeFJhZGlvVG9nZ2xlQ29tcG9uZW50LFxuICAgIC8qKiBAZG9jcy1wcml2YXRlICovXG4gICAgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIF9jaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgcHJpdmF0ZSBfdG9nZ2xlRGlzcGF0Y2hlcjogVW5pcXVlU2VsZWN0aW9uRGlzcGF0Y2hlcikge1xuICAgIHN1cGVyKHJlbmRlcmVyKTtcblxuICAgIHRoaXMuX3JlbW92ZVVuaXF1ZVNlbGVjdGlvbkxpc3RlbmVyID0gdGhpcy5fdG9nZ2xlRGlzcGF0Y2hlci5saXN0ZW4oKGlkOiBzdHJpbmcsIHJhZGlvVG9nZ2xlSWQ6IHN0cmluZykgPT4ge1xuICAgICAgaWYgKHRoaXMucmFkaW9Ub2dnbGUgJiYgdGhpcy5yYWRpb1RvZ2dsZS5pZCA9PT0gcmFkaW9Ub2dnbGVJZCAmJiB0aGlzLmlkICE9PSBpZCkge1xuICAgICAgICB0aGlzLl9zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAvLyBuZWVkIHRvIGxldCBjaGFuZ2UgZGV0ZWN0b3Iga25vdyBpbiBjYXNlIHRoYXQgdGhlIHNlbGVjdCgpIGZ1bmN0aW9uIHdhcyBjYWxsZWQgb24gYW5vdGhlciBidXR0b25cbiAgICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnJhZGlvVG9nZ2xlLl9kaXNhYmxlQ2hhbmdlLnBpcGUodGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3llZCkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX3JlbW92ZVVuaXF1ZVNlbGVjdGlvbkxpc3RlbmVyKCk7XG4gICAgdGhpcy5fZGVzdHJveWVkLm5leHQoKTtcbiAgICB0aGlzLl9kZXN0cm95ZWQuY29tcGxldGUoKTtcbiAgfVxuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIGdldCB0b2dnbGVJZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnJhZGlvVG9nZ2xlLmlkO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgZ2V0IGlkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudG9nZ2xlQnV0dG9uSWQ7XG4gIH1cblxuICBwcml2YXRlIF9ub3RpZnlTaWJsaW5ncygpIHtcbiAgICBjb25zdCB0b2dnbGVJZCA9IHRoaXMucmFkaW9Ub2dnbGUgPyB0aGlzLnJhZGlvVG9nZ2xlLmlkIDogdGhpcy5pZDtcbiAgICB0aGlzLl90b2dnbGVEaXNwYXRjaGVyLm5vdGlmeSh0aGlzLmlkLCB0b2dnbGVJZCk7XG4gIH1cblxuICBwcml2YXRlIF9lbWl0Q2hlY2tlZEV2ZW50KCkge1xuICAgIHRoaXMub25DaGVja2VkLm5leHQobmV3IE54UmFkaW9Ub2dnbGVCdXR0b25DaGFuZ2UodGhpcywgdGhpcy52YWx1ZSkpO1xuICB9XG5cbiAgLy8gRG9lcyBOT1QgZW1pdCB0aGUgb25DaGVja2VkIGV2ZW50LiBVc2VmdWwgd2hlbiB5b3UgbmVlZCB0byBzZXQgaW5pdGlhbFxuICAvLyBzdGF0ZS4gVXNlZCBieSB0aGUgcGFyZW50IHRvIHNldCBjaGVja2VkIHN0YXRlcyBvbiBpbml0aWFsaXphdGlvbiBhbmQgZHVyaW5nXG4gIC8vIHdyaXRlVmFsdWUoKSBjaGFuZ2VzLlxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBzZWxlY3QoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl9zZWxlY3RlZCkge1xuICAgICAgdGhpcy5fc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5fbm90aWZ5U2libGluZ3MoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBASG9zdExpc3RlbmVyKCdrZXl1cC5zcGFjZScpXG4gIG9uS2V5dXBTcGFjZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9zZWxlY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMuX25vdGlmeVNpYmxpbmdzKCk7XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBfY29udHJvbEludmFsaWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhKHRoaXMucmFkaW9Ub2dnbGUgJiYgdGhpcy5yYWRpb1RvZ2dsZS5lcnJvclN0YXRlKTtcbiAgfVxufVxuIl19