/**
 * @fileoverview added by tsickle
 * Generated from: message/message-toast/message-toast.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, NgZone, ChangeDetectorRef } from '@angular/core';
import { messageToastAnimations } from './message-toast-animations';
import { BasePortalOutlet, CdkPortalOutlet } from '@angular/cdk/portal';
import { Subject } from 'rxjs';
import { NxMessageToastConfig, NxMessageToastData } from './message-toast-config';
import { take } from 'rxjs/operators';
/** @type {?} */
var ICONS = {
    info: 'info-circle',
    success: 'check-circle',
};
/**
 * Internal component that wraps user-provided message toastcontent.
 * \@docs-private
 */
var NxMessageToastComponent = /** @class */ (function (_super) {
    tslib_1.__extends(NxMessageToastComponent, _super);
    function NxMessageToastComponent(_ngZone, _changeDetectorRef, config, data) {
        var _this = _super.call(this) || this;
        _this._ngZone = _ngZone;
        _this._changeDetectorRef = _changeDetectorRef;
        _this.config = config;
        _this.data = data;
        /**
         * Whether the component has been destroyed.
         */
        _this._destroyed = false;
        /**
         * Subject for notifying that the message toasthas exited from view.
         */
        _this._onExit = new Subject();
        /**
         * Subject for notifying that the message toasthas finished entering the view.
         */
        _this._onEnter = new Subject();
        /**
         * The state of the message toastanimations.
         */
        _this._animationState = 'void';
        _this._context = _this.config.context;
        _this._setAriaLabels();
        return _this;
    }
    /** Attach a component portal as content to this message toastcontainer. */
    /**
     * Attach a component portal as content to this message toastcontainer.
     * @template T
     * @param {?} portal
     * @return {?}
     */
    NxMessageToastComponent.prototype.attachComponentPortal = /**
     * Attach a component portal as content to this message toastcontainer.
     * @template T
     * @param {?} portal
     * @return {?}
     */
    function (portal) {
        this._assertNotAttached();
        return this._portalOutlet.attachComponentPortal(portal);
    };
    /** Attach a template portal as content to this message toastcontainer. */
    /**
     * Attach a template portal as content to this message toastcontainer.
     * @template C
     * @param {?} portal
     * @return {?}
     */
    NxMessageToastComponent.prototype.attachTemplatePortal = /**
     * Attach a template portal as content to this message toastcontainer.
     * @template C
     * @param {?} portal
     * @return {?}
     */
    function (portal) {
        this._assertNotAttached();
        return this._portalOutlet.attachTemplatePortal(portal);
    };
    /** Handle end of animations, updating the state of the notification. */
    /**
     * Handle end of animations, updating the state of the notification.
     * @param {?} event
     * @return {?}
     */
    NxMessageToastComponent.prototype.onAnimationEnd = /**
     * Handle end of animations, updating the state of the notification.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var fromState = event.fromState, toState = event.toState;
        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {
            this._completeExit();
        }
        if (toState === 'visible') {
            // Note: we shouldn't use `this` inside the zone callback,
            // because it can cause a memory leak.
            /** @type {?} */
            var onEnter_1 = this._onEnter;
            this._ngZone.run((/**
             * @return {?}
             */
            function () {
                onEnter_1.next();
                onEnter_1.complete();
            }));
        }
    };
    /** Begin animation of message toastentrance into view. */
    /**
     * Begin animation of message toastentrance into view.
     * @return {?}
     */
    NxMessageToastComponent.prototype.enter = /**
     * Begin animation of message toastentrance into view.
     * @return {?}
     */
    function () {
        if (!this._destroyed) {
            this._animationState = 'visible';
            this._changeDetectorRef.detectChanges();
        }
    };
    /** Begin animation of the message toastexiting from view. */
    /**
     * Begin animation of the message toastexiting from view.
     * @return {?}
     */
    NxMessageToastComponent.prototype.exit = /**
     * Begin animation of the message toastexiting from view.
     * @return {?}
     */
    function () {
        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case
        // where multiple notifications are opened in quick succession (e.g. two consecutive calls to
        // `NxMessageToastService.open`).
        this._animationState = 'hidden';
    };
    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */
    /**
     * Makes sure the exit callbacks have been invoked when the element is destroyed.
     * @return {?}
     */
    NxMessageToastComponent.prototype.ngOnDestroy = /**
     * Makes sure the exit callbacks have been invoked when the element is destroyed.
     * @return {?}
     */
    function () {
        this._destroyed = true;
        this._completeExit();
    };
    /**
     * Waits for the zone to settle before removing the element. Helps prevent
     * errors where we end up removing an element which is in the middle of an animation.
     */
    /**
     * Waits for the zone to settle before removing the element. Helps prevent
     * errors where we end up removing an element which is in the middle of an animation.
     * @private
     * @return {?}
     */
    NxMessageToastComponent.prototype._completeExit = /**
     * Waits for the zone to settle before removing the element. Helps prevent
     * errors where we end up removing an element which is in the middle of an animation.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe((/**
         * @return {?}
         */
        function () {
            _this._onExit.next();
            _this._onExit.complete();
        }));
    };
    /** Asserts that no content is already attached to the container. */
    /**
     * Asserts that no content is already attached to the container.
     * @private
     * @return {?}
     */
    NxMessageToastComponent.prototype._assertNotAttached = /**
     * Asserts that no content is already attached to the container.
     * @private
     * @return {?}
     */
    function () {
        if (this._portalOutlet.hasAttached()) {
            throw Error('Attempting to attach message toastcontent after content is already attached');
        }
    };
    /**
     * @return {?}
     */
    NxMessageToastComponent.prototype._getIconName = /**
     * @return {?}
     */
    function () {
        return this._context === 'success' ? ICONS.success : ICONS.info;
    };
    /**
     * @return {?}
     */
    NxMessageToastComponent.prototype._setAriaLabels = /**
     * @return {?}
     */
    function () {
        // Based on the ARIA spec, `alert` and `status` roles have an
        // implicit `assertive` and `polite` politeness respectively.
        if (this.config.politeness === 'assertive' && !this.config.announcementMessage) {
            this._role = 'alert';
        }
        else if (this.config.politeness === 'off') {
            this._role = null;
        }
        else {
            this._role = 'status';
        }
    };
    NxMessageToastComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-message-toast',
                    template: "<nx-icon class=\"nx-message__icon\" [name]=\"_getIconName()\" size=\"s\">\n</nx-icon>\n\n<div class=\"nx-message__content-wrapper\">\n    <!-- Used when opening from a template -->\n    <ng-template cdkPortalOutlet></ng-template>\n    <!-- Used when opening only with custom text-->\n    <ng-container *ngIf=\"data\">{{data.data}}</ng-container>\n</div>\n",
                    host: {
                        '[attr.role]': '_role',
                        '[class.context-info]': '_context === "info"',
                        '[class.context-success]': '_context === "success"',
                        '[@state]': '_animationState',
                        '(@state.done)': 'onAnimationEnd($event)'
                    },
                    animations: [messageToastAnimations.toastState],
                    styles: [":host{font-size:16px;font-size:var(--message-font-size,16px);line-height:24px;line-height:var(--message-line-height,24px);font-weight:400;font-weight:var(--message-font-weight,400);letter-spacing:0;letter-spacing:var(--message-letter-spacing,0);color:#414141;color:var(--message-text-color,#414141);border-radius:4px;border-radius:var(--message-border-radius,4px);width:100%;display:flex;align-items:flex-start;text-align:left;position:relative;border:1px solid;padding:23px 23px 23px 63px;margin:12px 0;box-shadow:0 2px 4px rgba(65,65,65,.5);box-shadow:var(--message-box-shadow,0 2px 4px rgba(65,65,65,.5));max-width:352px}@media (max-width:703px){:host{padding:23px 23px 23px 63px;display:block}}:host(.context-info){border-color:#496ebd;border-color:var(--message-info-border-color,#496ebd);background-color:#ecf0f8;background-color:var(--message-info-background-color,#ecf0f8)}:host(.context-info) .nx-message__icon{color:#496ebd;color:var(--message-info-icon-color,#496ebd)}:host(.context-success){border-color:#1e8927;border-color:var(--message-success-border-color,#1e8927);background-color:#e8f3e9;background-color:var(--message-success-background-color,#e8f3e9)}:host(.context-success) .nx-message__icon{color:#1e8927;color:var(--message-success-icon-color,#1e8927)}@media screen and (-ms-high-contrast:active){:host(.context-info) .nx-message__icon,:host(.context-success) .nx-message__icon{color:windowText}}.nx-message__icon{position:absolute;top:23px;left:23px}"]
                }] }
    ];
    /** @nocollapse */
    NxMessageToastComponent.ctorParameters = function () { return [
        { type: NgZone },
        { type: ChangeDetectorRef },
        { type: NxMessageToastConfig },
        { type: NxMessageToastData }
    ]; };
    NxMessageToastComponent.propDecorators = {
        _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]
    };
    return NxMessageToastComponent;
}(BasePortalOutlet));
export { NxMessageToastComponent };
if (false) {
    /**
     * Whether the component has been destroyed.
     * @type {?}
     * @private
     */
    NxMessageToastComponent.prototype._destroyed;
    /**
     * The portal outlet inside of this container into which the message toastcontent will be loaded.
     * @type {?}
     */
    NxMessageToastComponent.prototype._portalOutlet;
    /**
     * Subject for notifying that the message toasthas exited from view.
     * @type {?}
     */
    NxMessageToastComponent.prototype._onExit;
    /**
     * Subject for notifying that the message toasthas finished entering the view.
     * @type {?}
     */
    NxMessageToastComponent.prototype._onEnter;
    /**
     * The state of the message toastanimations.
     * @type {?}
     */
    NxMessageToastComponent.prototype._animationState;
    /**
     * ARIA role for the message toastcontainer.
     * @type {?}
     */
    NxMessageToastComponent.prototype._role;
    /** @type {?} */
    NxMessageToastComponent.prototype._context;
    /**
     * @type {?}
     * @private
     */
    NxMessageToastComponent.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    NxMessageToastComponent.prototype._changeDetectorRef;
    /**
     * The message toastconfiguration.
     * @type {?}
     */
    NxMessageToastComponent.prototype.config;
    /**
     * Injected data into the notifciation.
     * @type {?}
     */
    NxMessageToastComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,