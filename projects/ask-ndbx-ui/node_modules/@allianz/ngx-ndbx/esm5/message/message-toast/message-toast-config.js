/**
 * @fileoverview added by tsickle
 * Generated from: message/message-toast/message-toast-config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Configuration used when opening a message toast.
 */
var /**
 * Configuration used when opening a message toast.
 */
NxMessageToastConfig = /** @class */ (function () {
    function NxMessageToastConfig() {
        /**
         * The politeness level for the LiveAnnouncer announcement.
         *
         *  Default value: 'polite'.
         */
        this.politeness = 'polite';
        /**
         * Message to be announced by the LiveAnnouncer. When opening a toast message without a custom
         * component or template, the announcement message will default to the specified message.
         *
         * Default value: ''.
         */
        this.announcementMessage = '';
        /**
         * The length of time in milliseconds to wait before automatically dismissing the message toast.
         *
         * Default value: 3000.
         */
        this.duration = 3000;
        /**
         * Context of the message toast.
         *
         * Default value: 'info'.
         */
        this.context = 'info';
    }
    return NxMessageToastConfig;
}());
/**
 * Configuration used when opening a message toast.
 */
export { NxMessageToastConfig };
if (false) {
    /**
     * The politeness level for the LiveAnnouncer announcement.
     *
     *  Default value: 'polite'.
     * @type {?}
     */
    NxMessageToastConfig.prototype.politeness;
    /**
     * Message to be announced by the LiveAnnouncer. When opening a toast message without a custom
     * component or template, the announcement message will default to the specified message.
     *
     * Default value: ''.
     * @type {?}
     */
    NxMessageToastConfig.prototype.announcementMessage;
    /**
     * The length of time in milliseconds to wait before automatically dismissing the message toast.
     *
     * Default value: 3000.
     * @type {?}
     */
    NxMessageToastConfig.prototype.duration;
    /**
     * Context of the message toast.
     *
     * Default value: 'info'.
     * @type {?}
     */
    NxMessageToastConfig.prototype.context;
}
/**
 * \@docs-private
 * Needed so that the user text data can be injected in the message toastcomponent
 */
var /**
 * \@docs-private
 * Needed so that the user text data can be injected in the message toastcomponent
 */
NxMessageToastData = /** @class */ (function () {
    function NxMessageToastData(data) {
        this.data = data;
    }
    return NxMessageToastData;
}());
/**
 * \@docs-private
 * Needed so that the user text data can be injected in the message toastcomponent
 */
export { NxMessageToastData };
if (false) {
    /** @type {?} */
    NxMessageToastData.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS10b2FzdC1jb25maWcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbIm1lc3NhZ2UvbWVzc2FnZS10b2FzdC9tZXNzYWdlLXRvYXN0LWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQVNBOzs7O0lBQUE7Ozs7OztRQUtFLGVBQVUsR0FBd0IsUUFBUSxDQUFDOzs7Ozs7O1FBUTNDLHdCQUFtQixHQUFZLEVBQUUsQ0FBQzs7Ozs7O1FBTWxDLGFBQVEsR0FBWSxJQUFJLENBQUM7Ozs7OztRQUt6QixZQUFPLEdBQTJCLE1BQU0sQ0FBQztJQUMzQyxDQUFDO0lBQUQsMkJBQUM7QUFBRCxDQUFDLEFBekJELElBeUJDOzs7Ozs7Ozs7Ozs7SUFwQkMsMENBQTJDOzs7Ozs7OztJQVEzQyxtREFBa0M7Ozs7Ozs7SUFNbEMsd0NBQXlCOzs7Ozs7O0lBS3pCLHVDQUF5Qzs7Ozs7O0FBTzNDOzs7OztJQUNFLDRCQUFtQixJQUFZO1FBQVosU0FBSSxHQUFKLElBQUksQ0FBUTtJQUFJLENBQUM7SUFDdEMseUJBQUM7QUFBRCxDQUFDLEFBRkQsSUFFQzs7Ozs7Ozs7SUFEYSxrQ0FBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEFyaWFMaXZlUG9saXRlbmVzcyB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcblxuLyoqIFRoZSBjb250ZXh0dWFsIHR5cGUgb2YgYSBtZXNzYWdlLiAqL1xuZXhwb3J0IHR5cGUgTnhNZXNzYWdlVG9hc3RDb250ZXh0ID0gJ2luZm8nIHwgJ3N1Y2Nlc3MnO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gdXNlZCB3aGVuIG9wZW5pbmcgYSBtZXNzYWdlIHRvYXN0LlxuICovXG5leHBvcnQgY2xhc3MgTnhNZXNzYWdlVG9hc3RDb25maWcge1xuICAvKiogVGhlIHBvbGl0ZW5lc3MgbGV2ZWwgZm9yIHRoZSBMaXZlQW5ub3VuY2VyIGFubm91bmNlbWVudC5cbiAgICpcbiAgICogIERlZmF1bHQgdmFsdWU6ICdwb2xpdGUnLlxuICAgKi9cbiAgcG9saXRlbmVzcz86IEFyaWFMaXZlUG9saXRlbmVzcyA9ICdwb2xpdGUnO1xuXG4gIC8qKlxuICAgKiBNZXNzYWdlIHRvIGJlIGFubm91bmNlZCBieSB0aGUgTGl2ZUFubm91bmNlci4gV2hlbiBvcGVuaW5nIGEgdG9hc3QgbWVzc2FnZSB3aXRob3V0IGEgY3VzdG9tXG4gICAqIGNvbXBvbmVudCBvciB0ZW1wbGF0ZSwgdGhlIGFubm91bmNlbWVudCBtZXNzYWdlIHdpbGwgZGVmYXVsdCB0byB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UuXG4gICAqXG4gICAqIERlZmF1bHQgdmFsdWU6ICcnLlxuICAgKi9cbiAgYW5ub3VuY2VtZW50TWVzc2FnZT86IHN0cmluZyA9ICcnO1xuXG4gIC8qKiBUaGUgbGVuZ3RoIG9mIHRpbWUgaW4gbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIGF1dG9tYXRpY2FsbHkgZGlzbWlzc2luZyB0aGUgbWVzc2FnZSB0b2FzdC5cbiAgICpcbiAgICogRGVmYXVsdCB2YWx1ZTogMzAwMC5cbiAgICovXG4gIGR1cmF0aW9uPzogbnVtYmVyID0gMzAwMDtcblxuICAvKiogQ29udGV4dCBvZiB0aGUgbWVzc2FnZSB0b2FzdC5cbiAgICpcbiAgICogRGVmYXVsdCB2YWx1ZTogJ2luZm8nLiAqL1xuICBjb250ZXh0PzogTnhNZXNzYWdlVG9hc3RDb250ZXh0ID0gJ2luZm8nO1xufVxuXG4vKipcbiAqIEBkb2NzLXByaXZhdGVcbiAqIE5lZWRlZCBzbyB0aGF0IHRoZSB1c2VyIHRleHQgZGF0YSBjYW4gYmUgaW5qZWN0ZWQgaW4gdGhlIG1lc3NhZ2UgdG9hc3Rjb21wb25lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIE54TWVzc2FnZVRvYXN0RGF0YSB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBkYXRhOiBzdHJpbmcpIHsgfVxufVxuIl19