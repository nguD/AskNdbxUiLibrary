/**
 * @fileoverview added by tsickle
 * Generated from: message/message-toast/message-toast.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector, InjectionToken, Inject, Optional, SkipSelf } from '@angular/core';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';
import { NxMessageToastComponent } from './message-toast.component';
import { NxMessageToastConfig, NxMessageToastData } from './message-toast-config';
import { NxMessageToastRef } from './message-toast-ref';
import { LiveAnnouncer } from '@angular/cdk/a11y';
import { NxMessageModule } from '../message.module';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "@angular/cdk/a11y";
import * as i3 from "../message.module";
/**
 * Injection token that can be used to specify default message toast.
 * @type {?}
 */
export var NX_MESSAGE_TOAST_DEFAULT_CONFIG = new InjectionToken('NX_MESSAGE_TOAST_DEFAULT_CONFIG');
/**
 * A service for dispatching and displaying toast messages.
 */
var NxMessageToastService = /** @class */ (function () {
    function NxMessageToastService(_overlay, _injector, _live, _parentMessageToastService, _defaultConfig) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._live = _live;
        this._parentMessageToastService = _parentMessageToastService;
        this._defaultConfig = _defaultConfig;
        /**
         * Reference to the current message toast in the view *at this level* (in the Angular injector tree).
         * If there is a parent message toast service, all operations should delegate to that parent
         * via `_oldToastMessageRef`.
         */
        this._toastRefAtThisLevel = null;
    }
    Object.defineProperty(NxMessageToastService.prototype, "_oldToastMessageRef", {
        /** Reference to the currently opened message toastat *any* level. */
        get: /**
         * Reference to the currently opened message toastat *any* level.
         * @return {?}
         */
        function () {
            /** @type {?} */
            var parent = this._parentMessageToastService;
            return parent ? parent._oldToastMessageRef : this._toastRefAtThisLevel;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._parentMessageToastService) {
                this._parentMessageToastService._oldToastMessageRef = value;
            }
            else {
                this._toastRefAtThisLevel = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /** Creates and dispatches a message toastwith a custom text.
     *
     * @param text Text to be used for the message toast.
     * @param config Extra configuration for the message toast.
    */
    /**
     * Creates and dispatches a message toastwith a custom text.
     *
     * @param {?} text Text to be used for the message toast.
     * @param {?=} config Extra configuration for the message toast.
     * @return {?}
     */
    NxMessageToastService.prototype.open = /**
     * Creates and dispatches a message toastwith a custom text.
     *
     * @param {?} text Text to be used for the message toast.
     * @param {?=} config Extra configuration for the message toast.
     * @return {?}
     */
    function (text, config) {
        /** @type {?} */
        var currentConfig = tslib_1.__assign({}, new NxMessageToastConfig(), this._defaultConfig, config);
        /** @type {?} */
        var overlayRef = this._createOverlay(currentConfig);
        /** @type {?} */
        var injector = this._createInjector(currentConfig, new NxMessageToastData(text), this._injector);
        /** @type {?} */
        var componentPortal = new ComponentPortal(NxMessageToastComponent, undefined, injector);
        /** @type {?} */
        var componentRef = overlayRef.attach(componentPortal);
        /** @type {?} */
        var toastRef = new NxMessageToastRef(componentRef.instance, overlayRef);
        this._animateToast(toastRef, currentConfig);
        this._oldToastMessageRef = toastRef;
        return this._oldToastMessageRef;
    };
    /** Creates and dispatches a message toastwith a custom template for the content.
     *
     * @param template Template to be used for the message toast.
     * @param config Extra configuration for the message toast.
    */
    /**
     * Creates and dispatches a message toastwith a custom template for the content.
     *
     * @param {?} template Template to be used for the message toast.
     * @param {?=} config Extra configuration for the message toast.
     * @return {?}
     */
    NxMessageToastService.prototype.openFromTemplate = /**
     * Creates and dispatches a message toastwith a custom template for the content.
     *
     * @param {?} template Template to be used for the message toast.
     * @param {?=} config Extra configuration for the message toast.
     * @return {?}
     */
    function (template, config) {
        /** @type {?} */
        var currentConfig = tslib_1.__assign({}, new NxMessageToastConfig(), this._defaultConfig, config);
        /** @type {?} */
        var overlayRef = this._createOverlay(currentConfig);
        /** @type {?} */
        var container = this._attachToastComponent(overlayRef, currentConfig);
        /** @type {?} */
        var toastRef = new NxMessageToastRef(container, overlayRef);
        /** @type {?} */
        var portal = new TemplatePortal(template, (/** @type {?} */ (null)), toastRef);
        container.attachTemplatePortal(portal);
        this._animateToast(toastRef, currentConfig);
        this._oldToastMessageRef = toastRef;
        return this._oldToastMessageRef;
    };
    // Attaches the message toastcontainer component to the overlay.
    // Attaches the message toastcontainer component to the overlay.
    /**
     * @private
     * @param {?} overlayRef
     * @param {?} config
     * @return {?}
     */
    NxMessageToastService.prototype._attachToastComponent = 
    // Attaches the message toastcontainer component to the overlay.
    /**
     * @private
     * @param {?} overlayRef
     * @param {?} config
     * @return {?}
     */
    function (overlayRef, config) {
        /** @type {?} */
        var injector = this._createInjector(config, null, this._injector);
        /** @type {?} */
        var containerPortal = new ComponentPortal(NxMessageToastComponent, null, injector);
        /** @type {?} */
        var containerRef = overlayRef.attach(containerPortal);
        containerRef.instance.config = config;
        return containerRef.instance;
    };
    // Creates a new overlay and places it in the correct place.
    // Creates a new overlay and places it in the correct place.
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    NxMessageToastService.prototype._createOverlay = 
    // Creates a new overlay and places it in the correct place.
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var overlayConfig = new OverlayConfig();
        /** @type {?} */
        var positionStrategy = this._overlay.position().global();
        positionStrategy.bottom('0');
        positionStrategy.centerHorizontally();
        overlayConfig.positionStrategy = positionStrategy;
        return this._overlay.create(overlayConfig);
    };
    /** Animates the old message toastout and the new one in. */
    /**
     * Animates the old message toastout and the new one in.
     * @private
     * @param {?} toastRef
     * @param {?} config
     * @return {?}
     */
    NxMessageToastService.prototype._animateToast = /**
     * Animates the old message toastout and the new one in.
     * @private
     * @param {?} toastRef
     * @param {?} config
     * @return {?}
     */
    function (toastRef, config) {
        var _this = this;
        // When the message toastis dismissed, clear the reference to it.
        toastRef.afterDismissed().subscribe((/**
         * @return {?}
         */
        function () {
            // Clear the message toastref if it hasn't already been replaced by a newer message toast.
            if (_this._oldToastMessageRef === toastRef) {
                _this._oldToastMessageRef = null;
            }
            if (config.announcementMessage) {
                _this._live.clear();
            }
        }));
        if (this._oldToastMessageRef) {
            // If a message toastis opened, dismiss it and enter the
            // new message toastafter exit animation is complete.
            this._oldToastMessageRef.afterDismissed().subscribe((/**
             * @return {?}
             */
            function () {
                toastRef.toastInstance.enter();
            }));
            this._oldToastMessageRef.dismiss();
        }
        else {
            // If no message toastis in view, enter the message toast.
            toastRef.toastInstance.enter();
        }
        // If a message toastduration is provided, set up dismiss based on after the message toastis opened.
        if (config.duration && config.duration > 0) {
            toastRef.afterOpened().subscribe((/**
             * @return {?}
             */
            function () { return toastRef._dismissAfter((/** @type {?} */ (config.duration))); }));
        }
        if (config.announcementMessage) {
            this._live.announce(config.announcementMessage, config.politeness);
        }
    };
    /**
     * @private
     * @param {?} config
     * @param {?} data
     * @param {?} injector
     * @return {?}
     */
    NxMessageToastService.prototype._createInjector = /**
     * @private
     * @param {?} config
     * @param {?} data
     * @param {?} injector
     * @return {?}
     */
    function (config, data, injector) {
        /** @type {?} */
        var tokens = new WeakMap();
        tokens.set(NxMessageToastConfig, config);
        tokens.set(NxMessageToastData, data);
        return new PortalInjector(injector, tokens);
    };
    /**
     * Dismisses the currently visible message toast.
     */
    /**
     * Dismisses the currently visible message toast.
     * @return {?}
     */
    NxMessageToastService.prototype.dismiss = /**
     * Dismisses the currently visible message toast.
     * @return {?}
     */
    function () {
        if (this._oldToastMessageRef) {
            this._oldToastMessageRef.dismiss();
        }
    };
    /**
     * @return {?}
     */
    NxMessageToastService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._toastRefAtThisLevel) {
            this._toastRefAtThisLevel.dismiss();
        }
    };
    NxMessageToastService.decorators = [
        { type: Injectable, args: [{ providedIn: NxMessageModule },] }
    ];
    /** @nocollapse */
    NxMessageToastService.ctorParameters = function () { return [
        { type: Overlay },
        { type: Injector },
        { type: LiveAnnouncer },
        { type: NxMessageToastService, decorators: [{ type: Optional }, { type: SkipSelf }] },
        { type: NxMessageToastConfig, decorators: [{ type: Optional }, { type: Inject, args: [NX_MESSAGE_TOAST_DEFAULT_CONFIG,] }] }
    ]; };
    /** @nocollapse */ NxMessageToastService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NxMessageToastService_Factory() { return new NxMessageToastService(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(NxMessageToastService, 12), i0.ɵɵinject(NX_MESSAGE_TOAST_DEFAULT_CONFIG, 8)); }, token: NxMessageToastService, providedIn: i3.NxMessageModule });
    return NxMessageToastService;
}());
export { NxMessageToastService };
if (false) {
    /**
     * Reference to the current message toast in the view *at this level* (in the Angular injector tree).
     * If there is a parent message toast service, all operations should delegate to that parent
     * via `_oldToastMessageRef`.
     * @type {?}
     * @private
     */
    NxMessageToastService.prototype._toastRefAtThisLevel;
    /**
     * @type {?}
     * @private
     */
    NxMessageToastService.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    NxMessageToastService.prototype._injector;
    /**
     * @type {?}
     * @private
     */
    NxMessageToastService.prototype._live;
    /**
     * @type {?}
     * @private
     */
    NxMessageToastService.prototype._parentMessageToastService;
    /**
     * @type {?}
     * @private
     */
    NxMessageToastService.prototype._defaultConfig;
}
//# sourceMappingURL=data:application/json;base64,