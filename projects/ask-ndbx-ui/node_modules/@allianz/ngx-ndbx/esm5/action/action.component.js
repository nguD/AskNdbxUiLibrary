/**
 * @fileoverview added by tsickle
 * Generated from: action.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, ContentChild } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { NxActionIconDirective } from './action-icon.directive';
var NxActionComponent = /** @class */ (function () {
    function NxActionComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._selected = false;
        this._expandable = false;
        this._expanded = false;
    }
    Object.defineProperty(NxActionComponent.prototype, "selected", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selected;
        },
        /** Whether this action is selected or not.  */
        set: /**
         * Whether this action is selected or not.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selected = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxActionComponent.prototype, "expandable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._expandable;
        },
        /** Whether this action is expandable or not. Will add a caret icon. */
        set: /**
         * Whether this action is expandable or not. Will add a caret icon.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._expandable = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxActionComponent.prototype, "expanded", {
        get: /**
         * @return {?}
         */
        function () {
            return this._expanded;
        },
        /** Whether this action is expanded or not.
          Only works in combination with the `expandable` option set to `true`.
         */
        set: /**
         * Whether this action is expanded or not.
         * Only works in combination with the `expandable` option set to `true`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._expanded = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    NxActionComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: '[nxAction]',
                    template: "<div class=\"nx-action__wrapper\">\n  <ng-container *ngIf=\"expandable\">\n    <nx-icon class=\"nx-action__expand-icon\" name=\"chevron-right\"></nx-icon>\n  </ng-container>\n  <span class=\"nx-action-icon__container\" *ngIf=\"_iconChild\">\n    <ng-content select=\"[nxActionIcon]\"></ng-content>\n  </span>\n  <span class=\"nx-action__label\">\n    <ng-content></ng-content>\n  </span>\n</div>\n",
                    host: {
                        '[class.is-expanded]': 'expanded',
                        '[class.is-selected]': 'selected',
                        '[class.is-expandable]': 'expandable',
                        'class': 'nx-action'
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host(.nx-action){display:block;font-size:16px;font-size:var(--action-font-size,16px);line-height:24px;line-height:var(--action-line-height,24px);font-weight:400;font-weight:var(--action-font-weight,400);letter-spacing:0;letter-spacing:var(--action-letter-spacing,0);-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:0;box-shadow:none;border:none;margin:0;cursor:pointer;padding:8px 16px 8px 0;width:100%;text-decoration:none;color:#414141;color:var(--action-color,#414141);background-color:#f5f5f5;background-color:var(--action-background-color,#f5f5f5)}:host(.nx-action):hover{color:#414141;color:var(--action-hover-color,#414141);background-color:#ececec;background-color:var(--action-hover-background-color,#ececec)}:host(.nx-action).is-expanded{font-weight:700}:host(.nx-action).is-expanded .nx-action__expand-icon{transform:rotateZ(90deg)}:host(.nx-action).is-expandable .nx-action__wrapper::before{flex:0 1 32px;max-width:8px;min-width:4px}:host(.nx-action).is-selected{color:#fff;color:var(--action-selected-color,#fff);background-color:#007ab3;background-color:var(--action-selected-background-color,#007ab3);font-weight:700}:host(.nx-action)[nxTreeNodePadding] .nx-action__wrapper::before{flex-shrink:0}:host(.nx-action)::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]):focus{box-shadow:inset 0 0 0 4px #009de6,inset 0 0 0 6px #fff;box-shadow:var(--focus-inset-box-shadow,inset 0 0 0 4px #009de6,inset 0 0 0 6px #fff);border-radius:8px}.nx-action__expand-icon{display:flex;justify-content:center;transition:.2s;transform:rotateZ(0);margin-right:8px;flex:0 0 auto;font-size:16px;font-size:var(--action-expand-icon-size,16px)}.nx-action__wrapper{display:flex;align-items:center;position:relative;overflow:hidden}.nx-action__wrapper::before{content:'';display:block;flex:0 1 32px;min-width:16px;height:1em}.nx-action-icon__container{font-size:20px;font-size:var(--action-icon-size,20px);padding-right:16px;flex:0 0 auto;position:relative;justify-content:center;display:flex}::ng-deep .nx-action__icon{font-weight:400}::ng-deep .nx-action__icon.nx-icon--s{font-size:inherit}.nx-action__label{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;flex:1 1 50%;text-align:left}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]):focus{box-shadow:inset 0 0 0 4px windowText,inset 0 0 0 6px background}:host(.nx-action).is-selected,:host(.nx-action):hover{-ms-high-contrast-adjust:none;background-color:highlight;color:highlightText;font-weight:400}}"]
                }] }
    ];
    /** @nocollapse */
    NxActionComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxActionComponent.propDecorators = {
        _iconChild: [{ type: ContentChild, args: [NxActionIconDirective, { static: false },] }],
        selected: [{ type: Input }],
        expandable: [{ type: Input }],
        expanded: [{ type: Input }]
    };
    return NxActionComponent;
}());
export { NxActionComponent };
if (false) {
    /** @type {?} */
    NxActionComponent.prototype._iconChild;
    /**
     * @type {?}
     * @private
     */
    NxActionComponent.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    NxActionComponent.prototype._expandable;
    /**
     * @type {?}
     * @private
     */
    NxActionComponent.prototype._expanded;
    /**
     * @type {?}
     * @private
     */
    NxActionComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4L2FjdGlvbi8iLCJzb3VyY2VzIjpbImFjdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0csT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDOUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFaEU7SUFtREUsMkJBQW9CLGtCQUFxQztRQUFyQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1CO1FBMUJqRCxjQUFTLEdBQVksS0FBSyxDQUFDO1FBVzNCLGdCQUFXLEdBQVksS0FBSyxDQUFDO1FBYTdCLGNBQVMsR0FBWSxLQUFLLENBQUM7SUFFeUIsQ0FBQztJQWxDN0Qsc0JBQ0ksdUNBQVE7Ozs7UUFJWjtZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDO1FBUkQsK0NBQStDOzs7Ozs7UUFDL0MsVUFDYSxLQUFjO1lBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3pDLENBQUM7OztPQUFBO0lBT0Qsc0JBQ0kseUNBQVU7Ozs7UUFJZDtZQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUMxQixDQUFDO1FBUkQsdUVBQXVFOzs7Ozs7UUFDdkUsVUFDZSxLQUFjO1lBQzNCLElBQUksQ0FBQyxXQUFXLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3pDLENBQUM7OztPQUFBO0lBU0Qsc0JBQ0ksdUNBQVE7Ozs7UUFJWjtZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDO1FBVkQ7O1dBRUc7Ozs7Ozs7UUFDSCxVQUNhLEtBQWM7WUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDekMsQ0FBQzs7O09BQUE7O2dCQTdDRixTQUFTLFNBQUM7O29CQUVULFFBQVEsRUFBRSxZQUFZO29CQUN0Qix5WkFBb0M7b0JBRXBDLElBQUksRUFBRTt3QkFDSixxQkFBcUIsRUFBRSxVQUFVO3dCQUNqQyxxQkFBcUIsRUFBRSxVQUFVO3dCQUNqQyx1QkFBdUIsRUFBRSxZQUFZO3dCQUNyQyxPQUFPLEVBQUUsV0FBVztxQkFDckI7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O2lCQUNoRDs7OztnQkFoQm1ELGlCQUFpQjs7OzZCQWtCbEUsWUFBWSxTQUFDLHFCQUFxQixFQUFFLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBQzsyQkFHbkQsS0FBSzs2QkFXTCxLQUFLOzJCQWFMLEtBQUs7O0lBV1Isd0JBQUM7Q0FBQSxBQXBERCxJQW9EQztTQXZDWSxpQkFBaUI7OztJQUM1Qix1Q0FBd0Y7Ozs7O0lBV3hGLHNDQUFtQzs7Ozs7SUFXbkMsd0NBQXFDOzs7OztJQWFyQyxzQ0FBbUM7Ozs7O0lBRXZCLCtDQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29udGVudENoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgTnhBY3Rpb25JY29uRGlyZWN0aXZlIH0gZnJvbSAnLi9hY3Rpb24taWNvbi5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ1tueEFjdGlvbl0nLFxuICB0ZW1wbGF0ZVVybDogJ2FjdGlvbi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWydhY3Rpb24uY29tcG9uZW50LnNjc3MnXSxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MuaXMtZXhwYW5kZWRdJzogJ2V4cGFuZGVkJyxcbiAgICAnW2NsYXNzLmlzLXNlbGVjdGVkXSc6ICdzZWxlY3RlZCcsXG4gICAgJ1tjbGFzcy5pcy1leHBhbmRhYmxlXSc6ICdleHBhbmRhYmxlJyxcbiAgICAnY2xhc3MnOiAnbngtYWN0aW9uJ1xuICB9LFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgTnhBY3Rpb25Db21wb25lbnQge1xuICBAQ29udGVudENoaWxkKE54QWN0aW9uSWNvbkRpcmVjdGl2ZSwge3N0YXRpYzogZmFsc2V9KSBfaWNvbkNoaWxkOiBOeEFjdGlvbkljb25EaXJlY3RpdmU7XG5cbiAgLyoqIFdoZXRoZXIgdGhpcyBhY3Rpb24gaXMgc2VsZWN0ZWQgb3Igbm90LiAgKi9cbiAgQElucHV0KClcbiAgc2V0IHNlbGVjdGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2VsZWN0ZWQgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICB9XG4gIGdldCBzZWxlY3RlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWQ7XG4gIH1cbiAgcHJpdmF0ZSBfc2VsZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKiogV2hldGhlciB0aGlzIGFjdGlvbiBpcyBleHBhbmRhYmxlIG9yIG5vdC4gV2lsbCBhZGQgYSBjYXJldCBpY29uLiAqL1xuICBASW5wdXQoKVxuICBzZXQgZXhwYW5kYWJsZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2V4cGFuZGFibGUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICB9XG4gIGdldCBleHBhbmRhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLl9leHBhbmRhYmxlO1xuICB9XG4gIHByaXZhdGUgX2V4cGFuZGFibGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKiogV2hldGhlciB0aGlzIGFjdGlvbiBpcyBleHBhbmRlZCBvciBub3QuXG4gICAgT25seSB3b3JrcyBpbiBjb21iaW5hdGlvbiB3aXRoIHRoZSBgZXhwYW5kYWJsZWAgb3B0aW9uIHNldCB0byBgdHJ1ZWAuXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgZXhwYW5kZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9leHBhbmRlZCA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cbiAgZ2V0IGV4cGFuZGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9leHBhbmRlZDtcbiAgfVxuICBwcml2YXRlIF9leHBhbmRlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikge31cbn1cbiJdfQ==