/**
 * @fileoverview added by tsickle
 * Generated from: spinner/spinner.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input, ChangeDetectorRef } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
/** @type {?} */
var DEFAULT_SIZE = 'small';
var NxSpinnerComponent = /** @class */ (function () {
    function NxSpinnerComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._size = DEFAULT_SIZE;
        this._negative = false;
    }
    Object.defineProperty(NxSpinnerComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        /** Sets the size of the spinner. Default is 'small'. */
        set: /**
         * Sets the size of the spinner. Default is 'small'.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._size) {
                this._size = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSpinnerComponent.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Whether the spinner should use a negative styling. */
        set: /**
         * Whether the spinner should use a negative styling.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._negative) {
                this._negative = coerceBooleanProperty(value);
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    NxSpinnerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-spinner',
                    template: "<div class=\"nx-spinner__spin-block\">\n  <div class=\"nx-spinner__edge-left\"></div>\n  <div class=\"nx-spinner__edge-right\"></div>\n</div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.nx-spinner--small]': 'size === "small"',
                        '[class.nx-spinner--medium]': 'size === "medium"',
                        '[class.nx-spinner--large]': 'size === "large"',
                        '[class.nx-spinner--negative]': 'negative',
                        '[attr.role]': '"status"',
                        '[attr.aria-busy]': '"true"',
                        '[attr.aria-live]': '"assertive"',
                    },
                    styles: ["@-webkit-keyframes spin{0%{transform:rotate(45deg)}100%{transform:rotate(405deg)}}@keyframes spin{0%{transform:rotate(45deg)}100%{transform:rotate(405deg)}}:host{position:relative;display:block}:host(.nx-spinner--small){width:16px;height:16px}:host(.nx-spinner--medium){width:24px;height:24px}:host(.nx-spinner--large){width:40px;height:40px}.nx-spinner__spin-block{width:100%;height:100%;transform:rotate(45deg);border-style:solid;border-radius:50%;border-color:#007ab3 #ececec #ececec;border-color:var(--spinner-background-color,#ececec);border-top-color:var(--spinner-indicator-color,#007ab3);-webkit-animation-name:spin;animation-name:spin;-webkit-animation-duration:.8s;animation-duration:.8s;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-timing-function:linear;animation-timing-function:linear}:host(.nx-spinner--small) .nx-spinner__spin-block{border-width:calc(1.6px)}:host(.nx-spinner--medium) .nx-spinner__spin-block{border-width:calc(2.4px)}:host(.nx-spinner--large) .nx-spinner__spin-block{border-width:calc(4px)}.nx-spinner__edge-left,.nx-spinner__edge-right{width:12%;height:12%;border-radius:50%;background-color:#007ab3;background-color:var(--spinner-indicator-color,#007ab3);position:absolute;top:4%}.nx-spinner__edge-left{left:4%}.nx-spinner__edge-right{right:4%}:host(.nx-spinner--negative) .nx-spinner__spin-block{border-color:#fff rgba(250,247,239,.35) rgba(250,247,239,.35)}:host(.nx-spinner--negative) .nx-spinner__edge-left,:host(.nx-spinner--negative) .nx-spinner__edge-right{background-color:#fff}@media screen and (-ms-high-contrast:active){.nx-spinner__spin-block{border-color:window highlight highlight}}"]
                }] }
    ];
    /** @nocollapse */
    NxSpinnerComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxSpinnerComponent.propDecorators = {
        size: [{ type: Input, args: ['nxSize',] }],
        negative: [{ type: Input }]
    };
    return NxSpinnerComponent;
}());
export { NxSpinnerComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxSpinnerComponent.prototype._size;
    /**
     * @type {?}
     * @private
     */
    NxSpinnerComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxSpinnerComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbInNwaW5uZXIvc3Bpbm5lci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7SUFLeEQsWUFBWSxHQUFHLE9BQU87QUFFNUI7SUE0Q0UsNEJBQW9CLGtCQUFxQztRQUFyQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1CO1FBNUJqRCxVQUFLLEdBQWdCLFlBQVksQ0FBQztRQWNsQyxjQUFTLEdBQVksS0FBSyxDQUFDO0lBY3lCLENBQUM7SUF6QjdELHNCQUNJLG9DQUFJOzs7O1FBTVI7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQztRQVZELHdEQUF3RDs7Ozs7O1FBQ3hELFVBQ1MsS0FBa0I7WUFDekIsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7Z0JBQ25CLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQzthQUN4QztRQUNILENBQUM7OztPQUFBO0lBUUQsc0JBQ0ksd0NBQVE7Ozs7UUFNWjtZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDO1FBVkQseURBQXlEOzs7Ozs7UUFDekQsVUFDYSxLQUFjO1lBQ3pCLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxTQUFTLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzlDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQzthQUN4QztRQUNILENBQUM7OztPQUFBOztnQkF2Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxZQUFZO29CQUN0Qix5SkFBdUM7b0JBQ3ZDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUUvQyxJQUFJLEVBQUU7d0JBQ0osMkJBQTJCLEVBQUUsa0JBQWtCO3dCQUMvQyw0QkFBNEIsRUFBRSxtQkFBbUI7d0JBQ2pELDJCQUEyQixFQUFFLGtCQUFrQjt3QkFDL0MsOEJBQThCLEVBQUUsVUFBVTt3QkFDMUMsYUFBYSxFQUFFLFVBQVU7d0JBQ3pCLGtCQUFrQixFQUFFLFFBQVE7d0JBQzVCLGtCQUFrQixFQUFFLGFBQWE7cUJBQ2xDOztpQkFDRjs7OztnQkF0Qm1ELGlCQUFpQjs7O3VCQTJCbEUsS0FBSyxTQUFDLFFBQVE7MkJBY2QsS0FBSzs7SUFZUix5QkFBQztDQUFBLEFBN0NELElBNkNDO1NBOUJZLGtCQUFrQjs7Ozs7O0lBQzdCLG1DQUEwQzs7Ozs7SUFjMUMsdUNBQW1DOzs7OztJQWN2QixnREFBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5cbi8qKiBPcHRpb25zIGZvciBzaXppbmcgb2YgdGhlIHNwaW5uZXIuICovXG5leHBvcnQgdHlwZSBTcGlubmVyU2l6ZSA9ICdzbWFsbCcgfCAnbWVkaXVtJyB8ICdsYXJnZSc7XG5cbmNvbnN0IERFRkFVTFRfU0laRSA9ICdzbWFsbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LXNwaW5uZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vc3Bpbm5lci5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZVVybHM6IFsnLi9zcGlubmVyLmNvbXBvbmVudC5zY3NzJ10sXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLm54LXNwaW5uZXItLXNtYWxsXSc6ICdzaXplID09PSBcInNtYWxsXCInLFxuICAgICdbY2xhc3Mubngtc3Bpbm5lci0tbWVkaXVtXSc6ICdzaXplID09PSBcIm1lZGl1bVwiJyxcbiAgICAnW2NsYXNzLm54LXNwaW5uZXItLWxhcmdlXSc6ICdzaXplID09PSBcImxhcmdlXCInLFxuICAgICdbY2xhc3Mubngtc3Bpbm5lci0tbmVnYXRpdmVdJzogJ25lZ2F0aXZlJyxcbiAgICAnW2F0dHIucm9sZV0nOiAnXCJzdGF0dXNcIicsXG4gICAgJ1thdHRyLmFyaWEtYnVzeV0nOiAnXCJ0cnVlXCInLFxuICAgICdbYXR0ci5hcmlhLWxpdmVdJzogJ1wiYXNzZXJ0aXZlXCInLFxuICB9XG59KVxuZXhwb3J0IGNsYXNzIE54U3Bpbm5lckNvbXBvbmVudCB7XG4gIHByaXZhdGUgX3NpemU6IFNwaW5uZXJTaXplID0gREVGQVVMVF9TSVpFO1xuXG4gIC8qKiBTZXRzIHRoZSBzaXplIG9mIHRoZSBzcGlubmVyLiBEZWZhdWx0IGlzICdzbWFsbCcuICovXG4gIEBJbnB1dCgnbnhTaXplJylcbiAgc2V0IHNpemUodmFsdWU6IFNwaW5uZXJTaXplKSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLl9zaXplKSB7XG4gICAgICB0aGlzLl9zaXplID0gdmFsdWU7XG4gICAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cbiAgZ2V0IHNpemUoKTogU3Bpbm5lclNpemUge1xuICAgIHJldHVybiB0aGlzLl9zaXplO1xuICB9XG5cbiAgcHJpdmF0ZSBfbmVnYXRpdmU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKiogV2hldGhlciB0aGUgc3Bpbm5lciBzaG91bGQgdXNlIGEgbmVnYXRpdmUgc3R5bGluZy4gKi9cbiAgQElucHV0KClcbiAgc2V0IG5lZ2F0aXZlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLl9uZWdhdGl2ZSkge1xuICAgICAgdGhpcy5fbmVnYXRpdmUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG4gIGdldCBuZWdhdGl2ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fbmVnYXRpdmU7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG59XG4iXX0=