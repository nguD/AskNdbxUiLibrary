/**
 * @fileoverview added by tsickle
 * Generated from: tree.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CdkTree } from '@angular/cdk/tree';
import { ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation } from '@angular/core';
import { NxTreeNodeOutletDirective } from './outlet';
/**
 * Wrapper for the CdkTable with NDBX design styles.
 * @template T
 */
var NxTreeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(NxTreeComponent, _super);
    function NxTreeComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NxTreeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-tree',
                    exportAs: 'nxTree',
                    template: "<ng-container nxTreeNodeOutlet></ng-container>",
                    host: {
                        'class': 'nx-tree',
                        'role': 'tree',
                    },
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: CdkTree, useExisting: NxTreeComponent }],
                    styles: [":host.nx-tree{display:block}.nx-tree__node{display:block;overflow:hidden}"]
                }] }
    ];
    NxTreeComponent.propDecorators = {
        _nodeOutlet: [{ type: ViewChild, args: [NxTreeNodeOutletDirective, { static: true },] }]
    };
    return NxTreeComponent;
}(CdkTree));
export { NxTreeComponent };
if (false) {
    /** @type {?} */
    NxTreeComponent.prototype._nodeOutlet;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC90cmVlLyIsInNvdXJjZXMiOlsidHJlZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzVDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pHLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLFVBQVUsQ0FBQzs7Ozs7QUFLckQ7SUFhd0MsMkNBQVU7SUFibEQ7O0lBZ0JBLENBQUM7O2dCQWhCQSxTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFNBQVM7b0JBQ25CLFFBQVEsRUFBRSxRQUFRO29CQUNsQixRQUFRLEVBQUUsZ0RBQWdEO29CQUMxRCxJQUFJLEVBQUU7d0JBQ0osT0FBTyxFQUFFLFNBQVM7d0JBQ2xCLE1BQU0sRUFBRSxNQUFNO3FCQUNmO29CQUVELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxlQUFlLEVBQUUsQ0FBQzs7aUJBQ2hFOzs7OEJBR0UsU0FBUyxTQUFDLHlCQUF5QixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTs7SUFDeEQsc0JBQUM7Q0FBQSxBQWhCRCxDQWF3QyxPQUFPLEdBRzlDO1NBSFksZUFBZTs7O0lBRTFCLHNDQUErRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENka1RyZWUgfSBmcm9tICdAYW5ndWxhci9jZGsvdHJlZSc7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBWaWV3Q2hpbGQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOeFRyZWVOb2RlT3V0bGV0RGlyZWN0aXZlIH0gZnJvbSAnLi9vdXRsZXQnO1xuXG4vKipcbiAqIFdyYXBwZXIgZm9yIHRoZSBDZGtUYWJsZSB3aXRoIE5EQlggZGVzaWduIHN0eWxlcy5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbngtdHJlZScsXG4gIGV4cG9ydEFzOiAnbnhUcmVlJyxcbiAgdGVtcGxhdGU6IGA8bmctY29udGFpbmVyIG54VHJlZU5vZGVPdXRsZXQ+PC9uZy1jb250YWluZXI+YCxcbiAgaG9zdDoge1xuICAgICdjbGFzcyc6ICdueC10cmVlJyxcbiAgICAncm9sZSc6ICd0cmVlJyxcbiAgfSxcbiAgc3R5bGVVcmxzOiBbJ3RyZWUuY29tcG9uZW50LnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogQ2RrVHJlZSwgdXNlRXhpc3Rpbmc6IE54VHJlZUNvbXBvbmVudCB9XVxufSlcbmV4cG9ydCBjbGFzcyBOeFRyZWVDb21wb25lbnQ8VD4gZXh0ZW5kcyBDZGtUcmVlPFQ+IHtcbiAgLy8gT3V0bGV0cyB3aXRoaW4gdGhlIHRyZWUncyB0ZW1wbGF0ZSB3aGVyZSB0aGUgZGF0YU5vZGVzIHdpbGwgYmUgaW5zZXJ0ZWQuXG4gIEBWaWV3Q2hpbGQoTnhUcmVlTm9kZU91dGxldERpcmVjdGl2ZSwgeyBzdGF0aWM6IHRydWUgfSkgX25vZGVPdXRsZXQ6IE54VHJlZU5vZGVPdXRsZXREaXJlY3RpdmU7XG59XG4iXX0=