/**
 * @fileoverview added by tsickle
 * Generated from: node.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CdkTreeNode, CdkTreeNodeDef } from '@angular/cdk/tree';
import { Component, Directive, Input, } from '@angular/core';
/**
 * Wrapper for the CdkTree node with NDBX design styles.
 * @template T
 */
var NxTreeNodeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(NxTreeNodeComponent, _super);
    function NxTreeNodeComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NxTreeNodeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-tree-node',
                    exportAs: 'nxTreeNode',
                    inputs: ['disabled', 'tabIndex'],
                    host: {
                        '[attr.aria-expanded]': 'isExpanded',
                        '[attr.aria-level]': 'role === "treeitem" ? level : null',
                        '[attr.role]': 'role',
                        'class': 'nx-tree__node',
                        '[class.is-expanded]': 'isExpanded'
                    },
                    providers: [{ provide: CdkTreeNode, useExisting: NxTreeNodeComponent }],
                    template: "<div class=\"nx-tree__node-box\">\n  <ng-content></ng-content>\n</div>\n"
                }] }
    ];
    return NxTreeNodeComponent;
}(CdkTreeNode));
export { NxTreeNodeComponent };
/**
 * Wrapper for the CdkTree node definition with NDBX design styles.
 * @template T
 */
var NxTreeNodeDefDirective = /** @class */ (function (_super) {
    tslib_1.__extends(NxTreeNodeDefDirective, _super);
    function NxTreeNodeDefDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NxTreeNodeDefDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[nxTreeNodeDef]',
                    inputs: [
                        'when: nxTreeNodeDefWhen'
                    ],
                    providers: [{ provide: CdkTreeNodeDef, useExisting: NxTreeNodeDefDirective }]
                },] }
    ];
    NxTreeNodeDefDirective.propDecorators = {
        data: [{ type: Input, args: ['nxTreeNode',] }]
    };
    return NxTreeNodeDefDirective;
}(CdkTreeNodeDef));
export { NxTreeNodeDefDirective };
if (false) {
    /** @type {?} */
    NxTreeNodeDefDirective.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4L3RyZWUvIiwic291cmNlcyI6WyJub2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBQyxXQUFXLEVBQUUsY0FBYyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDOUQsT0FBTyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsS0FBSyxHQUNOLE1BQU0sZUFBZSxDQUFDOzs7OztBQUt2QjtJQWM0QywrQ0FBYztJQWQxRDs7SUFjNEQsQ0FBQzs7Z0JBZDVELFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsY0FBYztvQkFDeEIsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUM7b0JBQ2hDLElBQUksRUFBRTt3QkFDSixzQkFBc0IsRUFBRSxZQUFZO3dCQUNwQyxtQkFBbUIsRUFBRSxvQ0FBb0M7d0JBQ3pELGFBQWEsRUFBRSxNQUFNO3dCQUNyQixPQUFPLEVBQUUsZUFBZTt3QkFDeEIscUJBQXFCLEVBQUUsWUFBWTtxQkFDcEM7b0JBQ0QsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBQyxDQUFDO29CQUNyRSxvRkFBMEI7aUJBQzNCOztJQUMyRCwwQkFBQztDQUFBLEFBZDdELENBYzRDLFdBQVcsR0FBTTtTQUFoRCxtQkFBbUI7Ozs7O0FBS2hDO0lBTytDLGtEQUFpQjtJQVBoRTs7SUFTQSxDQUFDOztnQkFUQSxTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IsTUFBTSxFQUFFO3dCQUNOLHlCQUF5QjtxQkFDMUI7b0JBQ0QsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBRSxzQkFBc0IsRUFBQyxDQUFDO2lCQUM1RTs7O3VCQUVFLEtBQUssU0FBQyxZQUFZOztJQUNyQiw2QkFBQztDQUFBLEFBVEQsQ0FPK0MsY0FBYyxHQUU1RDtTQUZZLHNCQUFzQjs7O0lBQ2pDLHNDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2RrVHJlZU5vZGUsIENka1RyZWVOb2RlRGVmfSBmcm9tICdAYW5ndWxhci9jZGsvdHJlZSc7XG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIERpcmVjdGl2ZSxcbiAgSW5wdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIFdyYXBwZXIgZm9yIHRoZSBDZGtUcmVlIG5vZGUgd2l0aCBOREJYIGRlc2lnbiBzdHlsZXMuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LXRyZWUtbm9kZScsXG4gIGV4cG9ydEFzOiAnbnhUcmVlTm9kZScsXG4gIGlucHV0czogWydkaXNhYmxlZCcsICd0YWJJbmRleCddLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLmFyaWEtZXhwYW5kZWRdJzogJ2lzRXhwYW5kZWQnLFxuICAgICdbYXR0ci5hcmlhLWxldmVsXSc6ICdyb2xlID09PSBcInRyZWVpdGVtXCIgPyBsZXZlbCA6IG51bGwnLFxuICAgICdbYXR0ci5yb2xlXSc6ICdyb2xlJyxcbiAgICAnY2xhc3MnOiAnbngtdHJlZV9fbm9kZScsXG4gICAgJ1tjbGFzcy5pcy1leHBhbmRlZF0nOiAnaXNFeHBhbmRlZCdcbiAgfSxcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IENka1RyZWVOb2RlLCB1c2VFeGlzdGluZzogTnhUcmVlTm9kZUNvbXBvbmVudH1dLFxuICB0ZW1wbGF0ZVVybDogJy4vbm9kZS5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOeFRyZWVOb2RlQ29tcG9uZW50PFQ+IGV4dGVuZHMgQ2RrVHJlZU5vZGU8VD4ge31cblxuLyoqXG4gKiBXcmFwcGVyIGZvciB0aGUgQ2RrVHJlZSBub2RlIGRlZmluaXRpb24gd2l0aCBOREJYIGRlc2lnbiBzdHlsZXMuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tueFRyZWVOb2RlRGVmXScsXG4gIGlucHV0czogW1xuICAgICd3aGVuOiBueFRyZWVOb2RlRGVmV2hlbidcbiAgXSxcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IENka1RyZWVOb2RlRGVmLCB1c2VFeGlzdGluZzogTnhUcmVlTm9kZURlZkRpcmVjdGl2ZX1dXG59KVxuZXhwb3J0IGNsYXNzIE54VHJlZU5vZGVEZWZEaXJlY3RpdmU8VD4gZXh0ZW5kcyBDZGtUcmVlTm9kZURlZjxUPiB7XG4gIEBJbnB1dCgnbnhUcmVlTm9kZScpIGRhdGE6IFQ7XG59XG4iXX0=