/**
 * @fileoverview added by tsickle
 * Generated from: progressbar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, ChangeDetectionStrategy } from '@angular/core';
import { Component } from '@angular/core';
import { clamp } from '@allianz/ngx-ndbx/utils';
/** @type {?} */
var progressbarId = 0;
var NxProgressbarComponent = /** @class */ (function () {
    function NxProgressbarComponent() {
        /**
         * \@docs-private
         */
        this.progressbarId = "nx-progress-bar-" + progressbarId++;
        this._value = 0;
    }
    Object.defineProperty(NxProgressbarComponent.prototype, "value", {
        /** Sets the value of the progress bar. Defaults to zero. Mirrored to aria-value now. */
        get: /**
         * Sets the value of the progress bar. Defaults to zero. Mirrored to aria-value now.
         * @return {?}
         */
        function () { return this._value; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._value = clamp(value || 0); },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxProgressbarComponent.prototype._primaryTransform = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var scale = this.value;
        return { transform: "scaleX(" + scale + ")" };
    };
    NxProgressbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-progressbar',
                    template: "<div class=\"nx-progress__track\">\n  <div class=\"nx-progress__indicator\" [ngStyle]=\"_primaryTransform()\"></div>\n</div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[attr.aria-valuenow]': 'value'
                    },
                    styles: [":host{display:block;height:4px;overflow:hidden;position:relative;width:100%}.nx-progress__track{background-color:#ececec;background-color:var(--progressbar-background-color,#ececec);height:100%}.nx-progress__indicator{transform-origin:top left;height:100%;position:absolute;width:100%}.nx-progress__indicator::after{height:100%;position:absolute;width:100%;-webkit-animation:none;animation:none;content:'';display:inline-block;left:0;background-color:#007ab3;background-color:var(--progressbar-indicator-color,#007ab3)}@media screen and (-ms-high-contrast:active){:host{height:8px}.nx-progress__track{border:1px solid windowFrame;border-radius:2px}.nx-progress__indicator{border-right:1px solid windowFrame}.nx-progress__indicator::after{background:highlight}}"]
                }] }
    ];
    NxProgressbarComponent.propDecorators = {
        value: [{ type: Input }]
    };
    return NxProgressbarComponent;
}());
export { NxProgressbarComponent };
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxProgressbarComponent.prototype.progressbarId;
    /**
     * @type {?}
     * @private
     */
    NxProgressbarComponent.prototype._value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NiYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvcHJvZ3Jlc3NiYXIvIiwic291cmNlcyI6WyJwcm9ncmVzc2Jhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFDOztJQUM1QyxhQUFhLEdBQUcsQ0FBQztBQUVyQjtJQUFBOzs7O1FBWUUsa0JBQWEsR0FBRyxxQkFBbUIsYUFBYSxFQUFJLENBQUM7UUFNN0MsV0FBTSxHQUFXLENBQUMsQ0FBQztJQU03QixDQUFDO0lBVEMsc0JBQ0kseUNBQUs7UUFGVCx3RkFBd0Y7Ozs7O1FBQ3hGLGNBQ3NCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Ozs7O1FBQzNDLFVBQVUsS0FBYSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7OztPQURsQjs7OztJQUkzQyxrREFBaUI7OztJQUFqQjs7WUFDUSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUs7UUFDeEIsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFVLEtBQUssTUFBRyxFQUFDLENBQUM7SUFDekMsQ0FBQzs7Z0JBdkJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQix3SUFBMkM7b0JBQzNDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUUvQyxJQUFJLEVBQUU7d0JBQ0osc0JBQXNCLEVBQUUsT0FBTztxQkFDaEM7O2lCQUNGOzs7d0JBT0UsS0FBSzs7SUFTUiw2QkFBQztDQUFBLEFBeEJELElBd0JDO1NBZlksc0JBQXNCOzs7Ozs7SUFHakMsK0NBQXFEOzs7OztJQU1yRCx3Q0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY2xhbXAgfSBmcm9tICdAYWxsaWFuei9uZ3gtbmRieC91dGlscyc7XG5sZXQgcHJvZ3Jlc3NiYXJJZCA9IDA7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LXByb2dyZXNzYmFyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3Byb2dyZXNzYmFyLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0eWxlVXJsczogWycuL3Byb2dyZXNzYmFyLmNvbXBvbmVudC5zY3NzJ10sXG4gIGhvc3Q6IHtcbiAgICAnW2F0dHIuYXJpYS12YWx1ZW5vd10nOiAndmFsdWUnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnhQcm9ncmVzc2JhckNvbXBvbmVudCB7XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgcHJvZ3Jlc3NiYXJJZCA9IGBueC1wcm9ncmVzcy1iYXItJHtwcm9ncmVzc2JhcklkKyt9YDtcblxuICAvKiogU2V0cyB0aGUgdmFsdWUgb2YgdGhlIHByb2dyZXNzIGJhci4gRGVmYXVsdHMgdG8gemVyby4gTWlycm9yZWQgdG8gYXJpYS12YWx1ZSBub3cuICovXG4gIEBJbnB1dCgpXG4gIGdldCB2YWx1ZSgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fdmFsdWU7IH1cbiAgc2V0IHZhbHVlKHZhbHVlOiBudW1iZXIpIHsgdGhpcy5fdmFsdWUgPSBjbGFtcCh2YWx1ZSB8fCAwKTsgfVxuICBwcml2YXRlIF92YWx1ZTogbnVtYmVyID0gMDtcblxuICBfcHJpbWFyeVRyYW5zZm9ybSgpIHtcbiAgICBjb25zdCBzY2FsZSA9IHRoaXMudmFsdWU7XG4gICAgcmV0dXJuIHt0cmFuc2Zvcm06IGBzY2FsZVgoJHtzY2FsZX0pYH07XG4gIH1cbn1cbiJdfQ==