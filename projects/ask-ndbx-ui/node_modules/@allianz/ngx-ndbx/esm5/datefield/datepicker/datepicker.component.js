/**
 * @fileoverview added by tsickle
 * Generated from: datepicker/datepicker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NxDatepickerIntl } from './datepicker-intl';
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Directionality } from '@angular/cdk/bidi';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ESCAPE } from '@angular/cdk/keycodes';
import { Overlay, OverlayConfig, } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { take, filter } from 'rxjs/operators';
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Inject, InjectionToken, Input, NgZone, Optional, Output, ViewChild, ViewContainerRef, } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Subject, Subscription, merge } from 'rxjs';
import { createMissingDateImplError } from './datepicker-errors';
import { NxCalendarComponent } from './calendar';
import { NxDateAdapter } from '../adapter/date-adapter';
/**
 * Used to generate a unique ID for each datepicker instance.
 * @type {?}
 */
var datepickerUid = 0;
/**
 * Injection token that determines the scroll handling while the calendar is open.
 * @type {?}
 */
export var NX_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('nx-datepicker-scroll-strategy');
/**
 * \@docs-private
 * @param {?} overlay
 * @return {?}
 */
export function NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
    return (/**
     * @return {?}
     */
    function () { return overlay.scrollStrategies.reposition(); });
}
/**
 * \@docs-private
 * @type {?}
 */
export var NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {
    provide: NX_DATEPICKER_SCROLL_STRATEGY,
    deps: [Overlay],
    useFactory: NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,
};
/**
 * @record
 */
export function DatepickerDefaultOptions() { }
if (false) {
    /**
     * Sets the focus on toggle behavior. (optional)
     * @type {?|undefined}
     */
    DatepickerDefaultOptions.prototype.toggleIconTabindex;
}
/** @type {?} */
export var DATEPICKER_DEFAULT_OPTIONS = new InjectionToken('DATEPICKER_DEFAULT_OPTIONS');
/**
 * \@docs-private
 * Component used as the content for the datepicker dialog and popup. We use this instead of using
 * NxCalendarComponent directly as the content so we can control the initial focus. This also gives us a
 * place to put additional features of the popup that are not part of the calendar itself in the
 * future. (e.g. confirmation buttons).
 * @template D
 */
var NxDatepickerContentComponent = /** @class */ (function () {
    function NxDatepickerContentComponent(_intl, elementRef, _ngZone) {
        this._intl = _intl;
        this.elementRef = elementRef;
        this._ngZone = _ngZone;
    }
    /**
     * @return {?}
     */
    NxDatepickerContentComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this._focusActiveCell();
    };
    /** Focuses the active cell after the microtask queue is empty. */
    /**
     * Focuses the active cell after the microtask queue is empty.
     * @private
     * @return {?}
     */
    NxDatepickerContentComponent.prototype._focusActiveCell = /**
     * Focuses the active cell after the microtask queue is empty.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this._ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**
             * @return {?}
             */
            function () {
                _this.elementRef.nativeElement.querySelector('.nx-calendar-body-active').focus();
            }));
        }));
    };
    NxDatepickerContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-datepicker-content',
                    template: "<div class=\"nx-datepicker-header\">\n    <button (click)=\"datepicker.close()\" class=\"nx-datepicker-close\" type=\"button\">\n        <nx-icon name=\"close\"></nx-icon>\n    </button>\n</div>\n\n<nx-calendar cdkTrapFocus\n    [id]=\"datepicker.id\"\n    [ngClass]=\"datepicker.panelClass\"\n    [startAt]=\"datepicker.startAt\"\n    [startView]=\"datepicker.startView\"\n    [minDate]=\"datepicker.minDate\"\n    [maxDate]=\"datepicker.maxDate\"\n    [dateFilter]=\"datepicker.dateFilter\"\n    [selected]=\"datepicker.selected\"\n    (selectedChange)=\"datepicker.select($event)\"\n    (yearSelected)=\"datepicker.selectYear($event)\"\n    (monthSelected)=\"datepicker.selectMonth($event)\"\n    (_userSelection)=\"datepicker.close()\">\n</nx-calendar>\n",
                    host: {
                        'class': 'nx-datepicker-content'
                    },
                    exportAs: 'nxDatepickerContent',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{background:#fff;background:var(--datefield-panel-background-color,#fff);display:flex;flex-flow:column nowrap;box-shadow:0 8px 24px rgba(65,65,65,.35);border:1px solid #d9d9d9;border:1px solid var(--datefield-panel-border-color,#d9d9d9);border-radius:4px}.nx-datepicker-header{background:#fff;background:var(--datefield-panel-header-background-color,#fff);padding:calc(16px - 1px) 16px 16px;display:flex;height:55px}@media (max-width:703px){.nx-datepicker-header{padding-left:calc(20px - 1px);padding-right:calc(20px - 1px)}}.nx-datepicker-close{background-color:transparent;border:none;margin-left:auto;cursor:pointer;padding:0;font-size:24px;font-size:var(--datefield-controls-icon-size,24px);color:#006192;color:var(--datefield-controls-color,#006192);outline:0}nx-calendar{width:calc(7 * 40px + 2 * 32px - 2 * 1px);height:calc(48px + 16px + 7 * 40px + 32px - 1px)}@media (max-width:703px){nx-calendar{width:calc(7 * 40px + 2 * 12px - 2 * 1px);height:calc(48px + 16px + 7 * 40px + 16px - 1px)}}"]
                }] }
    ];
    /** @nocollapse */
    NxDatepickerContentComponent.ctorParameters = function () { return [
        { type: NxDatepickerIntl },
        { type: ElementRef },
        { type: NgZone }
    ]; };
    NxDatepickerContentComponent.propDecorators = {
        _calendar: [{ type: ViewChild, args: [NxCalendarComponent, { static: true },] }]
    };
    return NxDatepickerContentComponent;
}());
export { NxDatepickerContentComponent };
if (false) {
    /** @type {?} */
    NxDatepickerContentComponent.prototype.datepicker;
    /** @type {?} */
    NxDatepickerContentComponent.prototype._calendar;
    /** @type {?} */
    NxDatepickerContentComponent.prototype._intl;
    /** @type {?} */
    NxDatepickerContentComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    NxDatepickerContentComponent.prototype._ngZone;
}
// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit
// template reference variables (e.g. #d vs #d="nxDatepicker"). We can change this to a directive
// if angular adds support for `exportAs: '$implicit'` on directives.
/**
 * Component responsible for managing the datepicker popup/dialog.
 * @template D
 */
var NxDatepickerComponent = /** @class */ (function () {
    function NxDatepickerComponent(_overlay, _ngZone, _viewContainerRef, _scrollStrategy, _dateAdapter, _dir, _document) {
        this._overlay = _overlay;
        this._ngZone = _ngZone;
        this._viewContainerRef = _viewContainerRef;
        this._scrollStrategy = _scrollStrategy;
        this._dateAdapter = _dateAdapter;
        this._dir = _dir;
        this._document = _document;
        /**
         * The view that the calendar should start in.
         */
        this.startView = 'month';
        /**
         * \@docs-private
         */
        this.selectedChanged = new EventEmitter();
        /**
         * Emits selected year in multiyear view.
         * This doesn't imply a change on the selected date.
         */
        this.yearSelected = new EventEmitter();
        /**
         * Emits selected month in year view.
         * This doesn't imply a change on the selected date.
         */
        this.monthSelected = new EventEmitter();
        /**
         * Emits when the datepicker has been opened.
         */
        this.openedStream = new EventEmitter();
        /**
         * Emits when the datepicker has been closed.
         */
        this.closedStream = new EventEmitter();
        this._opened = false;
        /**
         * \@docs-private
         * The id for the datepicker calendar.
         */
        this.id = "nx-datepicker-" + datepickerUid++;
        this._validSelected = null;
        /**
         * The element that was focused before the datepicker was opened.
         */
        this._focusedElementBeforeOpen = null;
        /**
         * Subscription to value changes in the associated input element.
         */
        this._inputSubscription = Subscription.EMPTY;
        /**
         * Emits when the datepicker is disabled.
         */
        this._disabledChange = new Subject();
        if (!this._dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
    }
    Object.defineProperty(NxDatepickerComponent.prototype, "startAt", {
        /** The date to open the calendar initially. */
        get: /**
         * The date to open the calendar initially.
         * @return {?}
         */
        function () {
            // If an explicit startAt is set we start there, otherwise we start at whatever the currently
            // selected value is.
            return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDatepickerComponent.prototype, "disabled", {
        /** Whether the datepicker pop-up should be disabled. */
        get: /**
         * Whether the datepicker pop-up should be disabled.
         * @return {?}
         */
        function () {
            return this._disabled === undefined && this._datepickerInput ?
                this._datepickerInput.disabled : !!this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (newValue !== this._disabled) {
                this._disabled = newValue;
                this._disabledChange.next(newValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDatepickerComponent.prototype, "opened", {
        /** Whether the calendar is open. */
        get: /**
         * Whether the calendar is open.
         * @return {?}
         */
        function () { return this._opened; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { value ? this.open() : this.close(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDatepickerComponent.prototype, "selected", {
        /**
         * @docs-private
         * The currently selected date.
         */
        get: /**
         * \@docs-private
         * The currently selected date.
         * @return {?}
         */
        function () { return this._validSelected; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._validSelected = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDatepickerComponent.prototype, "minDate", {
        /**
         * @docs-private
         * The minimum selectable date.
         */
        get: /**
         * \@docs-private
         * The minimum selectable date.
         * @return {?}
         */
        function () {
            return this._datepickerInput && this._datepickerInput.min;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDatepickerComponent.prototype, "maxDate", {
        /**
         * @docs-private
         * The maximum selectable date.
         */
        get: /**
         * \@docs-private
         * The maximum selectable date.
         * @return {?}
         */
        function () {
            return this._datepickerInput && this._datepickerInput.max;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDatepickerComponent.prototype, "dateFilter", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._datepickerInput && this._datepickerInput._dateFilter;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxDatepickerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.close();
        this._inputSubscription.unsubscribe();
        this._disabledChange.complete();
        if (this._popupRef) {
            this._popupRef.dispose();
            this._popupComponentRef = null;
        }
    };
    /**
     * @docs-private
     * Selects the given date
     */
    /**
     * \@docs-private
     * Selects the given date
     * @param {?} date
     * @return {?}
     */
    NxDatepickerComponent.prototype.select = /**
     * \@docs-private
     * Selects the given date
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var oldValue = this.selected;
        this.selected = date;
        if (!this._dateAdapter.sameDate(oldValue, this.selected)) {
            this.selectedChanged.emit(date);
        }
    };
    /**
     * @docs-private
     * Emits the selected year in multiyear view
     */
    /**
     * \@docs-private
     * Emits the selected year in multiyear view
     * @param {?} normalizedYear
     * @return {?}
     */
    NxDatepickerComponent.prototype.selectYear = /**
     * \@docs-private
     * Emits the selected year in multiyear view
     * @param {?} normalizedYear
     * @return {?}
     */
    function (normalizedYear) {
        this.yearSelected.emit(normalizedYear);
    };
    /**
     * @docs-private
     * Emits selected month in year view
     */
    /**
     * \@docs-private
     * Emits selected month in year view
     * @param {?} normalizedMonth
     * @return {?}
     */
    NxDatepickerComponent.prototype.selectMonth = /**
     * \@docs-private
     * Emits selected month in year view
     * @param {?} normalizedMonth
     * @return {?}
     */
    function (normalizedMonth) {
        this.monthSelected.emit(normalizedMonth);
    };
    /**
     * @docs-private
     * Register an input with this datepicker.
     * @param input The datepicker input to register with this datepicker.
     */
    /**
     * \@docs-private
     * Register an input with this datepicker.
     * @param {?} input The datepicker input to register with this datepicker.
     * @return {?}
     */
    NxDatepickerComponent.prototype.registerInput = /**
     * \@docs-private
     * Register an input with this datepicker.
     * @param {?} input The datepicker input to register with this datepicker.
     * @return {?}
     */
    function (input) {
        var _this = this;
        if (this._datepickerInput) {
            throw Error('A NxDatepicker can only be associated with a single input.');
        }
        this._datepickerInput = input;
        this._inputSubscription =
            this._datepickerInput._valueChange.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return _this.selected = value; }));
    };
    /**
     * @docs-private
     * Register an input toggle with this datepicker.
     */
    /**
     * \@docs-private
     * Register an input toggle with this datepicker.
     * @param {?} toggle
     * @return {?}
     */
    NxDatepickerComponent.prototype.registerToggle = /**
     * \@docs-private
     * Register an input toggle with this datepicker.
     * @param {?} toggle
     * @return {?}
     */
    function (toggle) {
        if (this._toggleButton) {
            throw Error('A NxDatepicker can only be associated with a single toggle button.');
        }
        this._toggleButton = toggle;
    };
    /**
     * @docs-private
     * Open the calendar.
     */
    /**
     * \@docs-private
     * Open the calendar.
     * @return {?}
     */
    NxDatepickerComponent.prototype.open = /**
     * \@docs-private
     * Open the calendar.
     * @return {?}
     */
    function () {
        if (this._opened || this.disabled) {
            return;
        }
        if (!this._datepickerInput) {
            throw Error('Attempted to open an NxDatepicker with no associated input.');
        }
        if (this._document) {
            this._focusedElementBeforeOpen = this._document.activeElement;
        }
        this._openAsPopup();
        this._opened = true;
        this.openedStream.emit();
    };
    /**
     * @docs-private
     * Close the calendar.
     */
    /**
     * \@docs-private
     * Close the calendar.
     * @return {?}
     */
    NxDatepickerComponent.prototype.close = /**
     * \@docs-private
     * Close the calendar.
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._opened) {
            return;
        }
        if (this._popupRef && this._popupRef.hasAttached()) {
            this._popupRef.detach();
        }
        if (this._calendarPortal && this._calendarPortal.isAttached) {
            this._calendarPortal.detach();
        }
        /** @type {?} */
        var completeClose = (/**
         * @return {?}
         */
        function () {
            // The `_opened` could've been reset already if
            // we got two events in quick succession.
            if (_this._opened) {
                _this._opened = false;
                _this.closedStream.emit();
                _this._focusedElementBeforeOpen = null;
            }
        });
        if (this._focusedElementBeforeOpen &&
            typeof this._focusedElementBeforeOpen.focus === 'function') {
            // Because IE moves focus asynchronously, we can't count on it being restored before we've
            // marked the datepicker as closed. If the event fires out of sequence and the element that
            // we're refocusing opens the datepicker on focus, the user could be stuck with not being
            // able to close the calendar at all. We work around it by making the logic, that marks
            // the datepicker as closed, async as well.
            this._focusedElementBeforeOpen.focus();
            setTimeout(completeClose);
        }
        else {
            completeClose();
        }
        // if the datepicker toggle button is not focusable, focus the associated input.
        if (this._toggleButton && this._toggleButton.tabindex < 0) {
            this._datepickerInput._focus();
        }
    };
    /** Open the calendar as a popup. */
    /**
     * Open the calendar as a popup.
     * @private
     * @return {?}
     */
    NxDatepickerComponent.prototype._openAsPopup = /**
     * Open the calendar as a popup.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._calendarPortal) {
            this._calendarPortal = new ComponentPortal(NxDatepickerContentComponent, this._viewContainerRef);
        }
        if (!this._popupRef) {
            this._createPopup();
        }
        if (!this._popupRef.hasAttached()) {
            this._popupComponentRef = this._popupRef.attach(this._calendarPortal);
            this._popupComponentRef.instance.datepicker = this;
            // Update the position once the calendar has rendered.
            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**
             * @return {?}
             */
            function () {
                _this._popupRef.updatePosition();
            }));
        }
    };
    /** Create the popup. */
    /**
     * Create the popup.
     * @private
     * @return {?}
     */
    NxDatepickerComponent.prototype._createPopup = /**
     * Create the popup.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var overlayConfig = new OverlayConfig({
            positionStrategy: this._createPopupPositionStrategy(),
            hasBackdrop: true,
            backdropClass: 'nx-overlay-transparent-backdrop',
            direction: this._dir ? this._dir.value : 'ltr',
            scrollStrategy: this._scrollStrategy(),
            panelClass: 'nx-datepicker-popup',
        });
        this._popupRef = this._overlay.create(overlayConfig);
        merge(this._popupRef.backdropClick(), this._popupRef.keydownEvents().pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return event.keyCode === ESCAPE; })))).subscribe((/**
         * @return {?}
         */
        function () { return _this.close(); }));
    };
    /** Create the popup PositionStrategy. */
    /**
     * Create the popup PositionStrategy.
     * @private
     * @return {?}
     */
    NxDatepickerComponent.prototype._createPopupPositionStrategy = /**
     * Create the popup PositionStrategy.
     * @private
     * @return {?}
     */
    function () {
        return this._overlay.position()
            .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())
            .withTransformOriginOn('.nx-datepicker-content')
            .withFlexibleDimensions(false)
            .withViewportMargin(8)
            .withLockedPosition()
            .withPositions([
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top'
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom'
            },
            {
                originX: 'end',
                originY: 'bottom',
                overlayX: 'end',
                overlayY: 'top'
            },
            {
                originX: 'end',
                originY: 'top',
                overlayX: 'end',
                overlayY: 'bottom'
            }
        ]);
    };
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    NxDatepickerComponent.prototype._getValidDateOrNull = /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    function (obj) {
        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
    };
    NxDatepickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-datepicker',
                    template: '',
                    exportAs: 'nxDatepicker',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NxDatepickerComponent.ctorParameters = function () { return [
        { type: Overlay },
        { type: NgZone },
        { type: ViewContainerRef },
        { type: undefined, decorators: [{ type: Inject, args: [NX_DATEPICKER_SCROLL_STRATEGY,] }] },
        { type: NxDateAdapter, decorators: [{ type: Optional }] },
        { type: Directionality, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
    ]; };
    NxDatepickerComponent.propDecorators = {
        startAt: [{ type: Input }],
        startView: [{ type: Input }],
        disabled: [{ type: Input }],
        yearSelected: [{ type: Output }],
        monthSelected: [{ type: Output }],
        panelClass: [{ type: Input }],
        openedStream: [{ type: Output, args: ['opened',] }],
        closedStream: [{ type: Output, args: ['closed',] }],
        opened: [{ type: Input }]
    };
    return NxDatepickerComponent;
}());
export { NxDatepickerComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxDatepickerComponent.prototype._startAt;
    /**
     * The view that the calendar should start in.
     * @type {?}
     */
    NxDatepickerComponent.prototype.startView;
    /**
     * @type {?}
     * @private
     */
    NxDatepickerComponent.prototype._disabled;
    /**
     * \@docs-private
     * @type {?}
     */
    NxDatepickerComponent.prototype.selectedChanged;
    /**
     * Emits selected year in multiyear view.
     * This doesn't imply a change on the selected date.
     * @type {?}
     */
    NxDatepickerComponent.prototype.yearSelected;
    /**
     * Emits selected month in year view.
     * This doesn't imply a change on the selected date.
     * @type {?}
     */
    NxDatepickerComponent.prototype.monthSelected;
    /**
     * Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`.
     * @type {?}
     */
    NxDatepickerComponent.prototype.panelClass;
    /**
     * Emits when the datepicker has been opened.
     * @type {?}
     */
    NxDatepickerComponent.prototype.openedStream;
    /**
     * Emits when the datepicker has been closed.
     * @type {?}
     */
    NxDatepickerComponent.prototype.closedStream;
    /**
     * @type {?}
     * @private
     */
    NxDatepickerComponent.prototype._opened;
    /**
     * \@docs-private
     * The id for the datepicker calendar.
     * @type {?}
     */
    NxDatepickerComponent.prototype.id;
    /**
     * @type {?}
     * @private
     */
    NxDatepickerComponent.prototype._validSelected;
    /**
     * A reference to the overlay when the calendar is opened as a popup.
     * @type {?}
     * @private
     */
    NxDatepickerComponent.prototype._popupRef;
    /**
     * A portal containing the calendar for this datepicker.
     * @type {?}
     * @private
     */
    NxDatepickerComponent.prototype._calendarPortal;
    /**
     * Reference to the component instantiated in popup mode.
     * @type {?}
     * @private
     */
    NxDatepickerComponent.prototype._popupComponentRef;
    /**
     * The element that was focused before the datepicker was opened.
     * @type {?}
     * @private
     */
    NxDatepickerComponent.prototype._focusedElementBeforeOpen;
    /**
     * Subscription to value changes in the associated input element.
     * @type {?}
     * @private
     */
    NxDatepickerComponent.prototype._inputSubscription;
    /**
     * The input element this datepicker is associated with.
     * @type {?}
     */
    NxDatepickerComponent.prototype._datepickerInput;
    /** @type {?} */
    NxDatepickerComponent.prototype._toggleButton;
    /**
     * Emits when the datepicker is disabled.
     * @type {?}
     */
    NxDatepickerComponent.prototype._disabledChange;
    /**
     * @type {?}
     * @private
     */
    NxDatepickerComponent.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    NxDatepickerComponent.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    NxDatepickerComponent.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    NxDatepickerComponent.prototype._scrollStrategy;
    /**
     * @type {?}
     * @private
     */
    NxDatepickerComponent.prototype._dateAdapter;
    /**
     * @type {?}
     * @private
     */
    NxDatepickerComponent.prototype._dir;
    /**
     * @type {?}
     * @private
     */
    NxDatepickerComponent.prototype._document;
}
//# sourceMappingURL=data:application/json;base64,