/**
 * @fileoverview added by tsickle
 * Generated from: adapter/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NX_NATIVE_DATE_FORMATS } from './native-date-formats';
import { NxNativeDateAdapter } from './native-date-adapter';
import { NX_DATE_FORMATS } from './date-formats';
import { NgModule } from '@angular/core';
import { LOCALE_ID } from '@angular/core';
import { NxDateAdapter } from './date-adapter';
import { NX_DATE_LOCALE } from './date-token';
import { PlatformModule } from '@angular/cdk/platform';
/** @type {?} */
export var NX_DATE_LOCALE_PROVIDER = { provide: NX_DATE_LOCALE, useExisting: LOCALE_ID };
export { NX_DATE_LOCALE } from './date-token';
export { NxDateAdapter } from './date-adapter';
export { NX_DATE_FORMATS } from './date-formats';
export { NxNativeDateAdapter } from './native-date-adapter';
export { NX_NATIVE_DATE_FORMATS } from './native-date-formats';
var NativeDateModule = /** @class */ (function () {
    function NativeDateModule() {
    }
    NativeDateModule.decorators = [
        { type: NgModule, args: [{
                    imports: [PlatformModule],
                    providers: [
                        { provide: NxDateAdapter, useClass: NxNativeDateAdapter },
                        NX_DATE_LOCALE_PROVIDER
                    ],
                },] }
    ];
    return NativeDateModule;
}());
export { NativeDateModule };
var ɵ0 = NX_NATIVE_DATE_FORMATS;
var NxNativeDateModule = /** @class */ (function () {
    function NxNativeDateModule() {
    }
    NxNativeDateModule.decorators = [
        { type: NgModule, args: [{
                    imports: [NativeDateModule],
                    providers: [{ provide: NX_DATE_FORMATS, useValue: ɵ0 }],
                },] }
    ];
    return NxNativeDateModule;
}());
export { NxNativeDateModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC9kYXRlZmllbGQvIiwic291cmNlcyI6WyJhZGFwdGVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDL0QsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFpQixTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFOUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDOztBQUV2RCxNQUFNLEtBQU8sdUJBQXVCLEdBQUcsRUFBQyxPQUFPLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUM7QUFFeEYsK0JBQWMsY0FBYyxDQUFDO0FBQzdCLDhCQUFjLGdCQUFnQixDQUFDO0FBQy9CLGdDQUFjLGdCQUFnQixDQUFDO0FBRS9CLG9DQUFjLHVCQUF1QixDQUFDO0FBQ3RDLHVDQUFjLHVCQUF1QixDQUFDO0FBRXRDO0lBQUE7SUFPK0IsQ0FBQzs7Z0JBUC9CLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUM7b0JBQ3pCLFNBQVMsRUFBRTt3QkFDVCxFQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLG1CQUFtQixFQUFDO3dCQUN2RCx1QkFBdUI7cUJBQ3hCO2lCQUNGOztJQUM4Qix1QkFBQztDQUFBLEFBUGhDLElBT2dDO1NBQW5CLGdCQUFnQjtTQUlzQixzQkFBc0I7QUFGekU7SUFBQTtJQUlpQyxDQUFDOztnQkFKakMsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDO29CQUMzQixTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxJQUF3QixFQUFDLENBQUM7aUJBQzFFOztJQUNnQyx5QkFBQztDQUFBLEFBSmxDLElBSWtDO1NBQXJCLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5YX05BVElWRV9EQVRFX0ZPUk1BVFMgfSBmcm9tICcuL25hdGl2ZS1kYXRlLWZvcm1hdHMnO1xuaW1wb3J0IHsgTnhOYXRpdmVEYXRlQWRhcHRlciB9IGZyb20gJy4vbmF0aXZlLWRhdGUtYWRhcHRlcic7XG5pbXBvcnQgeyBOWF9EQVRFX0ZPUk1BVFMgfSBmcm9tICcuL2RhdGUtZm9ybWF0cyc7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtJbmplY3Rpb25Ub2tlbiwgTE9DQUxFX0lEfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE54RGF0ZUFkYXB0ZXIgfSBmcm9tICcuL2RhdGUtYWRhcHRlcic7XG5pbXBvcnQgeyBOWF9EQVRFX0xPQ0FMRSB9IGZyb20gJy4vZGF0ZS10b2tlbic7XG5cbmltcG9ydCB7IFBsYXRmb3JtTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcblxuZXhwb3J0IGNvbnN0IE5YX0RBVEVfTE9DQUxFX1BST1ZJREVSID0ge3Byb3ZpZGU6IE5YX0RBVEVfTE9DQUxFLCB1c2VFeGlzdGluZzogTE9DQUxFX0lEfTtcblxuZXhwb3J0ICogZnJvbSAnLi9kYXRlLXRva2VuJztcbmV4cG9ydCAqIGZyb20gJy4vZGF0ZS1hZGFwdGVyJztcbmV4cG9ydCAqIGZyb20gJy4vZGF0ZS1mb3JtYXRzJztcblxuZXhwb3J0ICogZnJvbSAnLi9uYXRpdmUtZGF0ZS1hZGFwdGVyJztcbmV4cG9ydCAqIGZyb20gJy4vbmF0aXZlLWRhdGUtZm9ybWF0cyc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtQbGF0Zm9ybU1vZHVsZV0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtwcm92aWRlOiBOeERhdGVBZGFwdGVyLCB1c2VDbGFzczogTnhOYXRpdmVEYXRlQWRhcHRlcn0sXG4gICAgTlhfREFURV9MT0NBTEVfUFJPVklERVJcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgTmF0aXZlRGF0ZU1vZHVsZSB7fVxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbTmF0aXZlRGF0ZU1vZHVsZV0sXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBOWF9EQVRFX0ZPUk1BVFMsIHVzZVZhbHVlOiBOWF9OQVRJVkVfREFURV9GT1JNQVRTfV0sXG59KVxuZXhwb3J0IGNsYXNzIE54TmF0aXZlRGF0ZU1vZHVsZSB7fVxuIl19