/**
 * @fileoverview added by tsickle
 * Generated from: adapter/date-adapter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
/**
 * \@docs-private
 * @abstract
 * @template D
 */
var /**
 * \@docs-private
 * @abstract
 * @template D
 */
NxDateAdapter = /** @class */ (function () {
    function NxDateAdapter() {
        this.locale = 'de-DE';
        this._localeChanges = new Subject();
    }
    Object.defineProperty(NxDateAdapter.prototype, "localeChanges", {
        get: /**
         * @return {?}
         */
        function () { return this._localeChanges; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    NxDateAdapter.prototype.deserialize = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value == null || this.isDateInstance(value) && this.isValid(value)) {
            return value;
        }
        return this.invalid();
    };
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    NxDateAdapter.prototype.sameDate = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        if (first && second) {
            /** @type {?} */
            var firstValid = this.isValid(first);
            /** @type {?} */
            var secondValid = this.isValid(second);
            if (firstValid && secondValid) {
                return !this.compareDate(first, second);
            }
            return firstValid === secondValid;
        }
        return first === second;
    };
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    NxDateAdapter.prototype.compareDate = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return this.getYear(first) - this.getYear(second) ||
            this.getMonth(first) - this.getMonth(second) ||
            this.getDate(first) - this.getDate(second);
    };
    /**
     * @param {?} locale
     * @return {?}
     */
    NxDateAdapter.prototype.setLocale = /**
     * @param {?} locale
     * @return {?}
     */
    function (locale) {
        this.locale = locale;
        this._localeChanges.next(this.locale);
    };
    /**
     * @return {?}
     */
    NxDateAdapter.prototype.getLocale = /**
     * @return {?}
     */
    function () {
        return this.locale;
    };
    /**
     * @param {?} date
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    NxDateAdapter.prototype.clampDate = /**
     * @param {?} date
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    function (date, min, max) {
        if (min && this.compareDate(date, min) < 0) {
            return min;
        }
        if (max && this.compareDate(date, max) > 0) {
            return max;
        }
        return date;
    };
    return NxDateAdapter;
}());
/**
 * \@docs-private
 * @abstract
 * @template D
 */
export { NxDateAdapter };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    NxDateAdapter.prototype.locale;
    /**
     * @type {?}
     * @protected
     */
    NxDateAdapter.prototype._localeChanges;
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.toIso8601 = function (date) { };
    /**
     * @abstract
     * @param {?} date
     * @param {?} displayFormat
     * @return {?}
     */
    NxDateAdapter.prototype.format = function (date, displayFormat) { };
    /**
     * @abstract
     * @param {?} value
     * @param {?} format
     * @param {?} strict
     * @return {?}
     */
    NxDateAdapter.prototype.parse = function (value, format, strict) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.isValid = function (date) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.clone = function (date) { };
    /**
     * @abstract
     * @param {?} obj
     * @return {?}
     */
    NxDateAdapter.prototype.isDateInstance = function (obj) { };
    /**
     * @abstract
     * @return {?}
     */
    NxDateAdapter.prototype.invalid = function () { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getYear = function (date) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getMonth = function (date) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getDate = function (date) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getYearName = function (date) { };
    /**
     * @abstract
     * @param {?} year
     * @param {?} month
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.createDate = function (year, month, date) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getNumDaysInMonth = function (date) { };
    /**
     * @abstract
     * @return {?}
     */
    NxDateAdapter.prototype.getDateNames = function () { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getDayOfWeek = function (date) { };
    /**
     * @abstract
     * @return {?}
     */
    NxDateAdapter.prototype.getFirstDayOfWeek = function () { };
    /**
     * @abstract
     * @param {?} style
     * @return {?}
     */
    NxDateAdapter.prototype.getMonthNames = function (style) { };
    /**
     * @abstract
     * @return {?}
     */
    NxDateAdapter.prototype.today = function () { };
    /**
     * @abstract
     * @param {?} date
     * @param {?} months
     * @return {?}
     */
    NxDateAdapter.prototype.addCalendarMonths = function (date, months) { };
    /**
     * @abstract
     * @param {?} date
     * @param {?} years
     * @return {?}
     */
    NxDateAdapter.prototype.addCalendarYears = function (date, years) { };
    /**
     * @abstract
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    NxDateAdapter.prototype.addCalendarDays = function (date, days) { };
    /**
     * @abstract
     * @param {?} style
     * @return {?}
     */
    NxDateAdapter.prototype.getDayOfWeekNames = function (style) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvZGF0ZWZpZWxkLyIsInNvdXJjZXMiOlsiYWRhcHRlci9kYXRlLWFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQWdCLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7Ozs7O0FBSTdDOzs7Ozs7SUFBQTtRQUNZLFdBQU0sR0FBRyxPQUFPLENBQUM7UUFDakIsbUJBQWMsR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO0lBd0VuRCxDQUFDO0lBM0RDLHNCQUFJLHdDQUFhOzs7O1FBQWpCLGNBQTBDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7OztPQUFBOzs7OztJQUV2RSxtQ0FBVzs7OztJQUFYLFVBQVksS0FBVTtRQUNwQixJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3RFLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN4QixDQUFDOzs7Ozs7SUFFRCxnQ0FBUTs7Ozs7SUFBUixVQUFTLEtBQWUsRUFBRSxNQUFnQjtRQUN4QyxJQUFJLEtBQUssSUFBSSxNQUFNLEVBQUU7O2dCQUNiLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQzs7Z0JBQ2hDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUV4QyxJQUFJLFVBQVUsSUFBSSxXQUFXLEVBQUU7Z0JBQzdCLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQzthQUN6QztZQUNELE9BQU8sVUFBVSxLQUFLLFdBQVcsQ0FBQztTQUNuQztRQUNELE9BQU8sS0FBSyxLQUFLLE1BQU0sQ0FBQztJQUMxQixDQUFDOzs7Ozs7SUFFRCxtQ0FBVzs7Ozs7SUFBWCxVQUFZLEtBQVEsRUFBRSxNQUFTO1FBQzdCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUM3QyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqRCxDQUFDOzs7OztJQUVELGlDQUFTOzs7O0lBQVQsVUFBVSxNQUFjO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7O0lBRUQsaUNBQVM7OztJQUFUO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7Ozs7Ozs7SUFlRCxpQ0FBUzs7Ozs7O0lBQVQsVUFBVSxJQUFPLEVBQUUsR0FBYyxFQUFFLEdBQWM7UUFDL0MsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzFDLE9BQU8sR0FBRyxDQUFDO1NBQ1o7UUFDRCxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDMUMsT0FBTyxHQUFHLENBQUM7U0FDWjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQTFFRCxJQTBFQzs7Ozs7Ozs7Ozs7O0lBekVDLCtCQUEyQjs7Ozs7SUFDM0IsdUNBQWlEOzs7Ozs7SUFDakQsd0RBQW9DOzs7Ozs7O0lBQ3BDLG9FQUFxRDs7Ozs7Ozs7SUFDckQscUVBQStFOzs7Ozs7SUFDL0Usc0RBQW1DOzs7Ozs7SUFDbkMsb0RBQTJCOzs7Ozs7SUFDM0IsNERBQTJDOzs7OztJQUMzQyxrREFBc0I7Ozs7OztJQUV0QixzREFBa0M7Ozs7OztJQUNsQyx1REFBbUM7Ozs7OztJQUNuQyxzREFBa0M7Ozs7OztJQXVDbEMsMERBQXNDOzs7Ozs7OztJQUN0QyxzRUFBa0U7Ozs7OztJQUNsRSxnRUFBNEM7Ozs7O0lBQzVDLHVEQUFrQzs7Ozs7O0lBQ2xDLDJEQUF1Qzs7Ozs7SUFDdkMsNERBQXFDOzs7Ozs7SUFDckMsNkRBQXFFOzs7OztJQUNyRSxnREFBb0I7Ozs7Ozs7SUFDcEIsd0VBQXVEOzs7Ozs7O0lBQ3ZELHNFQUFxRDs7Ozs7OztJQUNyRCxvRUFBbUQ7Ozs7OztJQUNuRCxpRUFBeUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlICwgIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKiBAZG9jcy1wcml2YXRlICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTnhEYXRlQWRhcHRlcjxEPiB7XG4gIHByb3RlY3RlZCBsb2NhbGUgPSAnZGUtREUnO1xuICBwcm90ZWN0ZWQgX2xvY2FsZUNoYW5nZXMgPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XG4gIGFic3RyYWN0IHRvSXNvODYwMShkYXRlOiBEKTogc3RyaW5nO1xuICBhYnN0cmFjdCBmb3JtYXQoZGF0ZTogRCwgZGlzcGxheUZvcm1hdDogYW55KTogc3RyaW5nO1xuICBhYnN0cmFjdCBwYXJzZSh2YWx1ZTogYW55LCBmb3JtYXQ6IHN0cmluZ3xzdHJpbmdbXSwgc3RyaWN0OiBib29sZWFuKTogRCB8IG51bGw7XG4gIGFic3RyYWN0IGlzVmFsaWQoZGF0ZTogRCk6IGJvb2xlYW47XG4gIGFic3RyYWN0IGNsb25lKGRhdGU6IEQpOiBEO1xuICBhYnN0cmFjdCBpc0RhdGVJbnN0YW5jZShvYmo6IGFueSk6IGJvb2xlYW47XG4gIGFic3RyYWN0IGludmFsaWQoKTogRDtcblxuICBhYnN0cmFjdCBnZXRZZWFyKGRhdGU6IEQpOiBudW1iZXI7XG4gIGFic3RyYWN0IGdldE1vbnRoKGRhdGU6IEQpOiBudW1iZXI7XG4gIGFic3RyYWN0IGdldERhdGUoZGF0ZTogRCk6IG51bWJlcjtcblxuICBnZXQgbG9jYWxlQ2hhbmdlcygpOiBPYnNlcnZhYmxlPHN0cmluZz4geyByZXR1cm4gdGhpcy5fbG9jYWxlQ2hhbmdlczsgfVxuXG4gIGRlc2VyaWFsaXplKHZhbHVlOiBhbnkpOiBEIHwgbnVsbCB7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgdGhpcy5pc0RhdGVJbnN0YW5jZSh2YWx1ZSkgJiYgdGhpcy5pc1ZhbGlkKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkKCk7XG4gIH1cblxuICBzYW1lRGF0ZShmaXJzdDogRCB8IG51bGwsIHNlY29uZDogRCB8IG51bGwpOiBib29sZWFuIHtcbiAgICBpZiAoZmlyc3QgJiYgc2Vjb25kKSB7XG4gICAgICBjb25zdCBmaXJzdFZhbGlkID0gdGhpcy5pc1ZhbGlkKGZpcnN0KTtcbiAgICAgIGNvbnN0IHNlY29uZFZhbGlkID0gdGhpcy5pc1ZhbGlkKHNlY29uZCk7XG5cbiAgICAgIGlmIChmaXJzdFZhbGlkICYmIHNlY29uZFZhbGlkKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5jb21wYXJlRGF0ZShmaXJzdCwgc2Vjb25kKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmaXJzdFZhbGlkID09PSBzZWNvbmRWYWxpZDtcbiAgICB9XG4gICAgcmV0dXJuIGZpcnN0ID09PSBzZWNvbmQ7XG4gIH1cblxuICBjb21wYXJlRGF0ZShmaXJzdDogRCwgc2Vjb25kOiBEKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5nZXRZZWFyKGZpcnN0KSAtIHRoaXMuZ2V0WWVhcihzZWNvbmQpIHx8XG4gICAgICAgIHRoaXMuZ2V0TW9udGgoZmlyc3QpIC0gdGhpcy5nZXRNb250aChzZWNvbmQpIHx8XG4gICAgICAgIHRoaXMuZ2V0RGF0ZShmaXJzdCkgLSB0aGlzLmdldERhdGUoc2Vjb25kKTtcbiAgfVxuXG4gIHNldExvY2FsZShsb2NhbGU6IHN0cmluZykge1xuICAgIHRoaXMubG9jYWxlID0gbG9jYWxlO1xuICAgIHRoaXMuX2xvY2FsZUNoYW5nZXMubmV4dCh0aGlzLmxvY2FsZSk7XG4gIH1cblxuICBnZXRMb2NhbGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGU7XG4gIH1cblxuICBhYnN0cmFjdCBnZXRZZWFyTmFtZShkYXRlOiBEKTogc3RyaW5nO1xuICBhYnN0cmFjdCBjcmVhdGVEYXRlKHllYXI6IG51bWJlciwgbW9udGg6IG51bWJlciwgZGF0ZTogbnVtYmVyKTogRDtcbiAgYWJzdHJhY3QgZ2V0TnVtRGF5c0luTW9udGgoZGF0ZTogRCk6IG51bWJlcjtcbiAgYWJzdHJhY3QgZ2V0RGF0ZU5hbWVzKCk6IHN0cmluZ1tdO1xuICBhYnN0cmFjdCBnZXREYXlPZldlZWsoZGF0ZTogRCk6IG51bWJlcjtcbiAgYWJzdHJhY3QgZ2V0Rmlyc3REYXlPZldlZWsoKTogbnVtYmVyO1xuICBhYnN0cmFjdCBnZXRNb250aE5hbWVzKHN0eWxlOiAnbG9uZycgfCAnc2hvcnQnIHwgJ25hcnJvdycpOiBzdHJpbmdbXTtcbiAgYWJzdHJhY3QgdG9kYXkoKTogRDtcbiAgYWJzdHJhY3QgYWRkQ2FsZW5kYXJNb250aHMoZGF0ZTogRCwgbW9udGhzOiBudW1iZXIpOiBEO1xuICBhYnN0cmFjdCBhZGRDYWxlbmRhclllYXJzKGRhdGU6IEQsIHllYXJzOiBudW1iZXIpOiBEO1xuICBhYnN0cmFjdCBhZGRDYWxlbmRhckRheXMoZGF0ZTogRCwgZGF5czogbnVtYmVyKTogRDtcbiAgYWJzdHJhY3QgZ2V0RGF5T2ZXZWVrTmFtZXMoc3R5bGU6ICdsb25nJyB8ICdzaG9ydCcgfCAnbmFycm93Jyk6IHN0cmluZ1tdO1xuXG4gIGNsYW1wRGF0ZShkYXRlOiBELCBtaW4/OiBEIHwgbnVsbCwgbWF4PzogRCB8IG51bGwpOiBEIHtcbiAgICBpZiAobWluICYmIHRoaXMuY29tcGFyZURhdGUoZGF0ZSwgbWluKSA8IDApIHtcbiAgICAgIHJldHVybiBtaW47XG4gICAgfVxuICAgIGlmIChtYXggJiYgdGhpcy5jb21wYXJlRGF0ZShkYXRlLCBtYXgpID4gMCkge1xuICAgICAgcmV0dXJuIG1heDtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbn1cbiJdfQ==