/**
 * @fileoverview added by tsickle
 * Generated from: datefield.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NxFormfieldComponent } from '@allianz/ngx-ndbx/formfield';
import { NX_INPUT_VALUE_ACCESSOR } from '@allianz/ngx-ndbx/input';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { DOWN_ARROW } from '@angular/cdk/keycodes';
import { Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, Optional, Output, } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators, } from '@angular/forms';
import { Subscription } from 'rxjs';
import { NX_DATE_FORMATS, NxDateAdapter } from './adapter/index';
import { createMissingDateImplError } from './datefield-errors';
import { NxDatepickerComponent } from './datepicker/datepicker.component';
import { NxDateValidators } from './date-validators';
// tslint:disable:member-ordering
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 * @type {?}
 */
export var NX_DATEFIELD_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return NxDatefieldDirective; })),
    multi: true
};
/** @type {?} */
export var NX_DATEFIELD_VALIDATORS = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return NxDatefieldDirective; })),
    multi: true
};
/**
 * An event used for datepicker input and change events. We don't always have access to a native
 * input or change event because the event may have been triggered by the user clicking on the
 * calendar popup. For consistency, we always use NxDatepickerInputEvent instead.
 * @template D
 */
var /**
 * An event used for datepicker input and change events. We don't always have access to a native
 * input or change event because the event may have been triggered by the user clicking on the
 * calendar popup. For consistency, we always use NxDatepickerInputEvent instead.
 * @template D
 */
NxDatepickerInputEvent = /** @class */ (function () {
    function NxDatepickerInputEvent(target, targetElement) {
        this.target = target;
        this.targetElement = targetElement;
        this.value = this.target.value;
    }
    return NxDatepickerInputEvent;
}());
/**
 * An event used for datepicker input and change events. We don't always have access to a native
 * input or change event because the event may have been triggered by the user clicking on the
 * calendar popup. For consistency, we always use NxDatepickerInputEvent instead.
 * @template D
 */
export { NxDatepickerInputEvent };
if (false) {
    /**
     * The new value for the target datepicker input.
     * @type {?}
     */
    NxDatepickerInputEvent.prototype.value;
    /**
     * Reference to the datepicker input component that emitted the event.
     * @type {?}
     */
    NxDatepickerInputEvent.prototype.target;
    /**
     * Reference to the native input element associated with the datepicker input.
     * @type {?}
     */
    NxDatepickerInputEvent.prototype.targetElement;
}
/**
 * Directive used to provide date processing functionality to an input.
 * @template D
 */
var NxDatefieldDirective = /** @class */ (function () {
    function NxDatefieldDirective(_elementRef, _dateAdapter, _dateFormats, _formField) {
        var _this = this;
        this._elementRef = _elementRef;
        this._dateAdapter = _dateAdapter;
        this._dateFormats = _dateFormats;
        this._formField = _formField;
        /**
         * \@docs-private
         */
        this.currentFormattedDate = null;
        this._strict = true;
        /**
         * Emits when a `change` event is fired on this `<input>`.
         */
        this.dateChange = new EventEmitter();
        /**
         * Emits when an `input` event is fired on this `<input>`.
         */
        this.dateInput = new EventEmitter();
        /**
         * Emits when the value changes (either due to user input or programmatic change).
         */
        this._valueChange = new EventEmitter();
        /**
         * Emits when the disabled state has changed
         */
        this._disabledChange = new EventEmitter();
        this._onTouched = (/**
         * @return {?}
         */
        function () { });
        this._cvaOnChange = (/**
         * @return {?}
         */
        function () { });
        this._validatorOnChange = (/**
         * @return {?}
         */
        function () { });
        this._datepickerSubscription = Subscription.EMPTY;
        this._localeSubscription = Subscription.EMPTY;
        if (!this._dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError('NX_DATE_FORMATS');
        }
        // Update the displayed date when the locale changes.
        this._localeSubscription = _dateAdapter.localeChanges.subscribe((/**
         * @return {?}
         */
        function () {
            _this.value = _this.value;
        }));
    }
    Object.defineProperty(NxDatefieldDirective.prototype, "datepicker", {
        /** The datepicker that this input is associated with. */
        set: /**
         * The datepicker that this input is associated with.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.registerDatepicker(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    NxDatefieldDirective.prototype.registerDatepicker = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this._datepicker = value;
            this._datepicker.registerInput(this);
        }
    };
    Object.defineProperty(NxDatefieldDirective.prototype, "datefieldFilter", {
        /** Function that can be used to filter out dates within the datepicker and invalidate values in the datefield. */
        set: /**
         * Function that can be used to filter out dates within the datepicker and invalidate values in the datefield.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dateFilter = value;
            this._validatorOnChange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDatefieldDirective.prototype, "value", {
        /** Provide or read the current date. It's type <D> depends on the chosen date implementation */
        get: /**
         * Provide or read the current date. It's type <D> depends on the chosen date implementation
         * @return {?}
         */
        function () { return this._value; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value = this._dateAdapter.deserialize(value);
            value = this._getValidDateOrNull(value);
            /** @type {?} */
            var oldDate = this.value;
            this._value = value;
            this._formatValue(this.value);
            if (!this._dateAdapter.sameDate(oldDate, value)) {
                this._valueChange.emit(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDatefieldDirective.prototype, "min", {
        /** Sets the minimum valid date. */
        get: /**
         * Sets the minimum valid date.
         * @return {?}
         */
        function () { return this._min; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            this._validatorOnChange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDatefieldDirective.prototype, "max", {
        /** Sets the maximum valid date. */
        get: /**
         * Sets the maximum valid date.
         * @return {?}
         */
        function () { return this._max; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
            this._validatorOnChange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDatefieldDirective.prototype, "strict", {
        /** If supported by the date implementation enable strict parsing (applies to Moment's parse function here) */
        get: /**
         * If supported by the date implementation enable strict parsing (applies to Moment's parse function here)
         * @return {?}
         */
        function () { return this._strict; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._strict = coerceBooleanProperty(value);
            // parse given text value again
            this._onInput(this._elementRef.nativeElement.value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDatefieldDirective.prototype, "parseFormat", {
        /** Override the parse format given with parse.dateInput with the token NX_DATE_FORMATS  */
        get: /**
         * Override the parse format given with parse.dateInput with the token NX_DATE_FORMATS
         * @return {?}
         */
        function () { return this._parseFormat; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._parseFormat = value;
            // parse given text value again
            this._onInput(this._elementRef.nativeElement.value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDatefieldDirective.prototype, "displayFormat", {
        /** Override the display format given with display.dateInput with the token NX_DATE_FORMATS  */
        get: /**
         * Override the display format given with display.dateInput with the token NX_DATE_FORMATS
         * @return {?}
         */
        function () { return this._displayFormat; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._displayFormat = value;
            this._formatValue(this.value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDatefieldDirective.prototype, "disabled", {
        /** Whether the datepicker-input is disabled. */
        get: /**
         * Whether the datepicker-input is disabled.
         * @return {?}
         */
        function () { return !!this._disabled; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (this._disabled !== newValue) {
                this._disabled = newValue;
                this._disabledChange.emit(newValue);
            }
            if (newValue) {
                // Normally, native input elements automatically blur if they turn disabled. This behavior
                // is problematic, because it would mean that it triggers another change detection cycle,
                // which then causes a changed after checked error if the input element was focused before.
                this._elementRef.nativeElement.blur();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @deprecated
     * @deletion-target 9.0.0
     * This will force the current value to be parsed again by the given DateAdapter.
     * That's a convenience method so you can trigger it manually.
     */
    /**
     * @deprecated
     * \@deletion-target 9.0.0
     * This will force the current value to be parsed again by the given DateAdapter.
     * That's a convenience method so you can trigger it manually.
     * @return {?}
     */
    NxDatefieldDirective.prototype.format = /**
     * @deprecated
     * \@deletion-target 9.0.0
     * This will force the current value to be parsed again by the given DateAdapter.
     * That's a convenience method so you can trigger it manually.
     * @return {?}
     */
    function () {
        this.value = this.value;
    };
    /**
     * @return {?}
     */
    NxDatefieldDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._datepicker) {
            this._datepickerSubscription =
                this._datepicker.selectedChanged.subscribe((/**
                 * @param {?} selected
                 * @return {?}
                 */
                function (selected) {
                    _this.value = selected;
                    _this._cvaOnChange(selected);
                    _this._onTouched();
                    _this.dateInput.emit(new NxDatepickerInputEvent(_this, _this._elementRef.nativeElement));
                    _this.dateChange.emit(new NxDatepickerInputEvent(_this, _this._elementRef.nativeElement));
                }));
        }
    };
    /**
     * @return {?}
     */
    NxDatefieldDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._datepickerSubscription.unsubscribe();
        this._localeSubscription.unsubscribe();
        this._valueChange.complete();
        this._disabledChange.complete();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} fn
     * @return {?}
     */
    NxDatefieldDirective.prototype.registerOnValidatorChange = /**
     * \@docs-private
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._validatorOnChange = fn;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} c
     * @return {?}
     */
    NxDatefieldDirective.prototype.validate = /**
     * \@docs-private
     * @param {?} c
     * @return {?}
     */
    function (c) {
        /** @type {?} */
        var validator = Validators.compose(this.getValidators());
        return validator ? validator(c) : null;
    };
    /**
     * @docs-private
     * @deprecated
     * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead
     */
    /**
     * \@docs-private
     * @deprecated
     * \@deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead
     * @return {?}
     */
    NxDatefieldDirective.prototype.getPopupConnectionElementRef = /**
     * \@docs-private
     * @deprecated
     * \@deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead
     * @return {?}
     */
    function () {
        return this.getConnectedOverlayOrigin();
    };
    /**
     * @docs-private
     *
     * Gets the element that the datepicker popup should be connected to.
     * @return The element to connect the popup to.
     */
    /**
     * \@docs-private
     *
     * Gets the element that the datepicker popup should be connected to.
     * @return {?} The element to connect the popup to.
     */
    NxDatefieldDirective.prototype.getConnectedOverlayOrigin = /**
     * \@docs-private
     *
     * Gets the element that the datepicker popup should be connected to.
     * @return {?} The element to connect the popup to.
     */
    function () {
        // formfield not yet accessible as we don't have them in a secondary entry point to import yet.
        // return this._elementRef;
        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;
    };
    // Implemented as part of ControlValueAccessor.
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} value
     * @return {?}
     */
    NxDatefieldDirective.prototype.writeValue = 
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    // Implemented as part of ControlValueAccessor.
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    NxDatefieldDirective.prototype.registerOnChange = 
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._cvaOnChange = fn;
    };
    // Implemented as part of ControlValueAccessor.
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    NxDatefieldDirective.prototype.registerOnTouched = 
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    // Implemented as part of ControlValueAccessor.
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    NxDatefieldDirective.prototype.setDisabledState = 
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NxDatefieldDirective.prototype._onKeydown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.altKey && event.keyCode === DOWN_ARROW) {
            this._datepicker.open();
            event.preventDefault();
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NxDatefieldDirective.prototype._onInput = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var date = this._dateAdapter.parse(value, this._parseFormat || this._dateFormats.parse.dateInput, this.strict);
        date = this._getValidDateOrNull(date);
        this._value = date;
        if (date) {
            this.currentFormattedDate = this._dateAdapter.format(date, this._displayFormat || this._dateFormats.display.dateInput);
        }
        else {
            this.currentFormattedDate = null;
        }
        this._cvaOnChange(date);
        this._valueChange.emit(date);
        this.dateInput.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));
    };
    /**
     * @return {?}
     */
    NxDatefieldDirective.prototype._onChange = /**
     * @return {?}
     */
    function () {
        this.dateChange.emit(new NxDatepickerInputEvent(this, this._elementRef.nativeElement));
    };
    /**
     * @return {?}
     */
    NxDatefieldDirective.prototype._focus = /**
     * @return {?}
     */
    function () {
        this._elementRef.nativeElement.focus();
    };
    /**
     * @return {?}
     */
    NxDatefieldDirective.prototype._onBlur = /**
     * @return {?}
     */
    function () {
        // Reformat the input only if we have a valid value.
        if (this.value) {
            this._formatValue(this.value);
        }
        this._onTouched();
    };
    /** Returns the validators of the datefield. */
    /**
     * Returns the validators of the datefield.
     * @return {?}
     */
    NxDatefieldDirective.prototype.getValidators = /**
     * Returns the validators of the datefield.
     * @return {?}
     */
    function () {
        return [
            NxDateValidators.parse(this._dateAdapter, this._dateFormats, this._elementRef.nativeElement, this._strict, this._parseFormat),
            NxDateValidators.min(this._dateAdapter, this.min),
            NxDateValidators.max(this._dateAdapter, this.max),
            NxDateValidators.filter(this._dateAdapter, this._dateFilter)
        ];
    };
    /** Formats a value and sets it on the input native element. */
    /**
     * Formats a value and sets it on the input native element.
     * @private
     * @param {?} value
     * @return {?}
     */
    NxDatefieldDirective.prototype._formatValue = /**
     * Formats a value and sets it on the input native element.
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._elementRef.nativeElement.value = value ?
            this._dateAdapter.format(value, this._displayFormat || this._dateFormats.display.dateInput) : '';
    };
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    NxDatefieldDirective.prototype._getValidDateOrNull = /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    function (obj) {
        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
    };
    NxDatefieldDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[nxDatefield]',
                    providers: [
                        NX_DATEFIELD_VALUE_ACCESSOR,
                        NX_DATEFIELD_VALIDATORS,
                        // {provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxDatefieldDirective},
                        { provide: NX_INPUT_VALUE_ACCESSOR, useExisting: NxDatefieldDirective }
                    ],
                    host: {
                        '[attr.aria-haspopup]': 'true',
                        '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',
                        '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',
                        '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',
                        '[disabled]': 'disabled',
                        '(input)': '_onInput($event.target.value)',
                        '(change)': '_onChange()',
                        '(blur)': '_onBlur()',
                        '(keydown)': '_onKeydown($event)',
                    },
                    exportAs: 'nxDatefield',
                },] }
    ];
    /** @nocollapse */
    NxDatefieldDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NxDateAdapter, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NX_DATE_FORMATS,] }] },
        { type: NxFormfieldComponent, decorators: [{ type: Optional }] }
    ]; };
    NxDatefieldDirective.propDecorators = {
        datepicker: [{ type: Input, args: ['nxDatepicker',] }],
        datefieldFilter: [{ type: Input, args: ['nxDatefieldFilter',] }],
        value: [{ type: Input }],
        min: [{ type: Input, args: ['nxMin',] }],
        max: [{ type: Input, args: ['nxMax',] }],
        strict: [{ type: Input, args: ['nxStrict',] }],
        parseFormat: [{ type: Input, args: ['nxParseFormat',] }],
        displayFormat: [{ type: Input, args: ['nxDisplayFormat',] }],
        disabled: [{ type: Input }],
        dateChange: [{ type: Output }],
        dateInput: [{ type: Output }]
    };
    return NxDatefieldDirective;
}());
export { NxDatefieldDirective };
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxDatefieldDirective.prototype.currentFormattedDate;
    /** @type {?} */
    NxDatefieldDirective.prototype._datepicker;
    /** @type {?} */
    NxDatefieldDirective.prototype._dateFilter;
    /**
     * @type {?}
     * @private
     */
    NxDatefieldDirective.prototype._value;
    /**
     * @type {?}
     * @private
     */
    NxDatefieldDirective.prototype._min;
    /**
     * @type {?}
     * @private
     */
    NxDatefieldDirective.prototype._max;
    /**
     * @type {?}
     * @private
     */
    NxDatefieldDirective.prototype._strict;
    /**
     * @type {?}
     * @private
     */
    NxDatefieldDirective.prototype._parseFormat;
    /**
     * @type {?}
     * @private
     */
    NxDatefieldDirective.prototype._displayFormat;
    /**
     * @type {?}
     * @private
     */
    NxDatefieldDirective.prototype._disabled;
    /**
     * Emits when a `change` event is fired on this `<input>`.
     * @type {?}
     */
    NxDatefieldDirective.prototype.dateChange;
    /**
     * Emits when an `input` event is fired on this `<input>`.
     * @type {?}
     */
    NxDatefieldDirective.prototype.dateInput;
    /**
     * Emits when the value changes (either due to user input or programmatic change).
     * @type {?}
     */
    NxDatefieldDirective.prototype._valueChange;
    /**
     * Emits when the disabled state has changed
     * @type {?}
     */
    NxDatefieldDirective.prototype._disabledChange;
    /** @type {?} */
    NxDatefieldDirective.prototype._onTouched;
    /**
     * @type {?}
     * @private
     */
    NxDatefieldDirective.prototype._cvaOnChange;
    /**
     * @type {?}
     * @private
     */
    NxDatefieldDirective.prototype._validatorOnChange;
    /**
     * @type {?}
     * @private
     */
    NxDatefieldDirective.prototype._datepickerSubscription;
    /**
     * @type {?}
     * @private
     */
    NxDatefieldDirective.prototype._localeSubscription;
    /**
     * @type {?}
     * @private
     */
    NxDatefieldDirective.prototype._elementRef;
    /** @type {?} */
    NxDatefieldDirective.prototype._dateAdapter;
    /**
     * @type {?}
     * @private
     */
    NxDatefieldDirective.prototype._dateFormats;
    /**
     * @type {?}
     * @private
     */
    NxDatefieldDirective.prototype._formField;
}
//# sourceMappingURL=data:application/json;base64,