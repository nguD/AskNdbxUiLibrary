/**
 * @fileoverview added by tsickle
 * Generated from: date-validators.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Provides a set of date validators that can be used by form controls.
 * \@dynamic
 */
var /**
 * Provides a set of date validators that can be used by form controls.
 * \@dynamic
 */
NxDateValidators = /** @class */ (function () {
    function NxDateValidators() {
    }
    /** The form control validator for whether the input parses. */
    /**
     * The form control validator for whether the input parses.
     * @template D
     * @param {?} dateAdapter
     * @param {?} dateFormats
     * @param {?} input
     * @param {?} strict
     * @param {?=} customParseFormat
     * @return {?}
     */
    NxDateValidators.parse = /**
     * The form control validator for whether the input parses.
     * @template D
     * @param {?} dateAdapter
     * @param {?} dateFormats
     * @param {?} input
     * @param {?} strict
     * @param {?=} customParseFormat
     * @return {?}
     */
    function (dateAdapter, dateFormats, input, strict, customParseFormat) {
        if (customParseFormat === void 0) { customParseFormat = null; }
        return (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var parsedValue = dateAdapter.parse(input.value, customParseFormat || dateFormats.parse.dateInput, strict);
            /** @type {?} */
            var valid = !parsedValue || dateAdapter.isValid(parsedValue);
            return valid ? null : { 'nxDatefieldParse': { 'text': input } };
        });
    };
    /** The form control validator for the min date. */
    /**
     * The form control validator for the min date.
     * @template D
     * @param {?} dateAdapter
     * @param {?} min
     * @return {?}
     */
    NxDateValidators.min = /**
     * The form control validator for the min date.
     * @template D
     * @param {?} dateAdapter
     * @param {?} min
     * @return {?}
     */
    function (dateAdapter, min) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            /** @type {?} */
            var controlValue = getValidDateOrNull(dateAdapter, dateAdapter.deserialize(control.value));
            return (!min || !controlValue ||
                dateAdapter.compareDate(min, controlValue) <= 0) ?
                null : { 'nxDatefieldMin': { 'min': min, 'actual': controlValue } };
        });
    };
    /** The form control validator for the max date. */
    /**
     * The form control validator for the max date.
     * @template D
     * @param {?} dateAdapter
     * @param {?} max
     * @return {?}
     */
    NxDateValidators.max = /**
     * The form control validator for the max date.
     * @template D
     * @param {?} dateAdapter
     * @param {?} max
     * @return {?}
     */
    function (dateAdapter, max) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            /** @type {?} */
            var controlValue = getValidDateOrNull(dateAdapter, dateAdapter.deserialize(control.value));
            return (!max || !controlValue ||
                dateAdapter.compareDate(max, controlValue) >= 0) ?
                null : { 'nxDatefieldMax': { 'max': max, 'actual': controlValue } };
        });
    };
    /** The form control validator for the date filter. */
    /**
     * The form control validator for the date filter.
     * @template D
     * @param {?} dateAdapter
     * @param {?} dateFilter
     * @return {?}
     */
    NxDateValidators.filter = /**
     * The form control validator for the date filter.
     * @template D
     * @param {?} dateAdapter
     * @param {?} dateFilter
     * @return {?}
     */
    function (dateAdapter, dateFilter) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            /** @type {?} */
            var controlValue = getValidDateOrNull(dateAdapter, dateAdapter.deserialize(control.value));
            return !dateFilter || !controlValue || dateFilter(controlValue) ?
                null : { 'nxDatefieldFilter': true };
        });
    };
    return NxDateValidators;
}());
/**
 * Provides a set of date validators that can be used by form controls.
 * \@dynamic
 */
export { NxDateValidators };
/**
 * @template D
 * @param {?} dateAdapter
 * @param {?} obj
 * @return {?}
 */
function getValidDateOrNull(dateAdapter, obj) {
    return (dateAdapter.isDateInstance(obj) && dateAdapter.isValid(obj)) ? obj : null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS12YWxpZGF0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvZGF0ZWZpZWxkLyIsInNvdXJjZXMiOlsiZGF0ZS12YWxpZGF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQU9BOzs7OztJQUFBO0lBK0NBLENBQUM7SUE3Q0MsK0RBQStEOzs7Ozs7Ozs7OztJQUN4RCxzQkFBSzs7Ozs7Ozs7OztJQUFaLFVBQ0UsV0FBNkIsRUFDN0IsV0FBMEIsRUFDMUIsS0FBdUIsRUFDdkIsTUFBZSxFQUNmLGlCQUEyQztRQUEzQyxrQ0FBQSxFQUFBLHdCQUEyQztRQUMzQzs7O1FBQU87O2dCQUNDLFdBQVcsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDOztnQkFDdEcsS0FBSyxHQUFHLENBQUMsV0FBVyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO1lBQzlELE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsa0JBQWtCLEVBQUUsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDLEVBQUMsQ0FBQztRQUM5RCxDQUFDLEVBQUM7SUFDSixDQUFDO0lBRUQsbURBQW1EOzs7Ozs7OztJQUM1QyxvQkFBRzs7Ozs7OztJQUFWLFVBQWMsV0FBNkIsRUFBRSxHQUFNO1FBQ2pEOzs7O1FBQU8sVUFBQyxPQUF3Qjs7Z0JBQ3hCLFlBQVksR0FBRyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUYsT0FBTyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWTtnQkFDekIsV0FBVyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEQsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLGdCQUFnQixFQUFFLEVBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFDLEVBQUMsQ0FBQztRQUN0RSxDQUFDLEVBQUM7SUFDSixDQUFDO0lBRUQsbURBQW1EOzs7Ozs7OztJQUM1QyxvQkFBRzs7Ozs7OztJQUFWLFVBQWMsV0FBNkIsRUFBRSxHQUFNO1FBQ2pEOzs7O1FBQU8sVUFBQyxPQUF3Qjs7Z0JBQzFCLFlBQVksR0FBRyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUYsT0FBTyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWTtnQkFDekIsV0FBVyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEQsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLGdCQUFnQixFQUFFLEVBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFDLEVBQUMsQ0FBQztRQUNwRSxDQUFDLEVBQUM7SUFDSixDQUFDO0lBRUQsc0RBQXNEOzs7Ozs7OztJQUMvQyx1QkFBTTs7Ozs7OztJQUFiLFVBQ0ksV0FBNkIsRUFDN0IsVUFBdUM7UUFFekM7Ozs7UUFBTyxVQUFDLE9BQXdCOztnQkFDeEIsWUFBWSxHQUFHLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM1RixPQUFPLENBQUMsVUFBVSxJQUFJLENBQUMsWUFBWSxJQUFJLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO2dCQUM3RCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsbUJBQW1CLEVBQUUsSUFBSSxFQUFDLENBQUM7UUFDekMsQ0FBQyxFQUFDO0lBQ0osQ0FBQztJQUNILHVCQUFDO0FBQUQsQ0FBQyxBQS9DRCxJQStDQzs7Ozs7Ozs7Ozs7O0FBRUQsU0FBUyxrQkFBa0IsQ0FBSSxXQUE2QixFQUFFLEdBQVE7SUFDcEUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUNwRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmFsaWRhdG9yRm4sIFZhbGlkYXRpb25FcnJvcnMsIEFic3RyYWN0Q29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE54RGF0ZUFkYXB0ZXIsIE54RGF0ZUZvcm1hdHMgfSBmcm9tICcuL2FkYXB0ZXInO1xuXG4vKipcbiAqIFByb3ZpZGVzIGEgc2V0IG9mIGRhdGUgdmFsaWRhdG9ycyB0aGF0IGNhbiBiZSB1c2VkIGJ5IGZvcm0gY29udHJvbHMuXG4gKiBAZHluYW1pY1xuICovXG5leHBvcnQgY2xhc3MgTnhEYXRlVmFsaWRhdG9ycyB7XG5cbiAgLyoqIFRoZSBmb3JtIGNvbnRyb2wgdmFsaWRhdG9yIGZvciB3aGV0aGVyIHRoZSBpbnB1dCBwYXJzZXMuICovXG4gIHN0YXRpYyBwYXJzZTxEPihcbiAgICBkYXRlQWRhcHRlcjogTnhEYXRlQWRhcHRlcjxEPixcbiAgICBkYXRlRm9ybWF0czogTnhEYXRlRm9ybWF0cyxcbiAgICBpbnB1dDogSFRNTElucHV0RWxlbWVudCxcbiAgICBzdHJpY3Q6IGJvb2xlYW4sXG4gICAgY3VzdG9tUGFyc2VGb3JtYXQ6IHN0cmluZyB8IHN0cmluZ1tdID0gbnVsbCk6IFZhbGlkYXRvckZuIHtcbiAgICByZXR1cm4gKCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcbiAgICAgIGNvbnN0IHBhcnNlZFZhbHVlID0gZGF0ZUFkYXB0ZXIucGFyc2UoaW5wdXQudmFsdWUsIGN1c3RvbVBhcnNlRm9ybWF0IHx8IGRhdGVGb3JtYXRzLnBhcnNlLmRhdGVJbnB1dCwgc3RyaWN0KTtcbiAgICAgIGNvbnN0IHZhbGlkID0gIXBhcnNlZFZhbHVlIHx8IGRhdGVBZGFwdGVyLmlzVmFsaWQocGFyc2VkVmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbGlkID8gbnVsbCA6IHsnbnhEYXRlZmllbGRQYXJzZSc6IHsndGV4dCc6IGlucHV0fX07XG4gICAgfTtcbiAgfVxuXG4gIC8qKiBUaGUgZm9ybSBjb250cm9sIHZhbGlkYXRvciBmb3IgdGhlIG1pbiBkYXRlLiAqL1xuICBzdGF0aWMgbWluPEQ+KGRhdGVBZGFwdGVyOiBOeERhdGVBZGFwdGVyPEQ+LCBtaW46IEQpOiBWYWxpZGF0b3JGbiB7XG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCA9PiB7XG4gICAgICBjb25zdCBjb250cm9sVmFsdWUgPSBnZXRWYWxpZERhdGVPck51bGwoZGF0ZUFkYXB0ZXIsIGRhdGVBZGFwdGVyLmRlc2VyaWFsaXplKGNvbnRyb2wudmFsdWUpKTtcbiAgICAgIHJldHVybiAoIW1pbiB8fCAhY29udHJvbFZhbHVlIHx8XG4gICAgICAgICAgZGF0ZUFkYXB0ZXIuY29tcGFyZURhdGUobWluLCBjb250cm9sVmFsdWUpIDw9IDApID9cbiAgICAgICAgICBudWxsIDogeydueERhdGVmaWVsZE1pbic6IHsnbWluJzogbWluLCAnYWN0dWFsJzogY29udHJvbFZhbHVlfX07XG4gICAgfTtcbiAgfVxuXG4gIC8qKiBUaGUgZm9ybSBjb250cm9sIHZhbGlkYXRvciBmb3IgdGhlIG1heCBkYXRlLiAqL1xuICBzdGF0aWMgbWF4PEQ+KGRhdGVBZGFwdGVyOiBOeERhdGVBZGFwdGVyPEQ+LCBtYXg6IEQpOiBWYWxpZGF0b3JGbiB7XG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCA9PiB7XG4gICAgY29uc3QgY29udHJvbFZhbHVlID0gZ2V0VmFsaWREYXRlT3JOdWxsKGRhdGVBZGFwdGVyLCBkYXRlQWRhcHRlci5kZXNlcmlhbGl6ZShjb250cm9sLnZhbHVlKSk7XG4gICAgcmV0dXJuICghbWF4IHx8ICFjb250cm9sVmFsdWUgfHxcbiAgICAgICAgZGF0ZUFkYXB0ZXIuY29tcGFyZURhdGUobWF4LCBjb250cm9sVmFsdWUpID49IDApID9cbiAgICAgICAgbnVsbCA6IHsnbnhEYXRlZmllbGRNYXgnOiB7J21heCc6IG1heCwgJ2FjdHVhbCc6IGNvbnRyb2xWYWx1ZX19O1xuICAgIH07XG4gIH1cblxuICAvKiogVGhlIGZvcm0gY29udHJvbCB2YWxpZGF0b3IgZm9yIHRoZSBkYXRlIGZpbHRlci4gKi9cbiAgc3RhdGljIGZpbHRlcjxEPihcbiAgICAgIGRhdGVBZGFwdGVyOiBOeERhdGVBZGFwdGVyPEQ+LFxuICAgICAgZGF0ZUZpbHRlcjogKGRhdGU6IEQgfCBudWxsKSA9PiBib29sZWFuKTogVmFsaWRhdG9yRm4ge1xuXG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCA9PiB7XG4gICAgICBjb25zdCBjb250cm9sVmFsdWUgPSBnZXRWYWxpZERhdGVPck51bGwoZGF0ZUFkYXB0ZXIsIGRhdGVBZGFwdGVyLmRlc2VyaWFsaXplKGNvbnRyb2wudmFsdWUpKTtcbiAgICAgIHJldHVybiAhZGF0ZUZpbHRlciB8fCAhY29udHJvbFZhbHVlIHx8IGRhdGVGaWx0ZXIoY29udHJvbFZhbHVlKSA/XG4gICAgICAgICAgbnVsbCA6IHsnbnhEYXRlZmllbGRGaWx0ZXInOiB0cnVlfTtcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFZhbGlkRGF0ZU9yTnVsbDxEPihkYXRlQWRhcHRlcjogTnhEYXRlQWRhcHRlcjxEPiwgb2JqOiBhbnkpOiBEIHwgbnVsbCB7XG4gIHJldHVybiAoZGF0ZUFkYXB0ZXIuaXNEYXRlSW5zdGFuY2Uob2JqKSAmJiBkYXRlQWRhcHRlci5pc1ZhbGlkKG9iaikpID8gb2JqIDogbnVsbDtcbn1cbiJdfQ==