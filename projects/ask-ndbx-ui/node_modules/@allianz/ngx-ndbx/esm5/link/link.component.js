/**
 * @fileoverview added by tsickle
 * Generated from: link/link.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NxIconComponent } from '@allianz/ngx-ndbx/icon';
import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, Renderer2, Input, ChangeDetectorRef } from '@angular/core';
import { MappedStyles } from '@allianz/ngx-ndbx/core';
/** @type {?} */
var MAPPING = {
    'black': 'nx-link--black',
    'negative': 'nx-link--negative',
    'text': 'nx-link--text',
    'block': 'nx-link--block',
    'icon-right': 'nx-link--icon-right'
};
/** @type {?} */
var DEFAULT_CLASSES = ['nx-link'];
var NxLinkComponent = /** @class */ (function (_super) {
    tslib_1.__extends(NxLinkComponent, _super);
    function NxLinkComponent(_elementRef, _renderer, _changeDetectorRef) {
        var _this = _super.call(this, MAPPING, DEFAULT_CLASSES, _elementRef, _renderer) || this;
        _this._renderer = _renderer;
        _this._changeDetectorRef = _changeDetectorRef;
        _this._size = 'small';
        return _this;
    }
    Object.defineProperty(NxLinkComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        /** Sets the size of the link. Default: 'small'. */
        set: /**
         * Sets the size of the link. Default: 'small'.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._size !== value) {
                this._size = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxLinkComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        // Add a specific link class that the css gets more specific than the nx-icon css
        /** @type {?} */
        var icons = this.elementRef.nativeElement.querySelectorAll('nx-icon');
        for (var i = 0; i < icons.length; i++) {
            this._renderer.addClass(icons[i], 'nx-link__icon');
        }
    };
    Object.defineProperty(NxLinkComponent.prototype, "elementRef", {
        /**
         * @docs-private
         * getter used for the modal component as a quickfix
         * since button got changed from directive to component the reference used by the ngOpenModelOnClick directive
         * for nxButtons is a reference to component instance instead of an element reference. As a workaround we need a
         * way to reach the elementRef of the component until the modal gets refactored.
         */
        get: /**
         * \@docs-private
         * getter used for the modal component as a quickfix
         * since button got changed from directive to component the reference used by the ngOpenModelOnClick directive
         * for nxButtons is a reference to component instance instead of an element reference. As a workaround we need a
         * way to reach the elementRef of the component until the modal gets refactored.
         * @return {?}
         */
        function () {
            return this._elementRef;
        },
        enumerable: true,
        configurable: true
    });
    NxLinkComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-link',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['classNames: nxStyle'],
                    host: {
                        '[class.nx-link--small]': 'this.size === "small"',
                        '[class.nx-link--large]': 'this.size === "large"'
                    },
                    styles: [":host{color:#006192;color:var(--link-color,#006192);display:inline-block;cursor:pointer;position:relative;text-decoration:none;transition:color .2s,box-shadow .2s;-webkit-hyphens:none;-ms-hyphens:none;hyphens:none}:host:hover{color:#008ed6;color:var(--link-hover-color,#008ed6)}:host::ng-deep a:active{color:#003781;color:var(--link-active-color,#003781)}:host::ng-deep a{display:flex;align-items:center}:host.nx-link--small{font-size:16px;font-size:var(--link-small-font-size,16px);line-height:24px;line-height:var(--link-small-line-height,24px);font-weight:600;font-weight:var(--link-small-font-weight,600);letter-spacing:1px;letter-spacing:var(--link-small-letter-spacing,1px)}:host.nx-link--large{font-size:30px;font-size:var(--link-large-font-size,30px);line-height:36px;line-height:var(--link-large-line-height,36px);font-weight:600;font-weight:var(--link-large-font-weight,600);letter-spacing:.3px;letter-spacing:var(--link-large-letter-spacing,.3px)}:host-context([data-whatinput=keyboard])::ng-deep a:focus{border-radius:4px;outline:0;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}:host(.nx-link--negative){color:#fff}:host(.nx-link--negative):hover{color:#c2c2c2}:host(.nx-link--negative)::ng-deep a:active{color:#999}:host(.nx-link--negative)::ng-deep a[aria-disabled],:host(.nx-link--negative)::ng-deep a[disabled]{color:rgba(255,255,255,.4)}:host(.nx-link--black){color:#414141;color:var(--link-black-color,#414141)}:host(.nx-link--black):hover{color:#999;color:var(--link-black-hover-color,#999)}:host(.nx-link--black)::ng-deep a:active{color:#5b5b5b;color:var(--link-black-active-color,#5b5b5b)}:host(.nx-link--black)::ng-deep a[aria-disabled],:host(.nx-link--black)::ng-deep a[disabled]{color:#c2c2c2;color:var(--link-black-disabled-color,#c2c2c2)}:host.nx-link--text{font-weight:700;text-transform:none;letter-spacing:normal;border-radius:4px;font-size:inherit;line-height:inherit}:host.nx-link--text ::ng-deep a{display:inline-flex}:host::ng-deep .c-icon,:host::ng-deep nx-icon.nx-link__icon{margin:0 8px 0 0}:host::ng-deep .c-icon::before,:host::ng-deep nx-icon.nx-link__icon::before{line-height:inherit;font-size:inherit}:host.nx-link--small ::ng-deep .c-icon,:host.nx-link--small ::ng-deep nx-icon.nx-link__icon{font-size:24px;font-size:var(--link-small-icon-size,24px)}:host.nx-link--large ::ng-deep .c-icon,:host.nx-link--large ::ng-deep nx-icon.nx-link__icon{font-size:32px;font-size:var(--link-large-icon-size,32px)}:host(.nx-link--icon-right)::ng-deep .c-icon,:host(.nx-link--icon-right)::ng-deep nx-icon.nx-link__icon{order:2;margin:0 0 0 8px}:host::ng-deep a[aria-disabled],:host::ng-deep a[disabled]{cursor:not-allowed;color:rgba(0,97,146,.4);color:var(--link-disabled-color,rgba(0,97,146,.4))}:host::ng-deep a[aria-disabled]:focus,:host::ng-deep a[disabled]:focus{outline:0;box-shadow:none}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard])::ng-deep a:focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}:host::ng-deep a[aria-disabled],:host::ng-deep a[disabled]{color:GrayText}}"]
                }] }
    ];
    /** @nocollapse */
    NxLinkComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ChangeDetectorRef }
    ]; };
    NxLinkComponent.propDecorators = {
        icon: [{ type: ContentChild, args: [NxIconComponent, { static: false },] }],
        size: [{ type: Input }]
    };
    return NxLinkComponent;
}(MappedStyles));
export { NxLinkComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxLinkComponent.prototype._size;
    /**
     * \@docs-private
     * @type {?}
     */
    NxLinkComponent.prototype.icon;
    /**
     * Sets the style of the link, thereby altering the visual appearance.
     *
     * You can use any combination of 'black', 'icon-right', 'negative', 'text' and 'block' (deprecated).
     * @type {?}
     */
    NxLinkComponent.prototype.classNames;
    /**
     * @type {?}
     * @protected
     */
    NxLinkComponent.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    NxLinkComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbImxpbmsvbGluay5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3pELE9BQU8sRUFFTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixVQUFVLEVBQ1YsU0FBUyxFQUNULEtBQUssRUFDTCxpQkFBaUIsRUFDbEIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDOztJQUtoRCxPQUFPLEdBQUc7SUFDZCxPQUFPLEVBQUUsZ0JBQWdCO0lBQ3pCLFVBQVUsRUFBRSxtQkFBbUI7SUFDL0IsTUFBTSxFQUFFLGVBQWU7SUFDdkIsT0FBTyxFQUFFLGdCQUFnQjtJQUN6QixZQUFZLEVBQUUscUJBQXFCO0NBQ3BDOztJQUVLLGVBQWUsR0FBRyxDQUFFLFNBQVMsQ0FBRTtBQUVyQztJQVlxQywyQ0FBWTtJQXlCL0MseUJBQVksV0FBdUIsRUFDYixTQUFvQixFQUN0QixrQkFBcUM7UUFGekQsWUFJRSxrQkFBTSxPQUFPLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsU0FDeEQ7UUFKcUIsZUFBUyxHQUFULFNBQVMsQ0FBVztRQUN0Qix3QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1CO1FBMUJqRCxXQUFLLEdBQWUsT0FBTyxDQUFDOztJQTZCcEMsQ0FBQztJQWhCRCxzQkFDSSxpQ0FBSTs7OztRQU1SO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUM7UUFWRCxtREFBbUQ7Ozs7OztRQUNuRCxVQUNTLEtBQWlCO1lBQ3hCLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO2dCQUNuQixJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDeEM7UUFDSCxDQUFDOzs7T0FBQTs7OztJQVlELDRDQUFrQjs7O0lBQWxCOzs7WUFFUSxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDO1FBQ3ZFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQztTQUNwRDtJQUNILENBQUM7SUFTRCxzQkFBSSx1Q0FBVTtRQVBkOzs7Ozs7V0FNRzs7Ozs7Ozs7O1FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDMUIsQ0FBQzs7O09BQUE7O2dCQTdERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFNBQVM7b0JBRW5CLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxNQUFNLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztvQkFDL0IsSUFBSSxFQUFFO3dCQUNKLHdCQUF3QixFQUFFLHVCQUF1Qjt3QkFDakQsd0JBQXdCLEVBQUUsdUJBQXVCO3FCQUNsRDs7aUJBQ0Y7Ozs7Z0JBL0JDLFVBQVU7Z0JBQ1YsU0FBUztnQkFFVCxpQkFBaUI7Ozt1QkFrQ2hCLFlBQVksU0FBQyxlQUFlLEVBQUUsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDO3VCQVU3QyxLQUFLOztJQW9DUixzQkFBQztDQUFBLEFBOURELENBWXFDLFlBQVksR0FrRGhEO1NBbERZLGVBQWU7Ozs7OztJQUMxQixnQ0FBb0M7Ozs7O0lBR3BDLCtCQUFzRTs7Ozs7OztJQU90RSxxQ0FBVzs7Ozs7SUFlQyxvQ0FBOEI7Ozs7O0lBQzlCLDZDQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE54SWNvbkNvbXBvbmVudCB9IGZyb20gJ0BhbGxpYW56L25neC1uZGJ4L2ljb24nO1xuaW1wb3J0IHtcbiAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkLFxuICBFbGVtZW50UmVmLFxuICBSZW5kZXJlcjIsXG4gIElucHV0LFxuICBDaGFuZ2VEZXRlY3RvclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTWFwcGVkU3R5bGVzIH0gZnJvbSAnQGFsbGlhbnovbmd4LW5kYngvY29yZSc7XG5cbi8qKiBUaGUgc2l6ZSBvZiB0aGUgbGluay4gKi9cbmV4cG9ydCB0eXBlIE54TGlua1NpemUgPSAnc21hbGwnIHwgJ2xhcmdlJztcblxuY29uc3QgTUFQUElORyA9IHtcbiAgJ2JsYWNrJzogJ254LWxpbmstLWJsYWNrJyxcbiAgJ25lZ2F0aXZlJzogJ254LWxpbmstLW5lZ2F0aXZlJyxcbiAgJ3RleHQnOiAnbngtbGluay0tdGV4dCcsXG4gICdibG9jayc6ICdueC1saW5rLS1ibG9jaycsXG4gICdpY29uLXJpZ2h0JzogJ254LWxpbmstLWljb24tcmlnaHQnXG59O1xuXG5jb25zdCBERUZBVUxUX0NMQVNTRVMgPSBbICdueC1saW5rJyBdO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdueC1saW5rJyxcbiAgc3R5bGVVcmxzOiBbICcuL2xpbmsuY29tcG9uZW50LnNjc3MnIF0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnY2xhc3NOYW1lczogbnhTdHlsZSddLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5ueC1saW5rLS1zbWFsbF0nOiAndGhpcy5zaXplID09PSBcInNtYWxsXCInLFxuICAgICdbY2xhc3MubngtbGluay0tbGFyZ2VdJzogJ3RoaXMuc2l6ZSA9PT0gXCJsYXJnZVwiJ1xuICB9XG59KVxuXG5leHBvcnQgY2xhc3MgTnhMaW5rQ29tcG9uZW50IGV4dGVuZHMgTWFwcGVkU3R5bGVzIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIHByaXZhdGUgX3NpemU6IE54TGlua1NpemUgPSAnc21hbGwnO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIEBDb250ZW50Q2hpbGQoTnhJY29uQ29tcG9uZW50LCB7c3RhdGljOiBmYWxzZX0pIGljb246IE54SWNvbkNvbXBvbmVudDtcblxuICAvKipcbiAgICogU2V0cyB0aGUgc3R5bGUgb2YgdGhlIGxpbmssIHRoZXJlYnkgYWx0ZXJpbmcgdGhlIHZpc3VhbCBhcHBlYXJhbmNlLlxuICAgKlxuICAgKiBZb3UgY2FuIHVzZSBhbnkgY29tYmluYXRpb24gb2YgJ2JsYWNrJywgJ2ljb24tcmlnaHQnLCAnbmVnYXRpdmUnLCAndGV4dCcgYW5kICdibG9jaycgKGRlcHJlY2F0ZWQpLlxuICAgKi9cbiAgY2xhc3NOYW1lcztcblxuICAvKiogU2V0cyB0aGUgc2l6ZSBvZiB0aGUgbGluay4gRGVmYXVsdDogJ3NtYWxsJy4gKi9cbiAgQElucHV0KClcbiAgc2V0IHNpemUodmFsdWU6IE54TGlua1NpemUpIHtcbiAgICBpZiAodGhpcy5fc2l6ZSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX3NpemUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgfVxuICBnZXQgc2l6ZSgpOiBOeExpbmtTaXplIHtcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICBwcm90ZWN0ZWQgX3JlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgICAgICAgICAgIHByaXZhdGUgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuXG4gICAgc3VwZXIoTUFQUElORywgREVGQVVMVF9DTEFTU0VTLCBfZWxlbWVudFJlZiwgX3JlbmRlcmVyKTtcbiAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAvLyBBZGQgYSBzcGVjaWZpYyBsaW5rIGNsYXNzIHRoYXQgdGhlIGNzcyBnZXRzIG1vcmUgc3BlY2lmaWMgdGhhbiB0aGUgbngtaWNvbiBjc3NcbiAgICBjb25zdCBpY29ucyA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ254LWljb24nKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGljb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9yZW5kZXJlci5hZGRDbGFzcyhpY29uc1tpXSwgJ254LWxpbmtfX2ljb24nKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGRvY3MtcHJpdmF0ZVxuICAgKiBnZXR0ZXIgdXNlZCBmb3IgdGhlIG1vZGFsIGNvbXBvbmVudCBhcyBhIHF1aWNrZml4XG4gICAqIHNpbmNlIGJ1dHRvbiBnb3QgY2hhbmdlZCBmcm9tIGRpcmVjdGl2ZSB0byBjb21wb25lbnQgdGhlIHJlZmVyZW5jZSB1c2VkIGJ5IHRoZSBuZ09wZW5Nb2RlbE9uQ2xpY2sgZGlyZWN0aXZlXG4gICAqIGZvciBueEJ1dHRvbnMgaXMgYSByZWZlcmVuY2UgdG8gY29tcG9uZW50IGluc3RhbmNlIGluc3RlYWQgb2YgYW4gZWxlbWVudCByZWZlcmVuY2UuIEFzIGEgd29ya2Fyb3VuZCB3ZSBuZWVkIGFcbiAgICogd2F5IHRvIHJlYWNoIHRoZSBlbGVtZW50UmVmIG9mIHRoZSBjb21wb25lbnQgdW50aWwgdGhlIG1vZGFsIGdldHMgcmVmYWN0b3JlZC5cbiAgICovXG4gIGdldCBlbGVtZW50UmVmKCkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50UmVmO1xuICB9XG59XG4iXX0=