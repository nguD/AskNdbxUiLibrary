/**
 * @fileoverview added by tsickle
 * Generated from: modal/modal.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { NgModule } from '@angular/core';
import { NxModalComponent, NxModalActionsDirective, NxModalContentDirective } from './modal.component';
import { CommonModule } from '@angular/common';
import { NxOpenModalOnClickDirective } from './modal-open-on-click.directive';
import { NxModalService } from './modal.service';
import { A11yModule } from '@angular/cdk/a11y';
var NxModalModule = /** @class */ (function () {
    function NxModalModule() {
    }
    // define the modal service on root level as an application wide singleton,
    // assuming that we only display one modal at a time, which seems quite reasonable
    // this is static and named "forRoot" by convention
    // define the modal service on root level as an application wide singleton,
    // assuming that we only display one modal at a time, which seems quite reasonable
    // this is static and named "forRoot" by convention
    /**
     * @return {?}
     */
    NxModalModule.forRoot = 
    // define the modal service on root level as an application wide singleton,
    // assuming that we only display one modal at a time, which seems quite reasonable
    // this is static and named "forRoot" by convention
    /**
     * @return {?}
     */
    function () {
        return {
            ngModule: NxModalModule,
            providers: [NxModalService]
        };
    };
    NxModalModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, A11yModule, NxIconModule],
                    declarations: [
                        NxModalComponent,
                        NxOpenModalOnClickDirective,
                        NxModalActionsDirective,
                        NxModalContentDirective
                    ],
                    exports: [
                        NxModalComponent,
                        NxOpenModalOnClickDirective,
                        NxModalActionsDirective,
                        NxModalContentDirective
                    ],
                },] }
    ];
    return NxModalModule;
}());
export { NxModalModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvIiwic291cmNlcyI6WyJtb2RhbC9tb2RhbC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFDLGdCQUFnQixFQUFFLHVCQUF1QixFQUFFLHVCQUF1QixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDckcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFL0M7SUFBQTtJQTBCQSxDQUFDO0lBVEMsMkVBQTJFO0lBQzNFLGtGQUFrRjtJQUNsRixtREFBbUQ7Ozs7Ozs7SUFDNUMscUJBQU87Ozs7Ozs7SUFBZDtRQUNFLE9BQU87WUFDTCxRQUFRLEVBQUUsYUFBYTtZQUN2QixTQUFTLEVBQUUsQ0FBQyxjQUFjLENBQUM7U0FDNUIsQ0FBQztJQUNKLENBQUM7O2dCQXpCRixRQUFRLFNBQUM7b0JBQ1IsT0FBTyxFQUFFLENBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxZQUFZLENBQUU7b0JBQ25ELFlBQVksRUFBRTt3QkFDWixnQkFBZ0I7d0JBQ2hCLDJCQUEyQjt3QkFDM0IsdUJBQXVCO3dCQUN2Qix1QkFBdUI7cUJBQ3hCO29CQUNELE9BQU8sRUFBRTt3QkFDUCxnQkFBZ0I7d0JBQ2hCLDJCQUEyQjt3QkFDM0IsdUJBQXVCO3dCQUN2Qix1QkFBdUI7cUJBQ3hCO2lCQUNGOztJQVlELG9CQUFDO0NBQUEsQUExQkQsSUEwQkM7U0FWWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTnhJY29uTW9kdWxlIH0gZnJvbSAnQGFsbGlhbnovbmd4LW5kYngvaWNvbic7XG5pbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOeE1vZGFsQ29tcG9uZW50LCBOeE1vZGFsQWN0aW9uc0RpcmVjdGl2ZSwgTnhNb2RhbENvbnRlbnREaXJlY3RpdmV9IGZyb20gJy4vbW9kYWwuY29tcG9uZW50JztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOeE9wZW5Nb2RhbE9uQ2xpY2tEaXJlY3RpdmUgfSBmcm9tICcuL21vZGFsLW9wZW4tb24tY2xpY2suZGlyZWN0aXZlJztcbmltcG9ydCB7IE54TW9kYWxTZXJ2aWNlIH0gZnJvbSAnLi9tb2RhbC5zZXJ2aWNlJztcbmltcG9ydCB7IEExMXlNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFsgQ29tbW9uTW9kdWxlLCBBMTF5TW9kdWxlLCBOeEljb25Nb2R1bGUgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgTnhNb2RhbENvbXBvbmVudCxcbiAgICBOeE9wZW5Nb2RhbE9uQ2xpY2tEaXJlY3RpdmUsXG4gICAgTnhNb2RhbEFjdGlvbnNEaXJlY3RpdmUsXG4gICAgTnhNb2RhbENvbnRlbnREaXJlY3RpdmVcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIE54TW9kYWxDb21wb25lbnQsXG4gICAgTnhPcGVuTW9kYWxPbkNsaWNrRGlyZWN0aXZlLFxuICAgIE54TW9kYWxBY3Rpb25zRGlyZWN0aXZlLFxuICAgIE54TW9kYWxDb250ZW50RGlyZWN0aXZlXG4gIF0sXG59KVxuXG5leHBvcnQgY2xhc3MgTnhNb2RhbE1vZHVsZSB7XG4gIC8vIGRlZmluZSB0aGUgbW9kYWwgc2VydmljZSBvbiByb290IGxldmVsIGFzIGFuIGFwcGxpY2F0aW9uIHdpZGUgc2luZ2xldG9uLFxuICAvLyBhc3N1bWluZyB0aGF0IHdlIG9ubHkgZGlzcGxheSBvbmUgbW9kYWwgYXQgYSB0aW1lLCB3aGljaCBzZWVtcyBxdWl0ZSByZWFzb25hYmxlXG4gIC8vIHRoaXMgaXMgc3RhdGljIGFuZCBuYW1lZCBcImZvclJvb3RcIiBieSBjb252ZW50aW9uXG4gIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTnhNb2RhbE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW054TW9kYWxTZXJ2aWNlXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==