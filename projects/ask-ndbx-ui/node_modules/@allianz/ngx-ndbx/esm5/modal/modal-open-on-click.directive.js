/**
 * @fileoverview added by tsickle
 * Generated from: modal/modal-open-on-click.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { NxModalService } from './modal.service';
var NxOpenModalOnClickDirective = /** @class */ (function () {
    function NxOpenModalOnClickDirective(templateRef, viewContainer, modalService) {
        var _this = this;
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.modalService = modalService;
        /**
         * \@docs-private
         */
        this.clickHandler = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.viewContainer.clear();
            // instantiate the template onto which this directive is applied
            /** @type {?} */
            var viewRef = _this.viewContainer.createEmbeddedView(_this.templateRef);
            // we need to mark the viewRef explicitly if the modal is used inside another
            // component that is using onPush change detection
            viewRef.markForCheck();
            event.preventDefault();
            event.stopPropagation();
        });
    }
    /**
     * @return {?}
     */
    NxOpenModalOnClickDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscription = this.modalService.close$.subscribe((/**
         * @return {?}
         */
        function () { return _this.viewContainer.clear(); }));
    };
    /**
     * @return {?}
     */
    NxOpenModalOnClickDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.elements.forEach((/**
         * @param {?} el
         * @return {?}
         */
        function (el) {
            if (el.removeEventListener) {
                el.removeEventListener('click', _this.clickHandler);
            }
        }));
        this.subscription.unsubscribe();
    };
    Object.defineProperty(NxOpenModalOnClickDirective.prototype, "nxOpenModalOnClick", {
        /**
         * One or multiple template reference variables pointing to elements
         * which should trigger opening the modal on click.
         *
         * Value: A single template reference variable or an array of template reference variables.
         */
        set: /**
         * One or multiple template reference variables pointing to elements
         * which should trigger opening the modal on click.
         *
         * Value: A single template reference variable or an array of template reference variables.
         * @param {?} elements
         * @return {?}
         */
        function (elements) {
            var _this = this;
            // also support the case where only one element is passed, check for the length property to be sure elements is an array
            if (elements.length) {
                this.elements = elements;
            }
            else {
                this.elements = [elements];
            }
            // add a click event listener to any element passed as property to this directive
            this.elements.forEach((/**
             * @param {?} el
             * @return {?}
             */
            function (el) {
                if (el.addEventListener) {
                    el.addEventListener('click', _this.clickHandler);
                    // workaround until refactoring: if the reference is a component
                    // reference the component has to implement a getter to its own elementRef
                }
                else if (el.elementRef) {
                    el.elementRef.nativeElement.addEventListener('click', _this.clickHandler);
                }
                else {
                    console.warn("nxOpenModalOnClick: Given Element doesn't appear to be an ElementRef.", el);
                }
            }));
        },
        enumerable: true,
        configurable: true
    });
    NxOpenModalOnClickDirective.decorators = [
        { type: Directive, args: [{ selector: '[nxOpenModalOnClick]' },] }
    ];
    /** @nocollapse */
    NxOpenModalOnClickDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: NxModalService }
    ]; };
    NxOpenModalOnClickDirective.propDecorators = {
        nxOpenModalOnClick: [{ type: Input }]
    };
    return NxOpenModalOnClickDirective;
}());
export { NxOpenModalOnClickDirective };
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxOpenModalOnClickDirective.prototype.elements;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.subscription;
    /**
     * \@docs-private
     * @type {?}
     */
    NxOpenModalOnClickDirective.prototype.clickHandler;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.modalService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtb3Blbi1vbi1jbGljay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbIm1vZGFsL21vZGFsLW9wZW4tb24tY2xpY2suZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXFCLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUduRyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFakQ7SUFRRSxxQ0FBb0IsV0FBNkIsRUFDN0IsYUFBK0IsRUFDL0IsWUFBNEI7UUFGaEQsaUJBR0M7UUFIbUIsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO1FBQzdCLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUMvQixpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7Ozs7UUFrQmhELGlCQUFZOzs7O1FBQUcsVUFBQyxLQUFVO1lBQ3hCLEtBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7OztnQkFFckIsT0FBTyxHQUFHLEtBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsS0FBSSxDQUFDLFdBQVcsQ0FBQztZQUN2RSw2RUFBNkU7WUFDN0Usa0RBQWtEO1lBQ2xELE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN2QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQzFCLENBQUMsRUFBQTtJQTFCRCxDQUFDOzs7O0lBRUQsOENBQVE7OztJQUFSO1FBQUEsaUJBRUM7UUFEQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLFNBQVM7OztRQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxFQUExQixDQUEwQixFQUFDLENBQUM7SUFDM0YsQ0FBQzs7OztJQUVELGlEQUFXOzs7SUFBWDtRQUFBLGlCQVFDO1FBUEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxFQUFFO1lBQ3RCLElBQUksRUFBRSxDQUFDLG1CQUFtQixFQUFFO2dCQUMxQixFQUFFLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLEtBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUNwRDtRQUNILENBQUMsRUFBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBb0JELHNCQUNJLDJEQUFrQjtRQVB0Qjs7Ozs7V0FLRzs7Ozs7Ozs7O1FBQ0gsVUFDdUIsUUFBUTtZQUQvQixpQkFvQkM7WUFsQkMsd0hBQXdIO1lBQ3hILElBQUksUUFBUSxDQUFDLE1BQU0sRUFBRTtnQkFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7YUFDMUI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFFLFFBQVEsQ0FBRSxDQUFDO2FBQzlCO1lBQ0QsaUZBQWlGO1lBQ2pGLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsRUFBRTtnQkFDdEIsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLEVBQUU7b0JBQ3ZCLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsS0FBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUNsRCxnRUFBZ0U7b0JBQ2hFLDBFQUEwRTtpQkFDekU7cUJBQU0sSUFBSSxFQUFFLENBQUMsVUFBVSxFQUFFO29CQUN4QixFQUFFLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsS0FBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO2lCQUMxRTtxQkFBTTtvQkFDTCxPQUFPLENBQUMsSUFBSSxDQUFDLHVFQUF1RSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2lCQUMzRjtZQUNILENBQUMsRUFBQyxDQUFDO1FBQ0wsQ0FBQzs7O09BQUE7O2dCQWpFRixTQUFTLFNBQUMsRUFBQyxRQUFRLEVBQUUsc0JBQXNCLEVBQUM7Ozs7Z0JBTEMsV0FBVztnQkFBRSxnQkFBZ0I7Z0JBR2xFLGNBQWM7OztxQ0ErQ3BCLEtBQUs7O0lBc0JSLGtDQUFDO0NBQUEsQUFuRUQsSUFtRUM7U0FsRVksMkJBQTJCOzs7Ozs7SUFHdEMsK0NBQXFCOzs7OztJQUVyQixtREFBb0M7Ozs7O0lBc0JwQyxtREFTQzs7Ozs7SUE3Qlcsa0RBQXFDOzs7OztJQUNyQyxvREFBdUM7Ozs7O0lBQ3ZDLG1EQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uTGlrZSBhcyBJU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IE54TW9kYWxTZXJ2aWNlIH0gZnJvbSAnLi9tb2RhbC5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdbbnhPcGVuTW9kYWxPbkNsaWNrXSd9KVxuZXhwb3J0IGNsYXNzIE54T3Blbk1vZGFsT25DbGlja0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBlbGVtZW50czogQXJyYXk8YW55PjtcblxuICBwcml2YXRlIHN1YnNjcmlwdGlvbjogSVN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgICAgICAgICAgICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBOeE1vZGFsU2VydmljZSkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLm1vZGFsU2VydmljZS5jbG9zZSQuc3Vic2NyaWJlKCgpID0+IHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICBpZiAoZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xpY2tIYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBjbGlja0hhbmRsZXIgPSAoZXZlbnQ6IGFueSkgPT4ge1xuICAgIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgIC8vIGluc3RhbnRpYXRlIHRoZSB0ZW1wbGF0ZSBvbnRvIHdoaWNoIHRoaXMgZGlyZWN0aXZlIGlzIGFwcGxpZWRcbiAgICBjb25zdCB2aWV3UmVmID0gdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmKTtcbiAgICAvLyB3ZSBuZWVkIHRvIG1hcmsgdGhlIHZpZXdSZWYgZXhwbGljaXRseSBpZiB0aGUgbW9kYWwgaXMgdXNlZCBpbnNpZGUgYW5vdGhlclxuICAgIC8vIGNvbXBvbmVudCB0aGF0IGlzIHVzaW5nIG9uUHVzaCBjaGFuZ2UgZGV0ZWN0aW9uXG4gICAgdmlld1JlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9uZSBvciBtdWx0aXBsZSB0ZW1wbGF0ZSByZWZlcmVuY2UgdmFyaWFibGVzIHBvaW50aW5nIHRvIGVsZW1lbnRzXG4gICAqIHdoaWNoIHNob3VsZCB0cmlnZ2VyIG9wZW5pbmcgdGhlIG1vZGFsIG9uIGNsaWNrLlxuICAgKlxuICAgKiBWYWx1ZTogQSBzaW5nbGUgdGVtcGxhdGUgcmVmZXJlbmNlIHZhcmlhYmxlIG9yIGFuIGFycmF5IG9mIHRlbXBsYXRlIHJlZmVyZW5jZSB2YXJpYWJsZXMuXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgbnhPcGVuTW9kYWxPbkNsaWNrKGVsZW1lbnRzKSB7XG4gICAgLy8gYWxzbyBzdXBwb3J0IHRoZSBjYXNlIHdoZXJlIG9ubHkgb25lIGVsZW1lbnQgaXMgcGFzc2VkLCBjaGVjayBmb3IgdGhlIGxlbmd0aCBwcm9wZXJ0eSB0byBiZSBzdXJlIGVsZW1lbnRzIGlzIGFuIGFycmF5XG4gICAgaWYgKGVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5lbGVtZW50cyA9IGVsZW1lbnRzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsZW1lbnRzID0gWyBlbGVtZW50cyBdO1xuICAgIH1cbiAgICAvLyBhZGQgYSBjbGljayBldmVudCBsaXN0ZW5lciB0byBhbnkgZWxlbWVudCBwYXNzZWQgYXMgcHJvcGVydHkgdG8gdGhpcyBkaXJlY3RpdmVcbiAgICB0aGlzLmVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgaWYgKGVsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlcik7XG4gICAgICAvLyB3b3JrYXJvdW5kIHVudGlsIHJlZmFjdG9yaW5nOiBpZiB0aGUgcmVmZXJlbmNlIGlzIGEgY29tcG9uZW50XG4gICAgICAvLyByZWZlcmVuY2UgdGhlIGNvbXBvbmVudCBoYXMgdG8gaW1wbGVtZW50IGEgZ2V0dGVyIHRvIGl0cyBvd24gZWxlbWVudFJlZlxuICAgICAgfSBlbHNlIGlmIChlbC5lbGVtZW50UmVmKSB7XG4gICAgICAgIGVsLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xpY2tIYW5kbGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgbnhPcGVuTW9kYWxPbkNsaWNrOiBHaXZlbiBFbGVtZW50IGRvZXNuJ3QgYXBwZWFyIHRvIGJlIGFuIEVsZW1lbnRSZWYuYCwgZWwpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==