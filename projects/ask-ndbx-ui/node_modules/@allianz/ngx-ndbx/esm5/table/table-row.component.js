/**
 * @fileoverview added by tsickle
 * Generated from: table-row.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Input, ChangeDetectorRef, Output, ElementRef } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { EventEmitter } from '@angular/core';
import { SPACE } from '@angular/cdk/keycodes';
/**
 * This is a table row.
 */
var NxTableRowComponent = /** @class */ (function () {
    function NxTableRowComponent(_changeDetectorRef, _elementRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._elementRef = _elementRef;
        this._selectable = false;
        this._selected = false;
        this.select = new EventEmitter();
    }
    Object.defineProperty(NxTableRowComponent.prototype, "selectable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectable;
        },
        /** Whether this table row is selectable */
        set: /**
         * Whether this table row is selectable
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selectable = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTableRowComponent.prototype, "selected", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selected;
        },
        /** Whether this table row is selected */
        set: /**
         * Whether this table row is selected
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selected = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} $event
     * @return {?}
     */
    NxTableRowComponent.prototype._onSelect = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (!this._selectable || this.isActionEvent($event)) {
            return;
        }
        if ($event.keyCode === SPACE) {
            $event.preventDefault();
        }
        this.select.emit();
    };
    /**
     * Checks if the event would trigger an action.
     * Return `true` if a button, link, input or label are clicked.
     */
    /**
     * Checks if the event would trigger an action.
     * Return `true` if a button, link, input or label are clicked.
     * @private
     * @param {?} $event
     * @return {?}
     */
    NxTableRowComponent.prototype.isActionEvent = /**
     * Checks if the event would trigger an action.
     * Return `true` if a button, link, input or label are clicked.
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var parent = $event.target;
        while (parent && parent !== this._elementRef.nativeElement) {
            if (['A', 'INPUT', 'BUTTON'].indexOf(parent.tagName) >= 0) {
                return true;
            }
            else if (parent.tagName === 'LABEL' && parent.getAttribute('for')) {
                return true;
            }
            parent = parent.parentElement;
        }
        return false;
    };
    NxTableRowComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'tr[nxTableRow]',
                    host: {
                        'class': 'nx-table-row',
                        '[class.is-selected]': 'selected',
                        '[class.nx-table-row--selectable]': 'selectable',
                        '[attr.aria-selected]': 'selected',
                        '(click)': '_onSelect($event)',
                        '(keydown.space)': '_onSelect($event)'
                    },
                    template: "<ng-content></ng-content>",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NxTableRowComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef }
    ]; };
    NxTableRowComponent.propDecorators = {
        selectable: [{ type: Input }],
        selected: [{ type: Input }],
        select: [{ type: Output }]
    };
    return NxTableRowComponent;
}());
export { NxTableRowComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxTableRowComponent.prototype._selectable;
    /**
     * @type {?}
     * @private
     */
    NxTableRowComponent.prototype._selected;
    /** @type {?} */
    NxTableRowComponent.prototype.select;
    /**
     * @type {?}
     * @protected
     */
    NxTableRowComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxTableRowComponent.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtcm93LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4L3RhYmxlLyIsInNvdXJjZXMiOlsidGFibGUtcm93LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsdUJBQXVCLEVBQ3ZCLEtBQUssRUFDTCxpQkFBaUIsRUFDakIsTUFBTSxFQUNOLFVBQVUsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7OztBQUs5QztJQXlDRSw2QkFBc0Isa0JBQXFDLEVBQVUsV0FBdUI7UUFBdEUsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFtQjtRQUFVLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBaEJwRixnQkFBVyxHQUFZLEtBQUssQ0FBQztRQVc3QixjQUFTLEdBQVksS0FBSyxDQUFDO1FBR25DLFdBQU0sR0FBdUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUUrQyxDQUFDO0lBeEJoRyxzQkFDSSwyQ0FBVTs7OztRQUlkO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzFCLENBQUM7UUFSRCwyQ0FBMkM7Ozs7OztRQUMzQyxVQUNlLEtBQWM7WUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDekMsQ0FBQzs7O09BQUE7SUFPRCxzQkFDSSx5Q0FBUTs7OztRQUlaO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7UUFSRCx5Q0FBeUM7Ozs7OztRQUN6QyxVQUNhLEtBQWM7WUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDekMsQ0FBQzs7O09BQUE7Ozs7O0lBV0QsdUNBQVM7Ozs7SUFBVCxVQUFVLE1BQU07UUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ25ELE9BQU87U0FDUjtRQUVELElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxLQUFLLEVBQUU7WUFDNUIsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3pCO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQ7OztPQUdHOzs7Ozs7OztJQUNLLDJDQUFhOzs7Ozs7O0lBQXJCLFVBQXNCLE1BQU07O1lBQ3RCLE1BQU0sR0FBZ0IsTUFBTSxDQUFDLE1BQU07UUFFdkMsT0FBTyxNQUFNLElBQUksTUFBTSxLQUFLLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFO1lBQzFELElBQUksQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN6RCxPQUFPLElBQUksQ0FBQzthQUNiO2lCQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxPQUFPLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDbkUsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUVELE1BQU0sR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO1NBQy9CO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOztnQkF6RUYsU0FBUyxTQUFDOztvQkFFVCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixJQUFJLEVBQUU7d0JBQ0wsT0FBTyxFQUFFLGNBQWM7d0JBQ3ZCLHFCQUFxQixFQUFFLFVBQVU7d0JBQ2pDLGtDQUFrQyxFQUFFLFlBQVk7d0JBQ2hELHNCQUFzQixFQUFFLFVBQVU7d0JBQ2xDLFNBQVMsRUFBRSxtQkFBbUI7d0JBQzlCLGlCQUFpQixFQUFFLG1CQUFtQjtxQkFDdEM7b0JBQ0QsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzs7O2dCQXhCQyxpQkFBaUI7Z0JBRWpCLFVBQVU7Ozs2QkEwQlQsS0FBSzsyQkFXTCxLQUFLO3lCQVVMLE1BQU07O0lBb0NULDBCQUFDO0NBQUEsQUExRUQsSUEwRUM7U0E1RFksbUJBQW1COzs7Ozs7SUFXOUIsMENBQXFDOzs7OztJQVdyQyx3Q0FBbUM7O0lBRW5DLHFDQUNnRDs7Ozs7SUFFcEMsaURBQStDOzs7OztJQUFFLDBDQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIElucHV0LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgT3V0cHV0LFxuICBFbGVtZW50UmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU1BBQ0UgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xuXG4vKipcbiAqIFRoaXMgaXMgYSB0YWJsZSByb3cuXG4gKi9cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAndHJbbnhUYWJsZVJvd10nLFxuICBob3N0OiB7XG4gICAnY2xhc3MnOiAnbngtdGFibGUtcm93JyxcbiAgICdbY2xhc3MuaXMtc2VsZWN0ZWRdJzogJ3NlbGVjdGVkJyxcbiAgICdbY2xhc3MubngtdGFibGUtcm93LS1zZWxlY3RhYmxlXSc6ICdzZWxlY3RhYmxlJyxcbiAgICdbYXR0ci5hcmlhLXNlbGVjdGVkXSc6ICdzZWxlY3RlZCcsXG4gICAnKGNsaWNrKSc6ICdfb25TZWxlY3QoJGV2ZW50KScsXG4gICAnKGtleWRvd24uc3BhY2UpJzogJ19vblNlbGVjdCgkZXZlbnQpJ1xuICB9LFxuICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBOeFRhYmxlUm93Q29tcG9uZW50IHtcblxuICAvKiogV2hldGhlciB0aGlzIHRhYmxlIHJvdyBpcyBzZWxlY3RhYmxlICovXG4gIEBJbnB1dCgpXG4gIHNldCBzZWxlY3RhYmxlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2VsZWN0YWJsZSA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cbiAgZ2V0IHNlbGVjdGFibGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbGVjdGFibGU7XG4gIH1cbiAgcHJpdmF0ZSBfc2VsZWN0YWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKiBXaGV0aGVyIHRoaXMgdGFibGUgcm93IGlzIHNlbGVjdGVkICovXG4gIEBJbnB1dCgpXG4gIHNldCBzZWxlY3RlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3NlbGVjdGVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuICBnZXQgc2VsZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkO1xuICB9XG4gIHByaXZhdGUgX3NlbGVjdGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgQE91dHB1dCgpXG4gIHNlbGVjdDogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBfY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxuXG4gIF9vblNlbGVjdCgkZXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuX3NlbGVjdGFibGUgfHwgdGhpcy5pc0FjdGlvbkV2ZW50KCRldmVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoJGV2ZW50LmtleUNvZGUgPT09IFNQQUNFKSB7XG4gICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICB0aGlzLnNlbGVjdC5lbWl0KCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBldmVudCB3b3VsZCB0cmlnZ2VyIGFuIGFjdGlvbi5cbiAgICogUmV0dXJuIGB0cnVlYCBpZiBhIGJ1dHRvbiwgbGluaywgaW5wdXQgb3IgbGFiZWwgYXJlIGNsaWNrZWQuXG4gICAqL1xuICBwcml2YXRlIGlzQWN0aW9uRXZlbnQoJGV2ZW50KSB7XG4gICAgbGV0IHBhcmVudDogSFRNTEVsZW1lbnQgPSAkZXZlbnQudGFyZ2V0O1xuXG4gICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQgIT09IHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCkge1xuICAgICAgaWYgKFsnQScsICdJTlBVVCcsICdCVVRUT04nXS5pbmRleE9mKHBhcmVudC50YWdOYW1lKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChwYXJlbnQudGFnTmFtZSA9PT0gJ0xBQkVMJyAmJiBwYXJlbnQuZ2V0QXR0cmlidXRlKCdmb3InKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iXX0=