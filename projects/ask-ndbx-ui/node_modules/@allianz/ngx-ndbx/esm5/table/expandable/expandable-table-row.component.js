/**
 * @fileoverview added by tsickle
 * Generated from: expandable/expandable-table-row.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
/**
 * This is an expandable table row.
 * It can collapse its height to hide the content.
 * Requires the table cells to have the `[nxExpandableTableCell]` component.
 */
var NxExpandableTableRowComponent = /** @class */ (function () {
    function NxExpandableTableRowComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this.expanded = new BehaviorSubject(false);
    }
    /**
     * Toggles the expansion of this row.
     */
    /**
     * Toggles the expansion of this row.
     * @return {?}
     */
    NxExpandableTableRowComponent.prototype.toggle = /**
     * Toggles the expansion of this row.
     * @return {?}
     */
    function () {
        if (this.expanded.value) {
            this.close();
        }
        else {
            this.expand();
        }
    };
    /**
     * Expands this row.
     */
    /**
     * Expands this row.
     * @return {?}
     */
    NxExpandableTableRowComponent.prototype.expand = /**
     * Expands this row.
     * @return {?}
     */
    function () {
        if (!this.expanded.value) {
            this.expanded.next(true);
            this._changeDetectorRef.markForCheck();
        }
    };
    /**
     * Closes this row.
     */
    /**
     * Closes this row.
     * @return {?}
     */
    NxExpandableTableRowComponent.prototype.close = /**
     * Closes this row.
     * @return {?}
     */
    function () {
        if (this.expanded.value) {
            this.expanded.next(false);
            this._changeDetectorRef.markForCheck();
        }
    };
    NxExpandableTableRowComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'tr[nxExpandableTableRow]',
                    host: {
                        'class': 'nx-expandable-table-row'
                    },
                    template: "<ng-content></ng-content>",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NxExpandableTableRowComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    return NxExpandableTableRowComponent;
}());
export { NxExpandableTableRowComponent };
if (false) {
    /** @type {?} */
    NxExpandableTableRowComponent.prototype.expanded;
    /**
     * @type {?}
     * @private
     */
    NxExpandableTableRowComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kYWJsZS10YWJsZS1yb3cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvdGFibGUvIiwic291cmNlcyI6WyJleHBhbmRhYmxlL2V4cGFuZGFibGUtdGFibGUtcm93LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7Ozs7O0FBUXZDO0lBWUUsdUNBQW9CLGtCQUFxQztRQUFyQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1CO1FBRnpELGFBQVEsR0FBNkIsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFSixDQUFDO0lBRTdEOztPQUVHOzs7OztJQUNILDhDQUFNOzs7O0lBQU47UUFDRSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNkO2FBQU07WUFDTCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDZjtJQUNILENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSCw4Q0FBTTs7OztJQUFOO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUN4QztJQUNILENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSCw2Q0FBSzs7OztJQUFMO1FBQ0UsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRTtZQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDeEM7SUFDSCxDQUFDOztnQkEzQ0YsU0FBUyxTQUFDOztvQkFFVCxRQUFRLEVBQUUsMEJBQTBCO29CQUNwQyxJQUFJLEVBQUU7d0JBQ0wsT0FBTyxFQUFFLHlCQUF5QjtxQkFDbEM7b0JBQ0QsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzs7O2dCQWpCNEMsaUJBQWlCOztJQXFEOUQsb0NBQUM7Q0FBQSxBQTVDRCxJQTRDQztTQW5DWSw2QkFBNkI7OztJQUN4QyxpREFBZ0U7Ozs7O0lBRXBELDJEQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE54RXhwYW5kYWJsZSB9IGZyb20gJy4vdG9nZ2xlLWJ1dHRvbi5jb21wb25lbnQnO1xuXG4vKipcbiAqIFRoaXMgaXMgYW4gZXhwYW5kYWJsZSB0YWJsZSByb3cuXG4gKiBJdCBjYW4gY29sbGFwc2UgaXRzIGhlaWdodCB0byBoaWRlIHRoZSBjb250ZW50LlxuICogUmVxdWlyZXMgdGhlIHRhYmxlIGNlbGxzIHRvIGhhdmUgdGhlIGBbbnhFeHBhbmRhYmxlVGFibGVDZWxsXWAgY29tcG9uZW50LlxuICovXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ3RyW254RXhwYW5kYWJsZVRhYmxlUm93XScsXG4gIGhvc3Q6IHtcbiAgICdjbGFzcyc6ICdueC1leHBhbmRhYmxlLXRhYmxlLXJvdydcbiAgfSxcbiAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgTnhFeHBhbmRhYmxlVGFibGVSb3dDb21wb25lbnQgaW1wbGVtZW50cyBOeEV4cGFuZGFibGUge1xuICBleHBhbmRlZDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBleHBhbnNpb24gb2YgdGhpcyByb3cuXG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgaWYgKHRoaXMuZXhwYW5kZWQudmFsdWUpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5leHBhbmQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRXhwYW5kcyB0aGlzIHJvdy5cbiAgICovXG4gIGV4cGFuZCgpIHtcbiAgICBpZiAoIXRoaXMuZXhwYW5kZWQudmFsdWUpIHtcbiAgICAgIHRoaXMuZXhwYW5kZWQubmV4dCh0cnVlKTtcbiAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhpcyByb3cuXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICBpZiAodGhpcy5leHBhbmRlZC52YWx1ZSkge1xuICAgICAgdGhpcy5leHBhbmRlZC5uZXh0KGZhbHNlKTtcbiAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgfVxufVxuIl19