/**
 * @fileoverview added by tsickle
 * Generated from: expandable/toggle-button.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
/**
 * @record
 */
export function NxExpandable() { }
if (false) {
    /**
     * Indicates if this expandable instance is open or not.
     * @type {?}
     */
    NxExpandable.prototype.expanded;
    /**
     * Toggles the open state.
     * @type {?}
     */
    NxExpandable.prototype.toggle;
    /**
     * Expands this component.
     * @type {?}
     */
    NxExpandable.prototype.expand;
    /**
     * Closes this component.
     * @type {?}
     */
    NxExpandable.prototype.close;
}
/**
 * This toggle button can be clicked and toggles expandable elements.
 * e.g. it can toggle a expandable table row or anything else that implements the `NxExpandable` interface.
 */
var NxToggleButtonComponent = /** @class */ (function () {
    function NxToggleButtonComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._expanded = false;
        this._ariaLabel = '';
    }
    Object.defineProperty(NxToggleButtonComponent.prototype, "target", {
        /**
         * This is the expandable target that will be toggled when the user clicks the button.
         */
        set: /**
         * This is the expandable target that will be toggled when the user clicks the button.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._target = value;
            if (this._subscription) {
                this._subscription.unsubscribe();
            }
            if (this._target) {
                this._subscription = this._target.expanded.subscribe((/**
                 * @param {?} expanded
                 * @return {?}
                 */
                function (expanded) {
                    _this._expanded = expanded;
                    _this._changeDetectorRef.markForCheck();
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxToggleButtonComponent.prototype, "ariaLabel", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._ariaLabel = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxToggleButtonComponent.prototype._onClick = /**
     * @return {?}
     */
    function () {
        if (this._target) {
            this._target.toggle();
        }
    };
    /**
     * @return {?}
     */
    NxToggleButtonComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
    };
    NxToggleButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-toggle-button',
                    template: "<button (click)=\"_onClick()\"\n    class=\"nx-toggle-button\"\n    [attr.aria-label]=\"_ariaLabel\"\n    [attr.aria-expanded]=\"_expanded\"\n    [class.is-expanded]=\"_expanded\">\n  <nx-icon name=\"chevron-down\"\n      aria-hidden=\"true\"\n      size=\"s\"\n      class=\"nx-toggle-button__icon\"></nx-icon>\n</button>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block}.nx-toggle-button{display:block;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:none;outline:0;background:0 0;padding:0;line-height:24px;height:24px}.nx-toggle-button .nx-toggle-button__icon{transform:rotateZ(0);transition:transform .2s;color:#414141;color:var(--expandable-table-arrow-icon-color,#414141)}.nx-toggle-button.is-expanded .nx-toggle-button__icon{transform:rotateZ(-180deg)}.nx-toggle-button::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]) .nx-toggle-button:focus{border-radius:4px;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]) .nx-toggle-button:focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}}"]
                }] }
    ];
    /** @nocollapse */
    NxToggleButtonComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxToggleButtonComponent.propDecorators = {
        target: [{ type: Input }],
        ariaLabel: [{ type: Input }]
    };
    return NxToggleButtonComponent;
}());
export { NxToggleButtonComponent };
if (false) {
    /** @type {?} */
    NxToggleButtonComponent.prototype._expanded;
    /** @type {?} */
    NxToggleButtonComponent.prototype._target;
    /** @type {?} */
    NxToggleButtonComponent.prototype._ariaLabel;
    /**
     * @type {?}
     * @private
     */
    NxToggleButtonComponent.prototype._subscription;
    /**
     * @type {?}
     * @private
     */
    NxToggleButtonComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLWJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC90YWJsZS8iLCJzb3VyY2VzIjpbImV4cGFuZGFibGUvdG9nZ2xlLWJ1dHRvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBYSxNQUFNLGVBQWUsQ0FBQzs7OztBQUd4RyxrQ0FZQzs7Ozs7O0lBVkMsZ0NBQW1DOzs7OztJQUduQyw4QkFBbUI7Ozs7O0lBR25CLDhCQUFtQjs7Ozs7SUFHbkIsNkJBQWtCOzs7Ozs7QUFPcEI7SUFzQ0UsaUNBQW9CLGtCQUFxQztRQUFyQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1CO1FBL0J6RCxjQUFTLEdBQVksS0FBSyxDQUFDO1FBMkIzQixlQUFVLEdBQVcsRUFBRSxDQUFDO0lBSW9DLENBQUM7SUExQjdELHNCQUNJLDJDQUFNO1FBSlY7O1dBRUc7Ozs7OztRQUNILFVBQ1csS0FBbUI7WUFEOUIsaUJBY0M7WUFaQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUVyQixJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDbEM7WUFFRCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2hCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUzs7OztnQkFBQyxVQUFBLFFBQVE7b0JBQ3pELEtBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO29CQUMxQixLQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7Z0JBQ3pDLENBQUMsRUFBQyxDQUFDO2FBQ047UUFDSCxDQUFDOzs7T0FBQTtJQUdELHNCQUNJLDhDQUFTOzs7OztRQURiLFVBQ2MsS0FBYTtZQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztZQUN4QixJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDekMsQ0FBQzs7O09BQUE7Ozs7SUFPRCwwQ0FBUTs7O0lBQVI7UUFDRSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUN2QjtJQUNILENBQUM7Ozs7SUFFRCw2Q0FBVzs7O0lBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNsQztJQUNILENBQUM7O2dCQWxERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsZ1ZBQTZDO29CQUU3QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7aUJBQ2hEOzs7O2dCQTFCbUQsaUJBQWlCOzs7eUJBaUNsRSxLQUFLOzRCQWlCTCxLQUFLOztJQXNCUiw4QkFBQztDQUFBLEFBbkRELElBbURDO1NBN0NZLHVCQUF1Qjs7O0lBQ2xDLDRDQUEyQjs7SUFvQjNCLDBDQUFzQjs7SUFPdEIsNkNBQXdCOzs7OztJQUV4QixnREFBb0M7Ozs7O0lBRXhCLHFEQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24sIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE54RXhwYW5kYWJsZSB7XG4gIC8qKiBJbmRpY2F0ZXMgaWYgdGhpcyBleHBhbmRhYmxlIGluc3RhbmNlIGlzIG9wZW4gb3Igbm90LiAgKi9cbiAgZXhwYW5kZWQ6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPjtcblxuICAvKiogVG9nZ2xlcyB0aGUgb3BlbiBzdGF0ZS4gKi9cbiAgdG9nZ2xlOiAoKSA9PiB2b2lkO1xuXG4gIC8qKiBFeHBhbmRzIHRoaXMgY29tcG9uZW50LiAqL1xuICBleHBhbmQ6ICgpID0+IHZvaWQ7XG5cbiAgLyoqIENsb3NlcyB0aGlzIGNvbXBvbmVudC4gKi9cbiAgY2xvc2U6ICgpID0+IHZvaWQ7XG59XG5cbi8qKlxuICogVGhpcyB0b2dnbGUgYnV0dG9uIGNhbiBiZSBjbGlja2VkIGFuZCB0b2dnbGVzIGV4cGFuZGFibGUgZWxlbWVudHMuXG4gKiBlLmcuIGl0IGNhbiB0b2dnbGUgYSBleHBhbmRhYmxlIHRhYmxlIHJvdyBvciBhbnl0aGluZyBlbHNlIHRoYXQgaW1wbGVtZW50cyB0aGUgYE54RXhwYW5kYWJsZWAgaW50ZXJmYWNlLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdueC10b2dnbGUtYnV0dG9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RvZ2dsZS1idXR0b24uY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi90b2dnbGUtYnV0dG9uLnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgTnhUb2dnbGVCdXR0b25Db21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBfZXhwYW5kZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgZXhwYW5kYWJsZSB0YXJnZXQgdGhhdCB3aWxsIGJlIHRvZ2dsZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGJ1dHRvbi5cbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCB0YXJnZXQodmFsdWU6IE54RXhwYW5kYWJsZSkge1xuICAgIHRoaXMuX3RhcmdldCA9IHZhbHVlO1xuXG4gICAgaWYgKHRoaXMuX3N1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3RhcmdldCkge1xuICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uID0gdGhpcy5fdGFyZ2V0LmV4cGFuZGVkLnN1YnNjcmliZShleHBhbmRlZCA9PiB7XG4gICAgICAgICAgdGhpcy5fZXhwYW5kZWQgPSBleHBhbmRlZDtcbiAgICAgICAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG4gIF90YXJnZXQ6IE54RXhwYW5kYWJsZTtcblxuICBASW5wdXQoKVxuICBzZXQgYXJpYUxhYmVsKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9hcmlhTGFiZWwgPSB2YWx1ZTtcbiAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuICBfYXJpYUxhYmVsOiBzdHJpbmcgPSAnJztcblxuICBwcml2YXRlIF9zdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgX29uQ2xpY2soKSB7XG4gICAgaWYgKHRoaXMuX3RhcmdldCkge1xuICAgICAgdGhpcy5fdGFyZ2V0LnRvZ2dsZSgpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19