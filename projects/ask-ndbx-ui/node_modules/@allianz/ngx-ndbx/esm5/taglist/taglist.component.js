/**
 * @fileoverview added by tsickle
 * Generated from: taglist/taglist.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { Component, EventEmitter, forwardRef, Input, Output, ChangeDetectionStrategy, ChangeDetectorRef, ViewChildren, ElementRef, QueryList } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NxTagComponent } from './tag.component';
var NxTaglistComponent = /** @class */ (function () {
    function NxTaglistComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * An event is dispatched each time when the list of tags changed.
         */
        this.tagsChange = new EventEmitter();
        /**
         * An event is dispatched each time when a tag is clicked.
         */
        this.tagClickEvent = new EventEmitter();
        this._tags = [];
        this._tabindex = -1;
        this._allowTagDeletion = true;
        this._isKeywordList = false;
        this._labelProperty = 'nxTaglistLabel';
        this._valueFormatterFn = (/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return value; });
        this._onChange = (/**
         * @return {?}
         */
        function () { });
        this._onTouched = (/**
         * @return {?}
         */
        function () { });
    }
    Object.defineProperty(NxTaglistComponent.prototype, "tags", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tags;
        },
        /** Sets the list of tags. */
        set: /**
         * Sets the list of tags.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._tags = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTaglistComponent.prototype, "tabindex", {
        get: /**
         * @return {?}
         */
        function () {
            return this.allowTagDeletion ? 0 : this._tabindex;
        },
        /** Sets the tabindex of the contained tags. Default value: -1. */
        set: /**
         * Sets the tabindex of the contained tags. Default value: -1.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._tabindex = coerceNumberProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTaglistComponent.prototype, "allowTagDeletion", {
        get: /**
         * @return {?}
         */
        function () {
            return this._allowTagDeletion;
        },
        /** Whether the tags can be removed from the list. Default: true. */
        set: /**
         * Whether the tags can be removed from the list. Default: true.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._allowTagDeletion = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTaglistComponent.prototype, "isKeywordList", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isKeywordList;
        },
        /** Whether the tags can be styled as keywords. */
        set: /**
         * Whether the tags can be styled as keywords.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isKeywordList = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTaglistComponent.prototype, "labelProp", {
        get: /**
         * @return {?}
         */
        function () {
            return this._labelProperty;
        },
        /** Sets the label property, in case tags represent objects. */
        set: /**
         * Sets the label property, in case tags represent objects.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._labelProperty !== value) {
                this._labelProperty = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTaglistComponent.prototype, "labelledby", {
        get: /**
         * @return {?}
         */
        function () {
            return this._ariaLabelledBy;
        },
        /** Sets the label property to improve accessibility. */
        set: /**
         * Sets the label property to improve accessibility.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._ariaLabelledBy !== value) {
                this._ariaLabelledBy = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTaglistComponent.prototype, "valueFormatter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._valueFormatterFn;
        },
        /** Sets the customization function for tag value.  */
        set: /**
         * Sets the customization function for tag value.
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this._valueFormatterFn = fn;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    /** Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter */
    /**
     * Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    NxTaglistComponent.prototype.delete = /**
     * Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    function (index, value) {
        if (this.allowTagDeletion) {
            this.tags = tslib_1.__spread(this.tags.slice(0, index), this.tags.slice(index + 1));
            // focus next element after deletion
            if (this.tagChildren.toArray()[index + 1]) {
                this.tagChildren.toArray()[index + 1].nativeElement.focus();
            }
            this._onChange(this.tags);
            this.tagsChange.emit(this.tags);
        }
    };
    /** Allows to add a tag. Takes tag object as an input */
    /**
     * Allows to add a tag. Takes tag object as an input
     * @param {?} tag
     * @return {?}
     */
    NxTaglistComponent.prototype.addTag = /**
     * Allows to add a tag. Takes tag object as an input
     * @param {?} tag
     * @return {?}
     */
    function (tag) {
        var _this = this;
        if (!tag) {
            return;
        }
        // make sure tag is either string or has the configured label prop and is not yet in the list
        if ((typeof tag === 'string' && this.tags.indexOf(tag) === -1) ||
            (tag[this.labelProp] && this.tags.filter((/**
             * @param {?} t
             * @return {?}
             */
            function (t) { return t[_this.labelProp] === tag[_this.labelProp]; })).length < 1)) {
            this.tags = tslib_1.__spread(this.tags, [tag]);
            this._onChange(this.tags);
            this.tagsChange.emit(this.tags);
        }
    };
    /** Allows to clear the tag list. */
    /**
     * Allows to clear the tag list.
     * @return {?}
     */
    NxTaglistComponent.prototype.clearTags = /**
     * Allows to clear the tag list.
     * @return {?}
     */
    function () {
        this.tags = [];
        this._onChange(this.tags);
        this.tagsChange.emit(this.tags);
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} tags
     * @return {?}
     */
    NxTaglistComponent.prototype.writeValue = /**
     * \@docs-private
     * @param {?} tags
     * @return {?}
     */
    function (tags) {
        this.tags = tags;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NxTaglistComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NxTaglistComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} tag
     * @return {?}
     */
    NxTaglistComponent.prototype.renderTag = /**
     * \@docs-private
     * @param {?} tag
     * @return {?}
     */
    function (tag) {
        /** @type {?} */
        var tagStr = typeof tag === 'string' ? tag : tag[this.labelProp];
        return this.valueFormatter(tagStr);
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    NxTaglistComponent.prototype.tagClick = /**
     * \@docs-private
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    function (index, value) {
        this.tagClickEvent.emit(this.tags[index]);
    };
    NxTaglistComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-taglist',
                    template: "  <ul class=\"nx-taglist\" *ngIf=\"tags.length > 0\">\n    <li class=\"nx-taglist__list-item\" tabindex=\"-1\" *ngFor=\"let tag of tags; let i = index\">\n      <nx-tag [value]=\"renderTag(tag)\" [removable]=\"allowTagDeletion\" [tabindex]=\"tabindex\" (clicked)=\"tagClick(i, $event)\" (removed)=\"delete(i, $event)\"></nx-tag>\n  </li>\n  </ul>\n  <ng-content *ngIf=\"tags.length < 1\"></ng-content>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NxTaglistComponent; })),
                            multi: true
                        }
                    ],
                    host: {
                        '[class.nx-taglist--keyword]': 'isKeywordList',
                        '[attr.aria-labelledby]': 'labelledby || null',
                        '[attr.tabindex]': '-1'
                    },
                    styles: [":host{position:relative;min-height:32px;margin-bottom:32px;display:flex;justify-content:space-between}:host:focus{outline:0}.nx-taglist{display:flex;flex-wrap:wrap}.nx-taglist__list-item{list-style:none;margin-right:12px;margin-bottom:12px;flex-wrap:wrap;display:flex}@media (max-width:703px){.nx-taglist--keyword{justify-content:center}}"]
                }] }
    ];
    /** @nocollapse */
    NxTaglistComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxTaglistComponent.propDecorators = {
        tagsChange: [{ type: Output, args: ['nxTagsChange',] }],
        tagClickEvent: [{ type: Output, args: ['nxTagClick',] }],
        tagChildren: [{ type: ViewChildren, args: [NxTagComponent, { read: ElementRef },] }],
        tags: [{ type: Input, args: ['nxTags',] }],
        tabindex: [{ type: Input }],
        allowTagDeletion: [{ type: Input, args: ['nxAllowTagDeletion',] }],
        isKeywordList: [{ type: Input, args: ['nxIsKeywordList',] }],
        labelProp: [{ type: Input, args: ['nxLabelProperty',] }],
        labelledby: [{ type: Input, args: ['aria-labelledby',] }],
        valueFormatter: [{ type: Input, args: ['nxValueFormatter',] }]
    };
    return NxTaglistComponent;
}());
export { NxTaglistComponent };
if (false) {
    /**
     * An event is dispatched each time when the list of tags changed.
     * @type {?}
     */
    NxTaglistComponent.prototype.tagsChange;
    /**
     * An event is dispatched each time when a tag is clicked.
     * @type {?}
     */
    NxTaglistComponent.prototype.tagClickEvent;
    /**
     * \@docs-private
     * @type {?}
     */
    NxTaglistComponent.prototype.tagChildren;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._tags;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._tabindex;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._allowTagDeletion;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._isKeywordList;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._labelProperty;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._ariaLabelledBy;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._valueFormatterFn;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._onTouched;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,