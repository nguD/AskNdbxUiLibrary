/**
 * @fileoverview added by tsickle
 * Generated from: multi/multi-step-group.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, QueryList, ContentChildren, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { NxStepComponent } from '../progress-stepper.component';
var NxMultiStepperGroupComponent = /** @class */ (function () {
    function NxMultiStepperGroupComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
    }
    Object.defineProperty(NxMultiStepperGroupComponent.prototype, "label", {
        get: /**
         * @return {?}
         */
        function () {
            return this._label;
        },
        /** Sets the label of a group that is shown to the user. */
        set: /**
         * Sets the label of a group that is shown to the user.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._label = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    NxMultiStepperGroupComponent.decorators = [
        { type: Component, args: [{
                    template: "<ng-template><ng-content></ng-content></ng-template>\n",
                    selector: 'nx-step-group',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NxMultiStepperGroupComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxMultiStepperGroupComponent.propDecorators = {
        steps: [{ type: ContentChildren, args: [NxStepComponent, { descendants: true },] }],
        label: [{ type: Input }]
    };
    return NxMultiStepperGroupComponent;
}());
export { NxMultiStepperGroupComponent };
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxMultiStepperGroupComponent.prototype.steps;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepperGroupComponent.prototype._label;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepperGroupComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktc3RlcC1ncm91cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC9wcm9ncmVzcy1zdGVwcGVyLyIsInNvdXJjZXMiOlsibXVsdGkvbXVsdGktc3RlcC1ncm91cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pILE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUVoRTtJQW9CRSxzQ0FBb0Isa0JBQXFDO1FBQXJDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7SUFBRyxDQUFDO0lBVjdELHNCQUNJLCtDQUFLOzs7O1FBSVQ7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQztRQVJELDJEQUEyRDs7Ozs7O1FBQzNELFVBQ1UsS0FBYTtZQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztZQUNwQixJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDekMsQ0FBQzs7O09BQUE7O2dCQWRGLFNBQVMsU0FBQztvQkFDVCxrRUFBZ0Q7b0JBQ2hELFFBQVEsRUFBRSxlQUFlO29CQUN6QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7Ozs7Z0JBUCtFLGlCQUFpQjs7O3dCQVU5RixlQUFlLFNBQUMsZUFBZSxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRTt3QkFHdEQsS0FBSzs7SUFXUixtQ0FBQztDQUFBLEFBckJELElBcUJDO1NBaEJZLDRCQUE0Qjs7Ozs7O0lBRXZDLDZDQUEyRjs7Ozs7SUFXM0YsOENBQWU7Ozs7O0lBRUgsMERBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgUXVlcnlMaXN0LCBDb250ZW50Q2hpbGRyZW4sIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnhTdGVwQ29tcG9uZW50IH0gZnJvbSAnLi4vcHJvZ3Jlc3Mtc3RlcHBlci5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgdGVtcGxhdGVVcmw6ICcuL211bHRpLXN0ZXAtZ3JvdXAuY29tcG9uZW50Lmh0bWwnLFxuICBzZWxlY3RvcjogJ254LXN0ZXAtZ3JvdXAnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBOeE11bHRpU3RlcHBlckdyb3VwQ29tcG9uZW50IHtcbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgQENvbnRlbnRDaGlsZHJlbihOeFN0ZXBDb21wb25lbnQsIHsgZGVzY2VuZGFudHM6IHRydWUgfSkgc3RlcHM6IFF1ZXJ5TGlzdDxOeFN0ZXBDb21wb25lbnQ+O1xuXG4gIC8qKiBTZXRzIHRoZSBsYWJlbCBvZiBhIGdyb3VwIHRoYXQgaXMgc2hvd24gdG8gdGhlIHVzZXIuICovXG4gIEBJbnB1dCgpXG4gIHNldCBsYWJlbCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fbGFiZWwgPSB2YWx1ZTtcbiAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuICBnZXQgbGFiZWwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fbGFiZWw7XG4gIH1cbiAgcHJpdmF0ZSBfbGFiZWw7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7fVxufVxuIl19