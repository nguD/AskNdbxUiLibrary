/**
 * @fileoverview added by tsickle
 * Generated from: button/button-base.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HostBinding } from '@angular/core';
/** @type {?} */
var DEFAULT_SIZE = 'medium';
/** @type {?} */
var DEFAULT_TYPE = 'primary';
/**
 * \@docs-private
 */
var NxButtonBase = /** @class */ (function () {
    function NxButtonBase(_changeDetectorRef, _elementRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._elementRef = _elementRef;
        /**
         * \@docs-private
         */
        this.type = DEFAULT_TYPE;
        /**
         * \@docs-private
         */
        this.size = DEFAULT_SIZE;
        this.negative = false;
        this.block = false;
    }
    Object.defineProperty(NxButtonBase.prototype, "isPrimary", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () { return this.type === 'primary'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxButtonBase.prototype, "isSecondary", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () { return this.type === 'secondary'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxButtonBase.prototype, "isTertiary", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () { return this.type === 'tertiary'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxButtonBase.prototype, "isCta", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () { return this.type === 'cta'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxButtonBase.prototype, "isEmphasis", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () { return this.type === 'emphasis'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxButtonBase.prototype, "isLarge", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () { return this.size === 'large'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxButtonBase.prototype, "isMedium", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () { return this.size === 'medium'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxButtonBase.prototype, "isSmallMedium", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () { return this.size === 'small-medium'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxButtonBase.prototype, "isSmall", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () { return this.size === 'small'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxButtonBase.prototype, "isBlock", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () { return this.block; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxButtonBase.prototype, "isNegative", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () { return this.negative; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxButtonBase.prototype, "classNames", {
        get: /**
         * @return {?}
         */
        function () {
            return this._classNames;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._classNames === value) {
                return;
            }
            this._classNames = value;
            var _a = tslib_1.__read(this._classNames.match(/primary|secondary|tertiary|cta|emphasis/) || [DEFAULT_TYPE], 1), _b = _a[0], type = _b === void 0 ? null : _b;
            this.type = (/** @type {?} */ (type));
            var _c = tslib_1.__read(this._classNames.match(/small-medium|small|medium|large/) || [DEFAULT_SIZE], 1), _d = _c[0], size = _d === void 0 ? null : _d;
            this.size = (/** @type {?} */ (size));
            this.negative = /negative/.test(this._classNames);
            this.block = /block/.test(this._classNames);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxButtonBase.prototype, "elementRef", {
        /**
         * @docs-private
         * getter used for the modal component as a quickfix
         * since button got changed from directive to component the reference used by the ngOpenModelOnClick directive
         * for nxButtons is a reference to component instance instead of an element reference. As a workaround we need a
         * way to reach the elementRef of the component until the modal gets refactored.
         */
        get: /**
         * \@docs-private
         * getter used for the modal component as a quickfix
         * since button got changed from directive to component the reference used by the ngOpenModelOnClick directive
         * for nxButtons is a reference to component instance instead of an element reference. As a workaround we need a
         * way to reach the elementRef of the component until the modal gets refactored.
         * @return {?}
         */
        function () {
            return this._elementRef;
        },
        enumerable: true,
        configurable: true
    });
    NxButtonBase.propDecorators = {
        isPrimary: [{ type: HostBinding, args: ['class.nx-button--primary',] }],
        isSecondary: [{ type: HostBinding, args: ['class.nx-button--secondary',] }],
        isTertiary: [{ type: HostBinding, args: ['class.nx-button--tertiary',] }],
        isCta: [{ type: HostBinding, args: ['class.nx-button--cta',] }],
        isEmphasis: [{ type: HostBinding, args: ['class.nx-button--emphasis',] }],
        isLarge: [{ type: HostBinding, args: ['class.nx-button--large',] }],
        isMedium: [{ type: HostBinding, args: ['class.nx-button--medium',] }],
        isSmallMedium: [{ type: HostBinding, args: ['class.nx-button--small-medium',] }],
        isSmall: [{ type: HostBinding, args: ['class.nx-button--small',] }],
        isBlock: [{ type: HostBinding, args: ['class.nx-button--block',] }],
        isNegative: [{ type: HostBinding, args: ['class.nx-button--negative',] }]
    };
    return NxButtonBase;
}());
export { NxButtonBase };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxButtonBase.prototype._classNames;
    /**
     * \@docs-private
     * @type {?}
     */
    NxButtonBase.prototype.type;
    /**
     * \@docs-private
     * @type {?}
     */
    NxButtonBase.prototype.size;
    /** @type {?} */
    NxButtonBase.prototype.negative;
    /** @type {?} */
    NxButtonBase.prototype.block;
    /**
     * @type {?}
     * @private
     */
    NxButtonBase.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxButtonBase.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWJhc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbImJ1dHRvbi9idXR0b24tYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBR0wsV0FBVyxFQUNaLE1BQU0sZUFBZSxDQUFDOztJQVFqQixZQUFZLEdBQUcsUUFBUTs7SUFDdkIsWUFBWSxHQUFHLFNBQVM7Ozs7QUFHOUI7SUFxQ0Usc0JBQW9CLGtCQUFxQyxFQUFVLFdBQXVCO1FBQXRFLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBWTs7OztRQVIxRixTQUFJLEdBQWlCLFlBQVksQ0FBQzs7OztRQUdsQyxTQUFJLEdBQWlCLFlBQVksQ0FBQztRQUVsQyxhQUFRLEdBQVksS0FBSyxDQUFDO1FBQzFCLFVBQUssR0FBWSxLQUFLLENBQUM7SUFFdUUsQ0FBQztJQWpDL0Ysc0JBQTZDLG1DQUFTO1FBRHRELG9CQUFvQjs7Ozs7UUFDcEIsY0FBb0UsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBRXJHLHNCQUErQyxxQ0FBVztRQUQxRCxvQkFBb0I7Ozs7O1FBQ3BCLGNBQXdFLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUUzRyxzQkFBOEMsb0NBQVU7UUFEeEQsb0JBQW9COzs7OztRQUNwQixjQUFzRSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQzs7O09BQUE7SUFFeEcsc0JBQXlDLCtCQUFLO1FBRDlDLG9CQUFvQjs7Ozs7UUFDcEIsY0FBNEQsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBRXpGLHNCQUE4QyxvQ0FBVTtRQUR4RCxvQkFBb0I7Ozs7O1FBQ3BCLGNBQXNFLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUd4RyxzQkFBMkMsaUNBQU87UUFEbEQsb0JBQW9COzs7OztRQUNwQixjQUFnRSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQzs7O09BQUE7SUFFL0Ysc0JBQTRDLGtDQUFRO1FBRHBELG9CQUFvQjs7Ozs7UUFDcEIsY0FBa0UsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBRWxHLHNCQUFrRCx1Q0FBYTtRQUQvRCxvQkFBb0I7Ozs7O1FBQ3BCLGNBQTZFLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUVuSCxzQkFBMkMsaUNBQU87UUFEbEQsb0JBQW9COzs7OztRQUNwQixjQUFnRSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQzs7O09BQUE7SUFHL0Ysc0JBQTJDLGlDQUFPO1FBRGxELG9CQUFvQjs7Ozs7UUFDcEIsY0FBZ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzs7O09BQUE7SUFFcEYsc0JBQThDLG9DQUFVO1FBRHhELG9CQUFvQjs7Ozs7UUFDcEIsY0FBc0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzs7O09BQUE7SUFhN0Ysc0JBQVcsb0NBQVU7Ozs7UUFtQnJCO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzFCLENBQUM7Ozs7O1FBckJELFVBQXNCLEtBQWE7WUFDakMsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLEtBQUssRUFBRTtnQkFDOUIsT0FBTzthQUNSO1lBRUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7WUFFbkIsSUFBQSwyR0FBbUcsRUFBbEcsVUFBVyxFQUFYLGdDQUFrRztZQUN6RyxJQUFJLENBQUMsSUFBSSxHQUFHLG1CQUFBLElBQUksRUFBZ0IsQ0FBQztZQUUzQixJQUFBLG1HQUEyRixFQUExRixVQUFXLEVBQVgsZ0NBQTBGO1lBQ2pHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQUEsSUFBSSxFQUFnQixDQUFDO1lBRWpDLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDbEQsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUU1QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDekMsQ0FBQzs7O09BQUE7SUFhRCxzQkFBSSxvQ0FBVTtRQVBkOzs7Ozs7V0FNRzs7Ozs7Ozs7O1FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDMUIsQ0FBQzs7O09BQUE7OzRCQW5FQSxXQUFXLFNBQUMsMEJBQTBCOzhCQUV0QyxXQUFXLFNBQUMsNEJBQTRCOzZCQUV4QyxXQUFXLFNBQUMsMkJBQTJCO3dCQUV2QyxXQUFXLFNBQUMsc0JBQXNCOzZCQUVsQyxXQUFXLFNBQUMsMkJBQTJCOzBCQUd2QyxXQUFXLFNBQUMsd0JBQXdCOzJCQUVwQyxXQUFXLFNBQUMseUJBQXlCO2dDQUVyQyxXQUFXLFNBQUMsK0JBQStCOzBCQUUzQyxXQUFXLFNBQUMsd0JBQXdCOzBCQUdwQyxXQUFXLFNBQUMsd0JBQXdCOzZCQUVwQyxXQUFXLFNBQUMsMkJBQTJCOztJQThDMUMsbUJBQUM7Q0FBQSxBQXhFRCxJQXdFQztTQXhFWSxZQUFZOzs7Ozs7SUFDdkIsbUNBQTRCOzs7OztJQTRCNUIsNEJBQWtDOzs7OztJQUdsQyw0QkFBa0M7O0lBRWxDLGdDQUEwQjs7SUFDMUIsNkJBQXVCOzs7OztJQUVYLDBDQUE2Qzs7Ozs7SUFBRSxtQ0FBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBFbGVtZW50UmVmLFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgSG9zdEJpbmRpbmdcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKiBUeXBlIG9mIGEgYnV0dG9uLiAqL1xuZXhwb3J0IHR5cGUgTnhCdXR0b25UeXBlID0gJ3ByaW1hcnknIHwgJ3NlY29uZGFyeScgfCAndGVydGlhcnknIHwgJ2N0YScgfCAnZW1waGFzaXMnO1xuXG4vKiogU2l6ZSBvZiBhIGJ1dHRvbi4gKi9cbmV4cG9ydCB0eXBlIE54QnV0dG9uU2l6ZSA9ICdzbWFsbCcgfCAnc21hbGwtbWVkaXVtJyB8ICdtZWRpdW0nIHwgJ2xhcmdlJyA7XG5cbmNvbnN0IERFRkFVTFRfU0laRSA9ICdtZWRpdW0nO1xuY29uc3QgREVGQVVMVF9UWVBFID0gJ3ByaW1hcnknO1xuXG4vKiogQGRvY3MtcHJpdmF0ZSAqL1xuZXhwb3J0IGNsYXNzIE54QnV0dG9uQmFzZSB7XG4gIHByaXZhdGUgX2NsYXNzTmFtZXM6IHN0cmluZztcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLm54LWJ1dHRvbi0tcHJpbWFyeScpIGdldCBpc1ByaW1hcnkoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLnR5cGUgPT09ICdwcmltYXJ5JzsgfVxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLm54LWJ1dHRvbi0tc2Vjb25kYXJ5JykgZ2V0IGlzU2Vjb25kYXJ5KCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy50eXBlID09PSAnc2Vjb25kYXJ5JzsgfVxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLm54LWJ1dHRvbi0tdGVydGlhcnknKSBnZXQgaXNUZXJ0aWFyeSgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMudHlwZSA9PT0gJ3RlcnRpYXJ5JzsgfVxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLm54LWJ1dHRvbi0tY3RhJykgZ2V0IGlzQ3RhKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy50eXBlID09PSAnY3RhJzsgfVxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLm54LWJ1dHRvbi0tZW1waGFzaXMnKSBnZXQgaXNFbXBoYXNpcygpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMudHlwZSA9PT0gJ2VtcGhhc2lzJzsgfVxuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIEBIb3N0QmluZGluZygnY2xhc3MubngtYnV0dG9uLS1sYXJnZScpIGdldCBpc0xhcmdlKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5zaXplID09PSAnbGFyZ2UnOyB9XG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIEBIb3N0QmluZGluZygnY2xhc3MubngtYnV0dG9uLS1tZWRpdW0nKSBnZXQgaXNNZWRpdW0oKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLnNpemUgPT09ICdtZWRpdW0nOyB9XG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIEBIb3N0QmluZGluZygnY2xhc3MubngtYnV0dG9uLS1zbWFsbC1tZWRpdW0nKSBnZXQgaXNTbWFsbE1lZGl1bSgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuc2l6ZSA9PT0gJ3NtYWxsLW1lZGl1bSc7IH1cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5ueC1idXR0b24tLXNtYWxsJykgZ2V0IGlzU21hbGwoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLnNpemUgPT09ICdzbWFsbCc7IH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLm54LWJ1dHRvbi0tYmxvY2snKSBnZXQgaXNCbG9jaygpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuYmxvY2s7IH1cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5ueC1idXR0b24tLW5lZ2F0aXZlJykgZ2V0IGlzTmVnYXRpdmUoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLm5lZ2F0aXZlOyB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgdHlwZTogTnhCdXR0b25UeXBlID0gREVGQVVMVF9UWVBFO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHNpemU6IE54QnV0dG9uU2l6ZSA9IERFRkFVTFRfU0laRTtcblxuICBuZWdhdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xuICBibG9jazogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgcHJpdmF0ZSBfZWxlbWVudFJlZjogRWxlbWVudFJlZikgeyB9XG5cbiAgcHVibGljIHNldCBjbGFzc05hbWVzKHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5fY2xhc3NOYW1lcyA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9jbGFzc05hbWVzID0gdmFsdWU7XG5cbiAgICBjb25zdCBbdHlwZSA9IG51bGxdID0gdGhpcy5fY2xhc3NOYW1lcy5tYXRjaCgvcHJpbWFyeXxzZWNvbmRhcnl8dGVydGlhcnl8Y3RhfGVtcGhhc2lzLykgfHwgW0RFRkFVTFRfVFlQRV07XG4gICAgdGhpcy50eXBlID0gdHlwZSBhcyBOeEJ1dHRvblR5cGU7XG5cbiAgICBjb25zdCBbc2l6ZSA9IG51bGxdID0gdGhpcy5fY2xhc3NOYW1lcy5tYXRjaCgvc21hbGwtbWVkaXVtfHNtYWxsfG1lZGl1bXxsYXJnZS8pIHx8IFtERUZBVUxUX1NJWkVdO1xuICAgIHRoaXMuc2l6ZSA9IHNpemUgYXMgTnhCdXR0b25TaXplO1xuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IC9uZWdhdGl2ZS8udGVzdCh0aGlzLl9jbGFzc05hbWVzKTtcbiAgICB0aGlzLmJsb2NrID0gL2Jsb2NrLy50ZXN0KHRoaXMuX2NsYXNzTmFtZXMpO1xuXG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGNsYXNzTmFtZXMoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fY2xhc3NOYW1lcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAZG9jcy1wcml2YXRlXG4gICAqIGdldHRlciB1c2VkIGZvciB0aGUgbW9kYWwgY29tcG9uZW50IGFzIGEgcXVpY2tmaXhcbiAgICogc2luY2UgYnV0dG9uIGdvdCBjaGFuZ2VkIGZyb20gZGlyZWN0aXZlIHRvIGNvbXBvbmVudCB0aGUgcmVmZXJlbmNlIHVzZWQgYnkgdGhlIG5nT3Blbk1vZGVsT25DbGljayBkaXJlY3RpdmVcbiAgICogZm9yIG54QnV0dG9ucyBpcyBhIHJlZmVyZW5jZSB0byBjb21wb25lbnQgaW5zdGFuY2UgaW5zdGVhZCBvZiBhbiBlbGVtZW50IHJlZmVyZW5jZS4gQXMgYSB3b3JrYXJvdW5kIHdlIG5lZWQgYVxuICAgKiB3YXkgdG8gcmVhY2ggdGhlIGVsZW1lbnRSZWYgb2YgdGhlIGNvbXBvbmVudCB1bnRpbCB0aGUgbW9kYWwgZ2V0cyByZWZhY3RvcmVkLlxuICAgKi9cbiAgZ2V0IGVsZW1lbnRSZWYoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRSZWY7XG4gIH1cbn1cbiJdfQ==