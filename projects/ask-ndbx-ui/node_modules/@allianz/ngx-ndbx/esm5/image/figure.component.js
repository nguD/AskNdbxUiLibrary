/**
 * @fileoverview added by tsickle
 * Generated from: image/figure.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
/** @type {?} */
var DEFAULT_SIZE = 'auto';
var NxFigureComponent = /** @class */ (function () {
    function NxFigureComponent() {
    }
    Object.defineProperty(NxFigureComponent.prototype, "classNames", {
        get: /**
         * @return {?}
         */
        function () {
            return this._classNames;
        },
        /**
         * Sets the type of the visual appearance of the image.
         * The default value  is 'auto'.
         */
        set: /**
         * Sets the type of the visual appearance of the image.
         * The default value  is 'auto'.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._classNames === value) {
                return;
            }
            this._classNames = value;
            /** @type {?} */
            var sizeRegex = /^(auto|1by1|1dot8by1|1dot2by1|1by1dot1|2dot6by1)$/;
            var _a = tslib_1.__read(this._classNames.match(sizeRegex) || [DEFAULT_SIZE], 1), _b = _a[0], size = _b === void 0 ? null : _b;
            this.size = (/** @type {?} */ (size));
            this.rounded = !!this._classNames.match(/rounded/);
        },
        enumerable: true,
        configurable: true
    });
    NxFigureComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'figure[nxFigure]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.nx-image--auto]': 'size === "auto" && !rounded',
                        '[class.nx-image--1by1]': 'size === "1by1"',
                        '[class.nx-image--1dot8by1]': 'size === "1dot8by1"',
                        '[class.nx-image--1dot2by1]': 'size === "1dot2by1"',
                        '[class.nx-image--1by1dot1]': 'size === "1by1dot1"',
                        '[class.nx-image--2dot6by1]': 'size === "2dot6by1"',
                        '[class.nx-image--rounded]': 'rounded'
                    },
                    styles: [":host{display:block;position:relative;line-height:0}:host ::ng-deep img{display:block;font-family:\"object-fit: cover;\";-o-object-fit:cover;object-fit:cover;height:100%;width:100%}:host(.nx-image--auto) ::ng-deep img{height:auto}:host(:not(.nx-image--auto)) ::ng-deep img{position:absolute;top:0;left:0}:host(.nx-image--rounded){padding-top:100%}:host(.nx-image--rounded) ::ng-deep img{border-radius:50%;bottom:0;left:0;position:absolute;right:0;top:0}:host(.nx-image--1by1){padding-top:100%}:host(.nx-image--1dot8by1){padding-top:55.55556%}:host(.nx-image--1dot2by1){padding-top:83.33333%}:host(.nx-image--1by1dot1){padding-top:110%}:host(.nx-image--2dot6by1){padding-top:38.46154%}:host(.nx-image--1by1dot4){padding-top:140%}"]
                }] }
    ];
    NxFigureComponent.propDecorators = {
        classNames: [{ type: Input, args: ['nxFigure',] }]
    };
    return NxFigureComponent;
}());
export { NxFigureComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxFigureComponent.prototype._classNames;
    /**
     * \@docs-private
     * @type {?}
     */
    NxFigureComponent.prototype.rounded;
    /**
     * \@docs-private
     * @type {?}
     */
    NxFigureComponent.prototype.size;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlndXJlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4LyIsInNvdXJjZXMiOlsiaW1hZ2UvZmlndXJlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUFPcEUsWUFBWSxHQUFHLE1BQU07QUFFM0I7SUFBQTtJQThDQSxDQUFDO0lBakJDLHNCQUNJLHlDQUFVOzs7O1FBYWQ7WUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDMUIsQ0FBQztRQXBCRDs7O1dBR0c7Ozs7Ozs7UUFDSCxVQUNlLEtBQWlCO1lBQzlCLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxLQUFLLEVBQUU7Z0JBQzlCLE9BQU87YUFDUjtZQUVELElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDOztnQkFDbkIsU0FBUyxHQUFHLG1EQUFtRDtZQUMvRCxJQUFBLDJFQUFtRSxFQUFsRSxVQUFXLEVBQVgsZ0NBQWtFO1lBQ3pFLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQUEsSUFBSSxFQUFPLENBQUM7WUFFeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDckQsQ0FBQzs7O09BQUE7O2dCQXpDRixTQUFTLFNBQUM7O29CQUVULFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUUvQyxJQUFJLEVBQUU7d0JBQ0osd0JBQXdCLEVBQUUsNkJBQTZCO3dCQUN2RCx3QkFBd0IsRUFBRSxpQkFBaUI7d0JBQzNDLDRCQUE0QixFQUFFLHFCQUFxQjt3QkFDbkQsNEJBQTRCLEVBQUUscUJBQXFCO3dCQUNuRCw0QkFBNEIsRUFBRSxxQkFBcUI7d0JBQ25ELDRCQUE0QixFQUFFLHFCQUFxQjt3QkFDbkQsMkJBQTJCLEVBQUUsU0FBUztxQkFDdkM7O2lCQUNGOzs7NkJBY0UsS0FBSyxTQUFDLFVBQVU7O0lBaUJuQix3QkFBQztDQUFBLEFBOUNELElBOENDO1NBOUJZLGlCQUFpQjs7Ozs7O0lBQzVCLHdDQUFnQzs7Ozs7SUFHaEMsb0NBQWlCOzs7OztJQUdqQixpQ0FBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKiogVHlwZXMgb2YgZmlndXJlcy4gKi9cbmV4cG9ydCB0eXBlIEZpZ3VyZVR5cGUgPSAnYXV0bycgfCAnMWJ5MScgfCAnMWRvdDhieTEnIHwgJzFkb3QyYnkxJyB8ICcxYnkxZG90MScgfCAnMmRvdDZieTEnIHwgJ3JvdW5kZWQnO1xuLyoqIEBkb2NzLXByaXZhdGUgKi9cbmV4cG9ydCB0eXBlIGZpZ3VyZVNpemVzID0gJ2F1dG8nIHwgJzFieTEnIHwgJzFkb3Q4YnkxJyB8ICcxZG90MmJ5MScgfCAnMWJ5MWRvdDEnIHwgJzJkb3Q2YnkxJztcblxuY29uc3QgREVGQVVMVF9TSVpFID0gJ2F1dG8nO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ2ZpZ3VyZVtueEZpZ3VyZV0nLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3R5bGVVcmxzOiBbJy4vZmlndXJlLmNvbXBvbmVudC5zY3NzJ10sXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLm54LWltYWdlLS1hdXRvXSc6ICdzaXplID09PSBcImF1dG9cIiAmJiAhcm91bmRlZCcsXG4gICAgJ1tjbGFzcy5ueC1pbWFnZS0tMWJ5MV0nOiAnc2l6ZSA9PT0gXCIxYnkxXCInLFxuICAgICdbY2xhc3MubngtaW1hZ2UtLTFkb3Q4YnkxXSc6ICdzaXplID09PSBcIjFkb3Q4YnkxXCInLFxuICAgICdbY2xhc3MubngtaW1hZ2UtLTFkb3QyYnkxXSc6ICdzaXplID09PSBcIjFkb3QyYnkxXCInLFxuICAgICdbY2xhc3MubngtaW1hZ2UtLTFieTFkb3QxXSc6ICdzaXplID09PSBcIjFieTFkb3QxXCInLFxuICAgICdbY2xhc3MubngtaW1hZ2UtLTJkb3Q2YnkxXSc6ICdzaXplID09PSBcIjJkb3Q2YnkxXCInLFxuICAgICdbY2xhc3MubngtaW1hZ2UtLXJvdW5kZWRdJzogJ3JvdW5kZWQnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnhGaWd1cmVDb21wb25lbnQge1xuICBwcml2YXRlIF9jbGFzc05hbWVzOiBGaWd1cmVUeXBlO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHJvdW5kZWQ6IGJvb2xlYW47XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgc2l6ZTogZmlndXJlU2l6ZXM7XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHR5cGUgb2YgdGhlIHZpc3VhbCBhcHBlYXJhbmNlIG9mIHRoZSBpbWFnZS5cbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgIGlzICdhdXRvJy5cbiAgICovXG4gIEBJbnB1dCgnbnhGaWd1cmUnKVxuICBzZXQgY2xhc3NOYW1lcyh2YWx1ZTogRmlndXJlVHlwZSkge1xuICAgIGlmICh0aGlzLl9jbGFzc05hbWVzID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2NsYXNzTmFtZXMgPSB2YWx1ZTtcbiAgICBjb25zdCBzaXplUmVnZXggPSAvXihhdXRvfDFieTF8MWRvdDhieTF8MWRvdDJieTF8MWJ5MWRvdDF8MmRvdDZieTEpJC87XG4gICAgY29uc3QgW3NpemUgPSBudWxsXSA9IHRoaXMuX2NsYXNzTmFtZXMubWF0Y2goc2l6ZVJlZ2V4KSB8fCBbREVGQVVMVF9TSVpFXTtcbiAgICB0aGlzLnNpemUgPSBzaXplIGFzIGFueTtcblxuICAgIHRoaXMucm91bmRlZCA9ICEhdGhpcy5fY2xhc3NOYW1lcy5tYXRjaCgvcm91bmRlZC8pO1xuICB9XG5cbiAgZ2V0IGNsYXNzTmFtZXMoKTogRmlndXJlVHlwZSB7XG4gICAgcmV0dXJuIHRoaXMuX2NsYXNzTmFtZXM7XG4gIH1cbn1cbiJdfQ==