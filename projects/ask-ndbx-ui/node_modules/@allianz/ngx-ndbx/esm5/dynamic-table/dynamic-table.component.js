/**
 * @fileoverview added by tsickle
 * Generated from: dynamic-table/dynamic-table.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ChangeDetectorRef } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { TableDataSource } from './tabledata-source';
var NxDynamicTableComponent = /** @class */ (function () {
    function NxDynamicTableComponent(el, _changeDetectorRef) {
        this.el = el;
        this._changeDetectorRef = _changeDetectorRef;
        this._dataChange = new BehaviorSubject([]);
        /**
         * An event is dispatched when a row is clicked.
         */
        this.nxRowClick = new EventEmitter();
    }
    Object.defineProperty(NxDynamicTableComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /** Sets the data that it will show in the table. */
        set: /**
         * Sets the data that it will show in the table.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._data = value
                .filter((/**
             * @param {?} element
             * @return {?}
             */
            function (element) { return element; }));
            // If user dont pass displayedColumns the table will show all data and the name of columns will be the key of data
            if (!this._displayedColumns) {
                /** @type {?} */
                var keys_1 = [];
                /** @type {?} */
                var cArray_1 = [];
                // For catch keys of data Objects and assing title, key and type string by default to displayedColumns
                this._data
                    .forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    for (var key in element) {
                        if (keys_1.indexOf(key) === -1) {
                            keys_1.push(key);
                            cArray_1.push({ title: key, key: key, type: 'string' });
                        }
                    }
                }));
                this._columnKeys = keys_1;
                this._displayedColumns = cArray_1;
                // need to call markForCheck as the setter changes displayedColumns here
                // sidenote: isn't needed for the data itself as it gets passed to the cdk-table
                // by the datasource observable
                this._changeDetectorRef.markForCheck();
            }
            this._dataChange.next(this._data);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDynamicTableComponent.prototype, "displayedColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._displayedColumns;
        },
        /** Sets the name order and type of columns. */
        set: /**
         * Sets the name order and type of columns.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._displayedColumns = value;
            this._columnKeys = value.map((/**
             * @param {?} column
             * @return {?}
             */
            function (column) { return column.key; }));
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDynamicTableComponent.prototype, "dataSource", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._dataSource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDynamicTableComponent.prototype, "columnKeys", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._columnKeys;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxDynamicTableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this._data) {
            this._data = [];
            this._dataChange.next(this._data);
        }
        this._dataSource = new TableDataSource(this._dataChange);
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} row
     * @return {?}
     */
    NxDynamicTableComponent.prototype.handleRowClick = /**
     * \@docs-private
     * @param {?} row
     * @return {?}
     */
    function (row) {
        this.nxRowClick.emit(row);
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} element
     * @return {?}
     */
    NxDynamicTableComponent.prototype.isNumeric = /**
     * \@docs-private
     * @param {?} element
     * @return {?}
     */
    function (element) {
        if (element.type === 'numeric') {
            return true;
        }
        return false;
    };
    NxDynamicTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-dynamic-table',
                    template: "<div class=\"nx-table__container\" *ngIf=\"data && data.length > 0\">\n  <div class=\"nx-table__scroll\">\n    <cdk-table [dataSource]=\"dataSource\" class=\"nx-table\">\n      <!-- Column Definition -->\n      <ng-container *ngFor=\"let element of displayedColumns\" cdkColumnDef=\"{{element.key}}\">\n        <cdk-header-cell *cdkHeaderCellDef class=\"nx-table__header-cell\"\n                         [ngClass]=\"{'nx-table__header-cell--number': isNumeric(element) }\">\n          <div class=\"nx-table__header-title--block\">\n            <span class=\"nx-table__header-title\"> {{element.title}}</span>\n          </div>\n        </cdk-header-cell>\n        <cdk-cell *cdkCellDef=\"let row\" class=\"nx-table__cell\"\n                  [ngClass]=\"{'nx-table__cell--number': isNumeric(element) }\" [innerHTML]=\"row[element.key]\"></cdk-cell>\n      </ng-container>\n\n      <!-- Header and Row Declarations -->\n      <cdk-header-row *cdkHeaderRowDef=\"columnKeys\" class=\"nx-table__header-row\"></cdk-header-row>\n      <cdk-row *cdkRowDef=\"let row; columns: columnKeys\" class=\"nx-table__row\"\n               (dblclick)=\"handleRowClick(row)\"></cdk-row>\n\n    </cdk-table>\n  </div>\n</div>\n<div class=\"nx-table__appendix\" *ngIf=\"data.length === 0\">\n  <ng-content></ng-content>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".nx-table{font-size:16px;font-size:var(--table-cell-font-size,16px);line-height:24px;line-height:var(--table-cell-line-height,24px);font-weight:400;font-weight:var(--table-cell-font-weight,400);letter-spacing:0;letter-spacing:var(--table-cell-letter-spacing,0);color:#414141;color:var(--table-cell-color,#414141);text-align:left;width:100%;display:table}.nx-table__container{margin:32px 0}.nx-table__scroll{max-width:100%;overflow:hidden;overflow-x:auto}.nx-table__header-cell{font-size:16px;font-size:var(--table-header-cell-font-size,16px);line-height:24px;line-height:var(--table-header-cell-line-height,24px);font-weight:600;font-weight:var(--table-header-cell-font-weight,600);letter-spacing:0;letter-spacing:var(--table-header-cell-letter-spacing,0);color:#414141;color:var(--table-header-cell-color,#414141);background:0 0;background:var(--table-header-cell-background-color,transparent);border-top:1px solid #d9d9d9;border-top:1px solid var(--table-cell-border-top-color,#d9d9d9);border-bottom:2px solid #414141;border-bottom:2px solid var(--table-header-border-bottom-color,#414141);padding:23px 16px 22px;position:relative}.nx-table__header-cell--number{display:flex;position:relative}.nx-table__header-cell--number .nx-table__header-title--block{justify-content:flex-end}.nx-table__cell--number,.nx-table__header-cell--number{text-align:right}.nx-table__header-row,.nx-table__row{display:table-row;vertical-align:inherit;background-color:transparent}.nx-table__row{background:0 0;background:var(--table-row-background-color,transparent)}.nx-table__cell{border-bottom:1px solid #d9d9d9;border-bottom:1px solid var(--table-header-border-top-color,#d9d9d9);padding:24px 16px 23px;vertical-align:top}.nx-table__row:last-child .nx-table__cell{padding-bottom:22px;border-bottom:2px solid #414141;border-bottom:2px solid var(--table-header-border-bottom-color,#414141)}.nx-table__cell,.nx-table__header-cell{display:table-cell;vertical-align:inherit}"]
                }] }
    ];
    /** @nocollapse */
    NxDynamicTableComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    NxDynamicTableComponent.propDecorators = {
        data: [{ type: Input, args: ['nxData',] }],
        displayedColumns: [{ type: Input, args: ['nxDisplayedColumns',] }],
        nxRowClick: [{ type: Output }]
    };
    return NxDynamicTableComponent;
}());
export { NxDynamicTableComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxDynamicTableComponent.prototype._dataChange;
    /**
     * @type {?}
     * @private
     */
    NxDynamicTableComponent.prototype._dataSource;
    /**
     * @type {?}
     * @private
     */
    NxDynamicTableComponent.prototype._data;
    /**
     * @type {?}
     * @private
     */
    NxDynamicTableComponent.prototype._displayedColumns;
    /**
     * @type {?}
     * @private
     */
    NxDynamicTableComponent.prototype._columnKeys;
    /**
     * An event is dispatched when a row is clicked.
     * @type {?}
     */
    NxDynamicTableComponent.prototype.nxRowClick;
    /**
     * @type {?}
     * @private
     */
    NxDynamicTableComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NxDynamicTableComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy10YWJsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbImR5bmFtaWMtdGFibGUvZHluYW1pYy10YWJsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2SSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR3ZDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVyRDtJQXFFRSxpQ0FBb0IsRUFBYyxFQUFVLGtCQUFxQztRQUE3RCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFtQjtRQTdEekUsZ0JBQVcsR0FBMkIsSUFBSSxlQUFlLENBQVEsRUFBRSxDQUFDLENBQUM7Ozs7UUFpRG5FLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBWTJDLENBQUM7SUF0RHRGLHNCQUNJLHlDQUFJOzs7O1FBeUJSO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUM7UUE3QkQsb0RBQW9EOzs7Ozs7UUFDcEQsVUFDUyxLQUFZO1lBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSztpQkFDZixNQUFNOzs7O1lBQUMsVUFBQSxPQUFPLElBQUksT0FBQSxPQUFPLEVBQVAsQ0FBTyxFQUFDLENBQUM7WUFDOUIsa0hBQWtIO1lBQ2xILElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7O29CQUNyQixNQUFJLEdBQUcsRUFBRTs7b0JBQUUsUUFBTSxHQUFHLEVBQUU7Z0JBQzVCLHNHQUFzRztnQkFDdEcsSUFBSSxDQUFDLEtBQUs7cUJBQ1AsT0FBTzs7OztnQkFB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QWdEOzs7OztJQUNoRCw4Q0FBOEI7Ozs7O0lBNkM5Qiw2Q0FBMEM7Ozs7O0lBWTlCLHFDQUFzQjs7Ozs7SUFBRSxxREFBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBOeERpc3BsYXllZENvbHVtbnMgfSBmcm9tICcuL2Rpc3BsYXllZENvbHVtbnMnO1xuaW1wb3J0IHsgVGFibGVEYXRhU291cmNlIH0gZnJvbSAnLi90YWJsZWRhdGEtc291cmNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbngtZHluYW1pYy10YWJsZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9keW5hbWljLXRhYmxlLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0eWxlVXJsczogWyAnLi9keW5hbWljLXRhYmxlLmNvbXBvbmVudC5zY3NzJyBdXG59KVxuZXhwb3J0IGNsYXNzIE54RHluYW1pY1RhYmxlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBwcml2YXRlIF9kYXRhQ2hhbmdlOiBCZWhhdmlvclN1YmplY3Q8YW55W10+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxhbnlbXT4oW10pO1xuICBwcml2YXRlIF9kYXRhU291cmNlOiBUYWJsZURhdGFTb3VyY2UgfCBudWxsO1xuICBwcml2YXRlIF9kYXRhOiBhbnlbXTtcbiAgcHJpdmF0ZSBfZGlzcGxheWVkQ29sdW1uczogTnhEaXNwbGF5ZWRDb2x1bW5zW107XG4gIHByaXZhdGUgX2NvbHVtbktleXM6IHN0cmluZ1tdO1xuXG4gIC8qKiBTZXRzIHRoZSBkYXRhIHRoYXQgaXQgd2lsbCBzaG93IGluIHRoZSB0YWJsZS4gKi9cbiAgQElucHV0KCdueERhdGEnKVxuICBzZXQgZGF0YSh2YWx1ZTogYW55W10pIHtcbiAgICB0aGlzLl9kYXRhID0gdmFsdWVcbiAgICAgIC5maWx0ZXIoZWxlbWVudCA9PiBlbGVtZW50KTtcbiAgICAvLyBJZiB1c2VyIGRvbnQgcGFzcyBkaXNwbGF5ZWRDb2x1bW5zIHRoZSB0YWJsZSB3aWxsIHNob3cgYWxsIGRhdGEgYW5kIHRoZSBuYW1lIG9mIGNvbHVtbnMgd2lsbCBiZSB0aGUga2V5IG9mIGRhdGFcbiAgICBpZiAoIXRoaXMuX2Rpc3BsYXllZENvbHVtbnMpIHtcbiAgICAgIGNvbnN0IGtleXMgPSBbXSwgY0FycmF5ID0gW107XG4gICAgICAvLyBGb3IgY2F0Y2gga2V5cyBvZiBkYXRhIE9iamVjdHMgYW5kIGFzc2luZyB0aXRsZSwga2V5IGFuZCB0eXBlIHN0cmluZyBieSBkZWZhdWx0IHRvIGRpc3BsYXllZENvbHVtbnNcbiAgICAgIHRoaXMuX2RhdGFcbiAgICAgICAgLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGtleXMuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgY0FycmF5LnB1c2goeyB0aXRsZToga2V5LCBrZXk6IGtleSwgdHlwZTogJ3N0cmluZycgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIHRoaXMuX2NvbHVtbktleXMgPSBrZXlzO1xuICAgICAgdGhpcy5fZGlzcGxheWVkQ29sdW1ucyA9IGNBcnJheTtcbiAgICAgIC8vIG5lZWQgdG8gY2FsbCBtYXJrRm9yQ2hlY2sgYXMgdGhlIHNldHRlciBjaGFuZ2VzIGRpc3BsYXllZENvbHVtbnMgaGVyZVxuICAgICAgLy8gc2lkZW5vdGU6IGlzbid0IG5lZWRlZCBmb3IgdGhlIGRhdGEgaXRzZWxmIGFzIGl0IGdldHMgcGFzc2VkIHRvIHRoZSBjZGstdGFibGVcbiAgICAgIC8vIGJ5IHRoZSBkYXRhc291cmNlIG9ic2VydmFibGVcbiAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgICB0aGlzLl9kYXRhQ2hhbmdlLm5leHQodGhpcy5fZGF0YSk7XG4gIH1cbiAgZ2V0IGRhdGEoKTogYW55W10ge1xuICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICB9XG5cbiAgLyoqIFNldHMgdGhlIG5hbWUgb3JkZXIgYW5kIHR5cGUgb2YgY29sdW1ucy4gKi9cbiAgQElucHV0KCdueERpc3BsYXllZENvbHVtbnMnKVxuICBzZXQgZGlzcGxheWVkQ29sdW1ucyh2YWx1ZTogTnhEaXNwbGF5ZWRDb2x1bW5zW10pIHtcbiAgICB0aGlzLl9kaXNwbGF5ZWRDb2x1bW5zID0gdmFsdWU7XG4gICAgdGhpcy5fY29sdW1uS2V5cyA9IHZhbHVlLm1hcChjb2x1bW4gPT4gY29sdW1uLmtleSk7XG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cbiAgZ2V0IGRpc3BsYXllZENvbHVtbnMoKTogTnhEaXNwbGF5ZWRDb2x1bW5zW10ge1xuICAgIHJldHVybiB0aGlzLl9kaXNwbGF5ZWRDb2x1bW5zO1xuICB9XG5cbiAgLyoqIEFuIGV2ZW50IGlzIGRpc3BhdGNoZWQgd2hlbiBhIHJvdyBpcyBjbGlja2VkLiAqL1xuICBAT3V0cHV0KCkgbnhSb3dDbGljayA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBnZXQgZGF0YVNvdXJjZSgpOiBUYWJsZURhdGFTb3VyY2Uge1xuICAgIHJldHVybiB0aGlzLl9kYXRhU291cmNlO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgZ2V0IGNvbHVtbktleXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLl9jb2x1bW5LZXlzO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBfY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoIXRoaXMuX2RhdGEpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSBbXTtcbiAgICAgIHRoaXMuX2RhdGFDaGFuZ2UubmV4dCh0aGlzLl9kYXRhKTtcbiAgICB9XG4gICAgdGhpcy5fZGF0YVNvdXJjZSA9IG5ldyBUYWJsZURhdGFTb3VyY2UodGhpcy5fZGF0YUNoYW5nZSk7XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBoYW5kbGVSb3dDbGljayhyb3c6IE9iamVjdCk6IHZvaWQge1xuICAgIHRoaXMubnhSb3dDbGljay5lbWl0KHJvdyk7XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBpc051bWVyaWMoZWxlbWVudDogTnhEaXNwbGF5ZWRDb2x1bW5zKTogYm9vbGVhbiB7XG4gICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gJ251bWVyaWMnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbn1cbiJdfQ==