import { CdkAccordionItem } from '@angular/cdk/accordion';
import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { TemplatePortal } from '@angular/cdk/portal';
import { AfterContentInit, ChangeDetectorRef, OnChanges, OnDestroy, SimpleChanges, ViewContainerRef } from '@angular/core';
import { Subject } from 'rxjs';
import { NxAccordionDirective } from './accordion';
/** The styling of the accordion. */
export declare type AccordionStyle = 'regular' | 'light';
export declare class NxExpansionPanelComponent extends CdkAccordionItem implements AfterContentInit, OnChanges, OnDestroy {
    private _viewContainerRef;
    /** Whether the negative set of styles should be used. */
    negative: boolean;
    private _negative;
    _accordionStyle: AccordionStyle;
    /**
     * Value for the styling that should be chosen.
     * Default value: 'regular'.
     */
    style: AccordionStyle;
    private _style;
    /** @docs-private */
    lazyContent: any;
    private _portal;
    /** @docs-private */
    readonly portal: TemplatePortal<any>;
    /** @docs-private */
    accordion: NxAccordionDirective;
    _headerId: string;
    /** Stream that emits for changes in `@Input` properties. */
    readonly _inputChanges: Subject<SimpleChanges>;
    constructor(accordion: NxAccordionDirective, _changeDetectorRef: ChangeDetectorRef, _expansionDispatcher: UniqueSelectionDispatcher, _viewContainerRef: ViewContainerRef);
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /** @docs-private */
    getOpenState(): "open" | "closed";
}
