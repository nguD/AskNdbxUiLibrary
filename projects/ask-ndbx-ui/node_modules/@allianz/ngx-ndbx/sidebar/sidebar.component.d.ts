import { ChangeDetectorRef, OnDestroy, Renderer2, ElementRef, OnInit, EventEmitter } from '@angular/core';
export declare const MAX_WIDTH = 400;
export declare const MIN_WIDTH = 56;
export declare const AUTO_COLLAPSE_WIDTH = 168;
export declare const RESIZE_STEP_SIZE = 20;
export declare class NxSidebarComponent implements OnDestroy, OnInit {
    private _changeDetectorRef;
    private renderer;
    private _element;
    /** Emits the new width of the sidebar on resize or on close/open event.*/
    widthChange: EventEmitter<number>;
    /** If set to `true` this will enable dynamic resizing of the sidebar. */
    resizeable: boolean;
    private _resizeable;
    /** Sets the minimal width (in pixel) of the sidebar. */
    minWidth: number;
    private _minWidth;
    /** This sets the accessibility label for the resize handle of the sidebar. */
    resizeHandleAriaLabel: string;
    private _resizeHandleAriaLabel;
    /** This reflects the current open state of the sidebar.
        It will be `true` if the sidebar is expanded and `false` if the sidebar is closed.
    */
    open: boolean;
    private _open;
    /** This sets the width of the sidebar. */
    width: number;
    _width: number;
    _resizing: boolean;
    _previousWidth: number;
    _isMobile: boolean;
    _resizeWidth: number;
    private _resizeStartX;
    private _resizeStartWidth;
    private _unsubscribeListeners;
    constructor(_changeDetectorRef: ChangeDetectorRef, renderer: Renderer2, _element: ElementRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    /** This will expand the sidebar to its full width. */
    expand(): void;
    /** This will close the sidebar to its minimal width. */
    close(): void;
    /** This will close or expand the sidebar depending if its expanded or closed. */
    toggle(): void;
    readonly _sidebarElementWidth: number;
    _onResizeStart(event: any): void;
    _onResize(event: any): void;
    _onResizeEnd(event: any): void;
    _onResizeHandleClick(event: any): void;
    _onSidebarKeydown(event: any): void;
    private _emitWidthChange;
    private _isMouseDrag;
    private _attachDragEventListeners;
    private _removeDragEventListeners;
}
