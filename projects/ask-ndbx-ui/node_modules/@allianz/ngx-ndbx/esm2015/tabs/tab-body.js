/**
 * @fileoverview added by tsickle
 * Generated from: tabs/tab-body.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, Input, ViewChild, ViewContainerRef } from '@angular/core';
import { NxTabComponent } from './tab';
import { NxTabGroupBase } from './tab-group-base';
/**
 * \@docs-private
 */
export class NxTabBodyComponent {
    /**
     * @param {?} _tabGroup
     */
    constructor(_tabGroup) {
        this._tabGroup = _tabGroup;
        this._active = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set active(value) {
        this._active = coerceBooleanProperty(value);
        if (this._active) {
            this.attach();
        }
        else {
            this.detach();
        }
    }
    /**
     * @return {?}
     */
    get active() {
        return this._active;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._appearanceSubscription = ((/** @type {?} */ (this._tabGroup)))._appearanceChange.subscribe((/**
         * @return {?}
         */
        () => {
            this.detach();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._appearanceSubscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    attach() {
        this._outlet.insert(this.tab.contentViewRef);
    }
    /**
     * @return {?}
     */
    detach() {
        /** @type {?} */
        const index = this._outlet.indexOf(this.tab.contentViewRef);
        if (index !== -1) {
            this._outlet.detach(index);
        }
    }
}
NxTabBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-tab-body',
                template: "<ng-container #outlet></ng-container>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:block}"]
            }] }
];
/** @nocollapse */
NxTabBodyComponent.ctorParameters = () => [
    { type: NxTabGroupBase }
];
NxTabBodyComponent.propDecorators = {
    _outlet: [{ type: ViewChild, args: ['outlet', { static: true, read: ViewContainerRef },] }],
    tab: [{ type: Input }],
    active: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxTabBodyComponent.prototype._appearanceSubscription;
    /** @type {?} */
    NxTabBodyComponent.prototype._outlet;
    /** @type {?} */
    NxTabBodyComponent.prototype.tab;
    /**
     * @type {?}
     * @private
     */
    NxTabBodyComponent.prototype._active;
    /**
     * @type {?}
     * @private
     */
    NxTabBodyComponent.prototype._tabGroup;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWJvZHkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbInRhYnMvdGFiLWJvZHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsU0FBUyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzFILE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDdkMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7O0FBVWxELE1BQU0sT0FBTyxrQkFBa0I7Ozs7SUFzQjdCLFlBQ1UsU0FBeUI7UUFBekIsY0FBUyxHQUFULFNBQVMsQ0FBZ0I7UUFoQjNCLFlBQU8sR0FBWSxLQUFLLENBQUM7SUFnQk0sQ0FBQzs7Ozs7SUFkeEMsSUFDSSxNQUFNLENBQUMsS0FBYztRQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDZjthQUFNO1lBQ0wsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ2Y7SUFDSCxDQUFDOzs7O0lBQ0QsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7Ozs7SUFLRCxRQUFRO1FBQ04sSUFBSSxDQUFDLHVCQUF1QixHQUFHLENBQUMsbUJBQUEsSUFBSSxDQUFDLFNBQVMsRUFBdUIsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLFNBQVM7OztRQUFDLEdBQUcsRUFBRTtZQUN0RyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDaEIsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM3QyxDQUFDOzs7O0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7OztJQUVELE1BQU07O2NBQ0UsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDO1FBQzNELElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzVCO0lBQ0gsQ0FBQzs7O1lBbERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsaURBQTRCO2dCQUM1QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7YUFFaEQ7Ozs7WUFUUSxjQUFjOzs7c0JBYXBCLFNBQVMsU0FBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtrQkFFNUQsS0FBSztxQkFJTCxLQUFLOzs7Ozs7O0lBUk4scURBQThDOztJQUU5QyxxQ0FBeUY7O0lBRXpGLGlDQUE2Qjs7Ozs7SUFFN0IscUNBQWlDOzs7OztJQWdCL0IsdUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgVmlld0NoaWxkLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgTnhUYWJDb21wb25lbnQgfSBmcm9tICcuL3RhYic7XG5pbXBvcnQgeyBOeFRhYkdyb3VwQmFzZSB9IGZyb20gJy4vdGFiLWdyb3VwLWJhc2UnO1xuaW1wb3J0IHsgTnhUYWJHcm91cENvbXBvbmVudCB9IGZyb20gJy4vdGFiLWdyb3VwJztcblxuLyoqIEBkb2NzLXByaXZhdGUgKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LXRhYi1ib2R5JyxcbiAgdGVtcGxhdGVVcmw6ICd0YWItYm9keS5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0eWxlVXJsczogWycuL3RhYi1ib2R5LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBOeFRhYkJvZHlDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgX2FwcGVhcmFuY2VTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBAVmlld0NoaWxkKCdvdXRsZXQnLCB7IHN0YXRpYzogdHJ1ZSwgcmVhZDogVmlld0NvbnRhaW5lclJlZiB9KSBfb3V0bGV0OiBWaWV3Q29udGFpbmVyUmVmO1xuXG4gIEBJbnB1dCgpIHRhYjogTnhUYWJDb21wb25lbnQ7XG5cbiAgcHJpdmF0ZSBfYWN0aXZlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgQElucHV0KClcbiAgc2V0IGFjdGl2ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2FjdGl2ZSA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgaWYgKHRoaXMuX2FjdGl2ZSkge1xuICAgICAgdGhpcy5hdHRhY2goKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZXRhY2goKTtcbiAgICB9XG4gIH1cbiAgZ2V0IGFjdGl2ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfdGFiR3JvdXA6IE54VGFiR3JvdXBCYXNlKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLl9hcHBlYXJhbmNlU3Vic2NyaXB0aW9uID0gKHRoaXMuX3RhYkdyb3VwIGFzIE54VGFiR3JvdXBDb21wb25lbnQpLl9hcHBlYXJhbmNlQ2hhbmdlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLmRldGFjaCgpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fYXBwZWFyYW5jZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgYXR0YWNoKCkge1xuICAgIHRoaXMuX291dGxldC5pbnNlcnQodGhpcy50YWIuY29udGVudFZpZXdSZWYpO1xuICB9XG5cbiAgZGV0YWNoKCkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fb3V0bGV0LmluZGV4T2YodGhpcy50YWIuY29udGVudFZpZXdSZWYpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuX291dGxldC5kZXRhY2goaW5kZXgpO1xuICAgIH1cbiAgfVxufVxuIl19