/**
 * @fileoverview added by tsickle
 * Generated from: tabs/tab-header-outlet.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EmbeddedViewRef, Input, ViewChild, ViewContainerRef } from '@angular/core';
import { NxTabGroupBase } from './tab-group-base';
/**
 * \@docs-private
 */
export class NxTabHeaderOutletComponent {
    /**
     * @param {?} _tabGroup
     */
    constructor(_tabGroup) {
        this._tabGroup = _tabGroup;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._appearanceSubscription = ((/** @type {?} */ (this._tabGroup)))._appearanceChange.subscribe((/**
         * @return {?}
         */
        () => {
            this.detach();
        }));
        this.attach();
    }
    /**
     * @return {?}
     */
    attach() {
        this._outlet.insert(this.content);
    }
    /**
     * @return {?}
     */
    detach() {
        /** @type {?} */
        const index = this._outlet.indexOf(this.content);
        if (index !== -1) {
            this._outlet.detach(index);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._appearanceSubscription.unsubscribe();
    }
}
NxTabHeaderOutletComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-tab-header-outlet',
                template: '<ng-container #outlet></ng-container>'
            }] }
];
/** @nocollapse */
NxTabHeaderOutletComponent.ctorParameters = () => [
    { type: NxTabGroupBase }
];
NxTabHeaderOutletComponent.propDecorators = {
    _outlet: [{ type: ViewChild, args: ['outlet', { static: true, read: ViewContainerRef },] }],
    content: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NxTabHeaderOutletComponent.prototype._outlet;
    /** @type {?} */
    NxTabHeaderOutletComponent.prototype.content;
    /**
     * @type {?}
     * @private
     */
    NxTabHeaderOutletComponent.prototype._appearanceSubscription;
    /**
     * @type {?}
     * @private
     */
    NxTabHeaderOutletComponent.prototype._tabGroup;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWhlYWRlci1vdXRsZXQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbInRhYnMvdGFiLWhlYWRlci1vdXRsZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQXFCLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdsSCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7Ozs7QUFRbEQsTUFBTSxPQUFPLDBCQUEwQjs7OztJQUtyQyxZQUFvQixTQUF5QjtRQUF6QixjQUFTLEdBQVQsU0FBUyxDQUFnQjtJQUFJLENBQUM7Ozs7SUFJbEQsUUFBUTtRQUNOLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxDQUFDLG1CQUFBLElBQUksQ0FBQyxTQUFTLEVBQXVCLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTOzs7UUFBQyxHQUFHLEVBQUU7WUFDdEcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hCLENBQUMsRUFBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7Ozs7SUFFRCxNQUFNO1FBQ0osSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Ozs7SUFFRCxNQUFNOztjQUNFLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ2hELElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzVCO0lBQ0gsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsdUJBQXVCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDN0MsQ0FBQzs7O1lBakNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQyxRQUFRLEVBQUUsdUNBQXVDO2FBQ2xEOzs7O1lBUFEsY0FBYzs7O3NCQVNwQixTQUFTLFNBQUMsUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUU7c0JBRTVELEtBQUs7Ozs7SUFGTiw2Q0FBeUY7O0lBRXpGLDZDQUF1Qzs7Ozs7SUFJdkMsNkRBQThDOzs7OztJQUZsQywrQ0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVtYmVkZGVkVmlld1JlZiwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBWaWV3Q2hpbGQsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBOeFRhYkdyb3VwQmFzZSB9IGZyb20gJy4vdGFiLWdyb3VwLWJhc2UnO1xuaW1wb3J0IHsgTnhUYWJHcm91cENvbXBvbmVudCB9IGZyb20gJy4vdGFiLWdyb3VwJztcblxuLyoqIEBkb2NzLXByaXZhdGUgKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LXRhYi1oZWFkZXItb3V0bGV0JyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGFpbmVyICNvdXRsZXQ+PC9uZy1jb250YWluZXI+J1xufSlcbmV4cG9ydCBjbGFzcyBOeFRhYkhlYWRlck91dGxldENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQFZpZXdDaGlsZCgnb3V0bGV0JywgeyBzdGF0aWM6IHRydWUsIHJlYWQ6IFZpZXdDb250YWluZXJSZWYgfSkgX291dGxldDogVmlld0NvbnRhaW5lclJlZjtcblxuICBASW5wdXQoKSBjb250ZW50OiBFbWJlZGRlZFZpZXdSZWY8YW55PjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF90YWJHcm91cDogTnhUYWJHcm91cEJhc2UpIHsgfVxuXG4gIHByaXZhdGUgX2FwcGVhcmFuY2VTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLl9hcHBlYXJhbmNlU3Vic2NyaXB0aW9uID0gKHRoaXMuX3RhYkdyb3VwIGFzIE54VGFiR3JvdXBDb21wb25lbnQpLl9hcHBlYXJhbmNlQ2hhbmdlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLmRldGFjaCgpO1xuICAgIH0pO1xuICAgIHRoaXMuYXR0YWNoKCk7XG4gIH1cblxuICBhdHRhY2goKSB7XG4gICAgdGhpcy5fb3V0bGV0Lmluc2VydCh0aGlzLmNvbnRlbnQpO1xuICB9XG5cbiAgZGV0YWNoKCkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fb3V0bGV0LmluZGV4T2YodGhpcy5jb250ZW50KTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLl9vdXRsZXQuZGV0YWNoKGluZGV4KTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9hcHBlYXJhbmNlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cbiJdfQ==