/**
 * @fileoverview added by tsickle
 * Generated from: context-menu-item.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ElementRef, Inject, Optional, Input, ChangeDetectorRef } from '@angular/core';
import { Subject } from 'rxjs';
import { DOCUMENT } from '@angular/common';
import { NxContextMenuComponent } from './context-menu.component';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
/**
 * This directive is intended to be used inside an nx-context-menu tag.
 * It exists mostly to set the role attribute, disabled state and styling.
 */
export class NxContextMenuItemComponent {
    /**
     * @param {?} _elementRef
     * @param {?} document
     * @param {?} _changeDetectorRef
     * @param {?} _parentMenu
     */
    constructor(_elementRef, document, _changeDetectorRef, _parentMenu) {
        this._elementRef = _elementRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._parentMenu = _parentMenu;
        /**
         * Stream that emits when the context menu item is hovered.
         */
        this._hovered = new Subject();
        this._disabled = false;
        /**
         * Whether the context menu item is highlighted.
         */
        this._highlighted = false;
        /**
         * Whether the context menu item acts as a trigger for a sub-menu.
         */
        this._triggersSubmenu = false;
        if (_parentMenu && _parentMenu.addItem) {
            _parentMenu.addItem(this);
        }
        this._document = document;
    }
    /**
     * Whether the context menu item is disabled.
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * Focuses this context menu item.
     * @return {?}
     */
    focus() {
        this._getHostElement().focus();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._parentMenu && this._parentMenu.removeItem) {
            this._parentMenu.removeItem(this);
        }
        this._hovered.complete();
    }
    /**
     * Used to set the `tabindex`.
     * @return {?}
     */
    _getTabIndex() {
        return this.disabled ? '-1' : '0';
    }
    /**
     * Returns the host DOM element.
     * @return {?}
     */
    _getHostElement() {
        return this._elementRef.nativeElement;
    }
    /**
     * Prevents the default element actions if it is disabled.
     * @param {?} event
     * @return {?}
     */
    _checkDisabled(event) {
        if (this.disabled) {
            event.preventDefault();
            event.stopPropagation();
        }
    }
    /**
     * Emits to the hover stream.
     * @return {?}
     */
    _handleMouseEnter() {
        this._hovered.next(this);
    }
    /**
     * Gets the label to be used when determining whether the option should be focused.
     * @return {?}
     */
    getLabel() {
        /** @type {?} */
        const element = this._elementRef.nativeElement;
        /** @type {?} */
        const textNodeType = this._document ? this._document.TEXT_NODE : 3;
        /** @type {?} */
        let output = '';
        if (element.childNodes) {
            /** @type {?} */
            const length = element.childNodes.length;
            // Go through all the top-level text nodes and extract their text.
            // We skip anything that's not a text node to prevent the text from
            // being thrown off by something like an icon.
            for (let i = 0; i < length; i++) {
                if (element.childNodes[i].nodeType === textNodeType) {
                    output += element.childNodes[i].textContent;
                }
            }
        }
        return output.trim();
    }
}
NxContextMenuItemComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: '[nxContextMenuItem]',
                exportAs: 'nxContextMenuItem',
                host: {
                    class: 'nx-context-menu-item',
                    role: 'menuitem',
                    '[class.is-highlighted]': '_highlighted',
                    '[attr.tabindex]': '_getTabIndex()',
                    '[attr.aria-disabled]': 'disabled.toString()',
                    '[attr.disabled]': 'disabled || null',
                    '(mouseenter)': '_handleMouseEnter()',
                    '(click)': '_checkDisabled($event)'
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <ng-content></ng-content>
    <nx-icon *ngIf="_triggersSubmenu"
      class="nx-context-menu-item__expand"
      name="chevron-right-small">
    </nx-icon>
    `,
                styles: [":host{font-size:16px;font-size:var(--context-menu-font-size,16px);line-height:24px;line-height:var(--context-menu-line-height,24px);font-weight:400;font-weight:var(--context-menu-font-weight,400);letter-spacing:0;letter-spacing:var(--context-menu-letter-spacing,0);display:flex;align-items:center;cursor:pointer;text-align:left;width:100%;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:none;outline:0;background:0 0;padding:4px 48px 4px 32px;color:#414141;color:var(--context-menu-item-text-color,#414141)}:host:not(:disabled).is-highlighted,:host:not(:disabled):active,:host:not(:disabled):hover{color:#006192;color:var(--context-menu-item-active-color,#006192)}@media screen and (-ms-high-contrast:active){:host{-ms-high-contrast-adjust:none;background-color:buttonFace;color:buttonText}:host:not(:disabled).is-highlighted,:host:not(:disabled):active,:host:not(:disabled):hover{background-color:highlight;color:highlightText}}:host:disabled{cursor:not-allowed;color:#c2c2c2;color:var(--context-menu-item-disabled-color,#c2c2c2)}:host::-moz-focus-inner{border:0}:host ::ng-deep>nx-icon{margin-right:8px;font-size:20px;font-size:var(--context-menu-item-icon-size,20px)}:host .nx-context-menu-item__expand{font-size:20px;font-size:var(--context-menu-item-expand-icon-size,20px);padding-left:8px;margin-left:auto;margin-right:-16px;width:1em}:host-context([data-whatinput=keyboard]):focus{border-radius:8px;outline:0;box-shadow:inset 0 0 0 4px #009de6,inset 0 0 0 6px #fff;box-shadow:var(--focus-inset-box-shadow,inset 0 0 0 4px #009de6,inset 0 0 0 6px #fff)}@media screen and (-ms-high-contrast:active){:host:disabled{color:GrayText}:host-context([data-whatinput=keyboard]):focus{box-shadow:inset 0 0 0 4px windowText,inset 0 0 0 6px background}}"]
            }] }
];
/** @nocollapse */
NxContextMenuItemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ChangeDetectorRef },
    { type: NxContextMenuComponent, decorators: [{ type: Inject, args: [NxContextMenuComponent,] }, { type: Optional }] }
];
NxContextMenuItemComponent.propDecorators = {
    disabled: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxContextMenuItemComponent.prototype._document;
    /**
     * Stream that emits when the context menu item is hovered.
     * @type {?}
     */
    NxContextMenuItemComponent.prototype._hovered;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuItemComponent.prototype._disabled;
    /**
     * Whether the context menu item is highlighted.
     * @type {?}
     */
    NxContextMenuItemComponent.prototype._highlighted;
    /**
     * Whether the context menu item acts as a trigger for a sub-menu.
     * @type {?}
     */
    NxContextMenuItemComponent.prototype._triggersSubmenu;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuItemComponent.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuItemComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuItemComponent.prototype._parentMenu;
}
//# sourceMappingURL=data:application/json;base64,