/**
 * @fileoverview added by tsickle
 * Generated from: context-menu-trigger.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directionality } from '@angular/cdk/bidi';
import { LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { TemplatePortal } from '@angular/cdk/portal';
import { Directive, ElementRef, EventEmitter, Input, Optional, Output, Self, ViewContainerRef } from '@angular/core';
import { normalizePassiveListenerOptions } from '@angular/cdk/platform';
import { asapScheduler, merge, of as observableOf, Subscription, fromEvent } from 'rxjs';
import { delay, filter, take, takeUntil, map } from 'rxjs/operators';
import { NxContextMenuComponent } from './context-menu.component';
import { throwNxContextMenuMissingError } from './context-menu-errors';
import { NxContextMenuItemComponent } from './context-menu-item.component';
/**
 * Default top padding of the menu panel.
 * @type {?}
 */
export const MENU_PANEL_TOP_PADDING = 16;
/** @type {?} */
export const MENU_PANEL_OFFSET = 8;
/**
 * Options for binding a passive event listener.
 * @type {?}
 */
const passiveEventListenerOptions = normalizePassiveListenerOptions({
    passive: true
});
/**
 * This directive is intended to be used in conjunction with an nx-context-menu tag.
 * It is responsible for toggling the display of the provided context menu instance.
 */
export class NxContextMenuTriggerDirective {
    /**
     * @param {?} _overlay
     * @param {?} _element
     * @param {?} _viewContainerRef
     * @param {?} _parentMenu
     * @param {?} _contextMenuItemInstance
     * @param {?} _dir
     */
    constructor(_overlay, _element, _viewContainerRef, _parentMenu, _contextMenuItemInstance, _dir) {
        this._overlay = _overlay;
        this._element = _element;
        this._viewContainerRef = _viewContainerRef;
        this._parentMenu = _parentMenu;
        this._contextMenuItemInstance = _contextMenuItemInstance;
        this._dir = _dir;
        this._overlayRef = null;
        this._contextMenuOpen = false;
        this._closingActionsSubscription = Subscription.EMPTY;
        this._hoverSubscription = Subscription.EMPTY;
        this._contextMenuCloseSubscription = Subscription.EMPTY;
        /**
         * Event emitted when the associated context menu is opened.
         */
        this.contextMenuOpened = new EventEmitter();
        /**
         * Event emitted when the associated context menu is closed.
         */
        this.contextMenuClosed = new EventEmitter();
        if (_contextMenuItemInstance) {
            _contextMenuItemInstance._triggersSubmenu = this.triggersSubmenu();
        }
        this._scrollStrategy = this._overlay.scrollStrategies.reposition;
        this._documentClickObservable = fromEvent(document, 'click');
    }
    /**
     * References the context menu instance that the trigger is associated with.
     * @return {?}
     */
    get contextMenu() {
        return this._contextMenu;
    }
    /**
     * @param {?} contextMenu
     * @return {?}
     */
    set contextMenu(contextMenu) {
        if (contextMenu === this._contextMenu) {
            return;
        }
        this._contextMenu = contextMenu;
        this._contextMenuCloseSubscription.unsubscribe();
        if (contextMenu) {
            this._contextMenuCloseSubscription = contextMenu.closed
                .asObservable()
                .subscribe((/**
             * @param {?} reason
             * @return {?}
             */
            reason => {
                this._destroyMenu();
                // If a click closed the menu, we should close the entire chain of nested menus.
                if ((reason === 'click' || reason === 'tab') && this._parentMenu) {
                    this._parentMenu.closed.emit(reason);
                }
            }));
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set scrollStrategy(value) {
        if (value === 'close') {
            this._scrollStrategy = this._overlay.scrollStrategies.close;
        }
        else {
            this._scrollStrategy = this._overlay.scrollStrategies.reposition;
        }
    }
    /**
     * Whether the context menu is open.
     * @return {?}
     */
    get contextMenuOpen() {
        return this._contextMenuOpen;
    }
    /**
     * The text direction of the containing app.
     * @private
     * @return {?}
     */
    get dir() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._checkContextMenu();
        this._handleHover();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._overlayRef = null;
        }
        this._contextMenuCloseSubscription.unsubscribe();
        this._closingActionsSubscription.unsubscribe();
        this._hoverSubscription.unsubscribe();
    }
    /**
     * Whether the context menu triggers a sub-menu or a top-level one.
     * @return {?}
     */
    triggersSubmenu() {
        return !!(this._contextMenuItemInstance && this._parentMenu);
    }
    /**
     * Toggles the context menu between the open and closed states.
     * @return {?}
     */
    toggleContextMenu() {
        return this.contextMenuOpen
            ? this.closeContextMenu()
            : this.openContextMenu();
    }
    /**
     * Opens the context menu.
     * @return {?}
     */
    openContextMenu() {
        if (this.contextMenuOpen) {
            return;
        }
        this._checkContextMenu();
        /** @type {?} */
        const overlayRef = this._createOverlay();
        /** @type {?} */
        const overlayConfig = overlayRef.getConfig();
        this._setPosition((/** @type {?} */ (overlayConfig.positionStrategy)));
        overlayRef.attach(this._getPortal());
        if (this.contextMenu.lazyContent) {
            this.contextMenu.lazyContent.attach(this.contextMenuData);
        }
        this._closingActionsSubscription = this._contextMenuClosingActions().subscribe((/**
         * @return {?}
         */
        () => this.closeContextMenu()));
        this._initContextMenu();
        if (this.contextMenu instanceof NxContextMenuComponent) {
            this.contextMenu._startAnimation();
        }
        this._waitForClose();
    }
    /**
     * Closes the context menu.
     * @return {?}
     */
    closeContextMenu() {
        this.contextMenu.closed.emit();
    }
    /**
     * Closes the context menu and does the necessary cleanup.
     * @private
     * @return {?}
     */
    _destroyMenu() {
        if (!this._overlayRef || !this.contextMenuOpen) {
            return;
        }
        /** @type {?} */
        const contextMenu = this.contextMenu;
        this._closingActionsSubscription.unsubscribe();
        this._overlayRef.detach();
        contextMenu._resetAnimation();
        if (contextMenu.lazyContent) {
            // Wait for the exit animation to finish before detaching the content.
            contextMenu._animationDone
                .pipe(filter((/**
             * @param {?} event
             * @return {?}
             */
            event => event.toState === 'void')), take(1), 
            // Interrupt if the content got re-attached.
            takeUntil(contextMenu.lazyContent._attached))
                .subscribe({
                next: (/**
                 * @return {?}
                 */
                () => contextMenu.lazyContent && contextMenu.lazyContent.detach()),
                // No matter whether the content got re-attached, reset the menu.
                complete: (/**
                 * @return {?}
                 */
                () => this._resetContextMenu())
            });
        }
        else {
            this._resetContextMenu();
        }
    }
    /**
     * This method sets the context menu state to open and focuses the first item if
     * the context menu was opened via the keyboard.
     * @private
     * @return {?}
     */
    _initContextMenu() {
        this.contextMenu.parentMenu = this.triggersSubmenu()
            ? this._parentMenu
            : undefined;
        this.contextMenu.direction = this.dir;
        this._setIsContextMenuOpen(true);
        this.contextMenu.focusFirstItem();
    }
    /**
     * Focuses the context menu trigger.
     * @return {?}
     */
    focus() {
        this._element.nativeElement.focus();
    }
    /**
     * This method resets the context menu when it's closed, most importantly restoring
     * focus to the context menu trigger if the context menu was opened via the keyboard.
     * @private
     * @return {?}
     */
    _resetContextMenu() {
        this._setIsContextMenuOpen(false);
        this.focus();
    }
    /**
     * Set state rather than toggle to support triggers sharing a menu.
     * @private
     * @param {?} isOpen
     * @return {?}
     */
    _setIsContextMenuOpen(isOpen) {
        this._contextMenuOpen = isOpen;
        this._contextMenuOpen
            ? this.contextMenuOpened.emit()
            : this.contextMenuClosed.emit();
        if (this.triggersSubmenu()) {
            this._contextMenuItemInstance._highlighted = isOpen;
        }
    }
    /**
     * This method checks that a valid instance of NxContextMenuComponent has been passed into
     * nxContextMenuTriggerFor. If not, an exception is thrown.
     * @private
     * @return {?}
     */
    _checkContextMenu() {
        if (!this.contextMenu) {
            throwNxContextMenuMissingError();
        }
    }
    /**
     * This method creates the overlay from the provided menu's template and saves its
     * OverlayRef so that it can be attached to the DOM when openContextMenu is called.
     * @private
     * @return {?}
     */
    _createOverlay() {
        if (!this._overlayRef) {
            /** @type {?} */
            const config = this._getOverlayConfig();
            this._overlayRef = this._overlay.create(config);
            // Consume the `keydownEvents` in order to prevent them from going to another overlay.
            this._overlayRef.keydownEvents().subscribe();
        }
        return this._overlayRef;
    }
    /**
     * This method builds the configuration object needed to create the overlay, the OverlayState.
     * @private
     * @return {?} OverlayConfig
     */
    _getOverlayConfig() {
        return new OverlayConfig({
            positionStrategy: this._overlay
                .position()
                .flexibleConnectedTo(this._element)
                .withLockedPosition()
                .withFlexibleDimensions(false)
                .withTransformOriginOn('.nx-context-menu'),
            scrollStrategy: this._scrollStrategy(),
            direction: this._dir
        });
    }
    /**
     * Sets the appropriate positions on a position strategy
     * so the overlay connects with the trigger correctly.
     * @private
     * @param {?} positionStrategy Strategy whose position to update.
     * @return {?}
     */
    _setPosition(positionStrategy) {
        /** @type {?} */
        let originX = 'start';
        /** @type {?} */
        let originFallbackX = 'end';
        /** @type {?} */
        const overlayY = 'top';
        /** @type {?} */
        const overlayFallbackY = 'bottom';
        /** @type {?} */
        let originY = overlayY;
        /** @type {?} */
        let originFallbackY = overlayFallbackY;
        /** @type {?} */
        let overlayX = originX;
        /** @type {?} */
        let overlayFallbackX = originFallbackX;
        /** @type {?} */
        let offsetY = 0;
        if (this.triggersSubmenu()) {
            // When the menu is a sub-menu, it should always align itself
            // to the edges of the trigger, instead of overlapping it.
            overlayFallbackX = originX = 'end';
            originFallbackX = overlayX = 'start';
            offsetY = -MENU_PANEL_TOP_PADDING;
        }
        else {
            offsetY = MENU_PANEL_OFFSET;
            originY = 'bottom';
            originFallbackY = 'top';
        }
        positionStrategy.withPositions((/** @type {?} */ ([
            { originX, originY, overlayX, overlayY, offsetY },
            {
                originX: originFallbackX,
                originY,
                overlayX: overlayFallbackX,
                overlayY,
                offsetY
            },
            {
                originX,
                originY: originFallbackY,
                overlayX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY
            },
            {
                originX: originFallbackX,
                originY: originFallbackY,
                overlayX: overlayFallbackX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY
            }
        ])));
    }
    /**
     * Returns a stream that emits whenever an action that should close the context menu occurs.
     * @private
     * @return {?}
     */
    _contextMenuClosingActions() {
        /** @type {?} */
        let backdrop;
        /** @type {?} */
        let detachments;
        if (this._overlayRef) {
            backdrop = this._overlayRef.backdropClick();
            detachments = this._overlayRef.detachments();
        }
        /** @type {?} */
        const parentClose = this._parentMenu
            ? this._parentMenu.closed
            : observableOf();
        /** @type {?} */
        const hover = this._parentMenu
            ? this._parentMenu._hovered().pipe(filter((/**
             * @param {?} active
             * @return {?}
             */
            active => active !== this._contextMenuItemInstance)), filter((/**
             * @return {?}
             */
            () => this._contextMenuOpen)))
            : observableOf();
        return merge(backdrop, parentClose, hover, detachments);
    }
    /**
     * Handles mouse presses on the trigger.
     * @param {?} event
     * @return {?}
     */
    _handleMousedown(event) {
        // Since right or middle button clicks won't trigger the `click` event,
        // we shouldn't consider the menu as opened by mouse in those cases.
        // this._openedBy = event.button === 0 ? 'mouse' : null;
        // Since clicking on the trigger won't close the menu if it opens a sub-menu,
        // we should prevent focus from moving onto it via click to avoid the
        // highlight from lingering on the menu item.
        if (this.triggersSubmenu()) {
            event.preventDefault();
        }
    }
    /**
     * Handles key presses on the trigger.
     * @param {?} event
     * @return {?}
     */
    _handleKeydown(event) {
        /** @type {?} */
        const keyCode = event.keyCode;
        if (this.triggersSubmenu() &&
            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||
                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {
            this.openContextMenu();
        }
    }
    /**
     * Handles click events on the trigger.
     * @param {?} event
     * @return {?}
     */
    _handleClick(event) {
        if (this.triggersSubmenu()) {
            // Stop event propagation to avoid closing the parent menu.
            event.stopPropagation();
            this.openContextMenu();
        }
        else {
            this.toggleContextMenu();
        }
    }
    /* Subscribes to document clicks to close the context menu on clicks on the background. */
    /**
     * @private
     * @return {?}
     */
    _waitForClose() {
        return this._documentClickObservable
            .pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        event => event.target)), filter((/**
         * @param {?} target
         * @return {?}
         */
        (target) => !this._element.nativeElement.contains(target))), takeUntil(this.contextMenu.closed))
            .subscribe((/**
         * @return {?}
         */
        () => {
            this.closeContextMenu();
        }));
    }
    /**
     * Handles the cases where the user hovers over the trigger.
     * @private
     * @return {?}
     */
    _handleHover() {
        // Subscribe to changes in the hovered item in order to toggle the panel.
        if (!this.triggersSubmenu()) {
            return;
        }
        this._hoverSubscription = this._parentMenu
            ._hovered()
            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu
            // with different data and triggers), we have to delay it by a tick to ensure that
            // it won't be closed immediately after it is opened.
            .pipe(filter((/**
         * @param {?} active
         * @return {?}
         */
        active => active === this._contextMenuItemInstance && !active.disabled)), delay(0, asapScheduler))
            .subscribe((/**
         * @return {?}
         */
        () => {
            // If the same menu is used between multiple triggers, it might still be animating
            // while the new trigger tries to re-open it. Wait for the animation to finish
            // before doing so. Also interrupt if the user moves to another item.
            if (this.contextMenu._isAnimating) {
                // We need the `delay(0)` here in order to avoid
                // 'changed after checked' errors in some cases.
                this.contextMenu._animationDone
                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))
                    .subscribe((/**
                 * @return {?}
                 */
                () => this.openContextMenu()));
            }
            else {
                this.openContextMenu();
            }
        }));
    }
    /**
     * Gets the portal that should be attached to the overlay.
     * @private
     * @return {?}
     */
    _getPortal() {
        // Note that we can avoid this check by keeping the portal on the context menu panel.
        // While it would be cleaner, we'd have to introduce another required method on
        // `NxContextMenuPanelComponent`, making it harder to consume.
        if (!this._portal ||
            this._portal.templateRef !== this.contextMenu.templateRef) {
            this._portal = new TemplatePortal(this.contextMenu.templateRef, this._viewContainerRef);
        }
        return this._portal;
    }
}
NxContextMenuTriggerDirective.decorators = [
    { type: Directive, args: [{
                selector: `[nxContextMenuTriggerFor]`,
                host: {
                    'aria-haspopup': 'true',
                    '[attr.aria-expanded]': 'contextMenuOpen || null',
                    '(mousedown)': '_handleMousedown($event)',
                    '(keydown)': '_handleKeydown($event)',
                    '(click)': '_handleClick($event)'
                },
                exportAs: 'nxContextMenuTrigger'
            },] }
];
/** @nocollapse */
NxContextMenuTriggerDirective.ctorParameters = () => [
    { type: Overlay },
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: NxContextMenuComponent, decorators: [{ type: Optional }] },
    { type: NxContextMenuItemComponent, decorators: [{ type: Optional }, { type: Self }] },
    { type: Directionality, decorators: [{ type: Optional }] }
];
NxContextMenuTriggerDirective.propDecorators = {
    contextMenu: [{ type: Input, args: ['nxContextMenuTriggerFor',] }],
    scrollStrategy: [{ type: Input }],
    contextMenuData: [{ type: Input, args: ['nxContextMenuTriggerData',] }],
    contextMenuOpened: [{ type: Output }],
    contextMenuClosed: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._portal;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._overlayRef;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._contextMenuOpen;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._closingActionsSubscription;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._hoverSubscription;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._contextMenuCloseSubscription;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._documentClickObservable;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._scrollStrategy;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._contextMenu;
    /**
     * Data to be passed along to any lazily-rendered content.
     * @type {?}
     */
    NxContextMenuTriggerDirective.prototype.contextMenuData;
    /**
     * Event emitted when the associated context menu is opened.
     * @type {?}
     */
    NxContextMenuTriggerDirective.prototype.contextMenuOpened;
    /**
     * Event emitted when the associated context menu is closed.
     * @type {?}
     */
    NxContextMenuTriggerDirective.prototype.contextMenuClosed;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._parentMenu;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._contextMenuItemInstance;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuTriggerDirective.prototype._dir;
}
//# sourceMappingURL=data:application/json;base64,