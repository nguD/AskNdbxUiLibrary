/**
 * @fileoverview added by tsickle
 * Generated from: context-menu.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FocusKeyManager } from '@angular/cdk/a11y';
import { ESCAPE, LEFT_ARROW, RIGHT_ARROW, HOME, END, hasModifierKey } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, NgZone, Output, TemplateRef, ViewChild, } from '@angular/core';
import { merge, Subject, Subscription } from 'rxjs';
import { startWith, switchMap, take } from 'rxjs/operators';
import { nxContextMenuAnimations } from './context-menu-animations';
import { NxContextMenuContentDirective } from './context-menu-content.directive';
export class NxContextMenuComponent {
    /**
     * @param {?} _ngZone
     */
    constructor(_ngZone) {
        this._ngZone = _ngZone;
        /**
         * Menu items inside the current menu.
         */
        this._items = [];
        /**
         * Emits whenever the amount of menu items changes.
         */
        this._itemChanges = new Subject();
        /**
         * Subscription to tab events on the menu panel
         */
        this._tabSubscription = Subscription.EMPTY;
        /**
         * Config object to be passed into the menu's ngClass
         */
        this._classList = {};
        /**
         * Current state of the panel animation.
         */
        this._panelAnimationState = 'void';
        /**
         * Emits whenever an animation on the menu completes.
         */
        this._animationDone = new Subject();
        /**
         * Event emitted when the menu is closed.
         */
        this.closed = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._keyManager = new FocusKeyManager(this._items)
            .withWrap()
            .withTypeAhead();
        this._tabSubscription = this._keyManager.tabOut.subscribe((/**
         * @return {?}
         */
        () => this.closed.emit('tab')));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._tabSubscription.unsubscribe();
        this.closed.complete();
    }
    /**
     * Stream that emits whenever the hovered menu item changes.
     * @return {?}
     */
    _hovered() {
        return this._itemChanges.pipe(startWith(this._items), switchMap((/**
         * @param {?} items
         * @return {?}
         */
        items => merge(...items.map((/**
         * @param {?} item
         * @return {?}
         */
        item => item._hovered))))));
    }
    /**
     * Handle a keyboard event from the menu, delegating to the appropriate action.
     * @param {?} event
     * @return {?}
     */
    _handleKeydown(event) {
        /** @type {?} */
        const keyCode = event.keyCode;
        /** @type {?} */
        const manager = this._keyManager;
        switch (keyCode) {
            case ESCAPE:
                if (!hasModifierKey(event)) {
                    event.preventDefault();
                    this.closed.emit('keydown');
                }
                break;
            case LEFT_ARROW:
                if (this.parentMenu && this.direction === 'ltr') {
                    this.closed.emit('keydown');
                }
                break;
            case RIGHT_ARROW:
                if (this.parentMenu && this.direction === 'rtl') {
                    this.closed.emit('keydown');
                }
                break;
            case HOME:
            case END:
                if (!hasModifierKey(event)) {
                    keyCode === HOME
                        ? manager.setFirstItemActive()
                        : manager.setLastItemActive();
                    event.preventDefault();
                }
                break;
            default:
                manager.onKeydown(event);
        }
    }
    /**
     * Focus the first item in the menu.
     * @return {?}
     */
    focusFirstItem() {
        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.
        if (this.lazyContent) {
            this._ngZone.onStable
                .asObservable()
                .pipe(take(1))
                .subscribe((/**
             * @return {?}
             */
            () => this._keyManager.setFirstItemActive()));
        }
        else {
            this._keyManager.setFirstItemActive();
        }
    }
    /**
     * Resets the active item in the menu. This is used when the menu is opened, allowing
     * the user to start from the first option when pressing the down arrow.
     * @return {?}
     */
    resetActiveItem() {
        this._keyManager.setActiveItem(-1);
    }
    /**
     * Registers a menu item with the context menu.
     * \@docs-private
     * @param {?} item
     * @return {?}
     */
    addItem(item) {
        // We register the items through this method, rather than picking them up through
        // `ContentChildren`, because we need the items to be picked up by their closest
        // `nx-context-menu` ancestor. If we used `@ContentChildren(NxContextMenuItem, {descendants: true})`,
        // all descendant items will bleed into the top-level menu in the case where the consumer
        // has `nx-context-menu` instances nested inside each other.
        if (this._items.indexOf(item) === -1) {
            this._items.push(item);
            this._itemChanges.next(this._items);
        }
    }
    /**
     * Removes an item from the context menu.
     * \@docs-private
     * @param {?} item
     * @return {?}
     */
    removeItem(item) {
        /** @type {?} */
        const index = this._items.indexOf(item);
        if (this._items.indexOf(item) > -1) {
            this._items.splice(index, 1);
            this._itemChanges.next(this._items);
        }
    }
    /**
     * Starts the enter animation.
     * @return {?}
     */
    _startAnimation() {
        this._panelAnimationState = 'enter';
    }
    /**
     * Resets the panel animation to its initial state.
     * @return {?}
     */
    _resetAnimation() {
        this._panelAnimationState = 'void';
    }
    /**
     * Callback that is invoked when the panel animation completes.
     * @param {?} event
     * @return {?}
     */
    _onAnimationDone(event) {
        this._animationDone.next(event);
        this._isAnimating = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onAnimationStart(event) {
        this._isAnimating = true;
        // Scroll the content element to the top as soon as the animation starts. This is necessary,
        // because we move focus to the first item while it's still being animated, which can throw
        // the browser off when it determines the scroll position. Alternatively we can move focus
        // when the animation is done, however moving focus asynchronously will interrupt screen
        // readers which are in the process of reading out the menu already. We take the `element`
        // from the `event` since we can't use a `ViewChild` to access the pane.
        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {
            event.element.scrollTop = 0;
        }
    }
}
NxContextMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-context-menu',
                template: "<ng-template>\n  <div class=\"nx-context-menu\"\n    [ngClass]=\"_classList\"\n    (keydown)=\"_handleKeydown($event)\"\n    (click)=\"closed.emit('click')\"\n    [@transformContextMenu]=\"_panelAnimationState\"\n    (@transformContextMenu.start)=\"_onAnimationStart($event)\"\n    (@transformContextMenu.done)=\"_onAnimationDone($event)\"\n    tabindex=\"-1\"\n    role=\"menu\">\n    <div class=\"nx-context-menu__content\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'nxContextMenu',
                animations: [
                    nxContextMenuAnimations.transformContextMenu
                ],
                styles: [".nx-context-menu{border-radius:4px;background:#fff;background:var(--context-menu-background-color,#fff);min-height:64px;box-shadow:0 2px 4px rgba(65,65,65,.5);outline:0}.nx-context-menu.ng-animating{pointer-events:none}.nx-context-menu__content:not(:empty){padding-top:16px;padding-bottom:16px;display:flex;flex-direction:column}@media screen and (-ms-high-contrast:active){.nx-context-menu{border:1px solid windowText}.nx-context-menu__content:not(:empty){background-color:buttonFace}}"]
            }] }
];
/** @nocollapse */
NxContextMenuComponent.ctorParameters = () => [
    { type: NgZone }
];
NxContextMenuComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: [TemplateRef, { static: false },] }],
    lazyContent: [{ type: ContentChild, args: [NxContextMenuContentDirective, { static: false },] }],
    closed: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxContextMenuComponent.prototype._keyManager;
    /**
     * Menu items inside the current menu.
     * @type {?}
     * @private
     */
    NxContextMenuComponent.prototype._items;
    /**
     * Emits whenever the amount of menu items changes.
     * @type {?}
     * @private
     */
    NxContextMenuComponent.prototype._itemChanges;
    /**
     * Subscription to tab events on the menu panel
     * @type {?}
     * @private
     */
    NxContextMenuComponent.prototype._tabSubscription;
    /**
     * Config object to be passed into the menu's ngClass
     * @type {?}
     */
    NxContextMenuComponent.prototype._classList;
    /**
     * Current state of the panel animation.
     * @type {?}
     */
    NxContextMenuComponent.prototype._panelAnimationState;
    /**
     * Emits whenever an animation on the menu completes.
     * @type {?}
     */
    NxContextMenuComponent.prototype._animationDone;
    /**
     * Whether the menu is animating.
     * @type {?}
     */
    NxContextMenuComponent.prototype._isAnimating;
    /**
     * Parent menu of the current menu panel.
     * @type {?}
     */
    NxContextMenuComponent.prototype.parentMenu;
    /**
     * \@docs-private
     * Layout direction of the menu.
     * @type {?}
     */
    NxContextMenuComponent.prototype.direction;
    /**
     * \@docs-private
     * @type {?}
     */
    NxContextMenuComponent.prototype.templateRef;
    /**
     * Menu content that will be rendered lazily.
     * \@docs-private
     * @type {?}
     */
    NxContextMenuComponent.prototype.lazyContent;
    /**
     * Event emitted when the menu is closed.
     * @type {?}
     */
    NxContextMenuComponent.prototype.closed;
    /**
     * @type {?}
     * @private
     */
    NxContextMenuComponent.prototype._ngZone;
}
//# sourceMappingURL=data:application/json;base64,