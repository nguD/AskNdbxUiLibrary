/**
 * @fileoverview added by tsickle
 * Generated from: iban-mask.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Inject, forwardRef } from '@angular/core';
import * as IBAN from 'iban';
import { NG_VALIDATORS } from '@angular/forms';
import { NxMaskDirective } from './mask.directive';
/** @type {?} */
export const NX_IBAN_MASK_VALIDATORS = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => NxIbanMaskDirective)),
    multi: true
};
/**
 * To use the `NxIbanMaskDirective`, you have to install the **peer dependency** `iban.js`.
 */
export class NxIbanMaskDirective {
    /**
     * @param {?} _elementRef
     * @param {?} maskDirective
     */
    constructor(_elementRef, maskDirective) {
        this._elementRef = _elementRef;
        this.maskDirective = maskDirective;
        this._afterInputHook = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            /** @type {?} */
            const input = (/** @type {?} */ (event.target));
            this._setCountryCode(input.value.substr(0, 2));
        });
        this._beforePasteHook = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            // change the country code here if necessary
            /** @type {?} */
            const input = (/** @type {?} */ (event.target));
            /** @type {?} */
            const pastedData = (event.clipboardData || ((/** @type {?} */ (window))).clipboardData).getData('text');
            /** @type {?} */
            const enteredCountryCode = (this.maskDirective.elementRefValue.substr(0, input.selectionStart)
                + this.maskDirective.getMaskedString(pastedData, input.selectionStart)).substr(0, 2);
            this._setCountryCode(enteredCountryCode);
        });
        this.maskDirective.registerAfterInputHook(this._afterInputHook);
        this.maskDirective.registerBeforePasteHook(this._beforePasteHook);
        this.maskDirective.cvaModelChange.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            /** @type {?} */
            const enteredCountryCode = this.maskDirective.getMaskedString(value).substr(0, 2);
            this._setCountryCode(enteredCountryCode);
        }));
    }
    /**
     * @private
     * @param {?} code
     * @return {?}
     */
    _setCountryCode(code) {
        code = code.toUpperCase();
        if (code.length === 2 && this._countryCode !== code) {
            if (this._countryCodeExists(code)) {
                this._countryCode = code;
                this.maskDirective.setMask(this._getMask(this._countryCode));
            }
            else {
                this._countryCode = null;
                this.maskDirective.setMask('SS');
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // set only first two letters as I don't know a country yet
        this.maskDirective.mask = 'SS';
        this.maskDirective.convertTo = 'upper';
    }
    /**
     * @private
     * @param {?} countryCode
     * @return {?}
     */
    _getMask(countryCode) {
        // the countrySpecs of a country contain: countryCode ("DE"), length (22), structure ("F08F10")
        // and an example belonging to each country
        /** @type {?} */
        const countrySpecs = IBAN['countries'][countryCode];
        // 'SS' for country code + '00' for IBAN checksum
        /** @type {?} */
        let mask = 'SS00';
        // split up after every third character
        /** @type {?} */
        const characterDefs = countrySpecs['structure'].match(/.{1,3}/g);
        characterDefs.forEach((/**
         * @param {?} charDef
         * @return {?}
         */
        charDef => {
            /** @type {?} */
            const character = charDef[0];
            /** @type {?} */
            const count = Number(charDef.substring(1, 3));
            switch (character) {
                // [0-9]
                case 'F':
                    mask = mask + '0'.repeat(count);
                    break;
                // [0-9A-Za-z]
                case 'A':
                    mask = mask + 'A'.repeat(count);
                    break;
                // [A-Z]
                // 'S' in nxMask does accept also [a-z].
                // There is no option for only accepting capital letters at the moment.
                case 'U':
                    mask = mask + 'S'.repeat(count);
                    break;
            }
        }));
        // insert whitespaces after every 4 characters
        mask = mask.match(/.{1,4}/g).join(' ');
        return mask;
    }
    /**
     * @private
     * @param {?} countryCode
     * @return {?}
     */
    _countryCodeExists(countryCode) {
        return (!!IBAN['countries'][countryCode]);
    }
    /**
     * @private
     * @return {?}
     */
    _validateFn() {
        /** @type {?} */
        const enteredCountryCode = this._elementRef.nativeElement.value.substr(0, 2);
        if (enteredCountryCode.length === 2 && !this._countryCodeExists(enteredCountryCode)) {
            // immediately show error to user
            this.maskDirective._touch();
            return { nxIbanInvalidCountryError: 'no valid country code' };
        }
        if (!IBAN.isValid(this.maskDirective.getUnmaskedValue())) {
            return { nxIbanParseError: 'no valid iban' };
        }
        return null;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    validate() {
        return this.maskDirective.validateMask ? this._validateFn() : null;
    }
}
NxIbanMaskDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[nxIbanMask]',
                exportAs: 'nxIbanMaskDirective',
                providers: [
                    NX_IBAN_MASK_VALIDATORS
                ]
            },] }
];
/** @nocollapse */
NxIbanMaskDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NxMaskDirective, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => NxMaskDirective)),] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxIbanMaskDirective.prototype._countryCode;
    /**
     * @type {?}
     * @private
     */
    NxIbanMaskDirective.prototype._afterInputHook;
    /**
     * @type {?}
     * @private
     */
    NxIbanMaskDirective.prototype._beforePasteHook;
    /**
     * @type {?}
     * @private
     */
    NxIbanMaskDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    NxIbanMaskDirective.prototype.maskDirective;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWJhbi1tYXNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4L21hc2svIiwic291cmNlcyI6WyJpYmFuLW1hc2suZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNsRixPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHL0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGtCQUFrQixDQUFDOztBQUVuRCxNQUFNLE9BQU8sdUJBQXVCLEdBQVE7SUFDMUMsT0FBTyxFQUFFLGFBQWE7SUFDdEIsV0FBVyxFQUFFLFVBQVU7OztJQUFDLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFDO0lBQ2xELEtBQUssRUFBRSxJQUFJO0NBQ1o7Ozs7QUFZRCxNQUFNLE9BQU8sbUJBQW1COzs7OztJQUk5QixZQUNVLFdBQXVCLEVBQ29CLGFBQThCO1FBRHpFLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBQ29CLGtCQUFhLEdBQWIsYUFBYSxDQUFpQjtRQVczRSxvQkFBZTs7OztRQUFHLENBQUMsS0FBb0IsRUFBRSxFQUFFOztrQkFDM0MsS0FBSyxHQUFHLG1CQUFBLEtBQUssQ0FBQyxNQUFNLEVBQW9CO1lBQzlDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakQsQ0FBQyxFQUFBO1FBRU8scUJBQWdCOzs7O1FBQUcsQ0FBQyxLQUFxQixFQUFFLEVBQUU7OztrQkFFN0MsS0FBSyxHQUFxQixtQkFBQSxLQUFLLENBQUMsTUFBTSxFQUFvQjs7a0JBQzFELFVBQVUsR0FBRyxDQUFDLEtBQUssQ0FBQyxh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SUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDckUsQ0FBQzs7O1lBbEhGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3QixRQUFRLEVBQUUscUJBQXFCO2dCQUMvQixTQUFTLEVBQUU7b0JBQ1QsdUJBQXVCO2lCQUN4QjthQUNGOzs7O1lBdEJtQixVQUFVO1lBS3JCLGVBQWUsdUJBd0JuQixNQUFNLFNBQUMsVUFBVTs7O29CQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBQzs7Ozs7OztJQUozQywyQ0FBNkI7Ozs7O0lBZTdCLDhDQUdDOzs7OztJQUVELCtDQVdDOzs7OztJQTVCQywwQ0FBK0I7Ozs7O0lBQy9CLDRDQUFpRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0LCBmb3J3YXJkUmVmLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIElCQU4gZnJvbSAnaWJhbic7XG5pbXBvcnQgeyBOR19WQUxJREFUT1JTIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBOeE1hc2tEaXJlY3RpdmUgfSBmcm9tICcuL21hc2suZGlyZWN0aXZlJztcblxuZXhwb3J0IGNvbnN0IE5YX0lCQU5fTUFTS19WQUxJREFUT1JTOiBhbnkgPSB7XG4gIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXG4gIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE54SWJhbk1hc2tEaXJlY3RpdmUpLFxuICBtdWx0aTogdHJ1ZVxufTtcblxuLyoqXG4gKiBUbyB1c2UgdGhlIGBOeEliYW5NYXNrRGlyZWN0aXZlYCwgeW91IGhhdmUgdG8gaW5zdGFsbCB0aGUgKipwZWVyIGRlcGVuZGVuY3kqKiBgaWJhbi5qc2AuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2lucHV0W254SWJhbk1hc2tdJyxcbiAgZXhwb3J0QXM6ICdueEliYW5NYXNrRGlyZWN0aXZlJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAgTlhfSUJBTl9NQVNLX1ZBTElEQVRPUlNcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOeEliYW5NYXNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBWYWxpZGF0b3Ige1xuXG4gIHByaXZhdGUgX2NvdW50cnlDb2RlOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTnhNYXNrRGlyZWN0aXZlKSkgcHJpdmF0ZSBtYXNrRGlyZWN0aXZlOiBOeE1hc2tEaXJlY3RpdmVcbiAgKSB7XG4gICAgdGhpcy5tYXNrRGlyZWN0aXZlLnJlZ2lzdGVyQWZ0ZXJJbnB1dEhvb2sodGhpcy5fYWZ0ZXJJbnB1dEhvb2spO1xuICAgIHRoaXMubWFza0RpcmVjdGl2ZS5yZWdpc3RlckJlZm9yZVBhc3RlSG9vayh0aGlzLl9iZWZvcmVQYXN0ZUhvb2spO1xuXG4gICAgdGhpcy5tYXNrRGlyZWN0aXZlLmN2YU1vZGVsQ2hhbmdlLnN1YnNjcmliZSgodmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3QgZW50ZXJlZENvdW50cnlDb2RlID0gdGhpcy5tYXNrRGlyZWN0aXZlLmdldE1hc2tlZFN0cmluZyh2YWx1ZSkuc3Vic3RyKDAsIDIpO1xuICAgICAgdGhpcy5fc2V0Q291bnRyeUNvZGUoZW50ZXJlZENvdW50cnlDb2RlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgX2FmdGVySW5wdXRIb29rID0gKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICB0aGlzLl9zZXRDb3VudHJ5Q29kZShpbnB1dC52YWx1ZS5zdWJzdHIoMCwgMikpO1xuICB9XG5cbiAgcHJpdmF0ZSBfYmVmb3JlUGFzdGVIb29rID0gKGV2ZW50OiBDbGlwYm9hcmRFdmVudCkgPT4ge1xuICAgIC8vIGNoYW5nZSB0aGUgY291bnRyeSBjb2RlIGhlcmUgaWYgbmVjZXNzYXJ5XG4gICAgY29uc3QgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQgPSBldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICBjb25zdCBwYXN0ZWREYXRhID0gKGV2ZW50LmNsaXBib2FyZERhdGEgfHwgKDxhbnk+IHdpbmRvdykuY2xpcGJvYXJkRGF0YSkuZ2V0RGF0YSgndGV4dCcpO1xuXG4gICAgY29uc3QgZW50ZXJlZENvdW50cnlDb2RlID0gKFxuICAgICAgdGhpcy5tYXNrRGlyZWN0aXZlLmVsZW1lbnRSZWZWYWx1ZS5zdWJzdHIoMCwgaW5wdXQuc2VsZWN0aW9uU3RhcnQpXG4gICAgICArIHRoaXMubWFza0RpcmVjdGl2ZS5nZXRNYXNrZWRTdHJpbmcocGFzdGVkRGF0YSwgaW5wdXQuc2VsZWN0aW9uU3RhcnQpXG4gICAgKS5zdWJzdHIoMCwgMik7XG5cbiAgICB0aGlzLl9zZXRDb3VudHJ5Q29kZShlbnRlcmVkQ291bnRyeUNvZGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBfc2V0Q291bnRyeUNvZGUoY29kZTogc3RyaW5nKTogdm9pZCB7XG4gICAgY29kZSA9IGNvZGUudG9VcHBlckNhc2UoKTtcbiAgICBpZiAoY29kZS5sZW5ndGggPT09IDIgJiYgdGhpcy5fY291bnRyeUNvZGUgIT09IGNvZGUpIHtcbiAgICAgIGlmICh0aGlzLl9jb3VudHJ5Q29kZUV4aXN0cyhjb2RlKSkge1xuICAgICAgICB0aGlzLl9jb3VudHJ5Q29kZSA9IGNvZGU7XG4gICAgICAgIHRoaXMubWFza0RpcmVjdGl2ZS5zZXRNYXNrKHRoaXMuX2dldE1hc2sodGhpcy5fY291bnRyeUNvZGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2NvdW50cnlDb2RlID0gbnVsbDtcbiAgICAgICAgdGhpcy5tYXNrRGlyZWN0aXZlLnNldE1hc2soJ1NTJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgLy8gc2V0IG9ubHkgZmlyc3QgdHdvIGxldHRlcnMgYXMgSSBkb24ndCBrbm93IGEgY291bnRyeSB5ZXRcbiAgICB0aGlzLm1hc2tEaXJlY3RpdmUubWFzayA9ICdTUyc7XG4gICAgdGhpcy5tYXNrRGlyZWN0aXZlLmNvbnZlcnRUbyA9ICd1cHBlcic7XG4gIH1cblxuICBwcml2YXRlIF9nZXRNYXNrKGNvdW50cnlDb2RlOiBzdHJpbmcpIHtcbiAgICAvLyB0aGUgY291bnRyeVNwZWNzIG9mIGEgY291bnRyeSBjb250YWluOiBjb3VudHJ5Q29kZSAoXCJERVwiKSwgbGVuZ3RoICgyMiksIHN0cnVjdHVyZSAoXCJGMDhGMTBcIilcbiAgICAvLyBhbmQgYW4gZXhhbXBsZSBiZWxvbmdpbmcgdG8gZWFjaCBjb3VudHJ5XG4gICAgY29uc3QgY291bnRyeVNwZWNzID0gSUJBTlsnY291bnRyaWVzJ11bY291bnRyeUNvZGVdO1xuXG4gICAgLy8gJ1NTJyBmb3IgY291bnRyeSBjb2RlICsgJzAwJyBmb3IgSUJBTiBjaGVja3N1bVxuICAgIGxldCBtYXNrID0gJ1NTMDAnO1xuXG4gICAgLy8gc3BsaXQgdXAgYWZ0ZXIgZXZlcnkgdGhpcmQgY2hhcmFjdGVyXG4gICAgY29uc3QgY2hhcmFjdGVyRGVmcyA9IGNvdW50cnlTcGVjc1snc3RydWN0dXJlJ10ubWF0Y2goLy57MSwzfS9nKTtcblxuICAgIGNoYXJhY3RlckRlZnMuZm9yRWFjaChjaGFyRGVmID0+IHtcbiAgICAgIGNvbnN0IGNoYXJhY3RlciA9IGNoYXJEZWZbMF07XG4gICAgICBjb25zdCBjb3VudCA9IE51bWJlcihjaGFyRGVmLnN1YnN0cmluZygxLCAzKSk7XG5cbiAgICAgIHN3aXRjaCAoY2hhcmFjdGVyKSB7XG4gICAgICAgIC8vIFswLTldXG4gICAgICAgIGNhc2UgJ0YnOiBtYXNrID0gbWFzayArICcwJy5yZXBlYXQoY291bnQpOyBicmVhaztcbiAgICAgICAgLy8gWzAtOUEtWmEtel1cbiAgICAgICAgY2FzZSAnQSc6IG1hc2sgPSBtYXNrICsgJ0EnLnJlcGVhdChjb3VudCk7IGJyZWFrO1xuICAgICAgICAvLyBbQS1aXVxuICAgICAgICAvLyAnUycgaW4gbnhNYXNrIGRvZXMgYWNjZXB0IGFsc28gW2Etel0uXG4gICAgICAgIC8vIFRoZXJlIGlzIG5vIG9wdGlvbiBmb3Igb25seSBhY2NlcHRpbmcgY2FwaXRhbCBsZXR0ZXJzIGF0IHRoZSBtb21lbnQuXG4gICAgICAgIGNhc2UgJ1UnOiBtYXNrID0gbWFzayArICdTJy5yZXBlYXQoY291bnQpOyBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGluc2VydCB3aGl0ZXNwYWNlcyBhZnRlciBldmVyeSA0IGNoYXJhY3RlcnNcbiAgICBtYXNrID0gbWFzay5tYXRjaCgvLnsxLDR9L2cpLmpvaW4oJyAnKTtcblxuICAgIHJldHVybiBtYXNrO1xuICB9XG5cbiAgcHJpdmF0ZSBfY291bnRyeUNvZGVFeGlzdHMoY291bnRyeUNvZGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoISFJQkFOWydjb3VudHJpZXMnXVtjb3VudHJ5Q29kZV0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfdmFsaWRhdGVGbigpIHtcbiAgICBjb25zdCBlbnRlcmVkQ291bnRyeUNvZGUgPSB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQudmFsdWUuc3Vic3RyKDAsIDIpO1xuICAgIGlmIChlbnRlcmVkQ291bnRyeUNvZGUubGVuZ3RoID09PSAyICYmICF0aGlzLl9jb3VudHJ5Q29kZUV4aXN0cyhlbnRlcmVkQ291bnRyeUNvZGUpKSB7XG4gICAgICAvLyBpbW1lZGlhdGVseSBzaG93IGVycm9yIHRvIHVzZXJcbiAgICAgIHRoaXMubWFza0RpcmVjdGl2ZS5fdG91Y2goKTtcbiAgICAgIHJldHVybiB7IG54SWJhbkludmFsaWRDb3VudHJ5RXJyb3I6ICdubyB2YWxpZCBjb3VudHJ5IGNvZGUnfTtcbiAgICB9XG4gICAgaWYgKCFJQkFOLmlzVmFsaWQodGhpcy5tYXNrRGlyZWN0aXZlLmdldFVubWFza2VkVmFsdWUoKSkpIHtcbiAgICAgIHJldHVybiB7IG54SWJhblBhcnNlRXJyb3I6ICdubyB2YWxpZCBpYmFuJ307XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgdmFsaWRhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFza0RpcmVjdGl2ZS52YWxpZGF0ZU1hc2sgPyB0aGlzLl92YWxpZGF0ZUZuKCkgOiBudWxsO1xuICB9XG59XG4iXX0=