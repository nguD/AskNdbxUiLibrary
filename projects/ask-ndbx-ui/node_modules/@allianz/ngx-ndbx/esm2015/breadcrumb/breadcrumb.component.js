/**
 * @fileoverview added by tsickle
 * Generated from: breadcrumb.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChildren, QueryList, Input, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';
import { NxBreadcrumbItemComponent } from './breadcrumb-item.component';
import { startWith, takeUntil, filter } from 'rxjs/operators';
import { Subject } from 'rxjs';
export class NxBreadcrumbComponent {
    /**
     * @param {?} _cdr
     */
    constructor(_cdr) {
        this._cdr = _cdr;
        this._destroyed = new Subject();
        this._negative = false;
    }
    /**
     * Whether the component uses the negative styling.
     * @param {?} value
     * @return {?}
     */
    set negative(value) {
        this._negative = value;
        this._cdr.markForCheck();
    }
    /**
     * @return {?}
     */
    get negative() {
        return this._negative;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.breadcrumbItems.length === 0) {
            console.warn('A breadcrumb needs NxBreadcrumbItemComponent children wrapped in <li>!');
        }
        this.breadcrumbItems.changes
            .pipe(startWith(this.breadcrumbItems), filter((/**
         * @param {?} items
         * @return {?}
         */
        items => items.length !== 0)), takeUntil(this._destroyed))
            .subscribe((/**
         * @param {?} items
         * @return {?}
         */
        items => {
            this.breadcrumbItems.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => item.resetAriaLabel()));
            this.breadcrumbItems.last.setAsLast();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
}
NxBreadcrumbComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'ol[nxBreadcrumb]',
                template: "<ng-content></ng-content>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class.is-negative]': 'negative'
                },
                styles: [":host{display:flex;list-style:none;height:24px;padding:0}::ng-deep li:last-child ::ng-deep .nx-breadcrumb-item{font-weight:600;cursor:auto}::ng-deep li:last-child ::ng-deep .nx-breadcrumb-item__chevron{display:none}::ng-deep li+li ::ng-deep .nx-breadcrumb-item{margin-left:4px}:host(.is-negative) ::ng-deep .nx-breadcrumb-item{color:#fff}"]
            }] }
];
/** @nocollapse */
NxBreadcrumbComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NxBreadcrumbComponent.propDecorators = {
    negative: [{ type: Input }],
    breadcrumbItems: [{ type: ContentChildren, args: [NxBreadcrumbItemComponent, { descendants: true },] }]
};
if (false) {
    /** @type {?} */
    NxBreadcrumbComponent.prototype._destroyed;
    /**
     * @type {?}
     * @private
     */
    NxBreadcrumbComponent.prototype._negative;
    /**
     * \@docs-private
     * @type {?}
     */
    NxBreadcrumbComponent.prototype.breadcrumbItems;
    /**
     * @type {?}
     * @private
     */
    NxBreadcrumbComponent.prototype._cdr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC9icmVhZGNydW1iLyIsInNvdXJjZXMiOlsiYnJlYWRjcnVtYi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUN4QyxpQkFBaUIsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBWS9CLE1BQU0sT0FBTyxxQkFBcUI7Ozs7SUFvQmhDLFlBQW9CLElBQXVCO1FBQXZCLFNBQUksR0FBSixJQUFJLENBQW1CO1FBbEIzQyxlQUFVLEdBQWtCLElBQUksT0FBTyxFQUFFLENBQUM7UUFFbEMsY0FBUyxHQUFZLEtBQUssQ0FBQztJQWdCWSxDQUFDOzs7Ozs7SUFiaEQsSUFDSSxRQUFRLENBQUMsS0FBYztRQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7OztJQU9ELGtCQUFrQjtRQUNoQixJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNyQyxPQUFPLENBQUMsSUFBSSxDQUFDLHdFQUF3RSxDQUFDLENBQUM7U0FDeEY7UUFFRCxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU87YUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsTUFBTTs7OztRQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUMsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ3RHLFNBQVM7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRTtZQUNqQixJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU87Ozs7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBQyxDQUFDO1lBQzVELElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3hDLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7O1lBaERGLFNBQVMsU0FBQzs7Z0JBRVQsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsdUNBQTBDO2dCQUUxQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsSUFBSSxFQUFFO29CQUNKLHFCQUFxQixFQUFFLFVBQVU7aUJBQ2xDOzthQUNGOzs7O1lBZFksaUJBQWlCOzs7dUJBc0IzQixLQUFLOzhCQVdMLGVBQWUsU0FBQyx5QkFBeUIsRUFBRSxFQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUM7Ozs7SUFoQi9ELDJDQUEwQzs7Ozs7SUFFMUMsMENBQW1DOzs7OztJQWNuQyxnREFBdUg7Ozs7O0lBRTNHLHFDQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBRdWVyeUxpc3QsIElucHV0LCBBZnRlckNvbnRlbnRJbml0LFxuICBPbkRlc3Ryb3ksIENoYW5nZURldGVjdG9yUmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnhCcmVhZGNydW1iSXRlbUNvbXBvbmVudCB9IGZyb20gJy4vYnJlYWRjcnVtYi1pdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBzdGFydFdpdGgsIHRha2VVbnRpbCwgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ29sW254QnJlYWRjcnVtYl0nLFxuICB0ZW1wbGF0ZVVybDogJy4vYnJlYWRjcnVtYi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2JyZWFkY3J1bWIuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLmlzLW5lZ2F0aXZlXSc6ICduZWdhdGl2ZSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOeEJyZWFkY3J1bWJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kgIHtcblxuICBfZGVzdHJveWVkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3QoKTtcblxuICBwcml2YXRlIF9uZWdhdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKiBXaGV0aGVyIHRoZSBjb21wb25lbnQgdXNlcyB0aGUgbmVnYXRpdmUgc3R5bGluZy4gKi9cbiAgQElucHV0KClcbiAgc2V0IG5lZ2F0aXZlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fbmVnYXRpdmUgPSB2YWx1ZTtcbiAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBnZXQgbmVnYXRpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25lZ2F0aXZlO1xuICB9XG5cbiAgLyoqQGRvY3MtcHJpdmF0ZSAqL1xuICBAQ29udGVudENoaWxkcmVuKE54QnJlYWRjcnVtYkl0ZW1Db21wb25lbnQsIHtkZXNjZW5kYW50czogdHJ1ZX0pIGJyZWFkY3J1bWJJdGVtczogUXVlcnlMaXN0PE54QnJlYWRjcnVtYkl0ZW1Db21wb25lbnQ+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHsgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICBpZiAodGhpcy5icmVhZGNydW1iSXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0EgYnJlYWRjcnVtYiBuZWVkcyBOeEJyZWFkY3J1bWJJdGVtQ29tcG9uZW50IGNoaWxkcmVuIHdyYXBwZWQgaW4gPGxpPiEnKTtcbiAgICB9XG5cbiAgICB0aGlzLmJyZWFkY3J1bWJJdGVtcy5jaGFuZ2VzXG4gICAgICAucGlwZShzdGFydFdpdGgodGhpcy5icmVhZGNydW1iSXRlbXMpLCBmaWx0ZXIoaXRlbXMgPT4gaXRlbXMubGVuZ3RoICE9PSAwKSwgdGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3llZCkpXG4gICAgICAuc3Vic2NyaWJlKGl0ZW1zID0+ICB7XG4gICAgICAgIHRoaXMuYnJlYWRjcnVtYkl0ZW1zLmZvckVhY2goaXRlbSA9PiBpdGVtLnJlc2V0QXJpYUxhYmVsKCkpO1xuICAgICAgICB0aGlzLmJyZWFkY3J1bWJJdGVtcy5sYXN0LnNldEFzTGFzdCgpO1xuICAgICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9kZXN0cm95ZWQubmV4dCgpO1xuICAgIHRoaXMuX2Rlc3Ryb3llZC5jb21wbGV0ZSgpO1xuICB9XG59XG4iXX0=