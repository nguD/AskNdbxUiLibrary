/**
 * @fileoverview added by tsickle
 * Generated from: button/button-base.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HostBinding } from '@angular/core';
/** @type {?} */
const DEFAULT_SIZE = 'medium';
/** @type {?} */
const DEFAULT_TYPE = 'primary';
/**
 * \@docs-private
 */
export class NxButtonBase {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} _elementRef
     */
    constructor(_changeDetectorRef, _elementRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._elementRef = _elementRef;
        /**
         * \@docs-private
         */
        this.type = DEFAULT_TYPE;
        /**
         * \@docs-private
         */
        this.size = DEFAULT_SIZE;
        this.negative = false;
        this.block = false;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get isPrimary() { return this.type === 'primary'; }
    /**
     * \@docs-private
     * @return {?}
     */
    get isSecondary() { return this.type === 'secondary'; }
    /**
     * \@docs-private
     * @return {?}
     */
    get isTertiary() { return this.type === 'tertiary'; }
    /**
     * \@docs-private
     * @return {?}
     */
    get isCta() { return this.type === 'cta'; }
    /**
     * \@docs-private
     * @return {?}
     */
    get isEmphasis() { return this.type === 'emphasis'; }
    /**
     * \@docs-private
     * @return {?}
     */
    get isLarge() { return this.size === 'large'; }
    /**
     * \@docs-private
     * @return {?}
     */
    get isMedium() { return this.size === 'medium'; }
    /**
     * \@docs-private
     * @return {?}
     */
    get isSmallMedium() { return this.size === 'small-medium'; }
    /**
     * \@docs-private
     * @return {?}
     */
    get isSmall() { return this.size === 'small'; }
    /**
     * \@docs-private
     * @return {?}
     */
    get isBlock() { return this.block; }
    /**
     * \@docs-private
     * @return {?}
     */
    get isNegative() { return this.negative; }
    /**
     * @param {?} value
     * @return {?}
     */
    set classNames(value) {
        if (this._classNames === value) {
            return;
        }
        this._classNames = value;
        const [type = null] = this._classNames.match(/primary|secondary|tertiary|cta|emphasis/) || [DEFAULT_TYPE];
        this.type = (/** @type {?} */ (type));
        const [size = null] = this._classNames.match(/small-medium|small|medium|large/) || [DEFAULT_SIZE];
        this.size = (/** @type {?} */ (size));
        this.negative = /negative/.test(this._classNames);
        this.block = /block/.test(this._classNames);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get classNames() {
        return this._classNames;
    }
    /**
     * \@docs-private
     * getter used for the modal component as a quickfix
     * since button got changed from directive to component the reference used by the ngOpenModelOnClick directive
     * for nxButtons is a reference to component instance instead of an element reference. As a workaround we need a
     * way to reach the elementRef of the component until the modal gets refactored.
     * @return {?}
     */
    get elementRef() {
        return this._elementRef;
    }
}
NxButtonBase.propDecorators = {
    isPrimary: [{ type: HostBinding, args: ['class.nx-button--primary',] }],
    isSecondary: [{ type: HostBinding, args: ['class.nx-button--secondary',] }],
    isTertiary: [{ type: HostBinding, args: ['class.nx-button--tertiary',] }],
    isCta: [{ type: HostBinding, args: ['class.nx-button--cta',] }],
    isEmphasis: [{ type: HostBinding, args: ['class.nx-button--emphasis',] }],
    isLarge: [{ type: HostBinding, args: ['class.nx-button--large',] }],
    isMedium: [{ type: HostBinding, args: ['class.nx-button--medium',] }],
    isSmallMedium: [{ type: HostBinding, args: ['class.nx-button--small-medium',] }],
    isSmall: [{ type: HostBinding, args: ['class.nx-button--small',] }],
    isBlock: [{ type: HostBinding, args: ['class.nx-button--block',] }],
    isNegative: [{ type: HostBinding, args: ['class.nx-button--negative',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxButtonBase.prototype._classNames;
    /**
     * \@docs-private
     * @type {?}
     */
    NxButtonBase.prototype.type;
    /**
     * \@docs-private
     * @type {?}
     */
    NxButtonBase.prototype.size;
    /** @type {?} */
    NxButtonBase.prototype.negative;
    /** @type {?} */
    NxButtonBase.prototype.block;
    /**
     * @type {?}
     * @private
     */
    NxButtonBase.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxButtonBase.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWJhc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbImJ1dHRvbi9idXR0b24tYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFHTCxXQUFXLEVBQ1osTUFBTSxlQUFlLENBQUM7O01BUWpCLFlBQVksR0FBRyxRQUFROztNQUN2QixZQUFZLEdBQUcsU0FBUzs7OztBQUc5QixNQUFNLE9BQU8sWUFBWTs7Ozs7SUFxQ3ZCLFlBQW9CLGtCQUFxQyxFQUFVLFdBQXVCO1FBQXRFLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBWTs7OztRQVIxRixTQUFJLEdBQWlCLFlBQVksQ0FBQzs7OztRQUdsQyxTQUFJLEdBQWlCLFlBQVksQ0FBQztRQUVsQyxhQUFRLEdBQVksS0FBSyxDQUFDO1FBQzFCLFVBQUssR0FBWSxLQUFLLENBQUM7SUFFdUUsQ0FBQzs7Ozs7SUFqQy9GLElBQTZDLFNBQVMsS0FBYyxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQzs7Ozs7SUFFckcsSUFBK0MsV0FBVyxLQUFjLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDOzs7OztJQUUzRyxJQUE4QyxVQUFVLEtBQWMsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7Ozs7O0lBRXhHLElBQXlDLEtBQUssS0FBYyxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQzs7Ozs7SUFFekYsSUFBOEMsVUFBVSxLQUFjLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDOzs7OztJQUd4RyxJQUEyQyxPQUFPLEtBQWMsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7Ozs7O0lBRS9GLElBQTRDLFFBQVEsS0FBYyxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQzs7Ozs7SUFFbEcsSUFBa0QsYUFBYSxLQUFjLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsQ0FBQyxDQUFDOzs7OztJQUVuSCxJQUEyQyxPQUFPLEtBQWMsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7Ozs7O0lBRy9GLElBQTJDLE9BQU8sS0FBYyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDOzs7OztJQUVwRixJQUE4QyxVQUFVLEtBQWMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzs7Ozs7SUFhN0YsSUFBVyxVQUFVLENBQUMsS0FBYTtRQUNqQyxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssS0FBSyxFQUFFO1lBQzlCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO2NBRW5CLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLHlDQUF5QyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDekcsSUFBSSxDQUFDLElBQUksR0FBRyxtQkFBQSxJQUFJLEVBQWdCLENBQUM7Y0FFM0IsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsaUNBQWlDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUNqRyxJQUFJLENBQUMsSUFBSSxHQUFHLG1CQUFBLElBQUksRUFBZ0IsQ0FBQztRQUVqQyxJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFNUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3pDLENBQUM7Ozs7SUFFRCxJQUFXLFVBQVU7UUFDbkIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7Ozs7Ozs7OztJQVNELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDOzs7d0JBbkVBLFdBQVcsU0FBQywwQkFBMEI7MEJBRXRDLFdBQVcsU0FBQyw0QkFBNEI7eUJBRXhDLFdBQVcsU0FBQywyQkFBMkI7b0JBRXZDLFdBQVcsU0FBQyxzQkFBc0I7eUJBRWxDLFdBQVcsU0FBQywyQkFBMkI7c0JBR3ZDLFdBQVcsU0FBQyx3QkFBd0I7dUJBRXBDLFdBQVcsU0FBQyx5QkFBeUI7NEJBRXJDLFdBQVcsU0FBQywrQkFBK0I7c0JBRTNDLFdBQVcsU0FBQyx3QkFBd0I7c0JBR3BDLFdBQVcsU0FBQyx3QkFBd0I7eUJBRXBDLFdBQVcsU0FBQywyQkFBMkI7Ozs7Ozs7SUF6QnhDLG1DQUE0Qjs7Ozs7SUE0QjVCLDRCQUFrQzs7Ozs7SUFHbEMsNEJBQWtDOztJQUVsQyxnQ0FBMEI7O0lBQzFCLDZCQUF1Qjs7Ozs7SUFFWCwwQ0FBNkM7Ozs7O0lBQUUsbUNBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRWxlbWVudFJlZixcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIEhvc3RCaW5kaW5nXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKiogVHlwZSBvZiBhIGJ1dHRvbi4gKi9cbmV4cG9ydCB0eXBlIE54QnV0dG9uVHlwZSA9ICdwcmltYXJ5JyB8ICdzZWNvbmRhcnknIHwgJ3RlcnRpYXJ5JyB8ICdjdGEnIHwgJ2VtcGhhc2lzJztcblxuLyoqIFNpemUgb2YgYSBidXR0b24uICovXG5leHBvcnQgdHlwZSBOeEJ1dHRvblNpemUgPSAnc21hbGwnIHwgJ3NtYWxsLW1lZGl1bScgfCAnbWVkaXVtJyB8ICdsYXJnZScgO1xuXG5jb25zdCBERUZBVUxUX1NJWkUgPSAnbWVkaXVtJztcbmNvbnN0IERFRkFVTFRfVFlQRSA9ICdwcmltYXJ5JztcblxuLyoqIEBkb2NzLXByaXZhdGUgKi9cbmV4cG9ydCBjbGFzcyBOeEJ1dHRvbkJhc2Uge1xuICBwcml2YXRlIF9jbGFzc05hbWVzOiBzdHJpbmc7XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5ueC1idXR0b24tLXByaW1hcnknKSBnZXQgaXNQcmltYXJ5KCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy50eXBlID09PSAncHJpbWFyeSc7IH1cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5ueC1idXR0b24tLXNlY29uZGFyeScpIGdldCBpc1NlY29uZGFyeSgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMudHlwZSA9PT0gJ3NlY29uZGFyeSc7IH1cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5ueC1idXR0b24tLXRlcnRpYXJ5JykgZ2V0IGlzVGVydGlhcnkoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLnR5cGUgPT09ICd0ZXJ0aWFyeSc7IH1cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5ueC1idXR0b24tLWN0YScpIGdldCBpc0N0YSgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMudHlwZSA9PT0gJ2N0YSc7IH1cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5ueC1idXR0b24tLWVtcGhhc2lzJykgZ2V0IGlzRW1waGFzaXMoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLnR5cGUgPT09ICdlbXBoYXNpcyc7IH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLm54LWJ1dHRvbi0tbGFyZ2UnKSBnZXQgaXNMYXJnZSgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuc2l6ZSA9PT0gJ2xhcmdlJzsgfVxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLm54LWJ1dHRvbi0tbWVkaXVtJykgZ2V0IGlzTWVkaXVtKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5zaXplID09PSAnbWVkaXVtJzsgfVxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLm54LWJ1dHRvbi0tc21hbGwtbWVkaXVtJykgZ2V0IGlzU21hbGxNZWRpdW0oKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLnNpemUgPT09ICdzbWFsbC1tZWRpdW0nOyB9XG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIEBIb3N0QmluZGluZygnY2xhc3MubngtYnV0dG9uLS1zbWFsbCcpIGdldCBpc1NtYWxsKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5zaXplID09PSAnc21hbGwnOyB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5ueC1idXR0b24tLWJsb2NrJykgZ2V0IGlzQmxvY2soKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLmJsb2NrOyB9XG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIEBIb3N0QmluZGluZygnY2xhc3MubngtYnV0dG9uLS1uZWdhdGl2ZScpIGdldCBpc05lZ2F0aXZlKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5uZWdhdGl2ZTsgfVxuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHR5cGU6IE54QnV0dG9uVHlwZSA9IERFRkFVTFRfVFlQRTtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBzaXplOiBOeEJ1dHRvblNpemUgPSBERUZBVUxUX1NJWkU7XG5cbiAgbmVnYXRpdmU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgYmxvY2s6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHByaXZhdGUgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHsgfVxuXG4gIHB1YmxpYyBzZXQgY2xhc3NOYW1lcyh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuX2NsYXNzTmFtZXMgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fY2xhc3NOYW1lcyA9IHZhbHVlO1xuXG4gICAgY29uc3QgW3R5cGUgPSBudWxsXSA9IHRoaXMuX2NsYXNzTmFtZXMubWF0Y2goL3ByaW1hcnl8c2Vjb25kYXJ5fHRlcnRpYXJ5fGN0YXxlbXBoYXNpcy8pIHx8IFtERUZBVUxUX1RZUEVdO1xuICAgIHRoaXMudHlwZSA9IHR5cGUgYXMgTnhCdXR0b25UeXBlO1xuXG4gICAgY29uc3QgW3NpemUgPSBudWxsXSA9IHRoaXMuX2NsYXNzTmFtZXMubWF0Y2goL3NtYWxsLW1lZGl1bXxzbWFsbHxtZWRpdW18bGFyZ2UvKSB8fCBbREVGQVVMVF9TSVpFXTtcbiAgICB0aGlzLnNpemUgPSBzaXplIGFzIE54QnV0dG9uU2l6ZTtcblxuICAgIHRoaXMubmVnYXRpdmUgPSAvbmVnYXRpdmUvLnRlc3QodGhpcy5fY2xhc3NOYW1lcyk7XG4gICAgdGhpcy5ibG9jayA9IC9ibG9jay8udGVzdCh0aGlzLl9jbGFzc05hbWVzKTtcblxuICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgcHVibGljIGdldCBjbGFzc05hbWVzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2NsYXNzTmFtZXM7XG4gIH1cblxuICAvKipcbiAgICogQGRvY3MtcHJpdmF0ZVxuICAgKiBnZXR0ZXIgdXNlZCBmb3IgdGhlIG1vZGFsIGNvbXBvbmVudCBhcyBhIHF1aWNrZml4XG4gICAqIHNpbmNlIGJ1dHRvbiBnb3QgY2hhbmdlZCBmcm9tIGRpcmVjdGl2ZSB0byBjb21wb25lbnQgdGhlIHJlZmVyZW5jZSB1c2VkIGJ5IHRoZSBuZ09wZW5Nb2RlbE9uQ2xpY2sgZGlyZWN0aXZlXG4gICAqIGZvciBueEJ1dHRvbnMgaXMgYSByZWZlcmVuY2UgdG8gY29tcG9uZW50IGluc3RhbmNlIGluc3RlYWQgb2YgYW4gZWxlbWVudCByZWZlcmVuY2UuIEFzIGEgd29ya2Fyb3VuZCB3ZSBuZWVkIGFcbiAgICogd2F5IHRvIHJlYWNoIHRoZSBlbGVtZW50UmVmIG9mIHRoZSBjb21wb25lbnQgdW50aWwgdGhlIG1vZGFsIGdldHMgcmVmYWN0b3JlZC5cbiAgICovXG4gIGdldCBlbGVtZW50UmVmKCkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50UmVmO1xuICB9XG59XG4iXX0=