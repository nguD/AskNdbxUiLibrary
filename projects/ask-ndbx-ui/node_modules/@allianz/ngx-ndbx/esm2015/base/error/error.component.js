/**
 * @fileoverview added by tsickle
 * Generated from: error/error.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, InjectionToken, Inject, Optional } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
/** @type {?} */
let nextId = 0;
/**
 * Represents the default options for the error notification that can be configured
 * using the `ERROR_DEFAULT_OPTIONS` injection token.
 * @record
 */
export function ErrorDefaultOptions() { }
if (false) {
    /**
     * Defines the style type of the error notification.
     * @type {?|undefined}
     */
    ErrorDefaultOptions.prototype.appearance;
}
/** @type {?} */
export const ERROR_DEFAULT_OPTIONS = new InjectionToken('ERROR_DEFAULT_OPTIONS');
export class NxErrorComponent {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} _defaultOptions
     */
    constructor(_changeDetectorRef, _defaultOptions) {
        this._changeDetectorRef = _changeDetectorRef;
        this._defaultOptions = _defaultOptions;
        this._showIcon = true;
        this._appearance = 'message';
        this._id = `nx-error-${nextId++}`;
        if (this._defaultOptions && this._defaultOptions.appearance) {
            this.appearance = this._defaultOptions.appearance;
        }
    }
    /**
     * Whether an icon should be displayed.
     * @param {?} value
     * @return {?}
     */
    set showIcon(value) {
        this._showIcon = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get showIcon() {
        return this._showIcon;
    }
    /**
     * Id of the nx-error.
     *
     * If not set, the selectable card gets an incremented value by default.
     * @param {?} value
     * @return {?}
     */
    set id(value) {
        if (value && value !== this._id) {
            this._id = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get id() {
        return this._id;
    }
    /**
     * Whether the error should have message or text styling.
     *
     * Default is 'message'.
     * @param {?} value
     * @return {?}
     */
    set appearance(value) {
        if (value !== this.appearance) {
            this._appearance = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get appearance() {
        return this._appearance;
    }
}
NxErrorComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-error',
                template: "<!-- b2b (expert) error notification -->\n<ng-container *ngIf=\"appearance === 'text'\">\n  <nx-icon *ngIf=\"showIcon\" class=\"nx-error__icon\" [name]=\"'exclamation-triangle'\">\n  </nx-icon>\n  <div class=\"nx-error__content-wrapper\">\n    <div class=\"nx-error__content\">\n      <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n    </div>\n  </div>\n</ng-container>\n\n<!-- b2c error notification -->\n<nx-message *ngIf=\"appearance === 'message'\" [showIcon]=\"showIcon\" nxContext=\"error\">\n  <ng-container [ngTemplateOutlet]=\"errorContent\"></ng-container>\n</nx-message>\n\n<ng-template #errorContent>\n  <ng-content></ng-content>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[attr.role]': '"alert"',
                    '[attr.id]': 'id',
                    '[class.nx-error--message]': 'appearance == "message"'
                },
                styles: [":host{font-size:16px;font-size:var(--base-error-simple-font-size,16px);line-height:20px;line-height:var(--base-error-simple-line-height,20px);font-weight:400;font-weight:var(--base-error-simple-font-weight,400);letter-spacing:0;letter-spacing:var(--base-error-simple-letter-spacing,0);color:#dc3149;color:var(--base-error-color,#dc3149);width:100%;display:block;text-align:left}:host .nx-error__icon{font-size:20px;font-size:var(--base-error-simple-icon-size,20px);line-height:20px;line-height:var(--base-error-simple-line-height,20px);margin-right:8px;float:left}@media screen and (-ms-high-contrast:active){:host .nx-error__icon{color:windowText}}:host.nx-error--message{margin:12px 0}:host.nx-error--message nx-message{margin:0}"]
            }] }
];
/** @nocollapse */
NxErrorComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ERROR_DEFAULT_OPTIONS,] }] }
];
NxErrorComponent.propDecorators = {
    showIcon: [{ type: Input }],
    id: [{ type: Input }],
    appearance: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._showIcon;
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._appearance;
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._id;
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxErrorComponent.prototype._defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvYmFzZS8iLCJzb3VyY2VzIjpbImVycm9yL2Vycm9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdILE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDOztJQUt4RCxNQUFNLEdBQUcsQ0FBQzs7Ozs7O0FBTWQseUNBR0M7Ozs7OztJQURDLHlDQUE0Qjs7O0FBRzlCLE1BQU0sT0FBTyxxQkFBcUIsR0FBRyxJQUFJLGNBQWMsQ0FBc0IsdUJBQXVCLENBQUM7QUFhckcsTUFBTSxPQUFPLGdCQUFnQjs7Ozs7SUFnRDNCLFlBQW9CLGtCQUFxQyxFQUNKLGVBQW9DO1FBRHJFLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7UUFDSixvQkFBZSxHQUFmLGVBQWUsQ0FBcUI7UUFoRGpGLGNBQVMsR0FBWSxJQUFJLENBQUM7UUFDMUIsZ0JBQVcsR0FBbUIsU0FBUyxDQUFDO1FBQ3hDLFFBQUcsR0FBVyxZQUFZLE1BQU0sRUFBRSxFQUFFLENBQUM7UUErQ3pDLElBQUksSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRTtZQUMzRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDO1NBQ25EO0lBQ0gsQ0FBQzs7Ozs7O0lBL0NILElBQ0ksUUFBUSxDQUFDLEtBQWM7UUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDekMsQ0FBQzs7OztJQUNELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDOzs7Ozs7OztJQU9ELElBQ0ksRUFBRSxDQUFDLEtBQWE7UUFDbEIsSUFBSSxLQUFLLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDL0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7WUFDakIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQzs7OztJQUVELElBQUksRUFBRTtRQUNKLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNsQixDQUFDOzs7Ozs7OztJQU9ELElBQ0ksVUFBVSxDQUFDLEtBQXFCO1FBQ2xDLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7WUFDekIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQzs7OztJQUNELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDOzs7WUF6REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxVQUFVO2dCQUNwQixtckJBQXFDO2dCQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFFL0MsSUFBSSxFQUFFO29CQUNKLGFBQWEsRUFBRSxTQUFTO29CQUN4QixXQUFXLEVBQUUsSUFBSTtvQkFDakIsMkJBQTJCLEVBQUUseUJBQXlCO2lCQUN2RDs7YUFDRjs7OztZQTdCZ0MsaUJBQWlCOzRDQStFN0MsUUFBUSxZQUFJLE1BQU0sU0FBQyxxQkFBcUI7Ozt1QkEzQzFDLEtBQUs7aUJBY0wsS0FBSzt5QkFpQkwsS0FBSzs7Ozs7OztJQXBDTixxQ0FBa0M7Ozs7O0lBQ2xDLHVDQUFnRDs7Ozs7SUFDaEQsK0JBQTZDOzs7OztJQTZDakMsOENBQTZDOzs7OztJQUN2RCwyQ0FBdUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBJbnB1dCwgSW5qZWN0aW9uVG9rZW4sIEluamVjdCwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtjb2VyY2VCb29sZWFuUHJvcGVydHl9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5cbi8qIFR5cGVzIG9mIGVycm9yIG5vdGlmaWNhdGlvbiBzdHlsZXMgKi9cbmV4cG9ydCB0eXBlIEVycm9yU3R5bGVUeXBlID0gJ21lc3NhZ2UnIHwgJ3RleHQnO1xuXG5sZXQgbmV4dElkID0gMDtcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBkZWZhdWx0IG9wdGlvbnMgZm9yIHRoZSBlcnJvciBub3RpZmljYXRpb24gdGhhdCBjYW4gYmUgY29uZmlndXJlZFxuICogdXNpbmcgdGhlIGBFUlJPUl9ERUZBVUxUX09QVElPTlNgIGluamVjdGlvbiB0b2tlbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFcnJvckRlZmF1bHRPcHRpb25zIHtcbiAgLyoqIERlZmluZXMgdGhlIHN0eWxlIHR5cGUgb2YgdGhlIGVycm9yIG5vdGlmaWNhdGlvbi4gKi9cbiAgYXBwZWFyYW5jZT86IEVycm9yU3R5bGVUeXBlO1xufVxuXG5leHBvcnQgY29uc3QgRVJST1JfREVGQVVMVF9PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuPEVycm9yRGVmYXVsdE9wdGlvbnM+KCdFUlJPUl9ERUZBVUxUX09QVElPTlMnKTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbngtZXJyb3InLFxuICB0ZW1wbGF0ZVVybDogJy4vZXJyb3IuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3R5bGVVcmxzOiBbJy4vZXJyb3IuY29tcG9uZW50LnNjc3MnXSxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5yb2xlXSc6ICdcImFsZXJ0XCInLFxuICAgICdbYXR0ci5pZF0nOiAnaWQnLFxuICAgICdbY2xhc3MubngtZXJyb3ItLW1lc3NhZ2VdJzogJ2FwcGVhcmFuY2UgPT0gXCJtZXNzYWdlXCInXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIE54RXJyb3JDb21wb25lbnQge1xuICBwcml2YXRlIF9zaG93SWNvbjogYm9vbGVhbiA9IHRydWU7XG4gIHByaXZhdGUgX2FwcGVhcmFuY2U6IEVycm9yU3R5bGVUeXBlID0gJ21lc3NhZ2UnO1xuICBwcml2YXRlIF9pZDogc3RyaW5nID0gYG54LWVycm9yLSR7bmV4dElkKyt9YDtcblxuICAvKiogV2hldGhlciBhbiBpY29uIHNob3VsZCBiZSBkaXNwbGF5ZWQuICovXG4gIEBJbnB1dCgpXG4gIHNldCBzaG93SWNvbih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3Nob3dJY29uID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuICBnZXQgc2hvd0ljb24oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Nob3dJY29uO1xuICB9XG5cbiAgLyoqXG4gICAqIElkIG9mIHRoZSBueC1lcnJvci5cbiAgICpcbiAgICogSWYgbm90IHNldCwgdGhlIHNlbGVjdGFibGUgY2FyZCBnZXRzIGFuIGluY3JlbWVudGVkIHZhbHVlIGJ5IGRlZmF1bHQuXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgaWQodmFsdWU6IHN0cmluZykge1xuICAgIGlmICh2YWx1ZSAmJiB2YWx1ZSAhPT0gdGhpcy5faWQpIHtcbiAgICAgIHRoaXMuX2lkID0gdmFsdWU7XG4gICAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cblxuICBnZXQgaWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5faWQ7XG4gIH1cblxuICAvKipcbiAgICogV2hldGhlciB0aGUgZXJyb3Igc2hvdWxkIGhhdmUgbWVzc2FnZSBvciB0ZXh0IHN0eWxpbmcuXG4gICAqXG4gICAqIERlZmF1bHQgaXMgJ21lc3NhZ2UnLlxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGFwcGVhcmFuY2UodmFsdWU6IEVycm9yU3R5bGVUeXBlKSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLmFwcGVhcmFuY2UpIHtcbiAgICAgIHRoaXMuX2FwcGVhcmFuY2UgPSB2YWx1ZTtcbiAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgfVxuICBnZXQgYXBwZWFyYW5jZSgpOiBFcnJvclN0eWxlVHlwZSB7XG4gICAgcmV0dXJuIHRoaXMuX2FwcGVhcmFuY2U7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChFUlJPUl9ERUZBVUxUX09QVElPTlMpIHByaXZhdGUgX2RlZmF1bHRPcHRpb25zOiBFcnJvckRlZmF1bHRPcHRpb25zKSB7XG4gICAgICBpZiAodGhpcy5fZGVmYXVsdE9wdGlvbnMgJiYgdGhpcy5fZGVmYXVsdE9wdGlvbnMuYXBwZWFyYW5jZSkge1xuICAgICAgICB0aGlzLmFwcGVhcmFuY2UgPSB0aGlzLl9kZWZhdWx0T3B0aW9ucy5hcHBlYXJhbmNlO1xuICAgICAgfVxuICAgIH1cbn1cbiJdfQ==