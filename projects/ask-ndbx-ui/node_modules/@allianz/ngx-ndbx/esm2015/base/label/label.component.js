/**
 * @fileoverview added by tsickle
 * Generated from: label/label.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input, Optional, Inject, InjectionToken } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Subject } from 'rxjs';
/** @type {?} */
let nextId = 0;
/**
 * @record
 */
export function LabelDefaultOptions() { }
if (false) {
    /**
     * Sets the default appearance. (optional)
     * @type {?|undefined}
     */
    LabelDefaultOptions.prototype.size;
}
/** @type {?} */
const DEFAULT_SIZE = 'large';
/** @type {?} */
export const LABEL_DEFAULT_OPTIONS = new InjectionToken('LABEL_DEFAULT_OPTIONS');
export class NxLabelComponent {
    /**
     * @param {?} _defaultOptions
     */
    constructor(_defaultOptions) {
        this._defaultOptions = _defaultOptions;
        this._stateChanges = new Subject();
        this._disabled = false;
        this._negative = false;
        this._id = `nx-label-${nextId++}`;
        this._size = (this._defaultOptions && this._defaultOptions.size) ? this._defaultOptions.size : DEFAULT_SIZE;
    }
    /**
     * Sets the label to disabled
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._stateChanges.next();
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * Sets the label to disabled
     * @param {?} value
     * @return {?}
     */
    set negative(value) {
        this._negative = coerceBooleanProperty(value);
        this._stateChanges.next();
    }
    /**
     * @return {?}
     */
    get negative() {
        return this._negative;
    }
    /**
     * Sets the Id of the label
     * @param {?} value
     * @return {?}
     */
    set id(value) {
        if (this._id !== value) {
            this._id = value;
        }
    }
    /**
     * @return {?}
     */
    get id() {
        return this._id;
    }
    /**
     * **NDBX Expert option**
     * Sets the appearance of the label
     * @param {?} value
     * @return {?}
     */
    set size(value) {
        this._size = value;
        this._stateChanges.next();
    }
    /**
     * @return {?}
     */
    get size() {
        return this._size;
    }
}
NxLabelComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-label',
                template: "<label class=\"nx-label__content\">\n  <ng-content></ng-content>\n</label>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[attr.disabled]': 'disabled',
                    '[attr.aria-labelledby]': 'id || null',
                    '[class.nx-label--negative]': 'negative',
                    '[class.nx-label--large]': 'size === "large"',
                    '[class.nx-label--small]': 'size === "small"',
                    '[attr.id]': 'id',
                },
                styles: [":host{display:block;color:#414141;color:var(--text-01,#414141)}:host.nx-label--small{font-size:16px;font-size:var(--base-label-small-font-size,16px);line-height:24px;line-height:var(--base-label-small-line-height,24px);font-weight:600;font-weight:var(--base-label-small-font-weight,600);letter-spacing:0;letter-spacing:var(--base-label-small-letter-spacing,0)}:host.nx-label--large{font-size:20px;font-size:var(--base-label-large-font-size,20px);line-height:28px;line-height:var(--base-label-large-line-height,28px);font-weight:300;font-weight:var(--base-label-large-font-weight,300);letter-spacing:.2px;letter-spacing:var(--base-label-large-letter-spacing,.2px)}:host[disabled=true] label{cursor:not-allowed}:host.nx-label--negative{color:#fff}"]
            }] }
];
/** @nocollapse */
NxLabelComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LABEL_DEFAULT_OPTIONS,] }] }
];
NxLabelComponent.propDecorators = {
    disabled: [{ type: Input }],
    negative: [{ type: Input }],
    id: [{ type: Input }],
    size: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NxLabelComponent.prototype._stateChanges;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._size;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._id;
    /**
     * @type {?}
     * @private
     */
    NxLabelComponent.prototype._defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvYmFzZS8iLCJzb3VyY2VzIjpbImxhYmVsL2xhYmVsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVHLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBRTNCLE1BQU0sR0FBRyxDQUFDOzs7O0FBRWQseUNBR0M7Ozs7OztJQURDLG1DQUF1Qjs7O01BS25CLFlBQVksR0FBRyxPQUFPOztBQUU1QixNQUFNLE9BQU8scUJBQXFCLEdBQ2hDLElBQUksY0FBYyxDQUFzQix1QkFBdUIsQ0FBQztBQWdCbEUsTUFBTSxPQUFPLGdCQUFnQjs7OztJQXNEM0IsWUFBK0QsZUFBb0M7UUFBcEMsb0JBQWUsR0FBZixlQUFlLENBQXFCO1FBckQxRixrQkFBYSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFDckMsY0FBUyxHQUFZLEtBQUssQ0FBQztRQUMzQixjQUFTLEdBQVksS0FBSyxDQUFDO1FBeUIzQixRQUFHLEdBQVcsWUFBWSxNQUFNLEVBQUUsRUFBRSxDQUFDO1FBNEIzQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBQzlHLENBQUM7Ozs7OztJQWxERCxJQUNJLFFBQVEsQ0FBQyxLQUFjO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7O0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7Ozs7OztJQUdELElBQ0ksUUFBUSxDQUFDLEtBQWM7UUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7Ozs7O0lBSUQsSUFDSSxFQUFFLENBQUMsS0FBYTtRQUNsQixJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssS0FBSyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQzs7OztJQUVELElBQUksRUFBRTtRQUNKLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNsQixDQUFDOzs7Ozs7O0lBS0QsSUFDSSxJQUFJLENBQUMsS0FBc0I7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7O0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7OztZQW5FRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLHdGQUFxQztnQkFFckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLElBQUksRUFBRTtvQkFDSixpQkFBaUIsRUFBRSxVQUFVO29CQUM3Qix3QkFBd0IsRUFBRSxZQUFZO29CQUN0Qyw0QkFBNEIsRUFBRSxVQUFVO29CQUN4Qyx5QkFBeUIsRUFBRSxrQkFBa0I7b0JBQzdDLHlCQUF5QixFQUFFLGtCQUFrQjtvQkFDN0MsV0FBVyxFQUFFLElBQUk7aUJBQ2xCOzthQUNGOzs7OzRDQXdEYyxRQUFRLFlBQUksTUFBTSxTQUFDLHFCQUFxQjs7O3VCQS9DcEQsS0FBSzt1QkFXTCxLQUFLO2lCQVlMLEtBQUs7bUJBY0wsS0FBSzs7OztJQTNDTix5Q0FBNkM7Ozs7O0lBQzdDLHFDQUFtQzs7Ozs7SUFDbkMscUNBQW1DOzs7OztJQUNuQyxpQ0FBK0I7Ozs7O0lBd0IvQiwrQkFBNkM7Ozs7O0lBMEJqQywyQ0FBdUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgT3B0aW9uYWwsIEluamVjdCwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmxldCBuZXh0SWQgPSAwO1xuXG5leHBvcnQgaW50ZXJmYWNlIExhYmVsRGVmYXVsdE9wdGlvbnMge1xuICAvKiogU2V0cyB0aGUgZGVmYXVsdCBhcHBlYXJhbmNlLiAob3B0aW9uYWwpICovXG4gIHNpemU/OiBMQUJFTF9TSVpFX1RZUEU7XG59XG5cbi8qKiBPcHRpb25zIGZvciBzaXppbmcgb2YgdGhlIGxhYmVsLiAqL1xuZXhwb3J0IHR5cGUgTEFCRUxfU0laRV9UWVBFID0gJ3NtYWxsJyB8ICdsYXJnZSc7XG5jb25zdCBERUZBVUxUX1NJWkUgPSAnbGFyZ2UnO1xuXG5leHBvcnQgY29uc3QgTEFCRUxfREVGQVVMVF9PUFRJT05TID1cbiAgbmV3IEluamVjdGlvblRva2VuPExhYmVsRGVmYXVsdE9wdGlvbnM+KCdMQUJFTF9ERUZBVUxUX09QVElPTlMnKTtcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ254LWxhYmVsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xhYmVsLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJ2xhYmVsLmNvbXBvbmVudC5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLmRpc2FibGVkXSc6ICdkaXNhYmxlZCcsXG4gICAgJ1thdHRyLmFyaWEtbGFiZWxsZWRieV0nOiAnaWQgfHwgbnVsbCcsXG4gICAgJ1tjbGFzcy5ueC1sYWJlbC0tbmVnYXRpdmVdJzogJ25lZ2F0aXZlJyxcbiAgICAnW2NsYXNzLm54LWxhYmVsLS1sYXJnZV0nOiAnc2l6ZSA9PT0gXCJsYXJnZVwiJyxcbiAgICAnW2NsYXNzLm54LWxhYmVsLS1zbWFsbF0nOiAnc2l6ZSA9PT0gXCJzbWFsbFwiJyxcbiAgICAnW2F0dHIuaWRdJzogJ2lkJyxcbiAgfSxcbn0pXG5cbmV4cG9ydCBjbGFzcyBOeExhYmVsQ29tcG9uZW50IHtcbiAgcmVhZG9ubHkgX3N0YXRlQ2hhbmdlcyA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG4gIHByaXZhdGUgX2Rpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX25lZ2F0aXZlOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX3NpemU6IExBQkVMX1NJWkVfVFlQRTtcblxuICAvKiogU2V0cyB0aGUgbGFiZWwgdG8gZGlzYWJsZWQgKi9cbiAgQElucHV0KClcbiAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIHRoaXMuX3N0YXRlQ2hhbmdlcy5uZXh0KCk7XG4gIH1cblxuICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG5cbiAgLyoqIFNldHMgdGhlIGxhYmVsIHRvIGRpc2FibGVkICovXG4gIEBJbnB1dCgpXG4gIHNldCBuZWdhdGl2ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX25lZ2F0aXZlID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICB0aGlzLl9zdGF0ZUNoYW5nZXMubmV4dCgpO1xuICB9XG5cbiAgZ2V0IG5lZ2F0aXZlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9uZWdhdGl2ZTtcbiAgfVxuXG4gIHByaXZhdGUgX2lkOiBzdHJpbmcgPSBgbngtbGFiZWwtJHtuZXh0SWQrK31gO1xuICAvKiogU2V0cyB0aGUgSWQgb2YgdGhlIGxhYmVsICovXG4gIEBJbnB1dCgpXG4gIHNldCBpZCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuX2lkICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5faWQgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBnZXQgaWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5faWQ7XG4gIH1cblxuICAvKipcbiAgICogKipOREJYIEV4cGVydCBvcHRpb24qKlxuICAgKiBTZXRzIHRoZSBhcHBlYXJhbmNlIG9mIHRoZSBsYWJlbCAqL1xuICBASW5wdXQoKVxuICBzZXQgc2l6ZSh2YWx1ZTogTEFCRUxfU0laRV9UWVBFKSB7XG4gICAgdGhpcy5fc2l6ZSA9IHZhbHVlO1xuICAgIHRoaXMuX3N0YXRlQ2hhbmdlcy5uZXh0KCk7XG4gIH1cblxuICBnZXQgc2l6ZSgpOiBMQUJFTF9TSVpFX1RZUEUge1xuICAgIHJldHVybiB0aGlzLl9zaXplO1xuICB9XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChMQUJFTF9ERUZBVUxUX09QVElPTlMpIHByaXZhdGUgX2RlZmF1bHRPcHRpb25zOiBMYWJlbERlZmF1bHRPcHRpb25zXG4gICkge1xuICAgIHRoaXMuX3NpemUgPSAodGhpcy5fZGVmYXVsdE9wdGlvbnMgJiYgdGhpcy5fZGVmYXVsdE9wdGlvbnMuc2l6ZSkgPyB0aGlzLl9kZWZhdWx0T3B0aW9ucy5zaXplIDogREVGQVVMVF9TSVpFO1xuICB9XG59XG4iXX0=