/**
 * @fileoverview added by tsickle
 * Generated from: accordion/expansion-panel.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CdkAccordionItem } from '@angular/cdk/accordion';
import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { TemplatePortal } from '@angular/cdk/portal';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Input, Optional, SkipSelf, ViewContainerRef } from '@angular/core';
import { Subject } from 'rxjs';
import { filter, startWith, take } from 'rxjs/operators';
import { NxAccordionDirective } from './accordion';
import { nxAccordionAnimations } from './accordion-animations';
import { NxExpansionPanelBodyDirective } from './expansion-panel-body';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
/** @type {?} */
let nextId = 0;
/** @type {?} */
const DEFAULT_TYPE = 'regular';
const ɵ0 = undefined;
export class NxExpansionPanelComponent extends CdkAccordionItem {
    /**
     * @param {?} accordion
     * @param {?} _changeDetectorRef
     * @param {?} _expansionDispatcher
     * @param {?} _viewContainerRef
     */
    constructor(accordion, _changeDetectorRef, _expansionDispatcher, _viewContainerRef) {
        super(accordion, _changeDetectorRef, _expansionDispatcher);
        this._viewContainerRef = _viewContainerRef;
        this._negative = null;
        this._accordionStyle = DEFAULT_TYPE;
        this._style = null;
        this._headerId = `nx-expansion-panel-header-${nextId++}`;
        /**
         * Stream that emits for changes in `\@Input` properties.
         */
        this._inputChanges = new Subject();
        this.accordion = accordion;
    }
    /**
     * Whether the negative set of styles should be used.
     * @param {?} value
     * @return {?}
     */
    set negative(value) {
        this._negative = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get negative() {
        return this._negative;
    }
    /**
     * Value for the styling that should be chosen.
     * Default value: 'regular'.
     * @param {?} value
     * @return {?}
     */
    set style(value) {
        value = value ? value : DEFAULT_TYPE;
        const [newValue] = value.match(/regular|light/) || [DEFAULT_TYPE];
        this._style = (/** @type {?} */ (newValue));
        this._accordionStyle = (/** @type {?} */ (newValue));
    }
    /**
     * @return {?}
     */
    get style() {
        return this._style;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get portal() {
        return this._portal;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.lazyContent) {
            // Render the content as soon as the panel becomes open.
            this.opened.pipe(startWith(null), filter((/**
             * @return {?}
             */
            () => this.expanded && !this._portal)), take(1)).subscribe((/**
             * @return {?}
             */
            () => {
                this._portal = new TemplatePortal(this.lazyContent._template, this._viewContainerRef);
            }));
        }
        // Inherit appearance given by the accordion (if any).
        if (Boolean(this.accordion)) {
            if (this.style === null && this.accordion.style !== null) {
                this.style = this.accordion.style;
            }
            if (this.negative === null && this.accordion.negative !== null) {
                this.negative = this.accordion.negative;
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this._inputChanges.next(changes);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        super.ngOnDestroy();
        this._inputChanges.complete();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    getOpenState() {
        return this.expanded ? 'open' : 'closed';
    }
}
NxExpansionPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-expansion-panel',
                exportAs: 'NxExpansionPanelComponent',
                template: "<ng-content select=\"nx-expansion-panel-header\"></ng-content>\n\n<div class=\"nx-expansion-panel__content\" role=\"region\" [@bodyExpansion]=\"getOpenState()\"\n  [attr.aria-labelledby]=\"_headerId\" [id]=\"id\">\n  <div class=\"nx-expansion-panel__body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"portal\"></ng-template>\n  </div>\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [nxAccordionAnimations.bodyExpansion],
                host: {
                    '[class.nx-expanded]': 'expanded',
                    '[class.nx-expansion-panel--light]': '_accordionStyle === "light"',
                    '[class.nx-expansion-panel--regular]': '_accordionStyle === "regular"',
                    '[class.nx-expansion-panel--negative]': 'negative',
                    '[class.is-disabled]': 'disabled',
                },
                providers: [
                    // Provide NxAccordionDirective as undefined to prevent nested expansion panels from registering
                    // to the same accordion.
                    { provide: NxAccordionDirective, useValue: ɵ0 },
                ],
                styles: [":host{display:block}:host(.nx-expansion-panel--negative) ::ng-deep div.nx-expansion-panel__body *{color:#fff}.nx-expansion-panel__content{overflow:hidden;display:block}.nx-expansion-panel__body{font-size:16px;font-size:var(--accordion-body-font-size,16px);line-height:24px;line-height:var(--accordion-body-line-height,24px);font-weight:400;font-weight:var(--accordion-body-font-weight,400);letter-spacing:0;letter-spacing:var(--accordion-body-letter-spacing,0);padding:24px 88px 32px 32px;padding:var(--accordion-regular-body-padding,24px 88px 32px 32px)}:host(.nx-expansion-panel--regular){margin-top:16px;margin-top:var(--accordion-regular-header-top-margin,16px)}:host(.nx-expansion-panel--regular) ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 transparent;box-shadow:inset 0 1px 0 0 var(--accordion-regular-border-color,transparent)}:host(.nx-expansion-panel--regular):last-child,:host(.nx-expansion-panel--regular):only-child{box-shadow:0 1px 0 0 transparent;box-shadow:0 1px 0 0 var(--accordion-regular-border-color,transparent)}@media (max-width:703px){.nx-expansion-panel__body{padding:24px 16px 32px}:host(.nx-expansion-panel--regular){margin-top:0}:host(.nx-expansion-panel--regular) ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 #d9d9d9}:host(.nx-expansion-panel--regular):last-child ::ng-deep .nx-expansion-panel__header-content,:host(.nx-expansion-panel--regular):only-child ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 #d9d9d9,inset 0 -1px 0 0 #d9d9d9}:host(.nx-expansion-panel--regular).nx-expanded ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 #d9d9d9,inset 0 -1px 0 0 #d9d9d9}}:host(.nx-expansion-panel--light) .nx-expansion-panel__body{padding:24px 88px 32px 32px;padding:var(--accordion-light-body-padding,24px 88px 32px 32px)}:host(.nx-expansion-panel--light):not(.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 #d9d9d9}:host(.nx-expansion-panel--light):not(.nx-expansion-panel--negative):last-child,:host(.nx-expansion-panel--light):not(.nx-expansion-panel--negative):only-child{box-shadow:0 1px 0 0 #d9d9d9}:host(.nx-expansion-panel--light.nx-expansion-panel--negative){color:#fff}:host(.nx-expansion-panel--light.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 #fff}:host(.nx-expansion-panel--light.nx-expansion-panel--negative):last-child,:host(.nx-expansion-panel--light.nx-expansion-panel--negative):only-child{box-shadow:0 1px 0 0 #fff}@media screen and (-ms-high-contrast:active){:host{border-color:windowText;color:buttonText}:host.nx-expansion-panel--regular{border:1px solid buttonText}:host.is-disabled{border-color:GrayText}:host.nx-expansion-panel--light.nx-expansion-panel--negative ::ng-deep .nx-expansion-panel__header-content,:host.nx-expansion-panel--light:not(.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 windowText}:host.nx-expansion-panel--light.nx-expansion-panel--negative:last-child,:host.nx-expansion-panel--light.nx-expansion-panel--negative:only-child,:host.nx-expansion-panel--light:not(.nx-expansion-panel--negative):last-child,:host.nx-expansion-panel--light:not(.nx-expansion-panel--negative):only-child{box-shadow:0 1px 0 0 windowText}}"]
            }] }
];
/** @nocollapse */
NxExpansionPanelComponent.ctorParameters = () => [
    { type: NxAccordionDirective, decorators: [{ type: Optional }, { type: SkipSelf }] },
    { type: ChangeDetectorRef },
    { type: UniqueSelectionDispatcher },
    { type: ViewContainerRef }
];
NxExpansionPanelComponent.propDecorators = {
    negative: [{ type: Input }],
    style: [{ type: Input, args: ['nxStyle',] }],
    lazyContent: [{ type: ContentChild, args: [NxExpansionPanelBodyDirective, { static: false },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxExpansionPanelComponent.prototype._negative;
    /** @type {?} */
    NxExpansionPanelComponent.prototype._accordionStyle;
    /**
     * @type {?}
     * @private
     */
    NxExpansionPanelComponent.prototype._style;
    /**
     * \@docs-private
     * @type {?}
     */
    NxExpansionPanelComponent.prototype.lazyContent;
    /**
     * @type {?}
     * @private
     */
    NxExpansionPanelComponent.prototype._portal;
    /**
     * \@docs-private
     * @type {?}
     */
    NxExpansionPanelComponent.prototype.accordion;
    /** @type {?} */
    NxExpansionPanelComponent.prototype._headerId;
    /**
     * Stream that emits for changes in `\@Input` properties.
     * @type {?}
     */
    NxExpansionPanelComponent.prototype._inputChanges;
    /**
     * @type {?}
     * @private
     */
    NxExpansionPanelComponent.prototype._viewContainerRef;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLXBhbmVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvIiwic291cmNlcyI6WyJhY2NvcmRpb24vZXhwYW5zaW9uLXBhbmVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDMUQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFFTCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUdMLFFBQVEsRUFFUixRQUFRLEVBQ1IsZ0JBQWdCLEVBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFekQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQy9ELE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDOztJQUUxRCxNQUFNLEdBQUcsQ0FBQzs7TUFJUixZQUFZLEdBQUcsU0FBUztXQW1CaUIsU0FBUztBQUd4RCxNQUFNLE9BQU8seUJBQTBCLFNBQVEsZ0JBQWdCOzs7Ozs7O0lBK0M3RCxZQUFvQyxTQUErQixFQUNqRSxrQkFBcUMsRUFDckMsb0JBQStDLEVBQ3ZDLGlCQUFtQztRQUUzQyxLQUFLLENBQUMsU0FBUyxFQUFFLGtCQUFrQixFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFGbkQs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LENBQUM7OztZQWpIRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsNFhBQW1DO2dCQUVuQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsVUFBVSxFQUFFLENBQUMscUJBQXFCLENBQUMsYUFBYSxDQUFDO2dCQUNqRCxJQUFJLEVBQUU7b0JBQ0oscUJBQXFCLEVBQUUsVUFBVTtvQkFDakMsbUNBQW1DLEVBQUUsNkJBQTZCO29CQUNsRSxxQ0FBcUMsRUFBRSwrQkFBK0I7b0JBQ3RFLHNDQUFzQyxFQUFFLFVBQVU7b0JBQ2xELHFCQUFxQixFQUFFLFVBQVU7aUJBQ2xDO2dCQUNELFNBQVMsRUFBRTtvQkFDVCxnR0FBZ0c7b0JBQ2hHLHlCQUF5QjtvQkFDekIsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsUUFBUSxJQUFXLEVBQUU7aUJBQ3ZEOzthQUNGOzs7O1lBOUJRLG9CQUFvQix1QkE4RWQsUUFBUSxZQUFJLFFBQVE7WUE1RmpDLGlCQUFpQjtZQUxWLHlCQUF5QjtZQWNoQyxnQkFBZ0I7Ozt1QkFzQ2YsS0FBSztvQkFjTCxLQUFLLFNBQUMsU0FBUzswQkFlZixZQUFZLFNBQUMsNkJBQTZCLEVBQUUsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDOzs7Ozs7O0lBdEI1RCw4Q0FBa0M7O0lBQ2xDLG9EQUErQzs7Ozs7SUFrQi9DLDJDQUFzQzs7Ozs7SUFHdEMsZ0RBQTBFOzs7OztJQUUxRSw0Q0FBZ0M7Ozs7O0lBUWhDLDhDQUFnQzs7SUFDaEMsOENBQW9EOzs7OztJQUdwRCxrREFBc0Q7Ozs7O0lBS3BELHNEQUEyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENka0FjY29yZGlvbkl0ZW0gfSBmcm9tICdAYW5ndWxhci9jZGsvYWNjb3JkaW9uJztcbmltcG9ydCB7IFVuaXF1ZVNlbGVjdGlvbkRpc3BhdGNoZXIgfSBmcm9tICdAYW5ndWxhci9jZGsvY29sbGVjdGlvbnMnO1xuaW1wb3J0IHsgVGVtcGxhdGVQb3J0YWwgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGQsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT3B0aW9uYWwsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFNraXBTZWxmLFxuICBWaWV3Q29udGFpbmVyUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBzdGFydFdpdGgsIHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IE54QWNjb3JkaW9uRGlyZWN0aXZlIH0gZnJvbSAnLi9hY2NvcmRpb24nO1xuaW1wb3J0IHsgbnhBY2NvcmRpb25BbmltYXRpb25zIH0gZnJvbSAnLi9hY2NvcmRpb24tYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBOeEV4cGFuc2lvblBhbmVsQm9keURpcmVjdGl2ZSB9IGZyb20gJy4vZXhwYW5zaW9uLXBhbmVsLWJvZHknO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcblxubGV0IG5leHRJZCA9IDA7XG5cbi8qKiBUaGUgc3R5bGluZyBvZiB0aGUgYWNjb3JkaW9uLiAqL1xuZXhwb3J0IHR5cGUgQWNjb3JkaW9uU3R5bGUgPSAncmVndWxhcicgfCAnbGlnaHQnO1xuY29uc3QgREVGQVVMVF9UWVBFID0gJ3JlZ3VsYXInO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdueC1leHBhbnNpb24tcGFuZWwnLFxuICBleHBvcnRBczogJ054RXhwYW5zaW9uUGFuZWxDb21wb25lbnQnLFxuICB0ZW1wbGF0ZVVybDogJ2V4cGFuc2lvbi1wYW5lbC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJ2V4cGFuc2lvbi1wYW5lbC5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBhbmltYXRpb25zOiBbbnhBY2NvcmRpb25BbmltYXRpb25zLmJvZHlFeHBhbnNpb25dLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5ueC1leHBhbmRlZF0nOiAnZXhwYW5kZWQnLFxuICAgICdbY2xhc3MubngtZXhwYW5zaW9uLXBhbmVsLS1saWdodF0nOiAnX2FjY29yZGlvblN0eWxlID09PSBcImxpZ2h0XCInLFxuICAgICdbY2xhc3MubngtZXhwYW5zaW9uLXBhbmVsLS1yZWd1bGFyXSc6ICdfYWNjb3JkaW9uU3R5bGUgPT09IFwicmVndWxhclwiJyxcbiAgICAnW2NsYXNzLm54LWV4cGFuc2lvbi1wYW5lbC0tbmVnYXRpdmVdJzogJ25lZ2F0aXZlJyxcbiAgICAnW2NsYXNzLmlzLWRpc2FibGVkXSc6ICdkaXNhYmxlZCcsXG4gIH0sXG4gIHByb3ZpZGVyczogW1xuICAgIC8vIFByb3ZpZGUgTnhBY2NvcmRpb25EaXJlY3RpdmUgYXMgdW5kZWZpbmVkIHRvIHByZXZlbnQgbmVzdGVkIGV4cGFuc2lvbiBwYW5lbHMgZnJvbSByZWdpc3RlcmluZ1xuICAgIC8vIHRvIHRoZSBzYW1lIGFjY29yZGlvbi5cbiAgICB7IHByb3ZpZGU6IE54QWNjb3JkaW9uRGlyZWN0aXZlLCB1c2VWYWx1ZTogdW5kZWZpbmVkIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIE54RXhwYW5zaW9uUGFuZWxDb21wb25lbnQgZXh0ZW5kcyBDZGtBY2NvcmRpb25JdGVtIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAvKiogV2hldGhlciB0aGUgbmVnYXRpdmUgc2V0IG9mIHN0eWxlcyBzaG91bGQgYmUgdXNlZC4gKi9cbiAgQElucHV0KClcbiAgc2V0IG5lZ2F0aXZlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fbmVnYXRpdmUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICB9XG4gIGdldCBuZWdhdGl2ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fbmVnYXRpdmU7XG4gIH1cbiAgcHJpdmF0ZSBfbmVnYXRpdmU6IGJvb2xlYW4gPSBudWxsO1xuICBfYWNjb3JkaW9uU3R5bGU6IEFjY29yZGlvblN0eWxlID0gREVGQVVMVF9UWVBFO1xuXG4gIC8qKlxuICAgKiBWYWx1ZSBmb3IgdGhlIHN0eWxpbmcgdGhhdCBzaG91bGQgYmUgY2hvc2VuLlxuICAgKiBEZWZhdWx0IHZhbHVlOiAncmVndWxhcicuXG4gICAqL1xuICBASW5wdXQoJ254U3R5bGUnKVxuICBzZXQgc3R5bGUodmFsdWU6IEFjY29yZGlvblN0eWxlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZSA/IHZhbHVlIDogREVGQVVMVF9UWVBFO1xuXG4gICAgY29uc3QgW25ld1ZhbHVlXSA9IHZhbHVlLm1hdGNoKC9yZWd1bGFyfGxpZ2h0LykgfHwgW0RFRkFVTFRfVFlQRV07XG4gICAgdGhpcy5fc3R5bGUgPSBuZXdWYWx1ZSBhcyBBY2NvcmRpb25TdHlsZTtcbiAgICB0aGlzLl9hY2NvcmRpb25TdHlsZSA9IG5ld1ZhbHVlIGFzIEFjY29yZGlvblN0eWxlO1xuICB9XG5cbiAgZ2V0IHN0eWxlKCk6IEFjY29yZGlvblN0eWxlIHtcbiAgICByZXR1cm4gdGhpcy5fc3R5bGU7XG4gIH1cbiAgcHJpdmF0ZSBfc3R5bGU6IEFjY29yZGlvblN0eWxlID0gbnVsbDtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBAQ29udGVudENoaWxkKE54RXhwYW5zaW9uUGFuZWxCb2R5RGlyZWN0aXZlLCB7c3RhdGljOiBmYWxzZX0pIGxhenlDb250ZW50O1xuXG4gIHByaXZhdGUgX3BvcnRhbDogVGVtcGxhdGVQb3J0YWw7XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgZ2V0IHBvcnRhbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9ydGFsO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgYWNjb3JkaW9uOiBOeEFjY29yZGlvbkRpcmVjdGl2ZTtcbiAgX2hlYWRlcklkID0gYG54LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXItJHtuZXh0SWQrK31gO1xuXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyBmb3IgY2hhbmdlcyBpbiBgQElucHV0YCBwcm9wZXJ0aWVzLiAqL1xuICByZWFkb25seSBfaW5wdXRDaGFuZ2VzID0gbmV3IFN1YmplY3Q8U2ltcGxlQ2hhbmdlcz4oKTtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBhY2NvcmRpb246IE54QWNjb3JkaW9uRGlyZWN0aXZlLFxuICAgIF9jaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgX2V4cGFuc2lvbkRpc3BhdGNoZXI6IFVuaXF1ZVNlbGVjdGlvbkRpc3BhdGNoZXIsXG4gICAgcHJpdmF0ZSBfdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZlxuICApIHtcbiAgICBzdXBlcihhY2NvcmRpb24sIF9jaGFuZ2VEZXRlY3RvclJlZiwgX2V4cGFuc2lvbkRpc3BhdGNoZXIpO1xuICAgIHRoaXMuYWNjb3JkaW9uID0gYWNjb3JkaW9uO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIGlmICh0aGlzLmxhenlDb250ZW50KSB7XG4gICAgICAvLyBSZW5kZXIgdGhlIGNvbnRlbnQgYXMgc29vbiBhcyB0aGUgcGFuZWwgYmVjb21lcyBvcGVuLlxuICAgICAgdGhpcy5vcGVuZWQucGlwZShcbiAgICAgICAgc3RhcnRXaXRoKG51bGwpLFxuICAgICAgICBmaWx0ZXIoKCkgPT4gdGhpcy5leHBhbmRlZCAmJiAhdGhpcy5fcG9ydGFsKSxcbiAgICAgICAgdGFrZSgxKVxuICAgICAgKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLl9wb3J0YWwgPSBuZXcgVGVtcGxhdGVQb3J0YWwodGhpcy5sYXp5Q29udGVudC5fdGVtcGxhdGUsIHRoaXMuX3ZpZXdDb250YWluZXJSZWYpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gSW5oZXJpdCBhcHBlYXJhbmNlIGdpdmVuIGJ5IHRoZSBhY2NvcmRpb24gKGlmIGFueSkuXG4gICAgaWYgKEJvb2xlYW4odGhpcy5hY2NvcmRpb24pKSB7XG5cbiAgICAgIGlmICh0aGlzLnN0eWxlID09PSBudWxsICYmIHRoaXMuYWNjb3JkaW9uLnN0eWxlICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuc3R5bGUgPSB0aGlzLmFjY29yZGlvbi5zdHlsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IG51bGwgJiYgdGhpcy5hY2NvcmRpb24ubmVnYXRpdmUgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5uZWdhdGl2ZSA9IHRoaXMuYWNjb3JkaW9uLm5lZ2F0aXZlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICB0aGlzLl9pbnB1dENoYW5nZXMubmV4dChjaGFuZ2VzKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHN1cGVyLm5nT25EZXN0cm95KCk7XG4gICAgdGhpcy5faW5wdXRDaGFuZ2VzLmNvbXBsZXRlKCk7XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBnZXRPcGVuU3RhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXhwYW5kZWQgPyAnb3BlbicgOiAnY2xvc2VkJztcbiAgfVxufVxuIl19