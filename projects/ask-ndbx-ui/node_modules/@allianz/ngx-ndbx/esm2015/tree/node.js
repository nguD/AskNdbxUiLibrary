/**
 * @fileoverview added by tsickle
 * Generated from: node.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CdkTreeNode, CdkTreeNodeDef } from '@angular/cdk/tree';
import { Component, Directive, Input, } from '@angular/core';
/**
 * Wrapper for the CdkTree node with NDBX design styles.
 * @template T
 */
export class NxTreeNodeComponent extends CdkTreeNode {
}
NxTreeNodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-tree-node',
                exportAs: 'nxTreeNode',
                inputs: ['disabled', 'tabIndex'],
                host: {
                    '[attr.aria-expanded]': 'isExpanded',
                    '[attr.aria-level]': 'role === "treeitem" ? level : null',
                    '[attr.role]': 'role',
                    'class': 'nx-tree__node',
                    '[class.is-expanded]': 'isExpanded'
                },
                providers: [{ provide: CdkTreeNode, useExisting: NxTreeNodeComponent }],
                template: "<div class=\"nx-tree__node-box\">\n  <ng-content></ng-content>\n</div>\n"
            }] }
];
/**
 * Wrapper for the CdkTree node definition with NDBX design styles.
 * @template T
 */
export class NxTreeNodeDefDirective extends CdkTreeNodeDef {
}
NxTreeNodeDefDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nxTreeNodeDef]',
                inputs: [
                    'when: nxTreeNodeDefWhen'
                ],
                providers: [{ provide: CdkTreeNodeDef, useExisting: NxTreeNodeDefDirective }]
            },] }
];
NxTreeNodeDefDirective.propDecorators = {
    data: [{ type: Input, args: ['nxTreeNode',] }]
};
if (false) {
    /** @type {?} */
    NxTreeNodeDefDirective.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4L3RyZWUvIiwic291cmNlcyI6WyJub2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFdBQVcsRUFBRSxjQUFjLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUM5RCxPQUFPLEVBQ0wsU0FBUyxFQUNULFNBQVMsRUFDVCxLQUFLLEdBQ04sTUFBTSxlQUFlLENBQUM7Ozs7O0FBbUJ2QixNQUFNLE9BQU8sbUJBQXVCLFNBQVEsV0FBYzs7O1lBZHpELFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYztnQkFDeEIsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUM7Z0JBQ2hDLElBQUksRUFBRTtvQkFDSixzQkFBc0IsRUFBRSxZQUFZO29CQUNwQyxtQkFBbUIsRUFBRSxvQ0FBb0M7b0JBQ3pELGFBQWEsRUFBRSxNQUFNO29CQUNyQixPQUFPLEVBQUUsZUFBZTtvQkFDeEIscUJBQXFCLEVBQUUsWUFBWTtpQkFDcEM7Z0JBQ0QsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBQyxDQUFDO2dCQUNyRSxvRkFBMEI7YUFDM0I7Ozs7OztBQWFELE1BQU0sT0FBTyxzQkFBMEIsU0FBUSxjQUFpQjs7O1lBUC9ELFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixNQUFNLEVBQUU7b0JBQ04seUJBQXlCO2lCQUMxQjtnQkFDRCxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLHNCQUFzQixFQUFDLENBQUM7YUFDNUU7OzttQkFFRSxLQUFLLFNBQUMsWUFBWTs7OztJQUFuQixzQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Nka1RyZWVOb2RlLCBDZGtUcmVlTm9kZURlZn0gZnJvbSAnQGFuZ3VsYXIvY2RrL3RyZWUnO1xuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBEaXJlY3RpdmUsXG4gIElucHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBXcmFwcGVyIGZvciB0aGUgQ2RrVHJlZSBub2RlIHdpdGggTkRCWCBkZXNpZ24gc3R5bGVzLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdueC10cmVlLW5vZGUnLFxuICBleHBvcnRBczogJ254VHJlZU5vZGUnLFxuICBpbnB1dHM6IFsnZGlzYWJsZWQnLCAndGFiSW5kZXgnXSxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5hcmlhLWV4cGFuZGVkXSc6ICdpc0V4cGFuZGVkJyxcbiAgICAnW2F0dHIuYXJpYS1sZXZlbF0nOiAncm9sZSA9PT0gXCJ0cmVlaXRlbVwiID8gbGV2ZWwgOiBudWxsJyxcbiAgICAnW2F0dHIucm9sZV0nOiAncm9sZScsXG4gICAgJ2NsYXNzJzogJ254LXRyZWVfX25vZGUnLFxuICAgICdbY2xhc3MuaXMtZXhwYW5kZWRdJzogJ2lzRXhwYW5kZWQnXG4gIH0sXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBDZGtUcmVlTm9kZSwgdXNlRXhpc3Rpbmc6IE54VHJlZU5vZGVDb21wb25lbnR9XSxcbiAgdGVtcGxhdGVVcmw6ICcuL25vZGUuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTnhUcmVlTm9kZUNvbXBvbmVudDxUPiBleHRlbmRzIENka1RyZWVOb2RlPFQ+IHt9XG5cbi8qKlxuICogV3JhcHBlciBmb3IgdGhlIENka1RyZWUgbm9kZSBkZWZpbml0aW9uIHdpdGggTkRCWCBkZXNpZ24gc3R5bGVzLlxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbnhUcmVlTm9kZURlZl0nLFxuICBpbnB1dHM6IFtcbiAgICAnd2hlbjogbnhUcmVlTm9kZURlZldoZW4nXG4gIF0sXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBDZGtUcmVlTm9kZURlZiwgdXNlRXhpc3Rpbmc6IE54VHJlZU5vZGVEZWZEaXJlY3RpdmV9XVxufSlcbmV4cG9ydCBjbGFzcyBOeFRyZWVOb2RlRGVmRGlyZWN0aXZlPFQ+IGV4dGVuZHMgQ2RrVHJlZU5vZGVEZWY8VD4ge1xuICBASW5wdXQoJ254VHJlZU5vZGUnKSBkYXRhOiBUO1xufVxuIl19