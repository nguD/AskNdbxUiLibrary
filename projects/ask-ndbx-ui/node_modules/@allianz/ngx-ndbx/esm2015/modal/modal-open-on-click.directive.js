/**
 * @fileoverview added by tsickle
 * Generated from: modal/modal-open-on-click.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { NxModalService } from './modal.service';
export class NxOpenModalOnClickDirective {
    /**
     * @param {?} templateRef
     * @param {?} viewContainer
     * @param {?} modalService
     */
    constructor(templateRef, viewContainer, modalService) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.modalService = modalService;
        /**
         * \@docs-private
         */
        this.clickHandler = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.viewContainer.clear();
            // instantiate the template onto which this directive is applied
            /** @type {?} */
            const viewRef = this.viewContainer.createEmbeddedView(this.templateRef);
            // we need to mark the viewRef explicitly if the modal is used inside another
            // component that is using onPush change detection
            viewRef.markForCheck();
            event.preventDefault();
            event.stopPropagation();
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subscription = this.modalService.close$.subscribe((/**
         * @return {?}
         */
        () => this.viewContainer.clear()));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.elements.forEach((/**
         * @param {?} el
         * @return {?}
         */
        el => {
            if (el.removeEventListener) {
                el.removeEventListener('click', this.clickHandler);
            }
        }));
        this.subscription.unsubscribe();
    }
    /**
     * One or multiple template reference variables pointing to elements
     * which should trigger opening the modal on click.
     *
     * Value: A single template reference variable or an array of template reference variables.
     * @param {?} elements
     * @return {?}
     */
    set nxOpenModalOnClick(elements) {
        // also support the case where only one element is passed, check for the length property to be sure elements is an array
        if (elements.length) {
            this.elements = elements;
        }
        else {
            this.elements = [elements];
        }
        // add a click event listener to any element passed as property to this directive
        this.elements.forEach((/**
         * @param {?} el
         * @return {?}
         */
        el => {
            if (el.addEventListener) {
                el.addEventListener('click', this.clickHandler);
                // workaround until refactoring: if the reference is a component
                // reference the component has to implement a getter to its own elementRef
            }
            else if (el.elementRef) {
                el.elementRef.nativeElement.addEventListener('click', this.clickHandler);
            }
            else {
                console.warn(`nxOpenModalOnClick: Given Element doesn't appear to be an ElementRef.`, el);
            }
        }));
    }
}
NxOpenModalOnClickDirective.decorators = [
    { type: Directive, args: [{ selector: '[nxOpenModalOnClick]' },] }
];
/** @nocollapse */
NxOpenModalOnClickDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: NxModalService }
];
NxOpenModalOnClickDirective.propDecorators = {
    nxOpenModalOnClick: [{ type: Input }]
};
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxOpenModalOnClickDirective.prototype.elements;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.subscription;
    /**
     * \@docs-private
     * @type {?}
     */
    NxOpenModalOnClickDirective.prototype.clickHandler;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    NxOpenModalOnClickDirective.prototype.modalService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtb3Blbi1vbi1jbGljay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbIm1vZGFsL21vZGFsLW9wZW4tb24tY2xpY2suZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXFCLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUduRyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHakQsTUFBTSxPQUFPLDJCQUEyQjs7Ozs7O0lBT3RDLFlBQW9CLFdBQTZCLEVBQzdCLGFBQStCLEVBQy9CLFlBQTRCO1FBRjVCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtRQUM3QixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFDL0IsaUJBQVksR0FBWixZQUFZLENBQWdCOzs7O1FBa0JoRCxpQkFBWTs7OztRQUFHLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDNUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7O2tCQUVyQixPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ3ZFLDZFQUE2RTtZQUM3RSxrREFBa0Q7WUFDbEQsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3ZCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDMUIsQ0FBQyxFQUFBO0lBMUJELENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxTQUFTOzs7UUFBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxFQUFDLENBQUM7SUFDM0YsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU87Ozs7UUFBQyxFQUFFLENBQUMsRUFBRTtZQUN6QixJQUFJLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRTtnQkFDMUIsRUFBRSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDcEQ7UUFDSCxDQUFDLEVBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbEMsQ0FBQzs7Ozs7Ozs7O0lBb0JELElBQ0ksa0JBQWtCLENBQUMsUUFBUTtRQUM3Qix3SEFBd0g7UUFDeEgsSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1NBQzFCO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUUsUUFBUSxDQUFFLENBQUM7U0FDOUI7UUFDRCxpRkFBaUY7UUFDakYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPOzs7O1FBQUMsRUFBRSxDQUFDLEVBQUU7WUFDekIsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ3ZCLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUNsRCxnRUFBZ0U7Z0JBQ2hFLDBFQUEwRTthQUN6RTtpQkFBTSxJQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUU7Z0JBQ3hCLEVBQUUsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDMUU7aUJBQU07Z0JBQ0wsT0FBTyxDQUFDLElBQUksQ0FBQyx1RUFBdUUsRUFBRSxFQUFFLENBQUMsQ0FBQzthQUMzRjtRQUNILENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBakVGLFNBQVMsU0FBQyxFQUFDLFFBQVEsRUFBRSxzQkFBc0IsRUFBQzs7OztZQUxDLFdBQVc7WUFBRSxnQkFBZ0I7WUFHbEUsY0FBYzs7O2lDQStDcEIsS0FBSzs7Ozs7OztJQXpDTiwrQ0FBcUI7Ozs7O0lBRXJCLG1EQUFvQzs7Ozs7SUFzQnBDLG1EQVNDOzs7OztJQTdCVyxrREFBcUM7Ozs7O0lBQ3JDLG9EQUF1Qzs7Ozs7SUFDdkMsbURBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb25MaWtlIGFzIElTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgTnhNb2RhbFNlcnZpY2UgfSBmcm9tICcuL21vZGFsLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ1tueE9wZW5Nb2RhbE9uQ2xpY2tdJ30pXG5leHBvcnQgY2xhc3MgTnhPcGVuTW9kYWxPbkNsaWNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIGVsZW1lbnRzOiBBcnJheTxhbnk+O1xuXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBJU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXG4gICAgICAgICAgICAgIHByaXZhdGUgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBtb2RhbFNlcnZpY2U6IE54TW9kYWxTZXJ2aWNlKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMubW9kYWxTZXJ2aWNlLmNsb3NlJC5zdWJzY3JpYmUoKCkgPT4gdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCkpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGlmIChlbC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja0hhbmRsZXIpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIGNsaWNrSGFuZGxlciA9IChldmVudDogYW55KSA9PiB7XG4gICAgdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgLy8gaW5zdGFudGlhdGUgdGhlIHRlbXBsYXRlIG9udG8gd2hpY2ggdGhpcyBkaXJlY3RpdmUgaXMgYXBwbGllZFxuICAgIGNvbnN0IHZpZXdSZWYgPSB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYpO1xuICAgIC8vIHdlIG5lZWQgdG8gbWFyayB0aGUgdmlld1JlZiBleHBsaWNpdGx5IGlmIHRoZSBtb2RhbCBpcyB1c2VkIGluc2lkZSBhbm90aGVyXG4gICAgLy8gY29tcG9uZW50IHRoYXQgaXMgdXNpbmcgb25QdXNoIGNoYW5nZSBkZXRlY3Rpb25cbiAgICB2aWV3UmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICAvKipcbiAgICogT25lIG9yIG11bHRpcGxlIHRlbXBsYXRlIHJlZmVyZW5jZSB2YXJpYWJsZXMgcG9pbnRpbmcgdG8gZWxlbWVudHNcbiAgICogd2hpY2ggc2hvdWxkIHRyaWdnZXIgb3BlbmluZyB0aGUgbW9kYWwgb24gY2xpY2suXG4gICAqXG4gICAqIFZhbHVlOiBBIHNpbmdsZSB0ZW1wbGF0ZSByZWZlcmVuY2UgdmFyaWFibGUgb3IgYW4gYXJyYXkgb2YgdGVtcGxhdGUgcmVmZXJlbmNlIHZhcmlhYmxlcy5cbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCBueE9wZW5Nb2RhbE9uQ2xpY2soZWxlbWVudHMpIHtcbiAgICAvLyBhbHNvIHN1cHBvcnQgdGhlIGNhc2Ugd2hlcmUgb25seSBvbmUgZWxlbWVudCBpcyBwYXNzZWQsIGNoZWNrIGZvciB0aGUgbGVuZ3RoIHByb3BlcnR5IHRvIGJlIHN1cmUgZWxlbWVudHMgaXMgYW4gYXJyYXlcbiAgICBpZiAoZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzID0gZWxlbWVudHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxlbWVudHMgPSBbIGVsZW1lbnRzIF07XG4gICAgfVxuICAgIC8vIGFkZCBhIGNsaWNrIGV2ZW50IGxpc3RlbmVyIHRvIGFueSBlbGVtZW50IHBhc3NlZCBhcyBwcm9wZXJ0eSB0byB0aGlzIGRpcmVjdGl2ZVxuICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICBpZiAoZWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xpY2tIYW5kbGVyKTtcbiAgICAgIC8vIHdvcmthcm91bmQgdW50aWwgcmVmYWN0b3Jpbmc6IGlmIHRoZSByZWZlcmVuY2UgaXMgYSBjb21wb25lbnRcbiAgICAgIC8vIHJlZmVyZW5jZSB0aGUgY29tcG9uZW50IGhhcyB0byBpbXBsZW1lbnQgYSBnZXR0ZXIgdG8gaXRzIG93biBlbGVtZW50UmVmXG4gICAgICB9IGVsc2UgaWYgKGVsLmVsZW1lbnRSZWYpIHtcbiAgICAgICAgZWwuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja0hhbmRsZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBueE9wZW5Nb2RhbE9uQ2xpY2s6IEdpdmVuIEVsZW1lbnQgZG9lc24ndCBhcHBlYXIgdG8gYmUgYW4gRWxlbWVudFJlZi5gLCBlbCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufVxuIl19