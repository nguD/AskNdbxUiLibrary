/**
 * @fileoverview added by tsickle
 * Generated from: password-toggle.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Component, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';
import { ENTER, SPACE } from '@angular/cdk/keycodes';
/** @type {?} */
const visibilityIcons = {
    show: 'password-show-o',
    hide: 'password-hide-o'
};
export class NxPasswordToggleComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * \@docs-private
         */
        this._currentIcon = visibilityIcons['show'];
        /**
         * \@docs-private
         */
        this._pressed = false;
        this._ariaLabel = 'Show password';
    }
    /**
     * Sets the aria-label needed for accessibility.
     * Notice that this `aria-label` should describe the initial action according to the status of the visibility.
     * E.g if you have an `input[type=password]` at the beginning then the
     * password will be hidden and the correct aria-label would be 'Show password.'
     * @param {?} value
     * @return {?}
     */
    set ariaLabel(value) {
        if (value !== this._ariaLabel) {
            this._ariaLabel = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get ariaLabel() {
        return this._ariaLabel;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.control) {
            console.warn('You need to pass an input as a control to the password toggle.');
        }
        else {
            // show the right icon according to the initial type of the input
            this._currentIcon = this.control.type === 'password' ? visibilityIcons['show'] : visibilityIcons['hide'];
        }
    }
    /**
     * Toggles the type of the input.
     * @return {?}
     */
    toggleInputType() {
        if (this.control) {
            this.control.type = this.control.type === 'password' ? 'text' : 'password';
            this._pressed = !this._pressed;
            this.toggleIcon();
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * \@docs-private
     * @return {?}
     */
    toggleIcon() {
        this._currentIcon = this._currentIcon === visibilityIcons['show'] ? visibilityIcons['hide'] : visibilityIcons['show'];
    }
    /**
     * \@docs-private
     * @param {?} $event
     * @return {?}
     */
    _onKeydown($event) {
        if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {
            this.toggleInputType();
        }
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get tabindex() {
        if (this.control) {
            return this.control.disabled ? -1 : 0;
        }
        return null;
    }
}
NxPasswordToggleComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-password-toggle',
                template: `<nx-icon
      aria-hidden="true"
      [name]="_currentIcon">
    </nx-icon>`,
                host: {
                    '[attr.aria-label]': 'ariaLabel',
                    '[attr.tabindex]': 'tabindex',
                    '[attr.aria-pressed]': '_pressed',
                    'role': 'button',
                    '(click)': 'toggleInputType()',
                    '(keydown)': '_onKeydown($event)'
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{position:relative;display:inline-block;height:24px;width:24px;cursor:pointer}:host:focus{outline:0}:host:hover{color:#006192;color:var(--hover-primary,#006192)}:host-context([data-whatinput=keyboard]):focus ::ng-deep nx-icon{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6);border-radius:4px}@media screen and (-ms-high-contrast:active){:host{color:buttonText}:host-context([data-whatinput=keyboard]):focus ::ng-deep nx-icon{box-shadow:0 0 0 2px background,0 0 0 6px windowText}}:host-context(.is-disabled){pointer-events:none}"]
            }] }
];
/** @nocollapse */
NxPasswordToggleComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NxPasswordToggleComponent.propDecorators = {
    control: [{ type: Input }],
    ariaLabel: [{ type: Input }]
};
if (false) {
    /**
     * Input element using the toggle functionality.
     * @type {?}
     */
    NxPasswordToggleComponent.prototype.control;
    /**
     * \@docs-private
     * @type {?}
     */
    NxPasswordToggleComponent.prototype._currentIcon;
    /**
     * \@docs-private
     * @type {?}
     */
    NxPasswordToggleComponent.prototype._pressed;
    /**
     * @type {?}
     * @private
     */
    NxPasswordToggleComponent.prototype._ariaLabel;
    /**
     * @type {?}
     * @private
     */
    NxPasswordToggleComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtdG9nZ2xlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4L2lucHV0LyIsInNvdXJjZXMiOlsicGFzc3dvcmQtdG9nZ2xlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFpQixpQkFBaUIsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLHVCQUF1QixDQUFDOztNQUUvQyxlQUFlLEdBQUc7SUFDdEIsSUFBSSxFQUFFLGlCQUFpQjtJQUN2QixJQUFJLEVBQUUsaUJBQWlCO0NBQ3hCO0FBb0JELE1BQU0sT0FBTyx5QkFBeUI7Ozs7SUEyQnBDLFlBQXFCLGtCQUFxQztRQUFyQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1COzs7O1FBckIxRCxpQkFBWSxHQUFXLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7OztRQUUvQyxhQUFRLEdBQVksS0FBSyxDQUFDO1FBQ2xCLGVBQVUsR0FBVyxlQUFlLENBQUM7SUFrQmlCLENBQUM7Ozs7Ozs7OztJQVgvRCxJQUNJLFNBQVMsQ0FBQyxLQUFhO1FBQ3pCLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDN0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7WUFDeEIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQzs7OztJQUNELElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDOzs7O0lBSUQsZUFBZTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0VBQWdFLENBQUMsQ0FBQztTQUNoRjthQUFNO1lBQ0wsaUVBQWlFO1lBQ2pFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMxRztJQUNILENBQUM7Ozs7O0lBR0QsZUFBZTtRQUNiLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO1lBQzNFLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQy9CLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNsQixJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDeEM7SUFDSCxDQUFDOzs7OztJQUdELFVBQVU7UUFDUixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLEtBQUssZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4SCxDQUFDOzs7Ozs7SUFHRCxVQUFVLENBQUMsTUFBTTtRQUNmLElBQUksTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sS0FBSyxLQUFLLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNwRSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDeEI7SUFDSCxDQUFDOzs7OztJQUdELElBQUksUUFBUTtRQUNWLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3ZDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7WUFwRkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLFFBQVEsRUFDTjs7O2VBR1c7Z0JBRWIsSUFBSSxFQUFFO29CQUNKLG1CQUFtQixFQUFFLFdBQVc7b0JBQ2hDLGlCQUFpQixFQUFFLFVBQVU7b0JBQzdCLHFCQUFxQixFQUFFLFVBQVU7b0JBQ2pDLE1BQU0sRUFBRSxRQUFRO29CQUNoQixTQUFTLEVBQUUsbUJBQW1CO29CQUM5QixXQUFXLEVBQUUsb0JBQW9CO2lCQUNsQztnQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7YUFDaEQ7Ozs7WUF6QnlDLGlCQUFpQjs7O3NCQTZCeEQsS0FBSzt3QkFhTCxLQUFLOzs7Ozs7O0lBYk4sNENBQW1DOzs7OztJQUduQyxpREFBK0M7Ozs7O0lBRS9DLDZDQUEwQjs7Ozs7SUFDMUIsK0NBQTZDOzs7OztJQWtCaEMsdURBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIENvbXBvbmVudCwgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFTlRFUiwgU1BBQ0UgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xuXG5jb25zdCB2aXNpYmlsaXR5SWNvbnMgPSB7XG4gIHNob3c6ICdwYXNzd29yZC1zaG93LW8nLFxuICBoaWRlOiAncGFzc3dvcmQtaGlkZS1vJ1xufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbngtcGFzc3dvcmQtdG9nZ2xlJyxcbiAgdGVtcGxhdGU6XG4gICAgYDxueC1pY29uXG4gICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgW25hbWVdPVwiX2N1cnJlbnRJY29uXCI+XG4gICAgPC9ueC1pY29uPmAsXG4gIHN0eWxlVXJsczogWycuL3Bhc3N3b3JkLXRvZ2dsZS5jb21wb25lbnQuc2NzcyddLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLmFyaWEtbGFiZWxdJzogJ2FyaWFMYWJlbCcsXG4gICAgJ1thdHRyLnRhYmluZGV4XSc6ICd0YWJpbmRleCcsXG4gICAgJ1thdHRyLmFyaWEtcHJlc3NlZF0nOiAnX3ByZXNzZWQnLFxuICAgICdyb2xlJzogJ2J1dHRvbicsXG4gICAgJyhjbGljayknOiAndG9nZ2xlSW5wdXRUeXBlKCknLFxuICAgICcoa2V5ZG93biknOiAnX29uS2V5ZG93bigkZXZlbnQpJ1xuICB9LFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBOeFBhc3N3b3JkVG9nZ2xlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgLyoqIElucHV0IGVsZW1lbnQgdXNpbmcgdGhlIHRvZ2dsZSBmdW5jdGlvbmFsaXR5LiAqL1xuICBASW5wdXQoKSBjb250cm9sOiBIVE1MSW5wdXRFbGVtZW50O1xuXG4gIC8qKkBkb2NzLXByaXZhdGUgKi9cbiAgX2N1cnJlbnRJY29uOiBzdHJpbmcgPSB2aXNpYmlsaXR5SWNvbnNbJ3Nob3cnXTtcbiAgLyoqQGRvY3MtcHJpdmF0ZSAqL1xuICBfcHJlc3NlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF9hcmlhTGFiZWw6IHN0cmluZyA9ICdTaG93IHBhc3N3b3JkJztcblxuICAvKiogU2V0cyB0aGUgYXJpYS1sYWJlbCBuZWVkZWQgZm9yIGFjY2Vzc2liaWxpdHkuXG4gICAqIE5vdGljZSB0aGF0IHRoaXMgYGFyaWEtbGFiZWxgIHNob3VsZCBkZXNjcmliZSB0aGUgaW5pdGlhbCBhY3Rpb24gYWNjb3JkaW5nIHRvIHRoZSBzdGF0dXMgb2YgdGhlIHZpc2liaWxpdHkuXG4gICAqIEUuZyBpZiB5b3UgaGF2ZSBhbiBgaW5wdXRbdHlwZT1wYXNzd29yZF1gIGF0IHRoZSBiZWdpbm5pbmcgdGhlbiB0aGVcbiAgICogcGFzc3dvcmQgd2lsbCBiZSBoaWRkZW4gYW5kIHRoZSBjb3JyZWN0IGFyaWEtbGFiZWwgd291bGQgYmUgJ1Nob3cgcGFzc3dvcmQuJ1xuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGFyaWFMYWJlbCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLl9hcmlhTGFiZWwpIHtcbiAgICAgIHRoaXMuX2FyaWFMYWJlbCA9IHZhbHVlO1xuICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG4gIGdldCBhcmlhTGFiZWwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fYXJpYUxhYmVsO1xuICB9XG5cbiAgY29uc3RydWN0b3IgKHByaXZhdGUgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikgeyB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICghdGhpcy5jb250cm9sKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1lvdSBuZWVkIHRvIHBhc3MgYW4gaW5wdXQgYXMgYSBjb250cm9sIHRvIHRoZSBwYXNzd29yZCB0b2dnbGUuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHNob3cgdGhlIHJpZ2h0IGljb24gYWNjb3JkaW5nIHRvIHRoZSBpbml0aWFsIHR5cGUgb2YgdGhlIGlucHV0XG4gICAgICB0aGlzLl9jdXJyZW50SWNvbiA9IHRoaXMuY29udHJvbC50eXBlID09PSAncGFzc3dvcmQnID8gdmlzaWJpbGl0eUljb25zWydzaG93J10gOiB2aXNpYmlsaXR5SWNvbnNbJ2hpZGUnXTtcbiAgICB9XG4gIH1cblxuICAvKiogVG9nZ2xlcyB0aGUgdHlwZSBvZiB0aGUgaW5wdXQuICovXG4gIHRvZ2dsZUlucHV0VHlwZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jb250cm9sKSB7XG4gICAgICB0aGlzLmNvbnRyb2wudHlwZSA9IHRoaXMuY29udHJvbC50eXBlID09PSAncGFzc3dvcmQnID8gJ3RleHQnIDogJ3Bhc3N3b3JkJztcbiAgICAgIHRoaXMuX3ByZXNzZWQgPSAhdGhpcy5fcHJlc3NlZDtcbiAgICAgIHRoaXMudG9nZ2xlSWNvbigpO1xuICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqQGRvY3MtcHJpdmF0ZSAqL1xuICB0b2dnbGVJY29uKCk6IHZvaWQge1xuICAgIHRoaXMuX2N1cnJlbnRJY29uID0gdGhpcy5fY3VycmVudEljb24gPT09IHZpc2liaWxpdHlJY29uc1snc2hvdyddID8gdmlzaWJpbGl0eUljb25zWydoaWRlJ10gOiB2aXNpYmlsaXR5SWNvbnNbJ3Nob3cnXTtcbiAgfVxuXG4gIC8qKkBkb2NzLXByaXZhdGUgKi9cbiAgX29uS2V5ZG93bigkZXZlbnQpIHtcbiAgICBpZiAoJGV2ZW50ICYmICgkZXZlbnQua2V5Q29kZSA9PT0gRU5URVIgfHwgJGV2ZW50LmtleUNvZGUgPT09IFNQQUNFKSkge1xuICAgICAgdGhpcy50b2dnbGVJbnB1dFR5cGUoKTtcbiAgICB9XG4gIH1cblxuICAvKipAZG9jcy1wcml2YXRlICovXG4gIGdldCB0YWJpbmRleCgpOiBudW1iZXIge1xuICAgIGlmICh0aGlzLmNvbnRyb2wpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRyb2wuZGlzYWJsZWQgPyAtMSA6IDA7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gfVxuIl19