/**
 * @fileoverview added by tsickle
 * Generated from: taglist/taglist.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { Component, EventEmitter, forwardRef, Input, Output, ChangeDetectionStrategy, ChangeDetectorRef, ViewChildren, ElementRef, QueryList } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NxTagComponent } from './tag.component';
export class NxTaglistComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * An event is dispatched each time when the list of tags changed.
         */
        this.tagsChange = new EventEmitter();
        /**
         * An event is dispatched each time when a tag is clicked.
         */
        this.tagClickEvent = new EventEmitter();
        this._tags = [];
        this._tabindex = -1;
        this._allowTagDeletion = true;
        this._isKeywordList = false;
        this._labelProperty = 'nxTaglistLabel';
        this._valueFormatterFn = (/**
         * @param {?} value
         * @return {?}
         */
        (value) => value);
        this._onChange = (/**
         * @return {?}
         */
        () => { });
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * Sets the list of tags.
     * @param {?} value
     * @return {?}
     */
    set tags(value) {
        this._tags = value;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get tags() {
        return this._tags;
    }
    /**
     * Sets the tabindex of the contained tags. Default value: -1.
     * @param {?} value
     * @return {?}
     */
    set tabindex(value) {
        this._tabindex = coerceNumberProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get tabindex() {
        return this.allowTagDeletion ? 0 : this._tabindex;
    }
    /**
     * Whether the tags can be removed from the list. Default: true.
     * @param {?} value
     * @return {?}
     */
    set allowTagDeletion(value) {
        this._allowTagDeletion = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get allowTagDeletion() {
        return this._allowTagDeletion;
    }
    /**
     * Whether the tags can be styled as keywords.
     * @param {?} value
     * @return {?}
     */
    set isKeywordList(value) {
        this._isKeywordList = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get isKeywordList() {
        return this._isKeywordList;
    }
    /**
     * Sets the label property, in case tags represent objects.
     * @param {?} value
     * @return {?}
     */
    set labelProp(value) {
        if (this._labelProperty !== value) {
            this._labelProperty = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get labelProp() {
        return this._labelProperty;
    }
    /**
     * Sets the label property to improve accessibility.
     * @param {?} value
     * @return {?}
     */
    set labelledby(value) {
        if (this._ariaLabelledBy !== value) {
            this._ariaLabelledBy = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get labelledby() {
        return this._ariaLabelledBy;
    }
    /**
     * Sets the customization function for tag value.
     * @param {?} fn
     * @return {?}
     */
    set valueFormatter(fn) {
        this._valueFormatterFn = fn;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get valueFormatter() {
        return this._valueFormatterFn;
    }
    /**
     * Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    delete(index, value) {
        if (this.allowTagDeletion) {
            this.tags = [
                ...this.tags.slice(0, index),
                ...this.tags.slice(index + 1)
            ];
            // focus next element after deletion
            if (this.tagChildren.toArray()[index + 1]) {
                this.tagChildren.toArray()[index + 1].nativeElement.focus();
            }
            this._onChange(this.tags);
            this.tagsChange.emit(this.tags);
        }
    }
    /**
     * Allows to add a tag. Takes tag object as an input
     * @param {?} tag
     * @return {?}
     */
    addTag(tag) {
        if (!tag) {
            return;
        }
        // make sure tag is either string or has the configured label prop and is not yet in the list
        if ((typeof tag === 'string' && this.tags.indexOf(tag) === -1) ||
            (tag[this.labelProp] && this.tags.filter((/**
             * @param {?} t
             * @return {?}
             */
            (t) => t[this.labelProp] === tag[this.labelProp])).length < 1)) {
            this.tags = [...this.tags, tag];
            this._onChange(this.tags);
            this.tagsChange.emit(this.tags);
        }
    }
    /**
     * Allows to clear the tag list.
     * @return {?}
     */
    clearTags() {
        this.tags = [];
        this._onChange(this.tags);
        this.tagsChange.emit(this.tags);
    }
    /**
     * \@docs-private
     * @param {?} tags
     * @return {?}
     */
    writeValue(tags) {
        this.tags = tags;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * \@docs-private
     * @param {?} tag
     * @return {?}
     */
    renderTag(tag) {
        /** @type {?} */
        const tagStr = typeof tag === 'string' ? tag : tag[this.labelProp];
        return this.valueFormatter(tagStr);
    }
    /**
     * \@docs-private
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    tagClick(index, value) {
        this.tagClickEvent.emit(this.tags[index]);
    }
}
NxTaglistComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-taglist',
                template: "  <ul class=\"nx-taglist\" *ngIf=\"tags.length > 0\">\n    <li class=\"nx-taglist__list-item\" tabindex=\"-1\" *ngFor=\"let tag of tags; let i = index\">\n      <nx-tag [value]=\"renderTag(tag)\" [removable]=\"allowTagDeletion\" [tabindex]=\"tabindex\" (clicked)=\"tagClick(i, $event)\" (removed)=\"delete(i, $event)\"></nx-tag>\n  </li>\n  </ul>\n  <ng-content *ngIf=\"tags.length < 1\"></ng-content>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NxTaglistComponent)),
                        multi: true
                    }
                ],
                host: {
                    '[class.nx-taglist--keyword]': 'isKeywordList',
                    '[attr.aria-labelledby]': 'labelledby || null',
                    '[attr.tabindex]': '-1'
                },
                styles: [":host{position:relative;min-height:32px;margin-bottom:32px;display:flex;justify-content:space-between}:host:focus{outline:0}.nx-taglist{display:flex;flex-wrap:wrap}.nx-taglist__list-item{list-style:none;margin-right:12px;margin-bottom:12px;flex-wrap:wrap;display:flex}@media (max-width:703px){.nx-taglist--keyword{justify-content:center}}"]
            }] }
];
/** @nocollapse */
NxTaglistComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NxTaglistComponent.propDecorators = {
    tagsChange: [{ type: Output, args: ['nxTagsChange',] }],
    tagClickEvent: [{ type: Output, args: ['nxTagClick',] }],
    tagChildren: [{ type: ViewChildren, args: [NxTagComponent, { read: ElementRef },] }],
    tags: [{ type: Input, args: ['nxTags',] }],
    tabindex: [{ type: Input }],
    allowTagDeletion: [{ type: Input, args: ['nxAllowTagDeletion',] }],
    isKeywordList: [{ type: Input, args: ['nxIsKeywordList',] }],
    labelProp: [{ type: Input, args: ['nxLabelProperty',] }],
    labelledby: [{ type: Input, args: ['aria-labelledby',] }],
    valueFormatter: [{ type: Input, args: ['nxValueFormatter',] }]
};
if (false) {
    /**
     * An event is dispatched each time when the list of tags changed.
     * @type {?}
     */
    NxTaglistComponent.prototype.tagsChange;
    /**
     * An event is dispatched each time when a tag is clicked.
     * @type {?}
     */
    NxTaglistComponent.prototype.tagClickEvent;
    /**
     * \@docs-private
     * @type {?}
     */
    NxTaglistComponent.prototype.tagChildren;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._tags;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._tabindex;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._allowTagDeletion;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._isKeywordList;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._labelProperty;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._ariaLabelledBy;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._valueFormatterFn;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._onTouched;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,