/**
 * @fileoverview added by tsickle
 * Generated from: core/mapped-styles.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { appendClasses, mapClassNames, removeClasses } from '@allianz/ngx-ndbx/utils';
export class MappedStyles {
    /**
     * @param {?} mapping
     * @param {?=} baseClasses
     * @param {?=} _elementRef
     * @param {?=} _renderer
     */
    constructor(mapping, baseClasses = [], _elementRef, _renderer) {
        this.mapping = mapping;
        this.baseClasses = baseClasses;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.classNames = '';
    }
    /**
     * @return {?}
     */
    get classNames() {
        return this._classNames;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set classNames(value) {
        if (this._classNames === value) {
            return;
        }
        removeClasses(this._renderer, this._elementRef, this._classNamesSanitized);
        this._classNamesSanitized = mapClassNames(value, this.baseClasses, this.mapping);
        this._classNames = value;
        appendClasses(this._renderer, this._elementRef, this._classNamesSanitized);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    MappedStyles.prototype._classNames;
    /**
     * @type {?}
     * @private
     */
    MappedStyles.prototype._classNamesSanitized;
    /**
     * @type {?}
     * @private
     */
    MappedStyles.prototype.mapping;
    /**
     * @type {?}
     * @private
     */
    MappedStyles.prototype.baseClasses;
    /**
     * @type {?}
     * @protected
     */
    MappedStyles.prototype._elementRef;
    /**
     * @type {?}
     * @protected
     */
    MappedStyles.prototype._renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwcGVkLXN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4LyIsInNvdXJjZXMiOlsiY29yZS9tYXBwZWQtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFNdEYsTUFBTSxPQUFPLFlBQVk7Ozs7Ozs7SUFJdkIsWUFDVSxPQUFzQixFQUN0QixjQUFjLEVBQUUsRUFDZCxXQUF1QixFQUN2QixTQUFvQjtRQUh0QixZQUFPLEdBQVAsT0FBTyxDQUFlO1FBQ3RCLGdCQUFXLEdBQVgsV0FBVyxDQUFLO1FBQ2QsZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFDdkIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUM1QixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7O0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7Ozs7O0lBRUQsSUFBSSxVQUFVLENBQUMsS0FBYTtRQUMxQixJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssS0FBSyxFQUFFO1lBQzlCLE9BQU87U0FDUjtRQUNELGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDM0UsSUFBSSxDQUFDLG9CQUFvQixHQUFHLGFBQWEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakYsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDekIsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUM3RSxDQUFDO0NBQ0Y7Ozs7OztJQXhCQyxtQ0FBNEI7Ozs7O0lBQzVCLDRDQUFxQzs7Ozs7SUFHbkMsK0JBQThCOzs7OztJQUM5QixtQ0FBd0I7Ozs7O0lBQ3hCLG1DQUFpQzs7Ozs7SUFDakMsaUNBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBhcHBlbmRDbGFzc2VzLCBtYXBDbGFzc05hbWVzLCByZW1vdmVDbGFzc2VzIH0gZnJvbSAnQGFsbGlhbnovbmd4LW5kYngvdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBNYXBwaW5nT2JqZWN0ID0ge1xuICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY2xhc3MgTWFwcGVkU3R5bGVzIHtcbiAgcHJpdmF0ZSBfY2xhc3NOYW1lczogc3RyaW5nO1xuICBwcml2YXRlIF9jbGFzc05hbWVzU2FuaXRpemVkOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBtYXBwaW5nOiBNYXBwaW5nT2JqZWN0LFxuICAgIHByaXZhdGUgYmFzZUNsYXNzZXMgPSBbXSxcbiAgICBwcm90ZWN0ZWQgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJvdGVjdGVkIF9yZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgICB0aGlzLmNsYXNzTmFtZXMgPSAnJztcbiAgfVxuXG4gIGdldCBjbGFzc05hbWVzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2NsYXNzTmFtZXM7XG4gIH1cblxuICBzZXQgY2xhc3NOYW1lcyh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuX2NsYXNzTmFtZXMgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlbW92ZUNsYXNzZXModGhpcy5fcmVuZGVyZXIsIHRoaXMuX2VsZW1lbnRSZWYsIHRoaXMuX2NsYXNzTmFtZXNTYW5pdGl6ZWQpO1xuICAgIHRoaXMuX2NsYXNzTmFtZXNTYW5pdGl6ZWQgPSBtYXBDbGFzc05hbWVzKHZhbHVlLCB0aGlzLmJhc2VDbGFzc2VzLCB0aGlzLm1hcHBpbmcpO1xuICAgIHRoaXMuX2NsYXNzTmFtZXMgPSB2YWx1ZTtcbiAgICBhcHBlbmRDbGFzc2VzKHRoaXMuX3JlbmRlcmVyLCB0aGlzLl9lbGVtZW50UmVmLCB0aGlzLl9jbGFzc05hbWVzU2FuaXRpemVkKTtcbiAgfVxufVxuIl19