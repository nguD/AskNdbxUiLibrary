/**
 * @fileoverview added by tsickle
 * Generated from: message/message/message.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input, ChangeDetectorRef, Output, EventEmitter } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
/** @type {?} */
const ICONS = {
    info: 'info-circle',
    error: 'exclamation-triangle',
    success: 'check-circle',
    warning: 'exclamation-circle'
};
export class NxMessageComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._context = 'regular';
        this._showIcon = false;
        this._closable = false;
        this._closeButtonLabel = 'Close dialog';
        /**
         * Event emitted when the close icon of the message has been clicked.
         */
        this.closeEvent = new EventEmitter();
    }
    /**
     * Sets the context of the message.
     * The message box will color accordingly. Default: 'regular'
     * @param {?} value
     * @return {?}
     */
    set context(value) {
        if (value !== this._context) {
            this._context = value;
            this._icon = this.getIconName();
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get context() {
        return this._context;
    }
    /**
     * Whether an icon that belongs to the context of the message should be displayed.
     *
     * **Important:** The `showIcon` attribute should always be set to `true` due to deprecation.
     *
     * @deprecated The `showIcon` attribute should be always true in future. Messages without an icon are deprecated.
     * \@deletion-target 9.0.0
     *
     * @param {?} value
     * @return {?}
     */
    set showIcon(value) {
        this._showIcon = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get showIcon() {
        return this._showIcon;
    }
    /**
     * Whether a message should have a close icon in order to be dismissed.
     * @param {?} value
     * @return {?}
     */
    set closable(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this._closable) {
            this._closable = newValue;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get closable() {
        return this._closable;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get icon() {
        return this._icon;
    }
    /**
     * Sets the label of the close button of the message.
     * @param {?} value
     * @return {?}
     */
    set closeButtonLabel(value) {
        if (value !== this._closeButtonLabel) {
            this._closeButtonLabel = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get closeButtonLabel() {
        return this._closeButtonLabel;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    _emitCloseEvent() {
        this.closeEvent.emit();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    getIconName() {
        if (this._context === 'info') {
            return ICONS.info;
        }
        else if (this._context === 'error') {
            return ICONS.error;
        }
        else if (this._context === 'success') {
            return ICONS.success;
        }
        else if (this._context === 'warning') {
            return ICONS.warning;
        }
        return '';
    }
}
NxMessageComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-message',
                template: "<nx-icon *ngIf=\"showIcon && context !== 'regular'\"\n         class=\"nx-message__icon\"\n         [name]=\"icon\"\n         size=\"s\">\n</nx-icon>\n<button\n  *ngIf=\"closable\"\n  (click)=\"_emitCloseEvent()\"\n  [attr.aria-label]=\"closeButtonLabel\"\n  tabindex=\"0\"\n  class=\"nx-message__close-icon\">\n    <nx-icon\n      name=\"close\"\n      size=\"s\"\n      aria-hidden=\"true\">\n    </nx-icon>\n</button>\n\n\n<div class=\"nx-message__content-wrapper\">\n  <div class=\"nx-message__content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'nxMessage',
                host: {
                    '[class.context-info]': 'context === "info"',
                    '[class.context-error]': 'context === "error"',
                    '[class.context-success]': 'context === "success"',
                    '[class.context-warning]': 'context === "warning"',
                    '[class.nx-message--closable]': 'closable'
                },
                styles: [":host{font-size:16px;font-size:var(--message-font-size,16px);line-height:24px;line-height:var(--message-line-height,24px);font-weight:400;font-weight:var(--message-font-weight,400);letter-spacing:0;letter-spacing:var(--message-letter-spacing,0);color:#414141;color:var(--message-text-color,#414141);border-radius:4px;border-radius:var(--message-border-radius,4px);width:100%;display:flex;align-items:flex-start;text-align:left;position:relative;border:1px solid;padding:23px;margin:12px 0}.nx-message__content-wrapper{max-width:100%}:host,:host(.context-regular){border-color:#414141;border-color:var(--message-regular-border-color,#414141);background-color:#fff;background-color:var(--message-regular-background-color,#fff)}:host(.context-info){border-color:#496ebd;border-color:var(--message-info-border-color,#496ebd);background-color:#ecf0f8;background-color:var(--message-info-background-color,#ecf0f8)}:host(.context-info) .nx-message__icon{color:#496ebd;color:var(--message-info-icon-color,#496ebd)}:host(.context-error){border-color:#dc3149;border-color:var(--message-error-border-color,#dc3149);background-color:#fbeaec;background-color:var(--message-error-background-color,#fbeaec)}:host(.context-error) .nx-message__icon{color:#dc3149;color:var(--message-error-icon-color,#dc3149)}:host(.context-success){border-color:#1e8927;border-color:var(--message-success-border-color,#1e8927);background-color:#e8f3e9;background-color:var(--message-success-background-color,#e8f3e9)}:host(.context-success) .nx-message__icon{color:#1e8927;color:var(--message-success-icon-color,#1e8927)}:host(.context-warning){border-color:#efbe25;border-color:var(--message-warning-border-color,#efbe25);background-color:#fdf8e9;background-color:var(--message-warning-background-color,#fdf8e9)}:host(.context-warning) .nx-message__icon{color:#efbe25;color:var(--message-warning-icon-color,#efbe25)}.nx-message__icon{margin-right:16px}@media (max-width:703px){:host{padding:31px;display:block}:host(.context-error) .nx-message__icon~.nx-message__content-wrapper .nx-message__content,:host(.context-info) .nx-message__icon~.nx-message__content-wrapper .nx-message__content,:host(.context-success) .nx-message__icon~.nx-message__content-wrapper .nx-message__content,:host(.context-warning) .nx-message__icon~.nx-message__content-wrapper .nx-message__content{display:inline;margin-left:31px}.nx-message__icon{position:absolute}}:host(.nx-message--closable){padding-right:39px}@media (max-width:703px){:host(.nx-message--closable){padding-right:31px}}.nx-message__close-icon{position:absolute;top:16px;right:16px;cursor:pointer;background-color:transparent;border:none;outline:0;padding:0;display:flex;align-items:center}.nx-message__close-icon nx-icon{color:#414141;color:var(--message-close-icon-color,#414141);font-size:16px}:host-context([data-whatinput=keyboard]) .nx-message__close-icon:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6);border-radius:4px}@media screen and (-ms-high-contrast:active){:host(.context-error) .nx-message__icon,:host(.context-info) .nx-message__icon,:host(.context-success) .nx-message__icon,:host(.context-warning) .nx-message__icon{color:windowText}:host-context([data-whatinput=keyboard]) .nx-message__close-icon:focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}}"]
            }] }
];
/** @nocollapse */
NxMessageComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NxMessageComponent.propDecorators = {
    context: [{ type: Input, args: ['nxContext',] }],
    showIcon: [{ type: Input }],
    closable: [{ type: Input }],
    closeButtonLabel: [{ type: Input }],
    closeEvent: [{ type: Output, args: ['close',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxMessageComponent.prototype._context;
    /**
     * @type {?}
     * @private
     */
    NxMessageComponent.prototype._showIcon;
    /**
     * @type {?}
     * @private
     */
    NxMessageComponent.prototype._closable;
    /**
     * @type {?}
     * @private
     */
    NxMessageComponent.prototype._icon;
    /**
     * @type {?}
     * @private
     */
    NxMessageComponent.prototype._closeButtonLabel;
    /**
     * Event emitted when the close icon of the message has been clicked.
     * @type {?}
     */
    NxMessageComponent.prototype.closeEvent;
    /**
     * @type {?}
     * @private
     */
    NxMessageComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,