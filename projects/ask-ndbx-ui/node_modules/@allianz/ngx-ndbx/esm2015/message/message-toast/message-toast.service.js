/**
 * @fileoverview added by tsickle
 * Generated from: message/message-toast/message-toast.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, InjectionToken, Inject, Optional, SkipSelf } from '@angular/core';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';
import { NxMessageToastComponent } from './message-toast.component';
import { NxMessageToastConfig, NxMessageToastData } from './message-toast-config';
import { NxMessageToastRef } from './message-toast-ref';
import { LiveAnnouncer } from '@angular/cdk/a11y';
import { NxMessageModule } from '../message.module';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "@angular/cdk/a11y";
import * as i3 from "../message.module";
/**
 * Injection token that can be used to specify default message toast.
 * @type {?}
 */
export const NX_MESSAGE_TOAST_DEFAULT_CONFIG = new InjectionToken('NX_MESSAGE_TOAST_DEFAULT_CONFIG');
/**
 * A service for dispatching and displaying toast messages.
 */
export class NxMessageToastService {
    /**
     * @param {?} _overlay
     * @param {?} _injector
     * @param {?} _live
     * @param {?} _parentMessageToastService
     * @param {?} _defaultConfig
     */
    constructor(_overlay, _injector, _live, _parentMessageToastService, _defaultConfig) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._live = _live;
        this._parentMessageToastService = _parentMessageToastService;
        this._defaultConfig = _defaultConfig;
        /**
         * Reference to the current message toast in the view *at this level* (in the Angular injector tree).
         * If there is a parent message toast service, all operations should delegate to that parent
         * via `_oldToastMessageRef`.
         */
        this._toastRefAtThisLevel = null;
    }
    /**
     * Reference to the currently opened message toastat *any* level.
     * @return {?}
     */
    get _oldToastMessageRef() {
        /** @type {?} */
        const parent = this._parentMessageToastService;
        return parent ? parent._oldToastMessageRef : this._toastRefAtThisLevel;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set _oldToastMessageRef(value) {
        if (this._parentMessageToastService) {
            this._parentMessageToastService._oldToastMessageRef = value;
        }
        else {
            this._toastRefAtThisLevel = value;
        }
    }
    /**
     * Creates and dispatches a message toastwith a custom text.
     *
     * @param {?} text Text to be used for the message toast.
     * @param {?=} config Extra configuration for the message toast.
     * @return {?}
     */
    open(text, config) {
        /** @type {?} */
        const currentConfig = Object.assign({}, new NxMessageToastConfig(), this._defaultConfig, config);
        /** @type {?} */
        const overlayRef = this._createOverlay(currentConfig);
        /** @type {?} */
        const injector = this._createInjector(currentConfig, new NxMessageToastData(text), this._injector);
        /** @type {?} */
        const componentPortal = new ComponentPortal(NxMessageToastComponent, undefined, injector);
        /** @type {?} */
        const componentRef = overlayRef.attach(componentPortal);
        /** @type {?} */
        const toastRef = new NxMessageToastRef(componentRef.instance, overlayRef);
        this._animateToast(toastRef, currentConfig);
        this._oldToastMessageRef = toastRef;
        return this._oldToastMessageRef;
    }
    /**
     * Creates and dispatches a message toastwith a custom template for the content.
     *
     * @param {?} template Template to be used for the message toast.
     * @param {?=} config Extra configuration for the message toast.
     * @return {?}
     */
    openFromTemplate(template, config) {
        /** @type {?} */
        const currentConfig = Object.assign({}, new NxMessageToastConfig(), this._defaultConfig, config);
        /** @type {?} */
        const overlayRef = this._createOverlay(currentConfig);
        /** @type {?} */
        const container = this._attachToastComponent(overlayRef, currentConfig);
        /** @type {?} */
        const toastRef = new NxMessageToastRef(container, overlayRef);
        /** @type {?} */
        const portal = new TemplatePortal(template, (/** @type {?} */ (null)), toastRef);
        container.attachTemplatePortal(portal);
        this._animateToast(toastRef, currentConfig);
        this._oldToastMessageRef = toastRef;
        return this._oldToastMessageRef;
    }
    // Attaches the message toastcontainer component to the overlay.
    /**
     * @private
     * @param {?} overlayRef
     * @param {?} config
     * @return {?}
     */
    _attachToastComponent(overlayRef, config) {
        /** @type {?} */
        const injector = this._createInjector(config, null, this._injector);
        /** @type {?} */
        const containerPortal = new ComponentPortal(NxMessageToastComponent, null, injector);
        /** @type {?} */
        const containerRef = overlayRef.attach(containerPortal);
        containerRef.instance.config = config;
        return containerRef.instance;
    }
    // Creates a new overlay and places it in the correct place.
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    _createOverlay(config) {
        /** @type {?} */
        const overlayConfig = new OverlayConfig();
        /** @type {?} */
        const positionStrategy = this._overlay.position().global();
        positionStrategy.bottom('0');
        positionStrategy.centerHorizontally();
        overlayConfig.positionStrategy = positionStrategy;
        return this._overlay.create(overlayConfig);
    }
    /**
     * Animates the old message toastout and the new one in.
     * @private
     * @param {?} toastRef
     * @param {?} config
     * @return {?}
     */
    _animateToast(toastRef, config) {
        // When the message toastis dismissed, clear the reference to it.
        toastRef.afterDismissed().subscribe((/**
         * @return {?}
         */
        () => {
            // Clear the message toastref if it hasn't already been replaced by a newer message toast.
            if (this._oldToastMessageRef === toastRef) {
                this._oldToastMessageRef = null;
            }
            if (config.announcementMessage) {
                this._live.clear();
            }
        }));
        if (this._oldToastMessageRef) {
            // If a message toastis opened, dismiss it and enter the
            // new message toastafter exit animation is complete.
            this._oldToastMessageRef.afterDismissed().subscribe((/**
             * @return {?}
             */
            () => {
                toastRef.toastInstance.enter();
            }));
            this._oldToastMessageRef.dismiss();
        }
        else {
            // If no message toastis in view, enter the message toast.
            toastRef.toastInstance.enter();
        }
        // If a message toastduration is provided, set up dismiss based on after the message toastis opened.
        if (config.duration && config.duration > 0) {
            toastRef.afterOpened().subscribe((/**
             * @return {?}
             */
            () => toastRef._dismissAfter((/** @type {?} */ (config.duration)))));
        }
        if (config.announcementMessage) {
            this._live.announce(config.announcementMessage, config.politeness);
        }
    }
    /**
     * @private
     * @param {?} config
     * @param {?} data
     * @param {?} injector
     * @return {?}
     */
    _createInjector(config, data, injector) {
        /** @type {?} */
        const tokens = new WeakMap();
        tokens.set(NxMessageToastConfig, config);
        tokens.set(NxMessageToastData, data);
        return new PortalInjector(injector, tokens);
    }
    /**
     * Dismisses the currently visible message toast.
     * @return {?}
     */
    dismiss() {
        if (this._oldToastMessageRef) {
            this._oldToastMessageRef.dismiss();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._toastRefAtThisLevel) {
            this._toastRefAtThisLevel.dismiss();
        }
    }
}
NxMessageToastService.decorators = [
    { type: Injectable, args: [{ providedIn: NxMessageModule },] }
];
/** @nocollapse */
NxMessageToastService.ctorParameters = () => [
    { type: Overlay },
    { type: Injector },
    { type: LiveAnnouncer },
    { type: NxMessageToastService, decorators: [{ type: Optional }, { type: SkipSelf }] },
    { type: NxMessageToastConfig, decorators: [{ type: Optional }, { type: Inject, args: [NX_MESSAGE_TOAST_DEFAULT_CONFIG,] }] }
];
/** @nocollapse */ NxMessageToastService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NxMessageToastService_Factory() { return new NxMessageToastService(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(NxMessageToastService, 12), i0.ɵɵinject(NX_MESSAGE_TOAST_DEFAULT_CONFIG, 8)); }, token: NxMessageToastService, providedIn: i3.NxMessageModule });
if (false) {
    /**
     * Reference to the current message toast in the view *at this level* (in the Angular injector tree).
     * If there is a parent message toast service, all operations should delegate to that parent
     * via `_oldToastMessageRef`.
     * @type {?}
     * @private
     */
    NxMessageToastService.prototype._toastRefAtThisLevel;
    /**
     * @type {?}
     * @private
     */
    NxMessageToastService.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    NxMessageToastService.prototype._injector;
    /**
     * @type {?}
     * @private
     */
    NxMessageToastService.prototype._live;
    /**
     * @type {?}
     * @private
     */
    NxMessageToastService.prototype._parentMessageToastService;
    /**
     * @type {?}
     * @private
     */
    NxMessageToastService.prototype._defaultConfig;
}
//# sourceMappingURL=data:application/json;base64,