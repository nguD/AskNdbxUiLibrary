/**
 * @fileoverview added by tsickle
 * Generated from: message/message-toast/message-toast.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, NgZone, ChangeDetectorRef } from '@angular/core';
import { messageToastAnimations } from './message-toast-animations';
import { BasePortalOutlet, CdkPortalOutlet } from '@angular/cdk/portal';
import { Subject } from 'rxjs';
import { NxMessageToastConfig, NxMessageToastData } from './message-toast-config';
import { take } from 'rxjs/operators';
/** @type {?} */
const ICONS = {
    info: 'info-circle',
    success: 'check-circle',
};
/**
 * Internal component that wraps user-provided message toastcontent.
 * \@docs-private
 */
export class NxMessageToastComponent extends BasePortalOutlet {
    /**
     * @param {?} _ngZone
     * @param {?} _changeDetectorRef
     * @param {?} config
     * @param {?=} data
     */
    constructor(_ngZone, _changeDetectorRef, config, data) {
        super();
        this._ngZone = _ngZone;
        this._changeDetectorRef = _changeDetectorRef;
        this.config = config;
        this.data = data;
        /**
         * Whether the component has been destroyed.
         */
        this._destroyed = false;
        /**
         * Subject for notifying that the message toasthas exited from view.
         */
        this._onExit = new Subject();
        /**
         * Subject for notifying that the message toasthas finished entering the view.
         */
        this._onEnter = new Subject();
        /**
         * The state of the message toastanimations.
         */
        this._animationState = 'void';
        this._context = this.config.context;
        this._setAriaLabels();
    }
    /**
     * Attach a component portal as content to this message toastcontainer.
     * @template T
     * @param {?} portal
     * @return {?}
     */
    attachComponentPortal(portal) {
        this._assertNotAttached();
        return this._portalOutlet.attachComponentPortal(portal);
    }
    /**
     * Attach a template portal as content to this message toastcontainer.
     * @template C
     * @param {?} portal
     * @return {?}
     */
    attachTemplatePortal(portal) {
        this._assertNotAttached();
        return this._portalOutlet.attachTemplatePortal(portal);
    }
    /**
     * Handle end of animations, updating the state of the notification.
     * @param {?} event
     * @return {?}
     */
    onAnimationEnd(event) {
        const { fromState, toState } = event;
        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {
            this._completeExit();
        }
        if (toState === 'visible') {
            // Note: we shouldn't use `this` inside the zone callback,
            // because it can cause a memory leak.
            /** @type {?} */
            const onEnter = this._onEnter;
            this._ngZone.run((/**
             * @return {?}
             */
            () => {
                onEnter.next();
                onEnter.complete();
            }));
        }
    }
    /**
     * Begin animation of message toastentrance into view.
     * @return {?}
     */
    enter() {
        if (!this._destroyed) {
            this._animationState = 'visible';
            this._changeDetectorRef.detectChanges();
        }
    }
    /**
     * Begin animation of the message toastexiting from view.
     * @return {?}
     */
    exit() {
        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case
        // where multiple notifications are opened in quick succession (e.g. two consecutive calls to
        // `NxMessageToastService.open`).
        this._animationState = 'hidden';
    }
    /**
     * Makes sure the exit callbacks have been invoked when the element is destroyed.
     * @return {?}
     */
    ngOnDestroy() {
        this._destroyed = true;
        this._completeExit();
    }
    /**
     * Waits for the zone to settle before removing the element. Helps prevent
     * errors where we end up removing an element which is in the middle of an animation.
     * @private
     * @return {?}
     */
    _completeExit() {
        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe((/**
         * @return {?}
         */
        () => {
            this._onExit.next();
            this._onExit.complete();
        }));
    }
    /**
     * Asserts that no content is already attached to the container.
     * @private
     * @return {?}
     */
    _assertNotAttached() {
        if (this._portalOutlet.hasAttached()) {
            throw Error('Attempting to attach message toastcontent after content is already attached');
        }
    }
    /**
     * @return {?}
     */
    _getIconName() {
        return this._context === 'success' ? ICONS.success : ICONS.info;
    }
    /**
     * @return {?}
     */
    _setAriaLabels() {
        // Based on the ARIA spec, `alert` and `status` roles have an
        // implicit `assertive` and `polite` politeness respectively.
        if (this.config.politeness === 'assertive' && !this.config.announcementMessage) {
            this._role = 'alert';
        }
        else if (this.config.politeness === 'off') {
            this._role = null;
        }
        else {
            this._role = 'status';
        }
    }
}
NxMessageToastComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-message-toast',
                template: "<nx-icon class=\"nx-message__icon\" [name]=\"_getIconName()\" size=\"s\">\n</nx-icon>\n\n<div class=\"nx-message__content-wrapper\">\n    <!-- Used when opening from a template -->\n    <ng-template cdkPortalOutlet></ng-template>\n    <!-- Used when opening only with custom text-->\n    <ng-container *ngIf=\"data\">{{data.data}}</ng-container>\n</div>\n",
                host: {
                    '[attr.role]': '_role',
                    '[class.context-info]': '_context === "info"',
                    '[class.context-success]': '_context === "success"',
                    '[@state]': '_animationState',
                    '(@state.done)': 'onAnimationEnd($event)'
                },
                animations: [messageToastAnimations.toastState],
                styles: [":host{font-size:16px;font-size:var(--message-font-size,16px);line-height:24px;line-height:var(--message-line-height,24px);font-weight:400;font-weight:var(--message-font-weight,400);letter-spacing:0;letter-spacing:var(--message-letter-spacing,0);color:#414141;color:var(--message-text-color,#414141);border-radius:4px;border-radius:var(--message-border-radius,4px);width:100%;display:flex;align-items:flex-start;text-align:left;position:relative;border:1px solid;padding:23px 23px 23px 63px;margin:12px 0;box-shadow:0 2px 4px rgba(65,65,65,.5);box-shadow:var(--message-box-shadow,0 2px 4px rgba(65,65,65,.5));max-width:352px}@media (max-width:703px){:host{padding:23px 23px 23px 63px;display:block}}:host(.context-info){border-color:#496ebd;border-color:var(--message-info-border-color,#496ebd);background-color:#ecf0f8;background-color:var(--message-info-background-color,#ecf0f8)}:host(.context-info) .nx-message__icon{color:#496ebd;color:var(--message-info-icon-color,#496ebd)}:host(.context-success){border-color:#1e8927;border-color:var(--message-success-border-color,#1e8927);background-color:#e8f3e9;background-color:var(--message-success-background-color,#e8f3e9)}:host(.context-success) .nx-message__icon{color:#1e8927;color:var(--message-success-icon-color,#1e8927)}@media screen and (-ms-high-contrast:active){:host(.context-info) .nx-message__icon,:host(.context-success) .nx-message__icon{color:windowText}}.nx-message__icon{position:absolute;top:23px;left:23px}"]
            }] }
];
/** @nocollapse */
NxMessageToastComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ChangeDetectorRef },
    { type: NxMessageToastConfig },
    { type: NxMessageToastData }
];
NxMessageToastComponent.propDecorators = {
    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]
};
if (false) {
    /**
     * Whether the component has been destroyed.
     * @type {?}
     * @private
     */
    NxMessageToastComponent.prototype._destroyed;
    /**
     * The portal outlet inside of this container into which the message toastcontent will be loaded.
     * @type {?}
     */
    NxMessageToastComponent.prototype._portalOutlet;
    /**
     * Subject for notifying that the message toasthas exited from view.
     * @type {?}
     */
    NxMessageToastComponent.prototype._onExit;
    /**
     * Subject for notifying that the message toasthas finished entering the view.
     * @type {?}
     */
    NxMessageToastComponent.prototype._onEnter;
    /**
     * The state of the message toastanimations.
     * @type {?}
     */
    NxMessageToastComponent.prototype._animationState;
    /**
     * ARIA role for the message toastcontainer.
     * @type {?}
     */
    NxMessageToastComponent.prototype._role;
    /** @type {?} */
    NxMessageToastComponent.prototype._context;
    /**
     * @type {?}
     * @private
     */
    NxMessageToastComponent.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    NxMessageToastComponent.prototype._changeDetectorRef;
    /**
     * The message toastconfiguration.
     * @type {?}
     */
    NxMessageToastComponent.prototype.config;
    /**
     * Injected data into the notifciation.
     * @type {?}
     */
    NxMessageToastComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,