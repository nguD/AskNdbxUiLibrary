/**
 * @fileoverview added by tsickle
 * Generated from: message/message-toast/message-toast-config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Configuration used when opening a message toast.
 */
export class NxMessageToastConfig {
    constructor() {
        /**
         * The politeness level for the LiveAnnouncer announcement.
         *
         *  Default value: 'polite'.
         */
        this.politeness = 'polite';
        /**
         * Message to be announced by the LiveAnnouncer. When opening a toast message without a custom
         * component or template, the announcement message will default to the specified message.
         *
         * Default value: ''.
         */
        this.announcementMessage = '';
        /**
         * The length of time in milliseconds to wait before automatically dismissing the message toast.
         *
         * Default value: 3000.
         */
        this.duration = 3000;
        /**
         * Context of the message toast.
         *
         * Default value: 'info'.
         */
        this.context = 'info';
    }
}
if (false) {
    /**
     * The politeness level for the LiveAnnouncer announcement.
     *
     *  Default value: 'polite'.
     * @type {?}
     */
    NxMessageToastConfig.prototype.politeness;
    /**
     * Message to be announced by the LiveAnnouncer. When opening a toast message without a custom
     * component or template, the announcement message will default to the specified message.
     *
     * Default value: ''.
     * @type {?}
     */
    NxMessageToastConfig.prototype.announcementMessage;
    /**
     * The length of time in milliseconds to wait before automatically dismissing the message toast.
     *
     * Default value: 3000.
     * @type {?}
     */
    NxMessageToastConfig.prototype.duration;
    /**
     * Context of the message toast.
     *
     * Default value: 'info'.
     * @type {?}
     */
    NxMessageToastConfig.prototype.context;
}
/**
 * \@docs-private
 * Needed so that the user text data can be injected in the message toastcomponent
 */
export class NxMessageToastData {
    /**
     * @param {?} data
     */
    constructor(data) {
        this.data = data;
    }
}
if (false) {
    /** @type {?} */
    NxMessageToastData.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS10b2FzdC1jb25maWcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbIm1lc3NhZ2UvbWVzc2FnZS10b2FzdC9tZXNzYWdlLXRvYXN0LWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQVNBLE1BQU0sT0FBTyxvQkFBb0I7SUFBakM7Ozs7OztRQUtFLGVBQVUsR0FBd0IsUUFBUSxDQUFDOzs7Ozs7O1FBUTNDLHdCQUFtQixHQUFZLEVBQUUsQ0FBQzs7Ozs7O1FBTWxDLGFBQVEsR0FBWSxJQUFJLENBQUM7Ozs7OztRQUt6QixZQUFPLEdBQTJCLE1BQU0sQ0FBQztJQUMzQyxDQUFDO0NBQUE7Ozs7Ozs7O0lBcEJDLDBDQUEyQzs7Ozs7Ozs7SUFRM0MsbURBQWtDOzs7Ozs7O0lBTWxDLHdDQUF5Qjs7Ozs7OztJQUt6Qix1Q0FBeUM7Ozs7OztBQU8zQyxNQUFNLE9BQU8sa0JBQWtCOzs7O0lBQzdCLFlBQW1CLElBQVk7UUFBWixTQUFJLEdBQUosSUFBSSxDQUFRO0lBQUksQ0FBQztDQUNyQzs7O0lBRGEsa0NBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBBcmlhTGl2ZVBvbGl0ZW5lc3MgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5cbi8qKiBUaGUgY29udGV4dHVhbCB0eXBlIG9mIGEgbWVzc2FnZS4gKi9cbmV4cG9ydCB0eXBlIE54TWVzc2FnZVRvYXN0Q29udGV4dCA9ICdpbmZvJyB8ICdzdWNjZXNzJztcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIHVzZWQgd2hlbiBvcGVuaW5nIGEgbWVzc2FnZSB0b2FzdC5cbiAqL1xuZXhwb3J0IGNsYXNzIE54TWVzc2FnZVRvYXN0Q29uZmlnIHtcbiAgLyoqIFRoZSBwb2xpdGVuZXNzIGxldmVsIGZvciB0aGUgTGl2ZUFubm91bmNlciBhbm5vdW5jZW1lbnQuXG4gICAqXG4gICAqICBEZWZhdWx0IHZhbHVlOiAncG9saXRlJy5cbiAgICovXG4gIHBvbGl0ZW5lc3M/OiBBcmlhTGl2ZVBvbGl0ZW5lc3MgPSAncG9saXRlJztcblxuICAvKipcbiAgICogTWVzc2FnZSB0byBiZSBhbm5vdW5jZWQgYnkgdGhlIExpdmVBbm5vdW5jZXIuIFdoZW4gb3BlbmluZyBhIHRvYXN0IG1lc3NhZ2Ugd2l0aG91dCBhIGN1c3RvbVxuICAgKiBjb21wb25lbnQgb3IgdGVtcGxhdGUsIHRoZSBhbm5vdW5jZW1lbnQgbWVzc2FnZSB3aWxsIGRlZmF1bHQgdG8gdGhlIHNwZWNpZmllZCBtZXNzYWdlLlxuICAgKlxuICAgKiBEZWZhdWx0IHZhbHVlOiAnJy5cbiAgICovXG4gIGFubm91bmNlbWVudE1lc3NhZ2U/OiBzdHJpbmcgPSAnJztcblxuICAvKiogVGhlIGxlbmd0aCBvZiB0aW1lIGluIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBhdXRvbWF0aWNhbGx5IGRpc21pc3NpbmcgdGhlIG1lc3NhZ2UgdG9hc3QuXG4gICAqXG4gICAqIERlZmF1bHQgdmFsdWU6IDMwMDAuXG4gICAqL1xuICBkdXJhdGlvbj86IG51bWJlciA9IDMwMDA7XG5cbiAgLyoqIENvbnRleHQgb2YgdGhlIG1lc3NhZ2UgdG9hc3QuXG4gICAqXG4gICAqIERlZmF1bHQgdmFsdWU6ICdpbmZvJy4gKi9cbiAgY29udGV4dD86IE54TWVzc2FnZVRvYXN0Q29udGV4dCA9ICdpbmZvJztcbn1cblxuLyoqXG4gKiBAZG9jcy1wcml2YXRlXG4gKiBOZWVkZWQgc28gdGhhdCB0aGUgdXNlciB0ZXh0IGRhdGEgY2FuIGJlIGluamVjdGVkIGluIHRoZSBtZXNzYWdlIHRvYXN0Y29tcG9uZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBOeE1lc3NhZ2VUb2FzdERhdGEge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgZGF0YTogc3RyaW5nKSB7IH1cbn1cbiJdfQ==