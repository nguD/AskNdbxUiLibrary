/**
 * @fileoverview added by tsickle
 * Generated from: natural-language-form/natural-language-form.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, HostListener, Input, QueryList, } from '@angular/core';
import { merge, Subject, Subscription } from 'rxjs';
import { delay, throttleTime } from 'rxjs/operators';
import { NxWordComponent } from './word.component';
/** @type {?} */
const DEFAULT_SIZE = 'large';
export class NxNaturalLanguageFormComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._negative = false;
        /**
         * \@docs-private
         */
        this.resizeEvent$ = new Subject();
        /**
         * \@docs-private
         */
        this.updatePopoversSubscription = Subscription.EMPTY;
        /**
         * \@docs-private
         */
        this._size = DEFAULT_SIZE;
    }
    /**
     * Whether the negative set of stylings should be used.
     * @param {?} value
     * @return {?}
     */
    set negative(value) {
        this._negative = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get negative() {
        return this._negative;
    }
    /**
     * Sets the size of the NLF. Default value: large
     * @param {?} value
     * @return {?}
     */
    set size(value) {
        this._size = value;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get size() {
        return this._size;
    }
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.resizeEvent$.next();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // Collect all words and listen for changes so we can update any open error popover
        // which would otherwise get wrongly positioned.
        /** @type {?} */
        const subjects = this._words.map((/**
         * @param {?} word
         * @return {?}
         */
        (word) => word.inputChanges));
        /** @type {?} */
        const source = merge(...subjects);
        this.updatePopoversSubscription = source.subscribe((/**
         * @return {?}
         */
        () => {
            this.updatePositionPopovers();
        }));
        this.resizeObservable = this.resizeEvent$.pipe(throttleTime(500), delay(100));
        this.resizeObservable.subscribe((/**
         * @return {?}
         */
        () => this.resizeWords()));
    }
    /**
     * \@docs-private
     * @return {?}
     */
    resizeWords() {
        this._words.forEach((/**
         * @param {?} word
         * @return {?}
         */
        (word) => {
            word.updateCurrentTextWidth();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.updatePopoversSubscription.unsubscribe();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    updatePositionPopovers() {
        if (this._words) {
            this._words.forEach((/**
             * @param {?} word
             * @return {?}
             */
            (word) => {
                word.repositionError();
            }));
        }
    }
}
NxNaturalLanguageFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-natural-language-form',
                template: "<div class=\"nx-natural-language-form__wrapper\">\n    <ng-content></ng-content>\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class.is-negative]': 'negative',
                    '[class.nx-natural-language-form--small]': 'size === "small"',
                    '[class.nx-natural-language-form--large]': 'size === "large"',
                },
                styles: [":host{display:block;font-size:40px;font-size:var(--natural-language-form-large-font-size,40px);line-height:52px;line-height:var(--natural-language-form-large-line-height,52px);font-weight:300;font-weight:var(--natural-language-form-large-font-weight,300);letter-spacing:.3px;letter-spacing:var(--natural-language-form-large-letter-spacing,.3px);color:#414141;color:var(--natural-language-form-text-color,#414141);padding-top:72px;padding-bottom:80px}:host ::ng-deep .c-input{font-size:inherit;line-height:inherit}:host ::ng-deep nx-word+nx-word{margin-left:2px}:host.is-negative{color:#fff}@media (max-width:991px){:host{font-size:26px;font-size:var(--natural-language-form-small-font-size,26px);line-height:36px;line-height:var(--natural-language-form-small-line-height,36px);font-weight:300;font-weight:var(--natural-language-form-small-font-weight,300);letter-spacing:.3px;letter-spacing:var(--natural-language-form-small-letter-spacing,.3px)}}.nx-natural-language-form__wrapper{display:flex;flex-wrap:wrap}.nx-natural-language-form__wrapper>::ng-deep *{margin-bottom:8px}:host(.nx-natural-language-form--small){font-size:26px;font-size:var(--natural-language-form-small-font-size,26px);line-height:36px;line-height:var(--natural-language-form-small-line-height,36px);font-weight:300;font-weight:var(--natural-language-form-small-font-weight,300);letter-spacing:.3px;letter-spacing:var(--natural-language-form-small-letter-spacing,.3px)}:host(.nx-natural-language-form--small) ::ng-deep .c-input{font-size:inherit;line-height:inherit}"]
            }] }
];
/** @nocollapse */
NxNaturalLanguageFormComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NxNaturalLanguageFormComponent.propDecorators = {
    _words: [{ type: ContentChildren, args: [NxWordComponent,] }],
    negative: [{ type: Input, args: ['nxNegative',] }],
    size: [{ type: Input }],
    onResize: [{ type: HostListener, args: ['window:orientationchange', ['$event'],] }, { type: HostListener, args: ['window:resize', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxNaturalLanguageFormComponent.prototype._negative;
    /**
     * \@docs-private
     * @type {?}
     */
    NxNaturalLanguageFormComponent.prototype.resizeEvent$;
    /**
     * \@docs-private
     * @type {?}
     */
    NxNaturalLanguageFormComponent.prototype.resizeObservable;
    /** @type {?} */
    NxNaturalLanguageFormComponent.prototype._words;
    /**
     * \@docs-private
     * @type {?}
     */
    NxNaturalLanguageFormComponent.prototype.updatePopoversSubscription;
    /**
     * \@docs-private
     * @type {?}
     * @private
     */
    NxNaturalLanguageFormComponent.prototype._size;
    /**
     * @type {?}
     * @private
     */
    NxNaturalLanguageFormComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0dXJhbC1sYW5ndWFnZS1mb3JtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4LyIsInNvdXJjZXMiOlsibmF0dXJhbC1sYW5ndWFnZS1mb3JtL25hdHVyYWwtbGFuZ3VhZ2UtZm9ybS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RCxPQUFPLEVBRUwsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsZUFBZSxFQUNmLFlBQVksRUFDWixLQUFLLEVBRUwsU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxLQUFLLEVBQWMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7TUFLN0MsWUFBWSxHQUFHLE9BQU87QUFjNUIsTUFBTSxPQUFPLDhCQUE4Qjs7OztJQXVDekMsWUFBb0Isa0JBQXFDO1FBQXJDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7UUF0Q2pELGNBQVMsR0FBRyxLQUFLLENBQUM7Ozs7UUFHMUIsaUJBQVksR0FBa0IsSUFBSSxPQUFPLEVBQVEsQ0FBQzs7OztRQVFsRCwrQkFBMEIsR0FBaUIsWUFBWSxDQUFDLEtBQUssQ0FBQzs7OztRQUd0RCxVQUFLLEdBQThCLFlBQVksQ0FBQztJQXdCSyxDQUFDOzs7Ozs7SUFyQjlELElBQ0ksUUFBUSxDQUFDLEtBQUs7UUFDaEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDOzs7O0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7Ozs7OztJQUtELElBQ0ksSUFBSSxDQUFDLEtBQWdDO1FBQ3ZDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN6QyxDQUFDOzs7O0lBQ0QsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7Ozs7OztJQU9ELFFBQVEsQ0FBQyxLQUFLO1FBQ1osSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7O0lBRUQsa0JBQWtCOzs7O2NBR1YsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRzs7OztRQUFDLENBQUMsSUFBcUIsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBQzs7Y0FDeEUsTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUVqQyxJQUFJLENBQUMsMEJBQTBCLEdBQUcsTUFBTSxDQUFDLFNBQVM7OztRQUFFLEdBQUcsRUFBRTtZQUN2RCxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUNoQyxDQUFDLEVBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDOUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVM7OztRQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBQyxDQUFDO0lBQzVELENBQUM7Ozs7O0lBR0QsV0FBVztRQUNULElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTzs7OztRQUFDLENBQUMsSUFBcUIsRUFBRSxFQUFFO1lBQzVDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBQ2hDLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsMEJBQTBCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDaEQsQ0FBQzs7Ozs7SUFHRCxzQkFBc0I7UUFDcEIsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPOzs7O1lBQUMsQ0FBQyxJQUFxQixFQUFFLEVBQUU7Z0JBQzVDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUN6QixDQUFDLEVBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7O1lBNUZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsMEJBQTBCO2dCQUNwQyxvR0FBbUQ7Z0JBQ25ELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUUvQyxJQUFJLEVBQUU7b0JBQ0oscUJBQXFCLEVBQUUsVUFBVTtvQkFDakMseUNBQXlDLEVBQUcsa0JBQWtCO29CQUM5RCx5Q0FBeUMsRUFBRyxrQkFBa0I7aUJBQy9EOzthQUNGOzs7O1lBNUJDLGlCQUFpQjs7O3FCQXVDaEIsZUFBZSxTQUFDLGVBQWU7dUJBUy9CLEtBQUssU0FBQyxZQUFZO21CQVlsQixLQUFLO3VCQVlMLFlBQVksU0FBQywwQkFBMEIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxjQUNuRCxZQUFZLFNBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDOzs7Ozs7O0lBMUN6QyxtREFBMEI7Ozs7O0lBRzFCLHNEQUFrRDs7Ozs7SUFHbEQsMERBQW1DOztJQUVuQyxnREFBcUU7Ozs7O0lBR3JFLG9FQUE4RDs7Ozs7O0lBRzlELCtDQUF3RDs7Ozs7SUF3QjVDLDREQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIFF1ZXJ5TGlzdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBtZXJnZSwgT2JzZXJ2YWJsZSwgU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkZWxheSwgdGhyb3R0bGVUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBOeFdvcmRDb21wb25lbnQgfSBmcm9tICcuL3dvcmQuY29tcG9uZW50JztcblxuLyoqIFNpemUgb2YgdGhlIE5MRi4gKi9cbmV4cG9ydCB0eXBlIE54TmF0dXJhbExhbmd1YWdlRm9ybVNpemUgPSAnc21hbGwnIHwgJ2xhcmdlJztcblxuY29uc3QgREVGQVVMVF9TSVpFID0gJ2xhcmdlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbngtbmF0dXJhbC1sYW5ndWFnZS1mb3JtJyxcbiAgdGVtcGxhdGVVcmw6ICduYXR1cmFsLWxhbmd1YWdlLWZvcm0uY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3R5bGVVcmxzOiBbJ25hdHVyYWwtbGFuZ3VhZ2UtZm9ybS5zY3NzJ10sXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLmlzLW5lZ2F0aXZlXSc6ICduZWdhdGl2ZScsXG4gICAgJ1tjbGFzcy5ueC1uYXR1cmFsLWxhbmd1YWdlLWZvcm0tLXNtYWxsXScgOiAnc2l6ZSA9PT0gXCJzbWFsbFwiJyxcbiAgICAnW2NsYXNzLm54LW5hdHVyYWwtbGFuZ3VhZ2UtZm9ybS0tbGFyZ2VdJyA6ICdzaXplID09PSBcImxhcmdlXCInLFxuICB9XG59KVxuXG5leHBvcnQgY2xhc3MgTnhOYXR1cmFsTGFuZ3VhZ2VGb3JtQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBfbmVnYXRpdmUgPSBmYWxzZTtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICByZXNpemVFdmVudCQ6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIHJlc2l6ZU9ic2VydmFibGU6IE9ic2VydmFibGU8dm9pZD47XG5cbiAgQENvbnRlbnRDaGlsZHJlbihOeFdvcmRDb21wb25lbnQpIF93b3JkczogUXVlcnlMaXN0PE54V29yZENvbXBvbmVudD47XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgdXBkYXRlUG9wb3ZlcnNTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBwcml2YXRlIF9zaXplOiBOeE5hdHVyYWxMYW5ndWFnZUZvcm1TaXplID0gREVGQVVMVF9TSVpFO1xuXG4gIC8qKiBXaGV0aGVyIHRoZSBuZWdhdGl2ZSBzZXQgb2Ygc3R5bGluZ3Mgc2hvdWxkIGJlIHVzZWQuICovXG4gIEBJbnB1dCgnbnhOZWdhdGl2ZScpXG4gIHNldCBuZWdhdGl2ZSh2YWx1ZSkge1xuICAgIHRoaXMuX25lZ2F0aXZlID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgfVxuXG4gIGdldCBuZWdhdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbmVnYXRpdmU7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgc2l6ZSBvZiB0aGUgTkxGLiBEZWZhdWx0IHZhbHVlOiBsYXJnZVxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IHNpemUodmFsdWU6IE54TmF0dXJhbExhbmd1YWdlRm9ybVNpemUpIHtcbiAgICB0aGlzLl9zaXplID0gdmFsdWU7XG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cbiAgZ2V0IHNpemUoKTogTnhOYXR1cmFsTGFuZ3VhZ2VGb3JtU2l6ZSB7XG4gICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHsgfVxuXG4gIC8qKiBAZG9jcy1wcml2YXRlICovXG4gIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpvcmllbnRhdGlvbmNoYW5nZScsIFsnJGV2ZW50J10pXG4gIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpyZXNpemUnLCBbJyRldmVudCddKVxuICBvblJlc2l6ZShldmVudCkge1xuICAgIHRoaXMucmVzaXplRXZlbnQkLm5leHQoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAvLyBDb2xsZWN0IGFsbCB3b3JkcyBhbmQgbGlzdGVuIGZvciBjaGFuZ2VzIHNvIHdlIGNhbiB1cGRhdGUgYW55IG9wZW4gZXJyb3IgcG9wb3ZlclxuICAgIC8vIHdoaWNoIHdvdWxkIG90aGVyd2lzZSBnZXQgd3JvbmdseSBwb3NpdGlvbmVkLlxuICAgIGNvbnN0IHN1YmplY3RzID0gdGhpcy5fd29yZHMubWFwKCh3b3JkOiBOeFdvcmRDb21wb25lbnQpID0+IHdvcmQuaW5wdXRDaGFuZ2VzKTtcbiAgICBjb25zdCBzb3VyY2UgPSBtZXJnZSguLi5zdWJqZWN0cyk7XG5cbiAgICB0aGlzLnVwZGF0ZVBvcG92ZXJzU3Vic2NyaXB0aW9uID0gc291cmNlLnN1YnNjcmliZSggKCkgPT4ge1xuICAgICAgdGhpcy51cGRhdGVQb3NpdGlvblBvcG92ZXJzKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnJlc2l6ZU9ic2VydmFibGUgPSB0aGlzLnJlc2l6ZUV2ZW50JC5waXBlKHRocm90dGxlVGltZSg1MDApLCBkZWxheSgxMDApKTtcbiAgICB0aGlzLnJlc2l6ZU9ic2VydmFibGUuc3Vic2NyaWJlKCgpID0+IHRoaXMucmVzaXplV29yZHMoKSk7XG4gIH1cblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICByZXNpemVXb3JkcygpIHtcbiAgICB0aGlzLl93b3Jkcy5mb3JFYWNoKCh3b3JkOiBOeFdvcmRDb21wb25lbnQpID0+IHtcbiAgICAgIHdvcmQudXBkYXRlQ3VycmVudFRleHRXaWR0aCgpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVQb3BvdmVyc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgdXBkYXRlUG9zaXRpb25Qb3BvdmVycygpIHtcbiAgICBpZiAodGhpcy5fd29yZHMpIHtcbiAgICAgIHRoaXMuX3dvcmRzLmZvckVhY2goKHdvcmQ6IE54V29yZENvbXBvbmVudCkgPT4ge1xuICAgICAgICB3b3JkLnJlcG9zaXRpb25FcnJvcigpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=