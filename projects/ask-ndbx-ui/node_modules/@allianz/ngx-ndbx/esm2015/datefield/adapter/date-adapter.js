/**
 * @fileoverview added by tsickle
 * Generated from: adapter/date-adapter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
/**
 * \@docs-private
 * @abstract
 * @template D
 */
export class NxDateAdapter {
    constructor() {
        this.locale = 'de-DE';
        this._localeChanges = new Subject();
    }
    /**
     * @return {?}
     */
    get localeChanges() { return this._localeChanges; }
    /**
     * @param {?} value
     * @return {?}
     */
    deserialize(value) {
        if (value == null || this.isDateInstance(value) && this.isValid(value)) {
            return value;
        }
        return this.invalid();
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    sameDate(first, second) {
        if (first && second) {
            /** @type {?} */
            const firstValid = this.isValid(first);
            /** @type {?} */
            const secondValid = this.isValid(second);
            if (firstValid && secondValid) {
                return !this.compareDate(first, second);
            }
            return firstValid === secondValid;
        }
        return first === second;
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    compareDate(first, second) {
        return this.getYear(first) - this.getYear(second) ||
            this.getMonth(first) - this.getMonth(second) ||
            this.getDate(first) - this.getDate(second);
    }
    /**
     * @param {?} locale
     * @return {?}
     */
    setLocale(locale) {
        this.locale = locale;
        this._localeChanges.next(this.locale);
    }
    /**
     * @return {?}
     */
    getLocale() {
        return this.locale;
    }
    /**
     * @param {?} date
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    clampDate(date, min, max) {
        if (min && this.compareDate(date, min) < 0) {
            return min;
        }
        if (max && this.compareDate(date, max) > 0) {
            return max;
        }
        return date;
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    NxDateAdapter.prototype.locale;
    /**
     * @type {?}
     * @protected
     */
    NxDateAdapter.prototype._localeChanges;
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.toIso8601 = function (date) { };
    /**
     * @abstract
     * @param {?} date
     * @param {?} displayFormat
     * @return {?}
     */
    NxDateAdapter.prototype.format = function (date, displayFormat) { };
    /**
     * @abstract
     * @param {?} value
     * @param {?} format
     * @param {?} strict
     * @return {?}
     */
    NxDateAdapter.prototype.parse = function (value, format, strict) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.isValid = function (date) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.clone = function (date) { };
    /**
     * @abstract
     * @param {?} obj
     * @return {?}
     */
    NxDateAdapter.prototype.isDateInstance = function (obj) { };
    /**
     * @abstract
     * @return {?}
     */
    NxDateAdapter.prototype.invalid = function () { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getYear = function (date) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getMonth = function (date) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getDate = function (date) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getYearName = function (date) { };
    /**
     * @abstract
     * @param {?} year
     * @param {?} month
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.createDate = function (year, month, date) { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getNumDaysInMonth = function (date) { };
    /**
     * @abstract
     * @return {?}
     */
    NxDateAdapter.prototype.getDateNames = function () { };
    /**
     * @abstract
     * @param {?} date
     * @return {?}
     */
    NxDateAdapter.prototype.getDayOfWeek = function (date) { };
    /**
     * @abstract
     * @return {?}
     */
    NxDateAdapter.prototype.getFirstDayOfWeek = function () { };
    /**
     * @abstract
     * @param {?} style
     * @return {?}
     */
    NxDateAdapter.prototype.getMonthNames = function (style) { };
    /**
     * @abstract
     * @return {?}
     */
    NxDateAdapter.prototype.today = function () { };
    /**
     * @abstract
     * @param {?} date
     * @param {?} months
     * @return {?}
     */
    NxDateAdapter.prototype.addCalendarMonths = function (date, months) { };
    /**
     * @abstract
     * @param {?} date
     * @param {?} years
     * @return {?}
     */
    NxDateAdapter.prototype.addCalendarYears = function (date, years) { };
    /**
     * @abstract
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    NxDateAdapter.prototype.addCalendarDays = function (date, days) { };
    /**
     * @abstract
     * @param {?} style
     * @return {?}
     */
    NxDateAdapter.prototype.getDayOfWeekNames = function (style) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvZGF0ZWZpZWxkLyIsInNvdXJjZXMiOlsiYWRhcHRlci9kYXRlLWFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQWdCLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7Ozs7O0FBSTdDLE1BQU0sT0FBZ0IsYUFBYTtJQUFuQztRQUNZLFdBQU0sR0FBRyxPQUFPLENBQUM7UUFDakIsbUJBQWMsR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO0lBd0VuRCxDQUFDOzs7O0lBM0RDLElBQUksYUFBYSxLQUF5QixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDOzs7OztJQUV2RSxXQUFXLENBQUMsS0FBVTtRQUNwQixJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3RFLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN4QixDQUFDOzs7Ozs7SUFFRCxRQUFRLENBQUMsS0FBZSxFQUFFLE1BQWdCO1FBQ3hDLElBQUksS0FBSyxJQUFJLE1BQU0sRUFBRTs7a0JBQ2IsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDOztrQkFDaEMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1lBRXhDLElBQUksVUFBVSxJQUFJLFdBQVcsRUFBRTtnQkFDN0IsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2FBQ3pDO1lBQ0QsT0FBTyxVQUFVLEtBQUssV0FBVyxDQUFDO1NBQ25DO1FBQ0QsT0FBTyxLQUFLLEtBQUssTUFBTSxDQUFDO0lBQzFCLENBQUM7Ozs7OztJQUVELFdBQVcsQ0FBQyxLQUFRLEVBQUUsTUFBUztRQUM3QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUM1QyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakQsQ0FBQzs7Ozs7SUFFRCxTQUFTLENBQUMsTUFBYztRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7OztJQUVELFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQzs7Ozs7OztJQWVELFNBQVMsQ0FBQyxJQUFPLEVBQUUsR0FBYyxFQUFFLEdBQWM7UUFDL0MsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzFDLE9BQU8sR0FBRyxDQUFDO1NBQ1o7UUFDRCxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDMUMsT0FBTyxHQUFHLENBQUM7U0FDWjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGOzs7Ozs7SUF6RUMsK0JBQTJCOzs7OztJQUMzQix1Q0FBaUQ7Ozs7OztJQUNqRCx3REFBb0M7Ozs7Ozs7SUFDcEMsb0VBQXFEOzs7Ozs7OztJQUNyRCxxRUFBK0U7Ozs7OztJQUMvRSxzREFBbUM7Ozs7OztJQUNuQyxvREFBMkI7Ozs7OztJQUMzQiw0REFBMkM7Ozs7O0lBQzNDLGtEQUFzQjs7Ozs7O0lBRXRCLHNEQUFrQzs7Ozs7O0lBQ2xDLHVEQUFtQzs7Ozs7O0lBQ25DLHNEQUFrQzs7Ozs7O0lBdUNsQywwREFBc0M7Ozs7Ozs7O0lBQ3RDLHNFQUFrRTs7Ozs7O0lBQ2xFLGdFQUE0Qzs7Ozs7SUFDNUMsdURBQWtDOzs7Ozs7SUFDbEMsMkRBQXVDOzs7OztJQUN2Qyw0REFBcUM7Ozs7OztJQUNyQyw2REFBcUU7Ozs7O0lBQ3JFLGdEQUFvQjs7Ozs7OztJQUNwQix3RUFBdUQ7Ozs7Ozs7SUFDdkQsc0VBQXFEOzs7Ozs7O0lBQ3JELG9FQUFtRDs7Ozs7O0lBQ25ELGlFQUF5RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgLCAgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqIEBkb2NzLXByaXZhdGUgKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOeERhdGVBZGFwdGVyPEQ+IHtcbiAgcHJvdGVjdGVkIGxvY2FsZSA9ICdkZS1ERSc7XG4gIHByb3RlY3RlZCBfbG9jYWxlQ2hhbmdlcyA9IG5ldyBTdWJqZWN0PHN0cmluZz4oKTtcbiAgYWJzdHJhY3QgdG9Jc284NjAxKGRhdGU6IEQpOiBzdHJpbmc7XG4gIGFic3RyYWN0IGZvcm1hdChkYXRlOiBELCBkaXNwbGF5Rm9ybWF0OiBhbnkpOiBzdHJpbmc7XG4gIGFic3RyYWN0IHBhcnNlKHZhbHVlOiBhbnksIGZvcm1hdDogc3RyaW5nfHN0cmluZ1tdLCBzdHJpY3Q6IGJvb2xlYW4pOiBEIHwgbnVsbDtcbiAgYWJzdHJhY3QgaXNWYWxpZChkYXRlOiBEKTogYm9vbGVhbjtcbiAgYWJzdHJhY3QgY2xvbmUoZGF0ZTogRCk6IEQ7XG4gIGFic3RyYWN0IGlzRGF0ZUluc3RhbmNlKG9iajogYW55KTogYm9vbGVhbjtcbiAgYWJzdHJhY3QgaW52YWxpZCgpOiBEO1xuXG4gIGFic3RyYWN0IGdldFllYXIoZGF0ZTogRCk6IG51bWJlcjtcbiAgYWJzdHJhY3QgZ2V0TW9udGgoZGF0ZTogRCk6IG51bWJlcjtcbiAgYWJzdHJhY3QgZ2V0RGF0ZShkYXRlOiBEKTogbnVtYmVyO1xuXG4gIGdldCBsb2NhbGVDaGFuZ2VzKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7IHJldHVybiB0aGlzLl9sb2NhbGVDaGFuZ2VzOyB9XG5cbiAgZGVzZXJpYWxpemUodmFsdWU6IGFueSk6IEQgfCBudWxsIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB0aGlzLmlzRGF0ZUluc3RhbmNlKHZhbHVlKSAmJiB0aGlzLmlzVmFsaWQodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmludmFsaWQoKTtcbiAgfVxuXG4gIHNhbWVEYXRlKGZpcnN0OiBEIHwgbnVsbCwgc2Vjb25kOiBEIHwgbnVsbCk6IGJvb2xlYW4ge1xuICAgIGlmIChmaXJzdCAmJiBzZWNvbmQpIHtcbiAgICAgIGNvbnN0IGZpcnN0VmFsaWQgPSB0aGlzLmlzVmFsaWQoZmlyc3QpO1xuICAgICAgY29uc3Qgc2Vjb25kVmFsaWQgPSB0aGlzLmlzVmFsaWQoc2Vjb25kKTtcblxuICAgICAgaWYgKGZpcnN0VmFsaWQgJiYgc2Vjb25kVmFsaWQpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmNvbXBhcmVEYXRlKGZpcnN0LCBzZWNvbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZpcnN0VmFsaWQgPT09IHNlY29uZFZhbGlkO1xuICAgIH1cbiAgICByZXR1cm4gZmlyc3QgPT09IHNlY29uZDtcbiAgfVxuXG4gIGNvbXBhcmVEYXRlKGZpcnN0OiBELCBzZWNvbmQ6IEQpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmdldFllYXIoZmlyc3QpIC0gdGhpcy5nZXRZZWFyKHNlY29uZCkgfHxcbiAgICAgICAgdGhpcy5nZXRNb250aChmaXJzdCkgLSB0aGlzLmdldE1vbnRoKHNlY29uZCkgfHxcbiAgICAgICAgdGhpcy5nZXREYXRlKGZpcnN0KSAtIHRoaXMuZ2V0RGF0ZShzZWNvbmQpO1xuICB9XG5cbiAgc2V0TG9jYWxlKGxvY2FsZTogc3RyaW5nKSB7XG4gICAgdGhpcy5sb2NhbGUgPSBsb2NhbGU7XG4gICAgdGhpcy5fbG9jYWxlQ2hhbmdlcy5uZXh0KHRoaXMubG9jYWxlKTtcbiAgfVxuXG4gIGdldExvY2FsZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmxvY2FsZTtcbiAgfVxuXG4gIGFic3RyYWN0IGdldFllYXJOYW1lKGRhdGU6IEQpOiBzdHJpbmc7XG4gIGFic3RyYWN0IGNyZWF0ZURhdGUoeWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyLCBkYXRlOiBudW1iZXIpOiBEO1xuICBhYnN0cmFjdCBnZXROdW1EYXlzSW5Nb250aChkYXRlOiBEKTogbnVtYmVyO1xuICBhYnN0cmFjdCBnZXREYXRlTmFtZXMoKTogc3RyaW5nW107XG4gIGFic3RyYWN0IGdldERheU9mV2VlayhkYXRlOiBEKTogbnVtYmVyO1xuICBhYnN0cmFjdCBnZXRGaXJzdERheU9mV2VlaygpOiBudW1iZXI7XG4gIGFic3RyYWN0IGdldE1vbnRoTmFtZXMoc3R5bGU6ICdsb25nJyB8ICdzaG9ydCcgfCAnbmFycm93Jyk6IHN0cmluZ1tdO1xuICBhYnN0cmFjdCB0b2RheSgpOiBEO1xuICBhYnN0cmFjdCBhZGRDYWxlbmRhck1vbnRocyhkYXRlOiBELCBtb250aHM6IG51bWJlcik6IEQ7XG4gIGFic3RyYWN0IGFkZENhbGVuZGFyWWVhcnMoZGF0ZTogRCwgeWVhcnM6IG51bWJlcik6IEQ7XG4gIGFic3RyYWN0IGFkZENhbGVuZGFyRGF5cyhkYXRlOiBELCBkYXlzOiBudW1iZXIpOiBEO1xuICBhYnN0cmFjdCBnZXREYXlPZldlZWtOYW1lcyhzdHlsZTogJ2xvbmcnIHwgJ3Nob3J0JyB8ICduYXJyb3cnKTogc3RyaW5nW107XG5cbiAgY2xhbXBEYXRlKGRhdGU6IEQsIG1pbj86IEQgfCBudWxsLCBtYXg/OiBEIHwgbnVsbCk6IEQge1xuICAgIGlmIChtaW4gJiYgdGhpcy5jb21wYXJlRGF0ZShkYXRlLCBtaW4pIDwgMCkge1xuICAgICAgcmV0dXJuIG1pbjtcbiAgICB9XG4gICAgaWYgKG1heCAmJiB0aGlzLmNvbXBhcmVEYXRlKGRhdGUsIG1heCkgPiAwKSB7XG4gICAgICByZXR1cm4gbWF4O1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxufVxuIl19