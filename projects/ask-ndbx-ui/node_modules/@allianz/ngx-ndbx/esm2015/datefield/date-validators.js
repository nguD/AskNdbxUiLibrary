/**
 * @fileoverview added by tsickle
 * Generated from: date-validators.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Provides a set of date validators that can be used by form controls.
 * \@dynamic
 */
export class NxDateValidators {
    /**
     * The form control validator for whether the input parses.
     * @template D
     * @param {?} dateAdapter
     * @param {?} dateFormats
     * @param {?} input
     * @param {?} strict
     * @param {?=} customParseFormat
     * @return {?}
     */
    static parse(dateAdapter, dateFormats, input, strict, customParseFormat = null) {
        return (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const parsedValue = dateAdapter.parse(input.value, customParseFormat || dateFormats.parse.dateInput, strict);
            /** @type {?} */
            const valid = !parsedValue || dateAdapter.isValid(parsedValue);
            return valid ? null : { 'nxDatefieldParse': { 'text': input } };
        });
    }
    /**
     * The form control validator for the min date.
     * @template D
     * @param {?} dateAdapter
     * @param {?} min
     * @return {?}
     */
    static min(dateAdapter, min) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const controlValue = getValidDateOrNull(dateAdapter, dateAdapter.deserialize(control.value));
            return (!min || !controlValue ||
                dateAdapter.compareDate(min, controlValue) <= 0) ?
                null : { 'nxDatefieldMin': { 'min': min, 'actual': controlValue } };
        });
    }
    /**
     * The form control validator for the max date.
     * @template D
     * @param {?} dateAdapter
     * @param {?} max
     * @return {?}
     */
    static max(dateAdapter, max) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const controlValue = getValidDateOrNull(dateAdapter, dateAdapter.deserialize(control.value));
            return (!max || !controlValue ||
                dateAdapter.compareDate(max, controlValue) >= 0) ?
                null : { 'nxDatefieldMax': { 'max': max, 'actual': controlValue } };
        });
    }
    /**
     * The form control validator for the date filter.
     * @template D
     * @param {?} dateAdapter
     * @param {?} dateFilter
     * @return {?}
     */
    static filter(dateAdapter, dateFilter) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const controlValue = getValidDateOrNull(dateAdapter, dateAdapter.deserialize(control.value));
            return !dateFilter || !controlValue || dateFilter(controlValue) ?
                null : { 'nxDatefieldFilter': true };
        });
    }
}
/**
 * @template D
 * @param {?} dateAdapter
 * @param {?} obj
 * @return {?}
 */
function getValidDateOrNull(dateAdapter, obj) {
    return (dateAdapter.isDateInstance(obj) && dateAdapter.isValid(obj)) ? obj : null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS12YWxpZGF0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvZGF0ZWZpZWxkLyIsInNvdXJjZXMiOlsiZGF0ZS12YWxpZGF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQU9BLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7Ozs7Ozs7O0lBRzNCLE1BQU0sQ0FBQyxLQUFLLENBQ1YsV0FBNkIsRUFDN0IsV0FBMEIsRUFDMUIsS0FBdUIsRUFDdkIsTUFBZSxFQUNmLG9CQUF1QyxJQUFJO1FBQzNDOzs7UUFBTyxHQUE0QixFQUFFOztrQkFDN0IsV0FBVyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUM7O2tCQUN0RyxLQUFLLEdBQUcsQ0FBQyxXQUFXLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7WUFDOUQsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxrQkFBa0IsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUMsRUFBQyxDQUFDO1FBQzlELENBQUMsRUFBQztJQUNKLENBQUM7Ozs7Ozs7O0lBR0QsTUFBTSxDQUFDLEdBQUcsQ0FBSSxXQUE2QixFQUFFLEdBQU07UUFDakQ7Ozs7UUFBTyxDQUFDLE9BQXdCLEVBQTJCLEVBQUU7O2tCQUNyRCxZQUFZLEdBQUcsa0JBQWtCLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVGLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVk7Z0JBQ3pCLFdBQVcsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxnQkFBZ0IsRUFBRSxFQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBQyxFQUFDLENBQUM7UUFDdEUsQ0FBQyxFQUFDO0lBQ0osQ0FBQzs7Ozs7Ozs7SUFHRCxNQUFNLENBQUMsR0FBRyxDQUFJLFdBQTZCLEVBQUUsR0FBTTtRQUNqRDs7OztRQUFPLENBQUMsT0FBd0IsRUFBMkIsRUFBRTs7a0JBQ3ZELFlBQVksR0FBRyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUYsT0FBTyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWTtnQkFDekIsV0FBVyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEQsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLGdCQUFnQixFQUFFLEVBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFDLEVBQUMsQ0FBQztRQUNwRSxDQUFDLEVBQUM7SUFDSixDQUFDOzs7Ozs7OztJQUdELE1BQU0sQ0FBQyxNQUFNLENBQ1QsV0FBNkIsRUFDN0IsVUFBdUM7UUFFekM7Ozs7UUFBTyxDQUFDLE9BQXdCLEVBQTJCLEVBQUU7O2tCQUNyRCxZQUFZLEdBQUcsa0JBQWtCLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVGLE9BQU8sQ0FBQyxVQUFVLElBQUksQ0FBQyxZQUFZLElBQUksVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7Z0JBQzdELElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxtQkFBbUIsRUFBRSxJQUFJLEVBQUMsQ0FBQztRQUN6QyxDQUFDLEVBQUM7SUFDSixDQUFDO0NBQ0Y7Ozs7Ozs7QUFFRCxTQUFTLGtCQUFrQixDQUFJLFdBQTZCLEVBQUUsR0FBUTtJQUNwRSxPQUFPLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ3BGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWYWxpZGF0b3JGbiwgVmFsaWRhdGlvbkVycm9ycywgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTnhEYXRlQWRhcHRlciwgTnhEYXRlRm9ybWF0cyB9IGZyb20gJy4vYWRhcHRlcic7XG5cbi8qKlxuICogUHJvdmlkZXMgYSBzZXQgb2YgZGF0ZSB2YWxpZGF0b3JzIHRoYXQgY2FuIGJlIHVzZWQgYnkgZm9ybSBjb250cm9scy5cbiAqIEBkeW5hbWljXG4gKi9cbmV4cG9ydCBjbGFzcyBOeERhdGVWYWxpZGF0b3JzIHtcblxuICAvKiogVGhlIGZvcm0gY29udHJvbCB2YWxpZGF0b3IgZm9yIHdoZXRoZXIgdGhlIGlucHV0IHBhcnNlcy4gKi9cbiAgc3RhdGljIHBhcnNlPEQ+KFxuICAgIGRhdGVBZGFwdGVyOiBOeERhdGVBZGFwdGVyPEQ+LFxuICAgIGRhdGVGb3JtYXRzOiBOeERhdGVGb3JtYXRzLFxuICAgIGlucHV0OiBIVE1MSW5wdXRFbGVtZW50LFxuICAgIHN0cmljdDogYm9vbGVhbixcbiAgICBjdXN0b21QYXJzZUZvcm1hdDogc3RyaW5nIHwgc3RyaW5nW10gPSBudWxsKTogVmFsaWRhdG9yRm4ge1xuICAgIHJldHVybiAoKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT4ge1xuICAgICAgY29uc3QgcGFyc2VkVmFsdWUgPSBkYXRlQWRhcHRlci5wYXJzZShpbnB1dC52YWx1ZSwgY3VzdG9tUGFyc2VGb3JtYXQgfHwgZGF0ZUZvcm1hdHMucGFyc2UuZGF0ZUlucHV0LCBzdHJpY3QpO1xuICAgICAgY29uc3QgdmFsaWQgPSAhcGFyc2VkVmFsdWUgfHwgZGF0ZUFkYXB0ZXIuaXNWYWxpZChwYXJzZWRWYWx1ZSk7XG4gICAgICByZXR1cm4gdmFsaWQgPyBudWxsIDogeydueERhdGVmaWVsZFBhcnNlJzogeyd0ZXh0JzogaW5wdXR9fTtcbiAgICB9O1xuICB9XG5cbiAgLyoqIFRoZSBmb3JtIGNvbnRyb2wgdmFsaWRhdG9yIGZvciB0aGUgbWluIGRhdGUuICovXG4gIHN0YXRpYyBtaW48RD4oZGF0ZUFkYXB0ZXI6IE54RGF0ZUFkYXB0ZXI8RD4sIG1pbjogRCk6IFZhbGlkYXRvckZuIHtcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyb2xWYWx1ZSA9IGdldFZhbGlkRGF0ZU9yTnVsbChkYXRlQWRhcHRlciwgZGF0ZUFkYXB0ZXIuZGVzZXJpYWxpemUoY29udHJvbC52YWx1ZSkpO1xuICAgICAgcmV0dXJuICghbWluIHx8ICFjb250cm9sVmFsdWUgfHxcbiAgICAgICAgICBkYXRlQWRhcHRlci5jb21wYXJlRGF0ZShtaW4sIGNvbnRyb2xWYWx1ZSkgPD0gMCkgP1xuICAgICAgICAgIG51bGwgOiB7J254RGF0ZWZpZWxkTWluJzogeydtaW4nOiBtaW4sICdhY3R1YWwnOiBjb250cm9sVmFsdWV9fTtcbiAgICB9O1xuICB9XG5cbiAgLyoqIFRoZSBmb3JtIGNvbnRyb2wgdmFsaWRhdG9yIGZvciB0aGUgbWF4IGRhdGUuICovXG4gIHN0YXRpYyBtYXg8RD4oZGF0ZUFkYXB0ZXI6IE54RGF0ZUFkYXB0ZXI8RD4sIG1heDogRCk6IFZhbGlkYXRvckZuIHtcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcbiAgICBjb25zdCBjb250cm9sVmFsdWUgPSBnZXRWYWxpZERhdGVPck51bGwoZGF0ZUFkYXB0ZXIsIGRhdGVBZGFwdGVyLmRlc2VyaWFsaXplKGNvbnRyb2wudmFsdWUpKTtcbiAgICByZXR1cm4gKCFtYXggfHwgIWNvbnRyb2xWYWx1ZSB8fFxuICAgICAgICBkYXRlQWRhcHRlci5jb21wYXJlRGF0ZShtYXgsIGNvbnRyb2xWYWx1ZSkgPj0gMCkgP1xuICAgICAgICBudWxsIDogeydueERhdGVmaWVsZE1heCc6IHsnbWF4JzogbWF4LCAnYWN0dWFsJzogY29udHJvbFZhbHVlfX07XG4gICAgfTtcbiAgfVxuXG4gIC8qKiBUaGUgZm9ybSBjb250cm9sIHZhbGlkYXRvciBmb3IgdGhlIGRhdGUgZmlsdGVyLiAqL1xuICBzdGF0aWMgZmlsdGVyPEQ+KFxuICAgICAgZGF0ZUFkYXB0ZXI6IE54RGF0ZUFkYXB0ZXI8RD4sXG4gICAgICBkYXRlRmlsdGVyOiAoZGF0ZTogRCB8IG51bGwpID0+IGJvb2xlYW4pOiBWYWxpZGF0b3JGbiB7XG5cbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyb2xWYWx1ZSA9IGdldFZhbGlkRGF0ZU9yTnVsbChkYXRlQWRhcHRlciwgZGF0ZUFkYXB0ZXIuZGVzZXJpYWxpemUoY29udHJvbC52YWx1ZSkpO1xuICAgICAgcmV0dXJuICFkYXRlRmlsdGVyIHx8ICFjb250cm9sVmFsdWUgfHwgZGF0ZUZpbHRlcihjb250cm9sVmFsdWUpID9cbiAgICAgICAgICBudWxsIDogeydueERhdGVmaWVsZEZpbHRlcic6IHRydWV9O1xuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VmFsaWREYXRlT3JOdWxsPEQ+KGRhdGVBZGFwdGVyOiBOeERhdGVBZGFwdGVyPEQ+LCBvYmo6IGFueSk6IEQgfCBudWxsIHtcbiAgcmV0dXJuIChkYXRlQWRhcHRlci5pc0RhdGVJbnN0YW5jZShvYmopICYmIGRhdGVBZGFwdGVyLmlzVmFsaWQob2JqKSkgPyBvYmogOiBudWxsO1xufVxuIl19