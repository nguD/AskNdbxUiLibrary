/**
 * @fileoverview added by tsickle
 * Generated from: datepicker/datepicker-toggle.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Directive, Input, Optional, Inject, } from '@angular/core';
import { merge, of as observableOf, Subscription } from 'rxjs';
import { NxDatepickerIntl } from './datepicker-intl';
import { NxDatepickerComponent, DATEPICKER_DEFAULT_OPTIONS } from './datepicker.component';
/**
 * Can be used to override the icon of a `nxDatepickerToggle`.
 */
// tslint:disable-next-line:directive-class-suffix
export class NxDatepickerToggleIconComponent {
}
NxDatepickerToggleIconComponent.decorators = [
    { type: Directive, args: [{
                selector: '[nxDatepickerToggleIcon]'
            },] }
];
/**
 * @template D
 */
export class NxDatepickerToggleComponent {
    /**
     * @param {?} _intl
     * @param {?} _changeDetectorRef
     * @param {?} _defaultOptions
     */
    constructor(_intl, _changeDetectorRef, _defaultOptions) {
        this._intl = _intl;
        this._changeDetectorRef = _changeDetectorRef;
        this._defaultOptions = _defaultOptions;
        this._stateChanges = Subscription.EMPTY;
        this._tabindex = 0;
        if (this._defaultOptions && this._defaultOptions.toggleIconTabindex) {
            this._tabindex = this._defaultOptions.toggleIconTabindex;
        }
    }
    /**
     * Datepicker instance that the button will toggle.
     * @param {?} value
     * @return {?}
     */
    set datepicker(value) {
        this.registerDatepicker(value);
    }
    /**
     * @return {?}
     */
    get datepicker() {
        return this._datepicker;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    registerDatepicker(value) {
        if (value) {
            this._datepicker = value;
            this._datepicker.registerToggle(this);
        }
    }
    /**
     * Whether the toggle button is disabled.
     * @return {?}
     */
    get disabled() {
        return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    /**
     * Sets the tabindex for the toggle button. Default: 0.
     * @param {?} value
     * @return {?}
     */
    set tabindex(value) {
        if (this._tabindex !== value) {
            this._tabindex = value;
        }
    }
    /**
     * @return {?}
     */
    get tabindex() {
        return this._tabindex;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.datepicker) {
            this._watchStateChanges();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._stateChanges.unsubscribe();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._watchStateChanges();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _open(event) {
        if (this.datepicker && !this.disabled) {
            this.datepicker.open();
            event.stopPropagation();
        }
    }
    /**
     * @private
     * @return {?}
     */
    _watchStateChanges() {
        /** @type {?} */
        const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();
        /** @type {?} */
        const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?
            this.datepicker._datepickerInput._disabledChange : observableOf();
        /** @type {?} */
        const datepickerToggled = this.datepicker ?
            merge(this.datepicker.openedStream, this.datepicker.closedStream) :
            observableOf();
        this._stateChanges.unsubscribe();
        this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe((/**
         * @return {?}
         */
        () => this._changeDetectorRef.markForCheck()));
    }
}
NxDatepickerToggleComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-datepicker-toggle',
                template: "<button class=\"nx-datepicker-toggle-button\"\n        [tabindex]=\"tabindex\"\n        type=\"button\"\n        [attr.aria-label]=\"_intl.openCalendarLabel\"\n        [disabled]=\"disabled\"\n        (click)=\"_open($event)\">\n\n  <svg\n    *ngIf=\"!_customIcon\"\n    class=\"default-icon\"\n    viewBox=\"0 0 24 24\"\n    width=\"24px\"\n    height=\"24px\"\n    fill=\"currentColor\"\n    focusable=\"false\">\n    <path d=\"M5.2002,17 L5.2002,15 C5.2002,14.45 5.6502,14 6.2002,14 L8.2002,14 C8.7502,14 9.2002,14.45 9.2002,15 L9.2002,17 C9.2002,17.55 8.7502,18 8.2002,\n            18 L6.2002,18 C5.6502,18 5.2002,17.55 5.2002,17 L5.2002,17 Z M20.3992,20.4 L3.5992,20.4 L3.5992,11.464 L3.5992,9.464 L3.5992,8 L20.3992,8 L20.3992,\n            20.4 Z M21.0002,3 L20.0002,3 L19.0002,3 L19.0002,2 C19.0002,1.447 18.5532,1 18.0002,1 C17.4472,1 17.0002,1.447 17.0002,2 L17.0002,3 L16.4002,3 L7.5992,\n            3 L7.0002,3 L7.0002,2 C7.0002,1.447 6.5532,1 6.0002,1 C5.4472,1 5.0002,1.447 5.0002,2 L5.0002,3 L4.0002,3 L3.0002,3 C2.4502,3 2.0002,3.45 2.0002,4 L2.0002,\n            9.464 L2.0002,11.464 L2.0002,21 C2.0002,21.55 2.4502,22 3.0002,22 L21.0002,22 C21.5502,22 22.0002,21.55 22.0002,21 L22.0002,4 C22.0002,3.45 21.5502,3 21.0002,3 L21.0002,3 Z\" id=\"path-1\"></path>\n  </svg>\n\n  <ng-content select=\"[nxDatepickerToggleIcon]\"></ng-content>\n</button>\n",
                host: {
                    'class': 'nx-datepicker-toggle',
                    '[class.nx-datepicker-toggle-active]': 'datepicker && datepicker.opened',
                    '[class.nx-datepicker-toggle--disabled]': 'disabled'
                },
                exportAs: 'nxDatepickerToggle',
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{position:relative;display:flex}:host:active{outline:0}:host:hover{color:#006192;color:var(--hover-primary,#006192)}.nx-datepicker-toggle-button{border:none;background-color:transparent;color:inherit;outline:0;cursor:pointer;padding:0;margin:0}.nx-datepicker-toggle-button::-moz-focus-inner{border:0}.default-icon{display:block;height:24px;height:var(--datefield-toggle-icon-size,24px);width:24px;width:var(--datefield-toggle-icon-size,24px)}:host(.nx-datepicker-toggle--disabled) .nx-datepicker-toggle-button{cursor:not-allowed}:host-context([data-whatinput=keyboard]) .nx-datepicker-toggle-button:focus{border-radius:4px;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]) .nx-datepicker-toggle-button:focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}}"]
            }] }
];
/** @nocollapse */
NxDatepickerToggleComponent.ctorParameters = () => [
    { type: NxDatepickerIntl },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DATEPICKER_DEFAULT_OPTIONS,] }] }
];
NxDatepickerToggleComponent.propDecorators = {
    _customIcon: [{ type: ContentChild, args: [NxDatepickerToggleIconComponent, { static: false },] }],
    datepicker: [{ type: Input, args: ['for',] }],
    disabled: [{ type: Input }],
    tabindex: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxDatepickerToggleComponent.prototype._stateChanges;
    /**
     * @type {?}
     * @private
     */
    NxDatepickerToggleComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    NxDatepickerToggleComponent.prototype._tabindex;
    /**
     * Custom icon set by the consumer.
     * @type {?}
     */
    NxDatepickerToggleComponent.prototype._customIcon;
    /** @type {?} */
    NxDatepickerToggleComponent.prototype._datepicker;
    /** @type {?} */
    NxDatepickerToggleComponent.prototype._intl;
    /**
     * @type {?}
     * @private
     */
    NxDatepickerToggleComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxDatepickerToggleComponent.prototype._defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,