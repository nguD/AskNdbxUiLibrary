/**
 * @fileoverview added by tsickle
 * Generated from: datepicker/month-view.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directionality } from '@angular/cdk/bidi';
import { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, Input, Optional, Output, ViewChild, } from '@angular/core';
import { NxDateAdapter } from '../adapter/index';
import { NX_DATE_FORMATS } from './../adapter/date-formats';
import { NxCalendarBodyComponent, NxCalendarCell } from './calendar-body';
import { createMissingDateImplError } from './datepicker-errors';
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 * @type {?}
 */
const DAYS_PER_WEEK = 7;
/** @type {?} */
const TOTAL_DAYS_TO_DISPLAY = 6 * DAYS_PER_WEEK;
/**
 * An internal component used to display a single month in the datepicker.
 * \@docs-private
 * @template D
 */
export class NxMonthViewComponent {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} _dateFormats
     * @param {?} _dateAdapter
     * @param {?=} _dir
     */
    constructor(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {
        this._changeDetectorRef = _changeDetectorRef;
        this._dateFormats = _dateFormats;
        this._dateAdapter = _dateAdapter;
        this._dir = _dir;
        /**
         * Emits when a new date is selected.
         */
        this.selectedChange = new EventEmitter();
        /**
         * Emits when any date is selected.
         */
        this._userSelection = new EventEmitter();
        /**
         * Emits when any date is activated.
         */
        this.activeDateChange = new EventEmitter();
        /**
         * Number of days that should be displayed in one row.
         */
        this._numCols = 7;
        if (!this._dateAdapter) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError('MAT_DATE_FORMATS');
        }
        /** @type {?} */
        const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();
        /** @type {?} */
        const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');
        /** @type {?} */
        const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');
        // Rotate the labels for days of the week based on the configured first day of the week.
        /** @type {?} */
        const weekdays = longWeekdays.map((/**
         * @param {?} long
         * @param {?} i
         * @return {?}
         */
        (long, i) => {
            return { long, narrow: narrowWeekdays[i] };
        }));
        this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));
        this._activeDate = this._dateAdapter.today();
    }
    /**
     * The date to display in this month view (everything other than the month and year is ignored).
     * @return {?}
     */
    get activeDate() { return this._activeDate; }
    /**
     * @param {?} value
     * @return {?}
     */
    set activeDate(value) {
        /** @type {?} */
        const oldActiveDate = this._activeDate;
        /** @type {?} */
        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
        if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {
            this._init();
        }
    }
    /**
     * The currently selected date.
     * @return {?}
     */
    get selected() { return this._selected; }
    /**
     * @param {?} value
     * @return {?}
     */
    set selected(value) {
        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
        this._selectedDate = this._getDateInCurrentMonth(this._selected);
    }
    /**
     * The minimum selectable date.
     * @return {?}
     */
    get minDate() { return this._minDate; }
    /**
     * @param {?} value
     * @return {?}
     */
    set minDate(value) {
        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /**
     * The maximum selectable date.
     * @return {?}
     */
    get maxDate() { return this._maxDate; }
    /**
     * @param {?} value
     * @return {?}
     */
    set maxDate(value) {
        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._init();
        this._focusActiveCell();
    }
    /**
     * Handles when a new date is selected.
     * @param {?} date
     * @return {?}
     */
    _dateSelected(date) {
        if (this._selectedDate !== date) {
            /** @type {?} */
            const selectedYear = this._dateAdapter.getYear(this.activeDate);
            /** @type {?} */
            const selectedMonth = this._dateAdapter.getMonth(this.activeDate);
            /** @type {?} */
            const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);
            this.selectedChange.emit(selectedDate);
        }
        this._userSelection.emit();
    }
    /**
     * Handles keydown events on the calendar body when calendar is in month view.
     * @param {?} event
     * @return {?}
     */
    _handleCalendarBodyKeydown(event) {
        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
        // disabled ones from being selected. This may not be ideal, we should look into whether
        // navigation should skip over disabled dates, and if so, how to implement that efficiently.
        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
        // disabled ones from being selected. This may not be ideal, we should look into whether
        // navigation should skip over disabled dates, and if so, how to implement that efficiently.
        /** @type {?} */
        const oldActiveDate = this._activeDate;
        /** @type {?} */
        const isRtl = this._isRtl();
        switch (event.keyCode) {
            case LEFT_ARROW:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);
                break;
            case RIGHT_ARROW:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);
                break;
            case UP_ARROW:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -this._numCols);
                break;
            case DOWN_ARROW:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._numCols);
                break;
            case HOME:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));
                break;
            case END:
                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, (this._dateAdapter.getNumDaysInMonth(this._activeDate) -
                    this._dateAdapter.getDate(this._activeDate)));
                break;
            case PAGE_UP:
                this.activeDate = event.altKey ?
                    this._dateAdapter.addCalendarYears(this._activeDate, -1) :
                    this._dateAdapter.addCalendarMonths(this._activeDate, -1);
                break;
            case PAGE_DOWN:
                this.activeDate = event.altKey ?
                    this._dateAdapter.addCalendarYears(this._activeDate, 1) :
                    this._dateAdapter.addCalendarMonths(this._activeDate, 1);
                break;
            case ENTER:
                if (!this.dateFilter || this.dateFilter(this._activeDate)) {
                    this._dateSelected(this._dateAdapter.getDate(this._activeDate));
                    this._userSelection.emit();
                    // Prevent unexpected default actions such as form submission.
                    event.preventDefault();
                }
                return;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
            this.activeDateChange.emit(this.activeDate);
        }
        this._focusActiveCell();
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    }
    /**
     * Initializes this month view.
     * @return {?}
     */
    _init() {
        this._selectedDate = this._getDateInCurrentMonth(this.selected);
        this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());
        this._monthLabel =
            this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]
                .toLocaleUpperCase();
        /** @type {?} */
        const firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);
        this._firstWeekOffset =
            (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -
                this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;
        this._createWeekCells();
        this._changeDetectorRef.markForCheck();
    }
    /**
     * Focuses the active cell after the microtask queue is empty.
     * @private
     * @return {?}
     */
    _focusActiveCell() {
        this._nxCalendarBody._focusActiveCell();
    }
    /**
     * Creates NxCalendarCells for the dates in this month.
     * @private
     * @return {?}
     */
    _createWeekCells() {
        /** @type {?} */
        const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);
        /** @type {?} */
        const dateNames = this._dateAdapter.getDateNames();
        this._weeks = [[]];
        for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {
            if (cell === DAYS_PER_WEEK) {
                this._weeks.push([]);
                cell = 0;
            }
            /** @type {?} */
            const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);
            /** @type {?} */
            const enabled = this._shouldEnableDate(date);
            /** @type {?} */
            const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);
            this._weeks[this._weeks.length - 1]
                .push(new NxCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));
        }
    }
    /**
     * Date filter for the month
     * @private
     * @param {?} date
     * @return {?}
     */
    _shouldEnableDate(date) {
        return !!date &&
            (!this.dateFilter || this.dateFilter(date)) &&
            (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&
            (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);
    }
    /**
     * Gets the date in this month that the given Date falls on.
     * Returns null if the given Date is in another month.
     * @private
     * @param {?} date
     * @return {?}
     */
    _getDateInCurrentMonth(date) {
        return date && this._hasSameMonthAndYear(date, this.activeDate) ?
            this._dateAdapter.getDate(date) : null;
    }
    /**
     * Checks whether the 2 dates are non-null and fall within the same month of the same year.
     * @private
     * @param {?} d1
     * @param {?} d2
     * @return {?}
     */
    _hasSameMonthAndYear(d1, d2) {
        return !!(d1 && d2 && this._dateAdapter.getMonth(d1) === this._dateAdapter.getMonth(d2) &&
            this._dateAdapter.getYear(d1) === this._dateAdapter.getYear(d2));
    }
    /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
    }
    /**
     * Determines whether the user has the RTL layout direction.
     * @private
     * @return {?}
     */
    _isRtl() {
        return this._dir && this._dir.value === 'rtl';
    }
    /**
     * The last days of the previous month that should be displayed
     * in the first row of the calendar.
     * @return {?}
     */
    _getLastDaysOfPreviousMonth() {
        /** @type {?} */
        const firstDayOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);
        /** @type {?} */
        const firstDayOfPreviousItems = this._dateAdapter.addCalendarDays(firstDayOfMonth, -this._firstWeekOffset);
        return this._getRowOfDays(firstDayOfPreviousItems, this._firstWeekOffset);
    }
    /**
     * The first days of the following month that should be displayed
     * after the days of the current month. After filling up the last
     * row of the current month, additional rows are added, so that a
     * total of 42 days (6 rows/weeks) is displayed.
     * @return {?}
     */
    _getFirstDaysOfFollowingMonth() {
        /** @type {?} */
        const followingDays = [];
        /** @type {?} */
        const firstDayOfNextMonth = this._dateAdapter.addCalendarMonths(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1), 1);
        // there should be displayed a total of 7 * 6 items
        /** @type {?} */
        const followingDaysCount = TOTAL_DAYS_TO_DISPLAY - this._firstWeekOffset - this._dateAdapter.getNumDaysInMonth(this.activeDate);
        /** @type {?} */
        const offsetItems = followingDaysCount % 7;
        // add a non-full row to following rows.
        // These items will fill up the last incomplete row of the current month.
        if (offsetItems > 0) {
            /** @type {?} */
            const offsetRow = this._getRowOfDays(firstDayOfNextMonth, offsetItems);
            followingDays.push(offsetRow);
        }
        /** @type {?} */
        let remainingDays = followingDaysCount - offsetItems;
        /** @type {?} */
        let firstDayInRow = this._dateAdapter.addCalendarDays(firstDayOfNextMonth, offsetItems);
        // fill remaining rows if needed
        while (remainingDays > 0) {
            followingDays.push(this._getRowOfDays(firstDayInRow, this._numCols));
            firstDayInRow = this._dateAdapter.addCalendarDays(firstDayInRow, this._numCols);
            remainingDays -= this._numCols;
        }
        return followingDays;
    }
    /**
     * Returns a row with days, beginning with the date of `firstDayInRow`-parameter.
     * The returned row contains `daysCount` elements.
     * @param {?} firstDayInRow
     * @param {?} daysCount
     * @return {?}
     */
    _getRowOfDays(firstDayInRow, daysCount) {
        /** @type {?} */
        const nextRow = [];
        /** @type {?} */
        const dateNames = this._dateAdapter.getDateNames();
        for (let addDays = 0; addDays < daysCount; addDays++) {
            /** @type {?} */
            const day = this._dateAdapter.getDate(this._dateAdapter.addCalendarDays(firstDayInRow, addDays));
            nextRow.push(new NxCalendarCell(day, dateNames[day - 1]));
        }
        return nextRow;
    }
}
NxMonthViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-month-view',
                template: "<table class=\"nx-calendar-table\">\n  <thead class=\"nx-calendar-table-head\">\n    <tr>\n      <th\n        class=\"nx-calendar-table-header\"\n        *ngFor=\"let day of _weekdays\"\n        [attr.aria-label]=\"day.long\">{{day.narrow}}</th></tr>\n    <tr>\n  </thead>\n  <tbody nx-calendar-body\n         [label]=\"_monthLabel\"\n         [rows]=\"_weeks\"\n         [previousItems]=\"_getLastDaysOfPreviousMonth()\"\n         [followingItems]=\"_getFirstDaysOfFollowingMonth()\"\n         [todayValue]=\"_todayDate\"\n         [numCols]=\"_numCols\"\n         [selectedValue]=\"_selectedDate\"\n         [activeCell]=\"_dateAdapter.getDate(activeDate) - 1\"\n         (selectedValueChange)=\"_dateSelected($event)\"\n         (keydown)=\"_handleCalendarBodyKeydown($event)\">\n  </tbody>\n</table>\n",
                exportAs: 'nxMonthView',
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".nx-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.nx-calendar-table-header{font-size:16px;font-size:var(--datefield-cell-font-size,16px);line-height:24px;line-height:var(--datefield-cell-line-height,24px);font-weight:600;font-weight:var(--datefield-cell-font-weight,600);letter-spacing:0;letter-spacing:var(--datefield-cell-letter-spacing,0);color:#c2c2c2;color:var(--datefield-header-cell-color,#c2c2c2);text-align:center;height:40px}"]
            }] }
];
/** @nocollapse */
NxMonthViewComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NX_DATE_FORMATS,] }] },
    { type: NxDateAdapter, decorators: [{ type: Optional }] },
    { type: Directionality, decorators: [{ type: Optional }] }
];
NxMonthViewComponent.propDecorators = {
    activeDate: [{ type: Input }],
    selected: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }],
    dateFilter: [{ type: Input }],
    selectedChange: [{ type: Output }],
    _userSelection: [{ type: Output }],
    activeDateChange: [{ type: Output }],
    _nxCalendarBody: [{ type: ViewChild, args: [NxCalendarBodyComponent, { static: true },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxMonthViewComponent.prototype._activeDate;
    /**
     * @type {?}
     * @private
     */
    NxMonthViewComponent.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    NxMonthViewComponent.prototype._minDate;
    /**
     * @type {?}
     * @private
     */
    NxMonthViewComponent.prototype._maxDate;
    /**
     * A function used to filter which dates are selectable.
     * @type {?}
     */
    NxMonthViewComponent.prototype.dateFilter;
    /**
     * Emits when a new date is selected.
     * @type {?}
     */
    NxMonthViewComponent.prototype.selectedChange;
    /**
     * Emits when any date is selected.
     * @type {?}
     */
    NxMonthViewComponent.prototype._userSelection;
    /**
     * Emits when any date is activated.
     * @type {?}
     */
    NxMonthViewComponent.prototype.activeDateChange;
    /**
     * The body of calendar table
     * @type {?}
     */
    NxMonthViewComponent.prototype._nxCalendarBody;
    /**
     * The label for this month (e.g. "January 2017").
     * @type {?}
     */
    NxMonthViewComponent.prototype._monthLabel;
    /**
     * Grid of calendar cells representing the dates of the month.
     * @type {?}
     */
    NxMonthViewComponent.prototype._weeks;
    /**
     * The number of blank cells in the first row before the 1st of the month.
     * @type {?}
     */
    NxMonthViewComponent.prototype._firstWeekOffset;
    /**
     * The date of the month that the currently selected Date falls on.
     * Null if the currently selected Date is in another month.
     * @type {?}
     */
    NxMonthViewComponent.prototype._selectedDate;
    /**
     * The date of the month that today falls on. Null if today is in another month.
     * @type {?}
     */
    NxMonthViewComponent.prototype._todayDate;
    /**
     * The names of the weekdays.
     * @type {?}
     */
    NxMonthViewComponent.prototype._weekdays;
    /**
     * Number of days that should be displayed in one row.
     * @type {?}
     */
    NxMonthViewComponent.prototype._numCols;
    /**
     * @type {?}
     * @private
     */
    NxMonthViewComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxMonthViewComponent.prototype._dateFormats;
    /** @type {?} */
    NxMonthViewComponent.prototype._dateAdapter;
    /**
     * @type {?}
     * @private
     */
    NxMonthViewComponent.prototype._dir;
}
//# sourceMappingURL=data:application/json;base64,