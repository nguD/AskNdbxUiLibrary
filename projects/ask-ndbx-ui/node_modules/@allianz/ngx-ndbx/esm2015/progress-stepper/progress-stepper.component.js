/**
 * @fileoverview added by tsickle
 * Generated from: progress-stepper.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DOCUMENT } from '@angular/common';
import { CdkStep, CdkStepper } from '@angular/cdk/stepper';
import { ChangeDetectionStrategy, Component, ContentChildren, Directive, forwardRef, Inject, Input, QueryList, SkipSelf, ElementRef, ChangeDetectorRef } from '@angular/core';
import { takeUntil, takeWhile } from 'rxjs/operators';
import { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';
import { Subject } from 'rxjs';
import { Directionality } from '@angular/cdk/bidi';
// tslint:disable:use-input-property-decorator
// We need to reference steps in stepper and stepper in steps. To prevent circular depenedency errors
// Provide both components in a single file. Otherwise we would have to introduce interface/abstract classes
// shared between both implementations.
export class NxStepComponent extends CdkStep {
    /**
     * @param {?} stepper
     * @param {?} _errorStateMatcher
     */
    constructor(stepper, _errorStateMatcher) {
        super(stepper);
        this.stepper = stepper;
        this._errorStateMatcher = _errorStateMatcher;
        this._destroyed = new Subject();
        this._interacted = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set stepControl(value) {
        this._stepControl = value;
        // If a step control changes its state, the stepper needs to update.
        if (this._stepControl) {
            this._stepControl.statusChanges
                .pipe(takeUntil(this._destroyed), takeWhile((/**
             * @return {?}
             */
            () => this._stepControl === value)))
                .subscribe((/**
             * @return {?}
             */
            () => {
                this.stepper._stateChanged();
            }));
        }
    }
    /**
     * The top level abstract control of the step.
     * @return {?}
     */
    get stepControl() {
        return this._stepControl;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set interacted(value) {
        this._interacted = value;
        if (this.stepper) {
            this.stepper._stateChanged();
        }
    }
    /**
     * Whether the user has seen the expanded step content or not.
     * @return {?}
     */
    get interacted() {
        return this._interacted;
    }
    /**
     * Custom error state matcher that checks for validity of the step form.
     * @param {?} control
     * @param {?} form
     * @return {?}
     */
    isErrorState(control, form) {
        /** @type {?} */
        const originalErrorState = this._errorStateMatcher.isErrorState(control, form);
        // Checks for the validity of a step form that is not submitted or touched,
        // e.g when the user directly clicks the "next" button or directly on the step
        /** @type {?} */
        const customErrorState = !!(control && control.invalid && this.interacted);
        return originalErrorState || customErrorState;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroyed.next(true);
        this._destroyed.complete();
    }
}
NxStepComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-step',
                template: "<ng-template><ng-content></ng-content></ng-template>\n",
                exportAs: 'nxStep',
                providers: [{ provide: ErrorStateMatcher, useExisting: NxStepComponent }],
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
NxStepComponent.ctorParameters = () => [
    { type: NxProgressStepperDirective, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => NxProgressStepperDirective)),] }] },
    { type: ErrorStateMatcher, decorators: [{ type: SkipSelf }] }
];
if (false) {
    /** @type {?} */
    NxStepComponent.prototype._destroyed;
    /**
     * @type {?}
     * @private
     */
    NxStepComponent.prototype._stepControl;
    /**
     * @type {?}
     * @private
     */
    NxStepComponent.prototype._interacted;
    /**
     * @type {?}
     * @private
     */
    NxStepComponent.prototype.stepper;
    /**
     * @type {?}
     * @private
     */
    NxStepComponent.prototype._errorStateMatcher;
}
/**
 * \@docs-private
 */
export class NxProgressStepperDirective extends CdkStepper {
    /**
     * @param {?} _cdRef
     * @param {?} _dir
     * @param {?} _elementRef
     * @param {?=} _document
     */
    constructor(_cdRef, _dir, _elementRef, _document) {
        super(_dir, _cdRef, _elementRef, _document);
        this._cdRef = _cdRef;
        this._stepHeader = new QueryList();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // Mark the component for change detection whenever the content children query changes
        this._steps.changes
            .pipe(takeUntil(this._destroyed))
            .subscribe((/**
         * @return {?}
         */
        () => {
            this._stateChanged();
        }));
        // If a step control changes its state, the stepper needs to update.
        this._steps.filter((/**
         * @param {?} s
         * @return {?}
         */
        s => !!s.stepControl))
            .forEach((/**
         * @param {?} step
         * @return {?}
         */
        step => {
            step.stepControl.statusChanges
                .pipe(takeUntil(step._destroyed))
                .subscribe((/**
             * @return {?}
             */
            () => {
                this._stateChanged();
            }));
        }));
        // we need to defer change detection that the nxStepperNext and NxStepperPrevious buttons
        // can run change detection again, because they are initialized before the stepper content
        Promise.resolve().then((/**
         * @return {?}
         */
        () => {
            this._cdRef.detectChanges();
        }));
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get hasPrevious() {
        return (this.selectedIndex - 1) >= 0;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get hasNext() {
        return (this.selectedIndex + 1) < this.count;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get count() {
        return this._steps ? this._steps.length : 0;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get currentStep() {
        if (this.count === 0 || this.selectedIndex === -1) {
            return null;
        }
        /** @type {?} */
        const steps = this._steps.toArray();
        return steps[this.selectedIndex];
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get nextStep() {
        if (this.selectedIndex + 1 >= this._steps.length) {
            return null;
        }
        return this._steps.toArray()[this.selectedIndex + 1];
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get steps() {
        return this._steps;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get currentLabel() {
        /** @type {?} */
        const step = this.currentStep;
        /** @type {?} */
        const label = step.stepLabel || step.label;
        return `${this.currentStepLabel} ${this.selectedIndex + 1}/${this.count}: ${label}`;
    }
}
NxProgressStepperDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nxProgressStepper]',
                exportAs: 'nxProgressStepper',
            },] }
];
/** @nocollapse */
NxProgressStepperDirective.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: Directionality },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
NxProgressStepperDirective.propDecorators = {
    _steps: [{ type: ContentChildren, args: [NxStepComponent, { descendants: true },] }],
    currentStepLabel: [{ type: Input }],
    title: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NxProgressStepperDirective.prototype._steps;
    /** @type {?} */
    NxProgressStepperDirective.prototype._stepHeader;
    /**
     * Sets the label on the left side showing the current step label. Used for mobile viewports.
     * @type {?}
     */
    NxProgressStepperDirective.prototype.currentStepLabel;
    /**
     * Sets the title to be rendered above the progress bar.
     * \@deletion-target 10.0.0
     * @deprecated Use `nx-label` instead
     * @type {?}
     */
    NxProgressStepperDirective.prototype.title;
    /**
     * @type {?}
     * @private
     */
    NxProgressStepperDirective.prototype._cdRef;
}
//# sourceMappingURL=data:application/json;base64,