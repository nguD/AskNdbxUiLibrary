/**
 * @fileoverview added by tsickle
 * Generated from: utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { mapClassNames } from '@allianz/ngx-ndbx/utils';
/**
 * is udefined or empty?
 * @param {?} value
 * @return {?}
 */
export function isEmpty(value) {
    return (value === undefined || value === '');
}
/**
 * @param {?} value
 * @return {?}
 */
export function isEmptyArray(value) {
    return (value === undefined || value.length === 0);
}
/**
 * add space and return mapClassNames (css)
 * @param {?} aux
 * @param {?} map
 * @return {?}
 */
export function addStyles(aux, map) {
    return ' ' + mapClassNames(aux, [], map);
}
/**
 * input='small,medium,large'
 *  map = MAPPING
 * @param {?} input
 * @param {?} map
 * @return {?}
 */
export function addStylesFromDimensions(input, map) {
    /** @type {?} */
    const aux = processSplit(input);
    /** @type {?} */
    let output = '';
    if (aux.length >= 1 && aux.length <= 4) {
        /** @type {?} */
        const auxTiny = addStyles(aux[0], map).replace('-{tier}', '');
        /** @type {?} */
        let auxSmall = '';
        /** @type {?} */
        let auxMedium = '';
        /** @type {?} */
        let auxLarge = '';
        switch (aux.length) {
            case 1:
                auxSmall = addStyles(aux[0], map).replace('{tier}', 'small');
                auxMedium = addStyles(aux[0], map).replace('{tier}', 'medium');
                auxLarge = addStyles(aux[0], map).replace('{tier}', 'large');
                break;
            case 2:
                auxSmall = addStyles(aux[1], map).replace('{tier}', 'small');
                auxMedium = addStyles(aux[1], map).replace('{tier}', 'medium');
                auxLarge = addStyles(aux[1], map).replace('{tier}', 'large');
                break;
            case 3:
                auxSmall = addStyles(aux[1], map).replace('{tier}', 'small');
                auxMedium = addStyles(aux[2], map).replace('{tier}', 'medium');
                auxLarge = addStyles(aux[2], map).replace('{tier}', 'large');
                break;
            default:
                auxSmall = addStyles(aux[1], map).replace('{tier}', 'small');
                auxMedium = addStyles(aux[2], map).replace('{tier}', 'medium');
                auxLarge = addStyles(aux[3], map).replace('{tier}', 'large');
                break;
        }
        output += ' ' + auxTiny.trim() + ' '
            + auxSmall.trim() + ' '
            + auxMedium.trim() + ' '
            + auxLarge.trim();
    }
    return output;
}
// Simple split
/**
 * @param {?} aux
 * @param {?=} char
 * @return {?}
 */
export function processSplit(aux, char = ',') {
    return aux.split(char).map((/**
     * @param {?} item
     * @return {?}
     */
    item => item.trim()));
}
/**
 * @param {?} el
 * @param {?} aux
 * @return {?}
 */
export function validateClassInElement(el, aux) {
    return el.hasAttribute(aux);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC9ncmlkLyIsInNvdXJjZXMiOlsidXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7Ozs7OztBQUl4RCxNQUFNLFVBQVUsT0FBTyxDQUFDLEtBQVU7SUFDOUIsT0FBTyxDQUFDLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQ2pELENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxLQUFZO0lBQ3JDLE9BQU8sQ0FBQyxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDdkQsQ0FBQzs7Ozs7OztBQUdELE1BQU0sVUFBVSxTQUFTLENBQUMsR0FBVyxFQUFFLEdBQU87SUFDMUMsT0FBTyxHQUFHLEdBQUcsYUFBYSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDN0MsQ0FBQzs7Ozs7Ozs7QUFLRCxNQUFNLFVBQVUsdUJBQXVCLENBQUMsS0FBYSxFQUFFLEdBQU87O1VBQ3BELEdBQUcsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDOztRQUMzQixNQUFNLEdBQUcsRUFBRTtJQUNmLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7O2NBQzlCLE9BQU8sR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDOztZQUN6RCxRQUFRLEdBQUcsRUFBRTs7WUFDYixTQUFTLEdBQUcsRUFBRTs7WUFDZCxRQUFRLEdBQUcsRUFBRTtRQUNqQixRQUFRLEdBQUcsQ0FBQyxNQUFNLEVBQUU7WUFDbEIsS0FBSyxDQUFD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bXBvcnQgeyBtYXBDbGFzc05hbWVzIH0gZnJvbSAnQGFsbGlhbnovbmd4LW5kYngvdXRpbHMnO1xuaW1wb3J0IHsgRWxlbWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbXBpbGVyJztcblxuLyoqIGlzIHVkZWZpbmVkIG9yIGVtcHR5PyAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHkodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eUFycmF5KHZhbHVlOiBhbnlbXSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZS5sZW5ndGggPT09IDApO1xufVxuXG4vKiogYWRkIHNwYWNlIGFuZCByZXR1cm4gbWFwQ2xhc3NOYW1lcyAoY3NzKSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZFN0eWxlcyhhdXg6IHN0cmluZywgbWFwOiB7fSk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcgJyArIG1hcENsYXNzTmFtZXMoYXV4LCBbXSwgbWFwKTtcbn1cblxuLyoqIGlucHV0PSdzbWFsbCxtZWRpdW0sbGFyZ2UnXG4gKiAgbWFwID0gTUFQUElOR1xuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkU3R5bGVzRnJvbURpbWVuc2lvbnMoaW5wdXQ6IHN0cmluZywgbWFwOiB7fSk6IHN0cmluZyB7XG4gICAgY29uc3QgYXV4ID0gcHJvY2Vzc1NwbGl0KGlucHV0KTtcbiAgICBsZXQgb3V0cHV0ID0gJyc7XG4gICAgaWYgKGF1eC5sZW5ndGggPj0gMSAmJiBhdXgubGVuZ3RoIDw9IDQpIHtcbiAgICAgICAgY29uc3QgYXV4VGlueSA9IGFkZFN0eWxlcyhhdXhbMF0sIG1hcCkucmVwbGFjZSgnLXt0aWVyfScsICcnKTtcbiAgICAgICAgbGV0IGF1eFNtYWxsID0gJyc7XG4gICAgICAgIGxldCBhdXhNZWRpdW0gPSAnJztcbiAgICAgICAgbGV0IGF1eExhcmdlID0gJyc7XG4gICAgICAgIHN3aXRjaCAoYXV4Lmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGF1eFNtYWxsID0gYWRkU3R5bGVzKGF1eFswXSwgbWFwKS5yZXBsYWNlKCd7dGllcn0nLCAnc21hbGwnKTtcbiAgICAgICAgICAgIGF1eE1lZGl1bSA9IGFkZFN0eWxlcyhhdXhbMF0sIG1hcCkucmVwbGFjZSgne3RpZXJ9JywgJ21lZGl1bScpO1xuICAgICAgICAgICAgYXV4TGFyZ2UgPSBhZGRTdHlsZXMoYXV4WzBdLCBtYXApLnJlcGxhY2UoJ3t0aWVyfScsICdsYXJnZScpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgYXV4U21hbGwgPSBhZGRTdHlsZXMoYXV4WzFdLCBtYXApLnJlcGxhY2UoJ3t0aWVyfScsICdzbWFsbCcpO1xuICAgICAgICAgICAgYXV4TWVkaXVtID0gYWRkU3R5bGVzKGF1eFsxXSwgbWFwKS5yZXBsYWNlKCd7dGllcn0nLCAnbWVkaXVtJyk7XG4gICAgICAgICAgICBhdXhMYXJnZSA9IGFkZFN0eWxlcyhhdXhbMV0sIG1hcCkucmVwbGFjZSgne3RpZXJ9JywgJ2xhcmdlJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBhdXhTbWFsbCA9IGFkZFN0eWxlcyhhdXhbMV0sIG1hcCkucmVwbGFjZSgne3RpZXJ9JywgJ3NtYWxsJyk7XG4gICAgICAgICAgICBhdXhNZWRpdW0gPSBhZGRTdHlsZXMoYXV4WzJdLCBtYXApLnJlcGxhY2UoJ3t0aWVyfScsICdtZWRpdW0nKTtcbiAgICAgICAgICAgIGF1eExhcmdlID0gYWRkU3R5bGVzKGF1eFsyXSwgbWFwKS5yZXBsYWNlKCd7dGllcn0nLCAnbGFyZ2UnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBhdXhTbWFsbCA9IGFkZFN0eWxlcyhhdXhbMV0sIG1hcCkucmVwbGFjZSgne3RpZXJ9JywgJ3NtYWxsJyk7XG4gICAgICAgICAgICBhdXhNZWRpdW0gPSBhZGRTdHlsZXMoYXV4WzJdLCBtYXApLnJlcGxhY2UoJ3t0aWVyfScsICdtZWRpdW0nKTtcbiAgICAgICAgICAgIGF1eExhcmdlID0gYWRkU3R5bGVzKGF1eFszXSwgbWFwKS5yZXBsYWNlKCd7dGllcn0nLCAnbGFyZ2UnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG91dHB1dCArPSAnICcgKyBhdXhUaW55LnRyaW0oKSArICcgJ1xuICAgICAgICAgICAgICAgICAgICAgICsgYXV4U21hbGwudHJpbSgpICsgJyAnXG4gICAgICAgICAgICAgICAgICAgICAgKyBhdXhNZWRpdW0udHJpbSgpICsgJyAnXG4gICAgICAgICAgICAgICAgICAgICAgKyBhdXhMYXJnZS50cmltKCk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG59XG5cbi8vIFNpbXBsZSBzcGxpdFxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NTcGxpdChhdXg6IHN0cmluZywgY2hhcjogc3RyaW5nID0gJywnKTogQXJyYXk8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF1eC5zcGxpdChjaGFyKS5tYXAoaXRlbSA9PiBpdGVtLnRyaW0oKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNsYXNzSW5FbGVtZW50KGVsOiBhbnksIGF1eDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGVsLmhhc0F0dHJpYnV0ZShhdXgpO1xufVxuIl19