/**
 * @fileoverview added by tsickle
 * Generated from: layout.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectionStrategy } from '@angular/core';
export class NxLayoutComponent {
    constructor() {
        this._classNames = '';
        /**
         * \@docs-private
         */
        this.grid = true;
    }
    /**
     * Type of layout.
     *
     * Values: grid | grid nogutters | grid maxwidth. Default value: grid.
     * @param {?} value
     * @return {?}
     */
    set classNames(value) {
        if (this._classNames === value) {
            return;
        }
        this._classNames = value;
        this.grid = !!this._classNames.match(/grid/);
        this.noGutters = !!this._classNames.match(/nogutters/);
        this.maxWidth = !!this._classNames.match(/maxwidth/);
    }
    /**
     * @return {?}
     */
    get classNames() {
        return this._classNames;
    }
}
NxLayoutComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: '[nxLayout]',
                template: '<ng-content></ng-content>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class.nx-grid]': 'grid',
                    '[class.nx-grid--no-gutters]': 'noGutters',
                    '[class.nx-grid--max-width]': 'maxWidth'
                },
                styles: [":host(.nx-grid){position:relative;margin-left:auto;margin-right:auto;padding-right:16px;padding-left:16px}@media (min-width:704px){:host(.nx-grid){padding-right:32px;padding-left:32px}}:host(.nx-grid--no-gutters) ::ng-deep{padding-left:0;padding-right:0}:host(.nx-grid--no-gutters) ::ng-deep .nx-grid__row{margin-left:0;margin-right:0}:host(.nx-grid--no-gutters) ::ng-deep .nx-grid__row>[class*=nx-grid__column]{padding-left:0;padding-right:0}:host(.nx-grid--max-width){max-width:100%;width:1184px;width:var(--grid-max-width,1184px)}"]
            }] }
];
NxLayoutComponent.propDecorators = {
    classNames: [{ type: Input, args: ['nxLayout',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxLayoutComponent.prototype._classNames;
    /**
     * \@docs-private
     * @type {?}
     */
    NxLayoutComponent.prototype.grid;
    /**
     * \@docs-private
     * @type {?}
     */
    NxLayoutComponent.prototype.noGutters;
    /**
     * \@docs-private
     * @type {?}
     */
    NxLayoutComponent.prototype.maxWidth;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4L2dyaWQvIiwic291cmNlcyI6WyJsYXlvdXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFjMUUsTUFBTSxPQUFPLGlCQUFpQjtJQVo5QjtRQWFVLGdCQUFXLEdBQVcsRUFBRSxDQUFDOzs7O1FBR2pDLFNBQUksR0FBWSxJQUFJLENBQUM7SUE0QnZCLENBQUM7Ozs7Ozs7O0lBZkMsSUFDSSxVQUFVLENBQUMsS0FBYTtRQUMxQixJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssS0FBSyxFQUFFO1lBQzlCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Ozs7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQzs7O1lBM0NGLFNBQVMsU0FBQzs7Z0JBRVQsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUUvQyxJQUFJLEVBQUU7b0JBQ0osaUJBQWlCLEVBQUUsTUFBTTtvQkFDekIsNkJBQTZCLEVBQUUsV0FBVztvQkFDMUMsNEJBQTRCLEVBQUUsVUFBVTtpQkFDekM7O2FBQ0Y7Ozt5QkFrQkUsS0FBSyxTQUFDLFVBQVU7Ozs7Ozs7SUFoQmpCLHdDQUFpQzs7Ozs7SUFHakMsaUNBQXFCOzs7OztJQUdyQixzQ0FBbUI7Ozs7O0lBR25CLHFDQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnW254TGF5b3V0XScsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZVVybHM6IFsnbGF5b3V0LmNvbXBvbmVudC5zY3NzJ10sXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLm54LWdyaWRdJzogJ2dyaWQnLFxuICAgICdbY2xhc3MubngtZ3JpZC0tbm8tZ3V0dGVyc10nOiAnbm9HdXR0ZXJzJyxcbiAgICAnW2NsYXNzLm54LWdyaWQtLW1heC13aWR0aF0nOiAnbWF4V2lkdGgnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTnhMYXlvdXRDb21wb25lbnQge1xuICBwcml2YXRlIF9jbGFzc05hbWVzOiBzdHJpbmcgPSAnJztcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBncmlkOiBib29sZWFuID0gdHJ1ZTtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBub0d1dHRlcnM6IGJvb2xlYW47XG5cbiAgLyoqIEBkb2NzLXByaXZhdGUgKi9cbiAgbWF4V2lkdGg6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgbGF5b3V0LlxuICAgKlxuICAgKiBWYWx1ZXM6IGdyaWQgfCBncmlkIG5vZ3V0dGVycyB8IGdyaWQgbWF4d2lkdGguIERlZmF1bHQgdmFsdWU6IGdyaWQuXG4gICAqL1xuICBASW5wdXQoJ254TGF5b3V0JylcbiAgc2V0IGNsYXNzTmFtZXModmFsdWU6IHN0cmluZykge1xuICAgIGlmICh0aGlzLl9jbGFzc05hbWVzID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2NsYXNzTmFtZXMgPSB2YWx1ZTtcbiAgICB0aGlzLmdyaWQgPSAhIXRoaXMuX2NsYXNzTmFtZXMubWF0Y2goL2dyaWQvKTtcbiAgICB0aGlzLm5vR3V0dGVycyA9ICEhdGhpcy5fY2xhc3NOYW1lcy5tYXRjaCgvbm9ndXR0ZXJzLyk7XG4gICAgdGhpcy5tYXhXaWR0aCA9ICEhdGhpcy5fY2xhc3NOYW1lcy5tYXRjaCgvbWF4d2lkdGgvKTtcbiAgfVxuXG4gIGdldCBjbGFzc05hbWVzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2NsYXNzTmFtZXM7XG4gIH1cbn1cbiJdfQ==