/**
 * @fileoverview added by tsickle
 * Generated from: circle-toggle/circle-toggle-group/circle-toggle-group.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChildren, EventEmitter, forwardRef, Input, Output, QueryList, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { takeUntil, tap, startWith, filter } from 'rxjs/operators';
import { merge, Subject } from 'rxjs';
import { ToggleButton } from '../circle-toggle/toggle-button';
/** @type {?} */
let nextId = 0;
export class NxCircleToggleGroupComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._id = `nx-circle-toggle-group-${nextId++}`;
        this._destroyed = new Subject();
        /**
         * An event emitted when the selection changes. Outputs the value of the currently selected button.
         */
        this.valueChange = new EventEmitter();
        this._name = `toggle-group-${nextId++}`;
        this._negative = false;
        this._responsive = true;
        this.onChangeCallback = (/**
         * @param {?} value
         * @return {?}
         */
        (value) => { });
        this.onTouchedCallback = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * Id of the circle toggle group.
     *
     * If not set, the circle toggle group gets an incremented value by default.
     * @param {?} value
     * @return {?}
     */
    set id(value) {
        this._id = value;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get id() {
        return this._id;
    }
    /**
     * Name that is used for accessibility.
     * @param {?} value
     * @return {?}
     */
    set name(value) {
        this._name = value;
        this.updateToggleButtonsNames();
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get name() {
        return this._name;
    }
    /**
     * Whether the circle toggle group is disabled.
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        if (this._disabled !== newValue) {
            this._disabled = newValue;
            this._changeDetectorRef.markForCheck();
        }
        if (this.buttons) {
            this.buttons.forEach((/**
             * @param {?} button
             * @return {?}
             */
            button => button.disabled = value));
        }
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * Whether the circle toggle group uses the negative styling.
     * @param {?} value
     * @return {?}
     */
    set negative(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        if (this.negative !== newValue) {
            this._negative = newValue;
        }
        if (this.buttons) {
            this.buttons.forEach((/**
             * @param {?} button
             * @return {?}
             */
            button => button.negative = value));
        }
    }
    /**
     * @return {?}
     */
    get negative() {
        return this._negative;
    }
    /**
     * The value of the selected circle toggle in the circle toggle group.
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this.writeValue(value);
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * Whether the circle toggle group has a responsive behavior.
     * @param {?} value
     * @return {?}
     */
    set responsive(value) {
        /** @type {?} */
        const newValue = coerceBooleanProperty(value);
        if (newValue !== this.responsive) {
            this._responsive = newValue;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get responsive() {
        return this._responsive;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (this.value !== value) {
            this._value = value;
            this.notifySelectedChild(value);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.subscribeToSelectionChanges();
        // react if a content child is deleted, added etc.
        this.buttons.changes
            .pipe(startWith(this.buttons), filter((/**
         * @param {?} toggles
         * @return {?}
         */
        toggles => toggles.length > 0)), tap((/**
         * @param {?} toggles
         * @return {?}
         */
        toggles => Promise.resolve().then((/**
         * @return {?}
         */
        () => {
            toggles.forEach((/**
             * @param {?} toggle
             * @return {?}
             */
            toggle => toggle.toggleButton.resetClasses()));
            this.buttons.first.toggleButton.setFirstButton();
            this.buttons.last.toggleButton.setLastButton();
        })))), takeUntil(this._destroyed))
            .subscribe((/**
         * @return {?}
         */
        () => this.subscribeToSelectionChanges()));
    }
    /**
     * \@docs-private
     * @return {?}
     */
    subscribeToSelectionChanges() {
        /** @type {?} */
        const changedOrDestroyed = merge(this.buttons.changes, this._destroyed);
        merge(...this.buttons.map((/**
         * @param {?} button
         * @return {?}
         */
        button => button.selectionChange)))
            .pipe(takeUntil(changedOrDestroyed))
            .subscribe((/**
         * @param {?} change
         * @return {?}
         */
        (change) => {
            this.onChangeCallback(change.value);
            this.valueChange.emit(change.value);
        }));
    }
    /**
     * \@docs-private
     * inform the selected button if the group selection is set programattically at the beginning
     * @param {?} newValue
     * @return {?}
     */
    notifySelectedChild(newValue) {
        if (this.buttons) {
            /** @type {?} */
            const selected = this.buttons.find((/**
             * @param {?} button
             * @return {?}
             */
            (button) => button.value === newValue));
            if (selected) {
                selected.setGroupSelection();
            }
        }
    }
    /**
     * \@docs-private
     * @return {?}
     */
    updateToggleButtonsNames() {
        if (this.buttons) {
            this.buttons.forEach((/**
             * @param {?} button
             * @return {?}
             */
            button => button.name = this.name));
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get selectedButton() {
        return this.buttons ? this.buttons.find((/**
         * @param {?} button
         * @return {?}
         */
        button => button.checked)) : null;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get buttons() {
        return this._buttons;
    }
}
NxCircleToggleGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-circle-toggle-group',
                template: `<ng-content></ng-content>`,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NxCircleToggleGroupComponent)),
                        multi: true
                    }
                ],
                host: {
                    '[class.is-responsive]': 'responsive',
                    '[class.is-disabled]': 'disabled',
                    '[attr.aria-disabled]': 'disabled',
                    '[attr.aria-labelledby]': 'name',
                    '[attr.name]': 'name',
                    '[attr.id]': 'id',
                    '[class.nx-circle-toggle-group]': 'true',
                    'role': 'radiogroup'
                },
                styles: [":host{display:flex;flex-wrap:wrap;flex-direction:column;justify-content:space-around}@media (min-width:320px){:host{flex-direction:row}}:host(.is-responsive){flex-direction:column}@media (min-width:704px){:host(.is-responsive){flex-direction:row}}"]
            }] }
];
/** @nocollapse */
NxCircleToggleGroupComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NxCircleToggleGroupComponent.propDecorators = {
    _buttons: [{ type: ContentChildren, args: [ToggleButton,] }],
    valueChange: [{ type: Output }],
    name: [{ type: Input }],
    disabled: [{ type: Input }],
    negative: [{ type: Input }],
    value: [{ type: Input }],
    responsive: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype._buttons;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype._id;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype._destroyed;
    /**
     * An event emitted when the selection changes. Outputs the value of the currently selected button.
     * @type {?}
     */
    NxCircleToggleGroupComponent.prototype.valueChange;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype._name;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype._disabled;
    /** @type {?} */
    NxCircleToggleGroupComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype._responsive;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype.onChangeCallback;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    NxCircleToggleGroupComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,