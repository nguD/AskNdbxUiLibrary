/**
 * @fileoverview added by tsickle
 * Generated from: pagination/pagination-utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * \@docs-private
 */
export class NxPaginationUtils {
    constructor() {
        this._pagesMobile = 3;
        this._elipsisText = '...';
        this._classExpanded = 'expanded-view';
    }
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    getPages(currentPage, totalPages) {
        /** @type {?} */
        let pages = [];
        /** @type {?} */
        let start = [];
        /** @type {?} */
        let middle = [];
        /** @type {?} */
        let end = [];
        // First array -> start
        start = this.getStartArray(currentPage, totalPages);
        // Second array -> middle
        middle = this.getMiddleArray(currentPage, totalPages);
        // Third array -> end
        end = this.getEndArray(currentPage, totalPages);
        pages = [...start, ...middle, ...end];
        return pages;
    }
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    getMiddleArray(currentPage, totalPages) {
        /** @type {?} */
        let pageNumber = currentPage < 6 ? 4 : currentPage - 1;
        /** @type {?} */
        const middle = [];
        while (middle.length < 3 &&
            pageNumber >= 2 &&
            pageNumber <= totalPages - 3 &&
            (pageNumber <= currentPage + 1 && pageNumber >= currentPage - 1)) {
            middle.push(this.createPaginationItem(pageNumber, pageNumber));
            pageNumber++;
        }
        return middle;
    }
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    getEndArray(currentPage, totalPages) {
        /** @type {?} */
        const end = [];
        /** @type {?} */
        let currentItemToShow = totalPages <= 3 ? totalPages + 1 :
            totalPages <= 6 ? totalPages - (totalPages - 4) : totalPages - 2;
        /** @type {?} */
        const showEllipsis = currentPage < totalPages - 4;
        while (currentItemToShow <= totalPages) {
            /** @type {?} */
            const endItem = end.length === 0 && showEllipsis ?
                this.createPaginationItem(this._elipsisText, currentItemToShow, true) :
                this.createPaginationItem(currentItemToShow, currentItemToShow, true);
            end.push(endItem);
            currentItemToShow++;
        }
        return end;
    }
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    getStartArray(currentPage, totalPages) {
        /** @type {?} */
        let counterPages = 0;
        /** @type {?} */
        const start = [];
        /** @type {?} */
        const maxSizeArray = 3;
        while (counterPages < maxSizeArray && counterPages < totalPages) {
            /** @type {?} */
            const startItem = counterPages === 2 && currentPage > 5 ?
                this.createPaginationItem(this._elipsisText, counterPages, true) :
                this.createPaginationItem(counterPages + 1, counterPages + 1, true);
            start.push(startItem);
            counterPages++;
        }
        return start;
    }
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    getMobilePages(currentPage, totalPages) {
        // if we have less pages than the number we want to display take all
        if (totalPages < this._pagesMobile) {
            return Array.from(Array(totalPages).keys()).map((/**
             * @param {?} item
             * @return {?}
             */
            item => this.createPaginationItem(item + 1, item + 1)));
        }
        switch (currentPage) {
            // first page active
            case 1:
                return [1, 2, 3].map((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => this.createPaginationItem(item, item)));
            // last page active
            case totalPages:
                return [totalPages - 2, totalPages - 1, totalPages].map((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => this.createPaginationItem(item, item)));
            // any other page active
            default:
                return [currentPage - 1, currentPage, currentPage + 1].map((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => this.createPaginationItem(item, item)));
        }
    }
    /**
     * @private
     * @param {?} label
     * @param {?} value
     * @param {?=} classExpanded
     * @return {?}
     */
    createPaginationItem(label, value, classExpanded) {
        return { label: label, value: value, class: classExpanded ? this._classExpanded : '' };
    }
}
NxPaginationUtils.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxPaginationUtils.prototype._pagesMobile;
    /**
     * @type {?}
     * @private
     */
    NxPaginationUtils.prototype._elipsisText;
    /**
     * @type {?}
     * @private
     */
    NxPaginationUtils.prototype._classExpanded;
}
//# sourceMappingURL=data:application/json;base64,