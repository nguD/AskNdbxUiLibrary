/**
 * @fileoverview added by tsickle
 * Generated from: slider.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { clamp } from '@allianz/ngx-ndbx/utils';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild, NgZone } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Decimal } from 'decimal.js';
import { fromEvent } from 'rxjs';
/**
 * @record
 */
function Position() { }
if (false) {
    /** @type {?} */
    Position.prototype.x;
    /** @type {?} */
    Position.prototype.y;
}
/** @enum {number} */
const EventType = {
    TOUCH: 0, MOUSE: 1,
};
EventType[EventType.TOUCH] = 'TOUCH';
EventType[EventType.MOUSE] = 'MOUSE';
/** @type {?} */
let nextId = 0;
/** @type {?} */
const DEFAULT_MIN = 0;
/** @type {?} */
const DEFAULT_MAX = 100;
/** @type {?} */
const DEFAULT_STEP = 1;
export class NxSliderComponent {
    /**
     * @param {?} elementRef
     * @param {?} _changeDetectorRef
     * @param {?} _ngZone
     */
    constructor(elementRef, _changeDetectorRef, _ngZone) {
        this.elementRef = elementRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._ngZone = _ngZone;
        this._id = `nx-slider-${nextId++}`;
        this._tabIndex = 0;
        this._min = DEFAULT_MIN;
        this._max = DEFAULT_MAX;
        this._disabled = false;
        this._inverted = false;
        this._thumbLabel = true;
        this._negative = false;
        /**
         * An event is dispatched on each value change.
         */
        this.valueChange = new EventEmitter();
        this.isActive = false;
        this.dragSubscriptions = [];
        this.position = null;
        this._value = 0;
        this._step = DEFAULT_STEP;
        this._currentValue = 0;
        this._onChange = (/**
         * @return {?}
         */
        () => { });
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
        /**
         * Sets the customization function for the value which is displayed above the slider handle (Default:(value) => value). ).
         */
        this.valueFormatter = (/**
         * @param {?} value
         * @return {?}
         */
        (value) => value);
        /**
         * Sets the customization function for the label on the min-side of the slider (Default:(value) => value).
         */
        this.labelMinFormatter = (/**
         * @param {?} value
         * @return {?}
         */
        (value) => value);
        /**
         * Sets the customization function for the label on the max-side of the slider (Default:(value) => value).
         */
        this.labelMaxFormatter = (/**
         * @param {?} value
         * @return {?}
         */
        (value) => value);
    }
    /**
     * Sets the id of the slider.
     * @param {?} value
     * @return {?}
     */
    set id(value) {
        if (this._id !== value) {
            this._id = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get id() {
        return this._id;
    }
    /**
     * Sets the tabindex of the slider.
     * @param {?} value
     * @return {?}
     */
    set tabindex(value) {
        this._tabIndex = coerceNumberProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get tabindex() {
        return this._tabIndex;
    }
    /**
     * Sets the minimum value (Default: 0).
     * @param {?} value
     * @return {?}
     */
    set min(value) {
        this._min = coerceNumberProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get min() {
        return this._min;
    }
    /**
     * Sets the maximum value (Default: 100).
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        this._max = coerceNumberProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get max() {
        return this._max;
    }
    /**
     * Sets the step size by which the value of the slider can be increased or decreased (Default: 1).
     * @return {?}
     */
    get step() { return this._step; }
    /**
     * @param {?} value
     * @return {?}
     */
    set step(value) {
        this._step = coerceNumberProperty(value, this._step);
        if (this._step % 1 !== 0) {
            this._roundToDecimal = this._step.toString().split('.').pop().length;
        }
    }
    /**
     * Sets the label which is displayed on top of the slider.
     * @param {?} value
     * @return {?}
     */
    set label(value) {
        if (this._label !== value) {
            this._label = value;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @return {?}
     */
    get label() {
        return this._label;
    }
    /**
     * Whether the input to the control of the slider should be disabled.
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * Whether the max value is to the right (false) or left (true).
     * @param {?} value
     * @return {?}
     */
    set inverted(value) {
        this._inverted = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get inverted() {
        return this._inverted;
    }
    /**
     * Whether to display the thumb label on top of the slider.
     * @param {?} value
     * @return {?}
     */
    set thumbLabel(value) {
        this._thumbLabel = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get thumbLabel() {
        return this._thumbLabel;
    }
    /**
     * Whether the negative set of styles is applied (Default: 'false').
     * @param {?} value
     * @return {?}
     */
    set negative(value) {
        this._negative = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get negative() {
        return this._negative;
    }
    /**
     * Sets the current value of the slider.
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this.writeValue(Number(value));
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.reset();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this._value) {
            this._value = value;
            this.valueChange.emit(value);
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    isMinimum() {
        return this._value === this.min;
    }
    /**
     * \@docs-private
     * A valid step is either:
     * - the minimum because thats our anchor for all value evaluation and steps
     * - (_value - min) % step === 0
     * @return {?}
     */
    isValidStep() {
        /** @type {?} */
        const safeValue = new Decimal(this._value).minus(this.min);
        /** @type {?} */
        const modulo = safeValue.mod(this.step);
        return this.isMinimum() || modulo.cmp(0) === 0;
    }
    /**
     * \@docs-private
     * We have to look at two cases:
     * - current value is a valid multitude of the step size
     *   then we can safely add or subtract the step
     * - the value is not a valid multitude. this could be the max value or the value bound
     *   via nxValue
     *   then we look for the next closest value upwards or downwards
     *   decimal.js provides a nice utility function for this.
     * @param {?} valueDiff
     * @return {?}
     */
    changeValue(valueDiff) {
        /** @type {?} */
        let newValue = new Decimal(this._value);
        if (this.isValidStep()) {
            newValue = newValue.plus(valueDiff);
        }
        else {
            // subtract the minimum to find the closest multitude then add the minimum again to get the valid slider step
            /** @type {?} */
            const minAdjustedValue = new Decimal(this._value).minus(this.min);
            newValue = valueDiff < 0 ? minAdjustedValue.toNearest(this.step, Decimal.ROUND_DOWN)
                : minAdjustedValue.toNearest(this.step, Decimal.ROUND_UP);
            newValue = newValue.plus(this.min);
        }
        // cast the Decimal object to a JS number before it gets returned
        /** @type {?} */
        let toNumber = newValue.toNumber();
        toNumber = clamp(toNumber, this.min, this.max);
        if (this.value !== toNumber) {
            this._onChange(toNumber);
            this.valueChange.emit(toNumber);
            this.value = toNumber;
        }
    }
    /**
     * \@docs-private
     * @return {?}
     */
    get percentageValue() {
        /** @type {?} */
        let percentageValue = ((this.value || 0) - this.min) / (this.max - this.min) * 100;
        if (this.inverted) {
            percentageValue = 100 - percentageValue;
        }
        return clamp(percentageValue, 0, 100);
    }
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    sliderClick(event) {
        if (this.disabled) {
            return;
        }
        this._focusHandleElement();
        event.stopPropagation();
        this.position = this.getPositionFromEvent(event);
        this.frameId = requestAnimationFrame((/**
         * @return {?}
         */
        () => {
            this.valueByPosition();
            if (this.value !== this._currentValue) {
                this._currentValue = this.value;
                this._onChange(this.value);
            }
        }));
    }
    /**
     * \@docs-private
     * @return {?}
     */
    focus() {
        if (this.disabled) {
            return;
        }
        this._focusHandleElement();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    blur() {
        if (this.disabled) {
            return;
        }
    }
    /**
     * \@docs-private
     * Prevent text selection when dragging the handle.
     * @return {?}
     */
    selectStart() {
        return false;
    }
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    handleKeypress(event) {
        if (this.disabled) {
            return;
        }
        if (event.which < LEFT_ARROW || event.which > DOWN_ARROW) {
            return;
        }
        switch (event.which) {
            case this.inverted ? RIGHT_ARROW : LEFT_ARROW:
            case DOWN_ARROW:
                return this.changeValue(-this.step);
            case UP_ARROW:
            case this.inverted ? LEFT_ARROW : RIGHT_ARROW:
                return this.changeValue(this.step);
        }
    }
    /**
     * \@docs-private
     * this is called on mousedown or touchstart
     * @param {?} event
     * @return {?}
     */
    dragStart(event) {
        if (this.disabled) {
            return;
        }
        this.isActive = true;
        /** @type {?} */
        const isTouchEvent = this.detectEventType(event) === EventType.TOUCH;
        this._currentValue = this.value;
        if (isTouchEvent) {
            this._ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                this.dragSubscriptions.push(fromEvent(document, 'touchmove').subscribe(this.handleDragMove.bind(this)));
                this.dragSubscriptions.push(fromEvent(document, 'touchend').subscribe(this.handleDragStop.bind(this)));
            }));
            this._ngZone.run((/**
             * @return {?}
             */
            () => {
                this.dragSubscriptions.push(fromEvent(document, 'touchcancel').subscribe(this.handleDragStop.bind(this)));
            }));
        }
        else {
            this._ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                this.dragSubscriptions.push(fromEvent(document, 'mousemove').subscribe(this.handleDragMove.bind(this)));
            }));
            this._ngZone.run((/**
             * @return {?}
             */
            () => {
                this.dragSubscriptions.push(fromEvent(document, 'mouseup').subscribe(this.handleDragStop.bind(this)));
            }));
        }
        this.position = this.getPositionFromEvent(event);
        this.runChangeObserver();
    }
    /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    formatValue(value) {
        return this.valueFormatter(value);
    }
    /**
     * \@docs-private
     * @return {?}
     */
    formatLabelLeft() {
        return this.inverted ? this.formatLabelMax() : this.formatLabelMin();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    formatLabelRight() {
        return this.inverted ? this.formatLabelMin() : this.formatLabelMax();
    }
    /**
     * \@docs-private
     * @return {?}
     */
    valueByPosition() {
        /** @type {?} */
        const rect = this.elementRef.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const x = Math.max(rect.left, Math.min(rect.right, this.position.x));
        // position of slider relative to slider width
        /** @type {?} */
        let percent = (x - rect.left) / rect.width;
        if (this.inverted) {
            percent = 1 - percent;
        }
        /** @type {?} */
        const exactValue = this.min + percent * (this.max - this.min);
        /**
         * edge case handling because of float precision errors
         * you couldn't reach the maximum
         * @type {?}
         */
        let closestValue;
        if (percent === 1) {
            closestValue = this.max;
        }
        else if (percent === 0) {
            closestValue = this.min;
        }
        else {
            closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;
        }
        if (this._roundToDecimal) {
            closestValue = this.roundToDecimal(closestValue);
        }
        closestValue = clamp(closestValue, this.min, this.max);
        this.value = closestValue;
    }
    /**
     * \@docs-private
     * @param {?} value
     * @return {?}
     */
    roundToDecimal(value) {
        return parseFloat(value.toFixed(this._roundToDecimal));
    }
    /**
     * \@docs-private
     * @return {?}
     */
    formatLabelMin() {
        return this.labelMinFormatter(this.min);
    }
    /**
     * \@docs-private
     * @return {?}
     */
    formatLabelMax() {
        return this.labelMaxFormatter(this.max);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    handleDragMove(event) {
        this.position = this.getPositionFromEvent(event);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    handleDragStop(event) {
        this.reset();
        this.valueByPosition();
        if (this.value !== this._currentValue) {
            this._currentValue = this.value;
            this._onChange(this.value);
        }
    }
    /**
     * @private
     * @return {?}
     */
    runChangeObserver() {
        this.frameId = requestAnimationFrame((/**
         * @return {?}
         */
        () => {
            this.valueByPosition();
            if (this.isActive) {
                this.runChangeObserver();
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    reset() {
        this.isActive = false;
        for (const subscription of this.dragSubscriptions) {
            subscription.unsubscribe();
        }
        this.dragSubscriptions = [];
        cancelAnimationFrame(this.frameId);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    detectEventType(event) {
        return event.type.includes('touch') ? EventType.TOUCH : EventType.MOUSE;
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    getPositionFromEvent(event) {
        /** @type {?} */
        const eventType = this.detectEventType(event);
        /** @type {?} */
        const cursor = eventType === EventType.TOUCH ? ((/** @type {?} */ (event))).touches.item(0) : event;
        return {
            x: cursor.clientX,
            y: cursor.clientY
        };
    }
    /**
     * \@docs-private
     * @return {?}
     */
    _focusHandleElement() {
        this.handleElement.nativeElement.focus();
    }
}
NxSliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-slider',
                template: "<label class=\"nx-slider__label\" [id]=\"id + '-label'\" [attr.for]=\"id + '-handle'\" (click)=\"_focusHandleElement()\">{{label}}</label>\n\n<div\n  class=\"nx-slider__wrapper\"\n  (click)=\"sliderClick($event)\"\n>\n\n  <span class=\"nx-slider__background\">\n    <span class=\"nx-slider__filler\" [style.width.%]=\"percentageValue\"></span>\n\n    <div class=\"nx-slider__handle\"\n        [id]=\"id + '-handle'\"\n        [attr.tabindex]=\"tabindex\"\n        [attr.aria-labelledby]=\"id + '-label'\"\n        role=\"slider\"\n        [attr.aria-valuemin]=\"formatLabelMin()\"\n        [attr.aria-valuemax]=\"formatLabelMax()\"\n        [attr.aria-valuetext]=\"formatValue(value)\"\n        [attr.aria-valuenow]=\"formatValue(value)\"\n        (mousedown)=\"dragStart($event)\"\n        (touchstart)=\"dragStart($event)\"\n        (selectstart)=\"selectStart()\"\n        #handle\n      >\n\n      <span *ngIf=\"thumbLabel\" class=\"nx-slider__value\">{{formatValue(value)}}\n        <div class=\"nx-slider__arrow\">\n        </div>\n      </span>\n    </div>\n\n  </span>\n</div>\n\n<div class=\"nx-slider__label-container\">\n    <span class=\"nx-slider__value-label\">{{formatLabelLeft()}}</span>\n    <span class=\"nx-slider__value-label\">{{formatLabelRight()}}</span>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NxSliderComponent)),
                        multi: true
                    }],
                host: {
                    '[attr.aria-disabled]': 'disabled ? true : null',
                    '(keydown)': 'handleKeypress($event)',
                    '[class.nx-slider--disabled]': 'disabled',
                    '[class.nx-slider--negative]': 'negative'
                },
                styles: [":host{display:block}.nx-slider__label{font-size:20px;font-size:var(--slider-label-font-size,20px);line-height:28px;line-height:var(--slider-label-line-height,28px);font-weight:300;font-weight:var(--slider-label-font-weight,300);letter-spacing:.2px;letter-spacing:var(--slider-label-letter-spacing,.2px);color:#414141;color:var(--slider-label-color,#414141)}.nx-slider__wrapper{width:100%;padding:66px 0 18px}.nx-slider__background{position:relative;background-color:#d9d9d9;background-color:var(--slider-background-color,#d9d9d9);display:block;height:4px;border-radius:2px;white-space:nowrap;cursor:pointer}.nx-slider__filler{display:inline-block;height:4px;border-radius:2px;background-color:#007ab3;background-color:var(--slider-indicator-color,#007ab3);float:left}.nx-slider__handle{display:inline-block;position:relative;width:24px;height:24px;border-radius:50%;box-shadow:0 2px 4px rgba(65,65,65,.5);border-color:var(--slider-handle-border-color,#f5f5f5);background:#fff;background:var(--slider-handle-background-color,#fff);box-sizing:border-box;margin-left:-12px;top:-10px;z-index:2;cursor:-webkit-grab;cursor:grab;border:1px solid #f5f5f5}.nx-slider__handle:focus{outline:0;border-color:#007ab3;border-color:var(--slider-handle-focus-border-color,#007ab3)}.nx-slider__handle:active{box-shadow:0 2px 4px rgba(65,65,65,.5),inset 0 0 0 4px #fff,inset 0 0 0 24px rgba(0,122,179,.2);box-shadow:0 2px 4px rgba(65,65,65,.5),inset 0 0 0 4px var(--slider-handle-background-color,#fff),inset 0 0 0 24px var(--slider-handle-active-inset-color,rgba(0,122,179,.2));cursor:-webkit-grabbing;cursor:grabbing}:host-context([data-whatinput=keyboard]) .nx-slider__handle:focus{border-color:#7fbcd9;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]) .nx-slider__handle:focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}}.nx-slider__value{font-size:12px;font-size:var(--slider-handle-value-font-size,12px);line-height:16px;line-height:var(--slider-handle-value-line-height,16px);font-weight:600;font-weight:var(--slider-handle-value-font-weight,600);letter-spacing:.5px;letter-spacing:var(--slider-handle-value-letter-spacing,.5px);color:#006192;color:var(--slider-handle-value-color,#006192);border:1px solid #f5f5f5;border-color:var(--slider-handle-border-color,#f5f5f5);border-radius:4px;box-shadow:0 2px 4px rgba(65,65,65,.5);cursor:-webkit-grab;cursor:grab;height:24px;width:48px;text-align:center;right:8px;padding:3px 8px;position:relative;top:-40px;display:table;left:50%;transform:translateX(-50%);background:#fff;background:var(--slider-value-background-color,#fff)}.nx-slider__value:active{cursor:-webkit-grabbing;cursor:grabbing}.nx-slider__arrow{width:6px;height:6px;border-right:1px solid;border-bottom:1px solid;left:50%;transform:translate(-50%,1px) rotate(45deg);position:absolute;box-shadow:-2px -2px 1px 1px #fff,2px 2px 4px rgba(65,65,65,.5);box-shadow:-2px -2px 1px 1px var(--slider-value-background-color,#fff),2px 2px 4px rgba(65,65,65,.5);background:#fff;background:var(--slider-value-background-color,#fff);border-color:#f5f5f5;border-color:var(--slider-handle-border-color,#f5f5f5)}.nx-slider__label-container{display:flex;width:100%;justify-content:space-between;font-size:16px;font-size:var(--slider-value-label-font-size,16px);line-height:24px;line-height:var(--slider-value-label-line-height,24px);font-weight:300;font-weight:var(--slider-value-label-font-weight,300);letter-spacing:0;letter-spacing:var(--slider-value-label-letter-spacing,0);color:#414141;color:var(--slider-value-label-color,#414141)}.nx-slider__max-value-label{text-align:right}:host(.nx-slider--disabled){cursor:not-allowed}:host(.nx-slider--disabled) .nx-slider__background,:host(.nx-slider--disabled) .nx-slider__filler,:host(.nx-slider--disabled) .nx-slider__handle,:host(.nx-slider--disabled) .nx-slider__value,:host(.nx-slider--disabled) .nx-slider__value-label{pointer-events:none;cursor:not-allowed}:host(.nx-slider--disabled) .nx-slider__handle,:host(.nx-slider--disabled) .nx-slider__value{background-color:#fff;background-color:var(--slider-value-disabled-background-color,#fff)}:host(.nx-slider--disabled) .nx-slider__filler{background-color:rgba(0,97,146,.4);background-color:var(--slider-indicator-disabled-color,rgba(0,97,146,.4))}:host(.nx-slider--disabled) .nx-slider__value{color:rgba(0,97,146,.4);color:var(--slider-handle-value-disabled-color,rgba(0,97,146,.4))}:host(.nx-slider--disabled) .nx-slider__label-container{color:#dadada;color:var(--slider-value-label-disabled-color,#dadada)}:host(.nx-slider--disabled) .nx-slider__arrow{background:#fff;background:var(--slider-value-disabled-background-color,#fff);box-shadow:-2px -2px 1px 1px #fff,2px 2px 4px rgba(65,65,65,.5);box-shadow:-2px -2px 1px 1px var(--slider-value-disabled-background-color,#fff),2px 2px 4px rgba(65,65,65,.5)}:host(.nx-slider--disabled) .nx-slider__background{background:#d9d9d9;background:var(--slider-disabled-background-color,#d9d9d9)}:host(.nx-slider--negative) .nx-slider__label,:host(.nx-slider--negative) .nx-slider__value-label{color:#fff}:host(.nx-slider--negative) .nx-slider__filler{background-color:#fff}:host(.nx-slider--negative) .nx-slider__background{background-color:rgba(255,255,255,.35)}:host(.nx-slider--negative.nx-slider--disabled) .nx-slider__label,:host(.nx-slider--negative.nx-slider--disabled) .nx-slider__value-label{color:#d9d9d9}:host(.nx-slider--negative.nx-slider--disabled) .nx-slider__filler{background-color:#d9d9d9}@media screen and (-ms-high-contrast:active){.nx-slider__background{background-color:buttonFace;border:1px solid buttonText}.nx-slider__filler{background-color:highlight}.nx-slider__handle{background-color:buttonFace;border-color:buttonText}.nx-slider__handle:focus,.nx-slider__handle:hover{background-color:highlight}.nx-slider__handle:active{background-color:buttonText}.nx-slider__value{border-color:buttonText;background-color:buttonFace;color:buttonText;-ms-high-contrast-adjust:none}.nx-slider__arrow{-ms-high-contrast-adjust:auto;background-color:buttonFace}:host(.nx-slider--disabled) .nx-slider__background{background-color:background;border:1px solid GrayText}:host(.nx-slider--disabled) .nx-slider__filler{background-color:GrayText}:host(.nx-slider--disabled) .nx-slider__handle{background-color:GrayText}:host(.nx-slider--disabled) .nx-slider__value{border-color:GrayText;color:GrayText}:host(.nx-slider--disabled) .nx-slider__arrow{border-color:GrayText}}"]
            }] }
];
/** @nocollapse */
NxSliderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: NgZone }
];
NxSliderComponent.propDecorators = {
    handleElement: [{ type: ViewChild, args: ['handle', { static: true },] }],
    id: [{ type: Input, args: ['id',] }],
    tabindex: [{ type: Input }],
    min: [{ type: Input, args: ['nxMin',] }],
    max: [{ type: Input, args: ['nxMax',] }],
    step: [{ type: Input, args: ['nxStep',] }],
    label: [{ type: Input, args: ['nxLabel',] }],
    disabled: [{ type: Input }],
    inverted: [{ type: Input, args: ['nxInverted',] }],
    thumbLabel: [{ type: Input }],
    negative: [{ type: Input, args: ['negative',] }],
    valueChange: [{ type: Output, args: ['nxValueChange',] }],
    valueFormatter: [{ type: Input, args: ['nxValueFormatter',] }],
    labelMinFormatter: [{ type: Input, args: ['nxLabelMinFormatter',] }],
    labelMaxFormatter: [{ type: Input, args: ['nxLabelMaxFormatter',] }],
    value: [{ type: Input, args: ['nxValue',] }]
};
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxSliderComponent.prototype.handleElement;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._id;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._tabIndex;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._min;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._max;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._label;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._inverted;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._thumbLabel;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._negative;
    /**
     * An event is dispatched on each value change.
     * @type {?}
     */
    NxSliderComponent.prototype.valueChange;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype.isActive;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype.dragSubscriptions;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype.frameId;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype.position;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._roundToDecimal;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._step;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._currentValue;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._onTouched;
    /**
     * Sets the customization function for the value which is displayed above the slider handle (Default:(value) => value). ).
     * @type {?}
     */
    NxSliderComponent.prototype.valueFormatter;
    /**
     * Sets the customization function for the label on the min-side of the slider (Default:(value) => value).
     * @type {?}
     */
    NxSliderComponent.prototype.labelMinFormatter;
    /**
     * Sets the customization function for the label on the max-side of the slider (Default:(value) => value).
     * @type {?}
     */
    NxSliderComponent.prototype.labelMaxFormatter;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxSliderComponent.prototype._ngZone;
}
//# sourceMappingURL=data:application/json;base64,