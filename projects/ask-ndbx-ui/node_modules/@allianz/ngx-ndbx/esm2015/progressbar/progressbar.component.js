/**
 * @fileoverview added by tsickle
 * Generated from: progressbar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, ChangeDetectionStrategy } from '@angular/core';
import { Component } from '@angular/core';
import { clamp } from '@allianz/ngx-ndbx/utils';
/** @type {?} */
let progressbarId = 0;
export class NxProgressbarComponent {
    constructor() {
        /**
         * \@docs-private
         */
        this.progressbarId = `nx-progress-bar-${progressbarId++}`;
        this._value = 0;
    }
    /**
     * Sets the value of the progress bar. Defaults to zero. Mirrored to aria-value now.
     * @return {?}
     */
    get value() { return this._value; }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) { this._value = clamp(value || 0); }
    /**
     * @return {?}
     */
    _primaryTransform() {
        /** @type {?} */
        const scale = this.value;
        return { transform: `scaleX(${scale})` };
    }
}
NxProgressbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-progressbar',
                template: "<div class=\"nx-progress__track\">\n  <div class=\"nx-progress__indicator\" [ngStyle]=\"_primaryTransform()\"></div>\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[attr.aria-valuenow]': 'value'
                },
                styles: [":host{display:block;height:4px;overflow:hidden;position:relative;width:100%}.nx-progress__track{background-color:#ececec;background-color:var(--progressbar-background-color,#ececec);height:100%}.nx-progress__indicator{transform-origin:top left;height:100%;position:absolute;width:100%}.nx-progress__indicator::after{height:100%;position:absolute;width:100%;-webkit-animation:none;animation:none;content:'';display:inline-block;left:0;background-color:#007ab3;background-color:var(--progressbar-indicator-color,#007ab3)}@media screen and (-ms-high-contrast:active){:host{height:8px}.nx-progress__track{border:1px solid windowFrame;border-radius:2px}.nx-progress__indicator{border-right:1px solid windowFrame}.nx-progress__indicator::after{background:highlight}}"]
            }] }
];
NxProgressbarComponent.propDecorators = {
    value: [{ type: Input }]
};
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxProgressbarComponent.prototype.progressbarId;
    /**
     * @type {?}
     * @private
     */
    NxProgressbarComponent.prototype._value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NiYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvcHJvZ3Jlc3NiYXIvIiwic291cmNlcyI6WyJwcm9ncmVzc2Jhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFDOztJQUM1QyxhQUFhLEdBQUcsQ0FBQztBQVdyQixNQUFNLE9BQU8sc0JBQXNCO0lBVG5DOzs7O1FBWUUsa0JBQWEsR0FBRyxtQkFBbUIsYUFBYSxFQUFFLEVBQUUsQ0FBQztRQU03QyxXQUFNLEdBQVcsQ0FBQyxDQUFDO0lBTTdCLENBQUM7Ozs7O0lBVEMsSUFDSSxLQUFLLEtBQWEsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs7Ozs7SUFDM0MsSUFBSSxLQUFLLENBQUMsS0FBYSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7SUFHN0QsaUJBQWlCOztjQUNULEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSztRQUN4QixPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsS0FBSyxHQUFHLEVBQUMsQ0FBQztJQUN6QyxDQUFDOzs7WUF2QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLHdJQUEyQztnQkFDM0MsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBRS9DLElBQUksRUFBRTtvQkFDSixzQkFBc0IsRUFBRSxPQUFPO2lCQUNoQzs7YUFDRjs7O29CQU9FLEtBQUs7Ozs7Ozs7SUFITiwrQ0FBcUQ7Ozs7O0lBTXJELHdDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJ0BhbGxpYW56L25neC1uZGJ4L3V0aWxzJztcbmxldCBwcm9ncmVzc2JhcklkID0gMDtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbngtcHJvZ3Jlc3NiYXInLFxuICB0ZW1wbGF0ZVVybDogJy4vcHJvZ3Jlc3NiYXIuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3R5bGVVcmxzOiBbJy4vcHJvZ3Jlc3NiYXIuY29tcG9uZW50LnNjc3MnXSxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5hcmlhLXZhbHVlbm93XSc6ICd2YWx1ZSdcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOeFByb2dyZXNzYmFyQ29tcG9uZW50IHtcblxuICAvKiogQGRvY3MtcHJpdmF0ZSAqL1xuICBwcm9ncmVzc2JhcklkID0gYG54LXByb2dyZXNzLWJhci0ke3Byb2dyZXNzYmFySWQrK31gO1xuXG4gIC8qKiBTZXRzIHRoZSB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgYmFyLiBEZWZhdWx0cyB0byB6ZXJvLiBNaXJyb3JlZCB0byBhcmlhLXZhbHVlIG5vdy4gKi9cbiAgQElucHV0KClcbiAgZ2V0IHZhbHVlKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl92YWx1ZTsgfVxuICBzZXQgdmFsdWUodmFsdWU6IG51bWJlcikgeyB0aGlzLl92YWx1ZSA9IGNsYW1wKHZhbHVlIHx8IDApOyB9XG4gIHByaXZhdGUgX3ZhbHVlOiBudW1iZXIgPSAwO1xuXG4gIF9wcmltYXJ5VHJhbnNmb3JtKCkge1xuICAgIGNvbnN0IHNjYWxlID0gdGhpcy52YWx1ZTtcbiAgICByZXR1cm4ge3RyYW5zZm9ybTogYHNjYWxlWCgke3NjYWxlfSlgfTtcbiAgfVxufVxuIl19