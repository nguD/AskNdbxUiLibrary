/**
 * @fileoverview added by tsickle
 * Generated from: formfield.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { NxFormfieldErrorDirective } from './error.directive';
import { NxFormfieldComponent } from './formfield.component';
import { NxFormfieldHintDirective } from './hint.directive';
import { NxFormfieldNoteDirective } from './note.directive';
import { NxFormfieldPrefixDirective } from './prefix.directive';
import { NxFormfieldSuffixDirective } from './suffix.directive';
import { NxFormfieldAppendixDirective } from './appendix.directive';
import { NxFormfieldLabelDirective } from './label.directive';
import { NxErrorModule, NxLabelModule } from '@allianz/ngx-ndbx/base';
export class NxFormfieldModule {
}
NxFormfieldModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    NxFormfieldComponent,
                    NxFormfieldHintDirective,
                    NxFormfieldErrorDirective,
                    NxFormfieldNoteDirective,
                    NxFormfieldPrefixDirective,
                    NxFormfieldSuffixDirective,
                    NxFormfieldAppendixDirective,
                    NxFormfieldLabelDirective
                ],
                exports: [
                    NxFormfieldComponent,
                    NxFormfieldHintDirective,
                    NxFormfieldErrorDirective,
                    NxFormfieldNoteDirective,
                    NxFormfieldPrefixDirective,
                    NxFormfieldSuffixDirective,
                    NxFormfieldAppendixDirective,
                    NxFormfieldLabelDirective,
                    NxErrorModule,
                    NxLabelModule
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWZpZWxkLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4L2Zvcm1maWVsZC8iLCJzb3VyY2VzIjpbImZvcm1maWVsZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBNkJ0RSxNQUFNLE9BQU8saUJBQWlCOzs7WUEzQjdCLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUU7b0JBQ1AsWUFBWTtpQkFDYjtnQkFDRCxZQUFZLEVBQUU7b0JBQ1osb0JBQW9CO29CQUNwQix3QkFBd0I7b0JBQ3hCLHlCQUF5QjtvQkFDekIsd0JBQXdCO29CQUN4QiwwQkFBMEI7b0JBQzFCLDBCQUEwQjtvQkFDMUIsNEJBQTRCO29CQUM1Qix5QkFBeUI7aUJBQzFCO2dCQUNELE9BQU8sRUFBRTtvQkFDUCxvQkFBb0I7b0JBQ3BCLHdCQUF3QjtvQkFDeEIseUJBQXlCO29CQUN6Qix3QkFBd0I7b0JBQ3hCLDBCQUEwQjtvQkFDMUIsMEJBQTBCO29CQUMxQiw0QkFBNEI7b0JBQzVCLHlCQUF5QjtvQkFDekIsYUFBYTtvQkFDYixhQUFhO2lCQUNkO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTnhGb3JtZmllbGRFcnJvckRpcmVjdGl2ZSB9IGZyb20gJy4vZXJyb3IuZGlyZWN0aXZlJztcbmltcG9ydCB7IE54Rm9ybWZpZWxkQ29tcG9uZW50IH0gZnJvbSAnLi9mb3JtZmllbGQuY29tcG9uZW50JztcbmltcG9ydCB7IE54Rm9ybWZpZWxkSGludERpcmVjdGl2ZSB9IGZyb20gJy4vaGludC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTnhGb3JtZmllbGROb3RlRGlyZWN0aXZlIH0gZnJvbSAnLi9ub3RlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOeEZvcm1maWVsZFByZWZpeERpcmVjdGl2ZSB9IGZyb20gJy4vcHJlZml4LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOeEZvcm1maWVsZFN1ZmZpeERpcmVjdGl2ZSB9IGZyb20gJy4vc3VmZml4LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOeEZvcm1maWVsZEFwcGVuZGl4RGlyZWN0aXZlIH0gZnJvbSAnLi9hcHBlbmRpeC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTnhGb3JtZmllbGRMYWJlbERpcmVjdGl2ZSB9IGZyb20gJy4vbGFiZWwuZGlyZWN0aXZlJztcbmltcG9ydCB7IE54RXJyb3JNb2R1bGUsIE54TGFiZWxNb2R1bGUgfSBmcm9tICdAYWxsaWFuei9uZ3gtbmRieC9iYXNlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBOeEZvcm1maWVsZENvbXBvbmVudCxcbiAgICBOeEZvcm1maWVsZEhpbnREaXJlY3RpdmUsXG4gICAgTnhGb3JtZmllbGRFcnJvckRpcmVjdGl2ZSxcbiAgICBOeEZvcm1maWVsZE5vdGVEaXJlY3RpdmUsXG4gICAgTnhGb3JtZmllbGRQcmVmaXhEaXJlY3RpdmUsXG4gICAgTnhGb3JtZmllbGRTdWZmaXhEaXJlY3RpdmUsXG4gICAgTnhGb3JtZmllbGRBcHBlbmRpeERpcmVjdGl2ZSxcbiAgICBOeEZvcm1maWVsZExhYmVsRGlyZWN0aXZlXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBOeEZvcm1maWVsZENvbXBvbmVudCxcbiAgICBOeEZvcm1maWVsZEhpbnREaXJlY3RpdmUsXG4gICAgTnhGb3JtZmllbGRFcnJvckRpcmVjdGl2ZSxcbiAgICBOeEZvcm1maWVsZE5vdGVEaXJlY3RpdmUsXG4gICAgTnhGb3JtZmllbGRQcmVmaXhEaXJlY3RpdmUsXG4gICAgTnhGb3JtZmllbGRTdWZmaXhEaXJlY3RpdmUsXG4gICAgTnhGb3JtZmllbGRBcHBlbmRpeERpcmVjdGl2ZSxcbiAgICBOeEZvcm1maWVsZExhYmVsRGlyZWN0aXZlLFxuICAgIE54RXJyb3JNb2R1bGUsXG4gICAgTnhMYWJlbE1vZHVsZVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIE54Rm9ybWZpZWxkTW9kdWxlIHsgfVxuIl19