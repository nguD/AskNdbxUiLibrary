/**
 * @fileoverview added by tsickle
 * Generated from: formfield-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docs-private
 * @abstract
 * @template T
 */
export class NxFormfieldControl {
}
if (false) {
    /** @type {?} */
    NxFormfieldControl.prototype.value;
    /** @type {?} */
    NxFormfieldControl.prototype.stateChanges;
    /** @type {?} */
    NxFormfieldControl.prototype.empty;
    /** @type {?} */
    NxFormfieldControl.prototype.id;
    /** @type {?} */
    NxFormfieldControl.prototype.ngControl;
    /** @type {?} */
    NxFormfieldControl.prototype.focused;
    /** @type {?} */
    NxFormfieldControl.prototype.required;
    /** @type {?} */
    NxFormfieldControl.prototype.disabled;
    /** @type {?} */
    NxFormfieldControl.prototype.readonly;
    /** @type {?} */
    NxFormfieldControl.prototype.shouldLabelFloat;
    /** @type {?} */
    NxFormfieldControl.prototype.errorState;
    /**
     * The placeholder for this control.
     * @type {?}
     */
    NxFormfieldControl.prototype.placeholder;
    /**
     * An optional name for the control type that can be used to distinguish `nx-formfield` elements
     * based on their control type. The form field will add a class,
     * `nx-formfield--type-{{controlType}}` to its root element.
     * @type {?}
     */
    NxFormfieldControl.prototype.controlType;
    /**
     * @abstract
     * @param {?} ids
     * @return {?}
     */
    NxFormfieldControl.prototype.setDescribedByIds = function (ids) { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    NxFormfieldControl.prototype.setAriaLabel = function (value) { };
    /**
     * @abstract
     * @return {?}
     */
    NxFormfieldControl.prototype.elementRef = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWZpZWxkLWNvbnRyb2wuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC9mb3JtZmllbGQvIiwic291cmNlcyI6WyJmb3JtZmllbGQtY29udHJvbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBS0EsTUFBTSxPQUFnQixrQkFBa0I7Q0F1Q3ZDOzs7SUF0Q0MsbUNBQWdCOztJQUdoQiwwQ0FBd0M7O0lBRXhDLG1DQUF3Qjs7SUFFeEIsZ0NBQW9COztJQUVwQix1Q0FBcUM7O0lBRXJDLHFDQUEwQjs7SUFFMUIsc0NBQTJCOztJQUUzQixzQ0FBMkI7O0lBRTNCLHNDQUEyQjs7SUFFM0IsOENBQW9DOztJQUVwQyx3Q0FBNkI7Ozs7O0lBRzdCLHlDQUE2Qjs7Ozs7OztJQU83Qix5Q0FBOEI7Ozs7OztJQUU5QixvRUFBZ0Q7Ozs7OztJQUVoRCxpRUFBNEM7Ozs7O0lBRTVDLDBEQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqIEBkb2NzLXByaXZhdGUgKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOeEZvcm1maWVsZENvbnRyb2w8VD4ge1xuICB2YWx1ZTogVCB8IG51bGw7XG5cbiAgLy8gQWxsb3cgdGhlIGNvbnRyb2wgdG8gbm90aWZ5IHRoZSBwYXJlbnQgZm9ybWZpZWxkIGFib3V0IGludGVybmFsIHN0YXRlIGNoYW5nZXNcbiAgcmVhZG9ubHkgc3RhdGVDaGFuZ2VzOiBPYnNlcnZhYmxlPHZvaWQ+O1xuXG4gIHJlYWRvbmx5IGVtcHR5OiBib29sZWFuO1xuXG4gIHJlYWRvbmx5IGlkOiBzdHJpbmc7XG5cbiAgcmVhZG9ubHkgbmdDb250cm9sOiBOZ0NvbnRyb2wgfCBudWxsO1xuXG4gIHJlYWRvbmx5IGZvY3VzZWQ6IGJvb2xlYW47XG5cbiAgcmVhZG9ubHkgcmVxdWlyZWQ6IGJvb2xlYW47XG5cbiAgcmVhZG9ubHkgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgcmVhZG9ubHkgcmVhZG9ubHk6IGJvb2xlYW47XG5cbiAgcmVhZG9ubHkgc2hvdWxkTGFiZWxGbG9hdD86IGJvb2xlYW47XG5cbiAgcmVhZG9ubHkgZXJyb3JTdGF0ZTogYm9vbGVhbjtcblxuICAvKiogVGhlIHBsYWNlaG9sZGVyIGZvciB0aGlzIGNvbnRyb2wuICovXG4gIHJlYWRvbmx5IHBsYWNlaG9sZGVyOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICogQW4gb3B0aW9uYWwgbmFtZSBmb3IgdGhlIGNvbnRyb2wgdHlwZSB0aGF0IGNhbiBiZSB1c2VkIHRvIGRpc3Rpbmd1aXNoIGBueC1mb3JtZmllbGRgIGVsZW1lbnRzXG4gICAqIGJhc2VkIG9uIHRoZWlyIGNvbnRyb2wgdHlwZS4gVGhlIGZvcm0gZmllbGQgd2lsbCBhZGQgYSBjbGFzcyxcbiAgICogYG54LWZvcm1maWVsZC0tdHlwZS17e2NvbnRyb2xUeXBlfX1gIHRvIGl0cyByb290IGVsZW1lbnQuXG4gICAqL1xuICByZWFkb25seSBjb250cm9sVHlwZT86IHN0cmluZztcblxuICBhYnN0cmFjdCBzZXREZXNjcmliZWRCeUlkcyhpZHM6IHN0cmluZ1tdKTogdm9pZDtcblxuICBhYnN0cmFjdCBzZXRBcmlhTGFiZWw/KHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuXG4gIGFic3RyYWN0IGdldCBlbGVtZW50UmVmKCk6IEVsZW1lbnRSZWY7XG59XG4iXX0=