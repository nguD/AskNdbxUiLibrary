/**
 * @fileoverview added by tsickle
 * Generated from: card/card.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, Attribute } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
export class NxCardComponent {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} tabindex
     */
    constructor(_changeDetectorRef, tabindex) {
        this._changeDetectorRef = _changeDetectorRef;
        this._disabled = false;
        /**
         * Event emitted when the selected value has changed.
         *
         * This output  property of the card is deprecated,
         * as its selectable properties are deprecated as well.
         * Please use the selectable card component instead.
         *
         * @deprecated
         * \@deletion-target 10.0.0
         */
        this.selectedChange = new EventEmitter();
        this._tabindex = tabindex;
    }
    /**
     * Whether this card is selectable or not.
     *
     * The selectable property of the card is deprecated.
     * Please use the selectable card component instead.
     *
     * @deprecated
     * \@deletion-target 10.0.0
     * @param {?} value
     * @return {?}
     */
    set selectable(value) {
        this._selectable = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get selectable() {
        return this._selectable;
    }
    /**
     * Whether this card is selected or not.
     *
     * The selected property of the card is deprecated.
     * Please use the selectable card component instead.
     *
     * @deprecated
     * \@deletion-target 10.0.0
     * @param {?} value
     * @return {?}
     */
    set selected(value) {
        this._selected = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * Whether a selectable card is disabled or not.
     *
     * The disabled property of the card will be deprecated,
     * as its selectable properties are deprecated as well.
     * Please use the selectable card component instead.
     *
     * @deprecated
     * \@deletion-target 10.0.0
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._changeDetectorRef.markForCheck();
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @return {?}
     */
    _toggleSelected() {
        if (this.selectable && !this.disabled) {
            this.selected = !this.selected;
            this.selectedChange.emit(this.selected);
        }
    }
    /**
     * @return {?}
     */
    _getTabindex() {
        if (this.disabled) {
            return '-1';
        }
        if (this.selectable) {
            return this._tabindex || '0';
        }
        return this._tabindex || '';
    }
}
NxCardComponent.decorators = [
    { type: Component, args: [{
                template: '<ng-content></ng-content>',
                selector: 'nx-card',
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    'class': 'nx-card',
                    '[class.is-selectable]': 'selectable',
                    '[class.is-selected]': 'selected',
                    '[class.is-disabled]': 'disabled',
                    '[attr.aria-disabled]': 'disabled',
                    '(click)': '_toggleSelected()',
                    '(keydown.enter)': '_toggleSelected()',
                    '[attr.tabindex]': '_getTabindex()'
                },
                styles: [":host{background:#fff;background:var(--card-background-color,#fff);border-color:var(--card-border-color,#d9d9d9);border-width:var(--card-border-width,1px);border-radius:4px;border-radius:var(--card-border-radius,4px);box-shadow:none;display:inline-block;margin-bottom:24px;padding:23px;transition:background-color .2s,box-shadow .2s;border:1px solid #d9d9d9}:host:focus,:host:hover{outline:0}:host.is-selectable{cursor:pointer}:host.is-selectable:hover{background:#f5f5f5;background:var(--card-background-hover-color,#f5f5f5)}:host.is-selected{box-shadow:0 8px 24px rgba(65,65,65,.35);background:#f5f5f5;background:var(--card-background-selected-color,#f5f5f5)}:host.is-disabled{cursor:not-allowed;opacity:.4}:host.is-disabled:hover{background:#fff;background:var(--card-background-color,#fff)}:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}:host.is-selectable{border-color:buttonText}:host.is-selected{border-width:3px;padding:21px;border-color:highlight}:host.is-disabled{opacity:1;border-color:GrayText;color:GrayText}}"]
            }] }
];
/** @nocollapse */
NxCardComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }
];
NxCardComponent.propDecorators = {
    selectable: [{ type: Input }],
    selected: [{ type: Input }],
    disabled: [{ type: Input }],
    selectedChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    NxCardComponent.prototype._tabindex;
    /**
     * @type {?}
     * @private
     */
    NxCardComponent.prototype._selectable;
    /**
     * @type {?}
     * @private
     */
    NxCardComponent.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    NxCardComponent.prototype._disabled;
    /**
     * Event emitted when the selected value has changed.
     *
     * This output  property of the card is deprecated,
     * as its selectable properties are deprecated as well.
     * Please use the selectable card component instead.
     *
     * @deprecated
     * \@deletion-target 10.0.0
     * @type {?}
     */
    NxCardComponent.prototype.selectedChange;
    /**
     * @type {?}
     * @private
     */
    NxCardComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC8iLCJzb3VyY2VzIjpbImNhcmQvY2FyZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM1SCxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQWtCNUQsTUFBTSxPQUFPLGVBQWU7Ozs7O0lBK0UxQixZQUNZLGtCQUFxQyxFQUN0QixRQUFnQjtRQUQvQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1CO1FBZnpDLGNBQVMsR0FBWSxLQUFLLENBQUM7Ozs7Ozs7Ozs7O1FBWXpCLG1CQUFjLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUtyRCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUM1QixDQUFDOzs7Ozs7Ozs7Ozs7SUF2RUQsSUFDSSxVQUFVLENBQUMsS0FBYztRQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN6QyxDQUFDOzs7O0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7Ozs7Ozs7Ozs7OztJQWFELElBQ0ksUUFBUSxDQUFDLEtBQWM7UUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDekMsQ0FBQzs7OztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDOzs7Ozs7Ozs7Ozs7O0lBY0QsSUFDSSxRQUFRLENBQUMsS0FBYztRQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN6QyxDQUFDOzs7O0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7Ozs7SUFzQkQsZUFBZTtRQUNiLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDckMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDL0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3pDO0lBQ0gsQ0FBQzs7OztJQUVELFlBQVk7UUFDVixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixPQUFPLElBQUksQ0FBQyxTQUFTLElBQUksR0FBRyxDQUFDO1NBQzlCO1FBRUQsT0FBTyxJQUFJLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQztJQUM5QixDQUFDOzs7WUF0SEYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSwyQkFBMkI7Z0JBRXJDLFFBQVEsRUFBRSxTQUFTO2dCQUNuQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsSUFBSSxFQUFFO29CQUNKLE9BQU8sRUFBRSxTQUFTO29CQUNsQix1QkFBdUIsRUFBRSxZQUFZO29CQUNyQyxxQkFBcUIsRUFBRSxVQUFVO29CQUNqQyxxQkFBcUIsRUFBRSxVQUFVO29CQUNqQyxzQkFBc0IsRUFBRSxVQUFVO29CQUNsQyxTQUFTLEVBQUUsbUJBQW1CO29CQUM5QixpQkFBaUIsRUFBRSxtQkFBbUI7b0JBQ3RDLGlCQUFpQixFQUFFLGdCQUFnQjtpQkFDcEM7O2FBQ0Y7Ozs7WUFsQndFLGlCQUFpQjt5Q0FvR25GLFNBQVMsU0FBQyxVQUFVOzs7eUJBckV4QixLQUFLO3VCQXFCTCxLQUFLO3VCQXNCTCxLQUFLOzZCQXNCTCxNQUFNOzs7O0lBNUVQLG9DQUFrQjs7Ozs7SUFxQmxCLHNDQUE2Qjs7Ozs7SUFxQjdCLG9DQUEyQjs7Ozs7SUFzQjNCLG9DQUFtQzs7Ozs7Ozs7Ozs7O0lBWW5DLHlDQUF1RDs7Ozs7SUFHbkQsNkNBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBBdHRyaWJ1dGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtjb2VyY2VCb29sZWFuUHJvcGVydHl9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5cbkBDb21wb25lbnQoe1xuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBzdHlsZVVybHM6IFsnY2FyZC5zY3NzJ10sXG4gIHNlbGVjdG9yOiAnbngtY2FyZCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBob3N0OiB7XG4gICAgJ2NsYXNzJzogJ254LWNhcmQnLFxuICAgICdbY2xhc3MuaXMtc2VsZWN0YWJsZV0nOiAnc2VsZWN0YWJsZScsXG4gICAgJ1tjbGFzcy5pcy1zZWxlY3RlZF0nOiAnc2VsZWN0ZWQnLFxuICAgICdbY2xhc3MuaXMtZGlzYWJsZWRdJzogJ2Rpc2FibGVkJyxcbiAgICAnW2F0dHIuYXJpYS1kaXNhYmxlZF0nOiAnZGlzYWJsZWQnLFxuICAgICcoY2xpY2spJzogJ190b2dnbGVTZWxlY3RlZCgpJyxcbiAgICAnKGtleWRvd24uZW50ZXIpJzogJ190b2dnbGVTZWxlY3RlZCgpJyxcbiAgICAnW2F0dHIudGFiaW5kZXhdJzogJ19nZXRUYWJpbmRleCgpJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE54Q2FyZENvbXBvbmVudCB7XG4gIF90YWJpbmRleDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoaXMgY2FyZCBpcyBzZWxlY3RhYmxlIG9yIG5vdC5cbiAgICpcbiAgICogVGhlIHNlbGVjdGFibGUgcHJvcGVydHkgb2YgdGhlIGNhcmQgaXMgZGVwcmVjYXRlZC5cbiAgICogUGxlYXNlIHVzZSB0aGUgc2VsZWN0YWJsZSBjYXJkIGNvbXBvbmVudCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBAZGVsZXRpb24tdGFyZ2V0IDEwLjAuMFxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IHNlbGVjdGFibGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zZWxlY3RhYmxlID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcbiAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIGdldCBzZWxlY3RhYmxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zZWxlY3RhYmxlO1xuICB9XG5cbiAgcHJpdmF0ZSBfc2VsZWN0YWJsZTogYm9vbGVhbjtcblxuICAvKipcbiAgICogV2hldGhlciB0aGlzIGNhcmQgaXMgc2VsZWN0ZWQgb3Igbm90LlxuICAgKlxuICAgKiBUaGUgc2VsZWN0ZWQgcHJvcGVydHkgb2YgdGhlIGNhcmQgaXMgZGVwcmVjYXRlZC5cbiAgICogUGxlYXNlIHVzZSB0aGUgc2VsZWN0YWJsZSBjYXJkIGNvbXBvbmVudCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBAZGVsZXRpb24tdGFyZ2V0IDEwLjAuMFxuICAqL1xuICBASW5wdXQoKVxuICBzZXQgc2VsZWN0ZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zZWxlY3RlZCA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBnZXQgc2VsZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkO1xuICB9XG5cbiAgcHJpdmF0ZSBfc2VsZWN0ZWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgYSBzZWxlY3RhYmxlIGNhcmQgaXMgZGlzYWJsZWQgb3Igbm90LlxuICAgKlxuICAgKiBUaGUgZGlzYWJsZWQgcHJvcGVydHkgb2YgdGhlIGNhcmQgd2lsbCBiZSBkZXByZWNhdGVkLFxuICAgKiBhcyBpdHMgc2VsZWN0YWJsZSBwcm9wZXJ0aWVzIGFyZSBkZXByZWNhdGVkIGFzIHdlbGwuXG4gICAqIFBsZWFzZSB1c2UgdGhlIHNlbGVjdGFibGUgY2FyZCBjb21wb25lbnQgaW5zdGVhZC5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQGRlbGV0aW9uLXRhcmdldCAxMC4wLjBcbiAgKi9cbiAgQElucHV0KClcbiAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xuICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZDtcbiAgfVxuXG4gIHByaXZhdGUgX2Rpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgc2VsZWN0ZWQgdmFsdWUgaGFzIGNoYW5nZWQuXG4gICAqXG4gICAqIFRoaXMgb3V0cHV0ICBwcm9wZXJ0eSBvZiB0aGUgY2FyZCBpcyBkZXByZWNhdGVkLFxuICAgKiBhcyBpdHMgc2VsZWN0YWJsZSBwcm9wZXJ0aWVzIGFyZSBkZXByZWNhdGVkIGFzIHdlbGwuXG4gICAqIFBsZWFzZSB1c2UgdGhlIHNlbGVjdGFibGUgY2FyZCBjb21wb25lbnQgaW5zdGVhZC5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQGRlbGV0aW9uLXRhcmdldCAxMC4wLjBcbiAgKi9cbiAgQE91dHB1dCgpIHNlbGVjdGVkQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgcHJpdmF0ZSBfY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgQEF0dHJpYnV0ZSgndGFiaW5kZXgnKSB0YWJpbmRleDogc3RyaW5nKSB7XG4gICAgdGhpcy5fdGFiaW5kZXggPSB0YWJpbmRleDtcbiAgfVxuXG4gIF90b2dnbGVTZWxlY3RlZCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zZWxlY3RhYmxlICYmICF0aGlzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkID0gIXRoaXMuc2VsZWN0ZWQ7XG4gICAgICB0aGlzLnNlbGVjdGVkQ2hhbmdlLmVtaXQodGhpcy5zZWxlY3RlZCk7XG4gICAgfVxuICB9XG5cbiAgX2dldFRhYmluZGV4KCk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybiAnLTEnO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNlbGVjdGFibGUpIHtcbiAgICAgIHJldHVybiB0aGlzLl90YWJpbmRleCB8fCAnMCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3RhYmluZGV4IHx8ICcnO1xuICB9XG59XG4iXX0=