/**
 * @fileoverview added by tsickle
 * Generated from: table.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { NxTableCellComponent } from './table-cell.component';
import { NxHeaderCellDirective } from './header-cell.directive';
import { NxTableComponent } from './table.component';
import { NxTableRowComponent } from './table-row.component';
import { NxExpandableTableCellComponent } from './expandable/expandable-table-cell.component';
import { NxExpandableTableRowComponent } from './expandable/expandable-table-row.component';
import { NxToggleButtonComponent } from './expandable/toggle-button.component';
import { NxExpandableTableDirective } from './expandable/expandable-table.directive';
import { NxSortHeaderComponent } from './sort-header/sort-header.component';
import { NxSortDirective } from './sort-header/sort.directive';
import { NxSortHeaderIntl } from './sort-header/sort-header-intl';
/** @type {?} */
const EXPORTED_DECLARED_ELEMENTS = [
    NxHeaderCellDirective,
    NxTableComponent,
    NxTableCellComponent,
    NxTableComponent,
    NxTableRowComponent,
    NxToggleButtonComponent,
    NxExpandableTableDirective,
    NxExpandableTableRowComponent,
    NxExpandableTableCellComponent,
    NxSortHeaderComponent,
    NxSortDirective
];
export class NxTableModule {
}
NxTableModule.decorators = [
    { type: NgModule, args: [{
                declarations: EXPORTED_DECLARED_ELEMENTS,
                exports: EXPORTED_DECLARED_ELEMENTS,
                imports: [
                    CommonModule,
                    NxIconModule
                ],
                providers: [NxSortHeaderIntl],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvdGFibGUvIiwic291cmNlcyI6WyJ0YWJsZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDOUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDckQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDOUYsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDNUYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDL0UsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDckYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDNUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOztNQUU1RCwwQkFBMEIsR0FBRztJQUNqQyxxQkFBcUI7SUFDckIsZ0JBQWdCO0lBQ2hCLG9CQUFvQjtJQUNwQixnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLHVCQUF1QjtJQUN2QiwwQkFBMEI7SUFDMUIsNkJBQTZCO0lBQzdCLDhCQUE4QjtJQUM5QixxQkFBcUI7SUFDckIsZUFBZTtDQUNoQjtBQVVELE1BQU0sT0FBTyxhQUFhOzs7WUFUekIsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSwwQkFBMEI7Z0JBQ3hDLE9BQU8sRUFBRSwwQkFBMEI7Z0JBQ25DLE9BQU8sRUFBRTtvQkFDUCxZQUFZO29CQUNaLFlBQVk7aUJBQ2I7Z0JBQ0QsU0FBUyxFQUFFLENBQUUsZ0JBQWdCLENBQUU7YUFDaEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE54SWNvbk1vZHVsZSB9IGZyb20gJ0BhbGxpYW56L25neC1uZGJ4L2ljb24nO1xuaW1wb3J0IHsgTnhUYWJsZUNlbGxDb21wb25lbnQgfSBmcm9tICcuL3RhYmxlLWNlbGwuY29tcG9uZW50JztcbmltcG9ydCB7IE54SGVhZGVyQ2VsbERpcmVjdGl2ZSB9IGZyb20gJy4vaGVhZGVyLWNlbGwuZGlyZWN0aXZlJztcbmltcG9ydCB7IE54VGFibGVDb21wb25lbnQgfSBmcm9tICcuL3RhYmxlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOeFRhYmxlUm93Q29tcG9uZW50IH0gZnJvbSAnLi90YWJsZS1yb3cuY29tcG9uZW50JztcbmltcG9ydCB7IE54RXhwYW5kYWJsZVRhYmxlQ2VsbENvbXBvbmVudCB9IGZyb20gJy4vZXhwYW5kYWJsZS9leHBhbmRhYmxlLXRhYmxlLWNlbGwuY29tcG9uZW50JztcbmltcG9ydCB7IE54RXhwYW5kYWJsZVRhYmxlUm93Q29tcG9uZW50IH0gZnJvbSAnLi9leHBhbmRhYmxlL2V4cGFuZGFibGUtdGFibGUtcm93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOeFRvZ2dsZUJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vZXhwYW5kYWJsZS90b2dnbGUtYnV0dG9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOeEV4cGFuZGFibGVUYWJsZURpcmVjdGl2ZSB9IGZyb20gJy4vZXhwYW5kYWJsZS9leHBhbmRhYmxlLXRhYmxlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOeFNvcnRIZWFkZXJDb21wb25lbnQgfSBmcm9tICcuL3NvcnQtaGVhZGVyL3NvcnQtaGVhZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOeFNvcnREaXJlY3RpdmUgfSBmcm9tICcuL3NvcnQtaGVhZGVyL3NvcnQuZGlyZWN0aXZlJztcbmltcG9ydCB7IE54U29ydEhlYWRlckludGwgfSBmcm9tICcuL3NvcnQtaGVhZGVyL3NvcnQtaGVhZGVyLWludGwnO1xuXG5jb25zdCBFWFBPUlRFRF9ERUNMQVJFRF9FTEVNRU5UUyA9IFtcbiAgTnhIZWFkZXJDZWxsRGlyZWN0aXZlLFxuICBOeFRhYmxlQ29tcG9uZW50LFxuICBOeFRhYmxlQ2VsbENvbXBvbmVudCxcbiAgTnhUYWJsZUNvbXBvbmVudCxcbiAgTnhUYWJsZVJvd0NvbXBvbmVudCxcbiAgTnhUb2dnbGVCdXR0b25Db21wb25lbnQsXG4gIE54RXhwYW5kYWJsZVRhYmxlRGlyZWN0aXZlLFxuICBOeEV4cGFuZGFibGVUYWJsZVJvd0NvbXBvbmVudCxcbiAgTnhFeHBhbmRhYmxlVGFibGVDZWxsQ29tcG9uZW50LFxuICBOeFNvcnRIZWFkZXJDb21wb25lbnQsXG4gIE54U29ydERpcmVjdGl2ZVxuXTtcbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogRVhQT1JURURfREVDTEFSRURfRUxFTUVOVFMsXG4gIGV4cG9ydHM6IEVYUE9SVEVEX0RFQ0xBUkVEX0VMRU1FTlRTLFxuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIE54SWNvbk1vZHVsZVxuICBdLFxuICBwcm92aWRlcnM6IFsgTnhTb3J0SGVhZGVySW50bCBdLFxufSlcbmV4cG9ydCBjbGFzcyBOeFRhYmxlTW9kdWxlIHsgfVxuIl19