/**
 * @fileoverview added by tsickle
 * Generated from: sort-header/sort-header.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Optional, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { NxSortDirective } from './sort.directive';
import { ENTER, SPACE } from '@angular/cdk/keycodes';
import { NxSortHeaderIntl } from './sort-header-intl';
export class NxSortHeaderComponent {
    /**
     * @param {?} _sort
     * @param {?} _intl
     * @param {?} _changeDetectorRef
     */
    constructor(_sort, _intl, _changeDetectorRef) {
        this._sort = _sort;
        this._intl = _intl;
        this._changeDetectorRef = _changeDetectorRef;
        this._intlSubscription = this._intl.changes.subscribe((/**
         * @return {?}
         */
        () => this._changeDetectorRef.markForCheck()));
    }
    /**
     * Sets the key of this sort header.
     * @param {?} value
     * @return {?}
     */
    set key(value) {
        if (this._key !== value) {
            this._key = value;
        }
    }
    /**
     * @return {?}
     */
    get key() {
        return this._key;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._parentChangeSubscription = this._sort._stateChanges.subscribe((/**
         * @return {?}
         */
        () => {
            this._changeDetectorRef.markForCheck();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._parentChangeSubscription) {
            this._parentChangeSubscription.unsubscribe();
        }
        this._intlSubscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    _handleClick() {
        this._sort.sort(this._key);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _onKeydown($event) {
        if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {
            this._sort.sort(this._key);
            // prevent page from scrolling down
            if ($event.keyCode === SPACE) {
                $event.preventDefault();
            }
        }
    }
    /**
     * @return {?}
     */
    _isSortedAscending() {
        return (this._sort.active === this._key && this._sort.direction === 'asc');
    }
    /**
     * @return {?}
     */
    _isSortedDescending() {
        return (this._sort.active === this._key && this._sort.direction === 'desc');
    }
    /**
     * @return {?}
     */
    _getAriaLabel() {
        if (this._sort.active === this._key && this._sort.direction === 'asc') {
            return `${this._intl.sortDescendingAriaLabel}`;
        }
        return `${this._intl.sortAscendingAriaLabel}`;
    }
}
NxSortHeaderComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'th[nxSortHeaderCell]',
                exportAs: 'nxSortHeaderComponent',
                template: "<div class=\"nx-sort-header__focus-container\" role=\"button\" tabindex=\"0\">\n  <div class=\"nx-sort-header__icons-container\"\n      [attr.aria-label]=\"_getAriaLabel()\">\n    <nx-icon name=\"chevron-up-small\"\n        class=\"nx-sort-header__icon-up\"\n        [class.nx-sort-header__hidden-icon]=\"_isSortedDescending()\">\n    </nx-icon>\n    <nx-icon name=\"chevron-down-small\"\n        class=\"nx-sort-header__icon-down\"\n        [class.nx-sort-header__hidden-icon]=\"_isSortedAscending()\">\n    </nx-icon>\n  </div>\n\n  <ng-content></ng-content>\n</div>\n",
                host: {
                    '(click)': '_handleClick()',
                    '(keydown)': '_onKeydown($event)'
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{cursor:pointer}.nx-sort-header__icons-container{display:inline-block;margin-right:8px;vertical-align:bottom;width:24px;position:relative;height:24px}.nx-sort-header__icons-container nx-icon{font-size:20px;position:absolute;font-weight:600;width:24px}.nx-sort-header__icons-container .nx-sort-header__icon-up{top:-3px}.nx-sort-header__icons-container .nx-sort-header__icon-down{top:5px}.nx-sort-header__icons-container .nx-sort-header__hidden-icon{visibility:hidden}.nx-sort-header__focus-container{display:flex}.nx-sort-header__focus-container:focus{outline:0}:host-context([data-whatinput=keyboard]) .nx-sort-header__focus-container:focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6);border-radius:4px}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]) .nx-sort-header__focus-container:focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}.nx-sort-header__focus-container{color:buttonText}}"]
            }] }
];
/** @nocollapse */
NxSortHeaderComponent.ctorParameters = () => [
    { type: NxSortDirective, decorators: [{ type: Optional }] },
    { type: NxSortHeaderIntl },
    { type: ChangeDetectorRef }
];
NxSortHeaderComponent.propDecorators = {
    key: [{ type: Input, args: ['nxSortHeaderCell',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxSortHeaderComponent.prototype._parentChangeSubscription;
    /**
     * @type {?}
     * @private
     */
    NxSortHeaderComponent.prototype._intlSubscription;
    /**
     * @type {?}
     * @private
     */
    NxSortHeaderComponent.prototype._key;
    /** @type {?} */
    NxSortHeaderComponent.prototype._sort;
    /** @type {?} */
    NxSortHeaderComponent.prototype._intl;
    /**
     * @type {?}
     * @private
     */
    NxSortHeaderComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC1oZWFkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvdGFibGUvIiwic291cmNlcyI6WyJzb3J0LWhlYWRlci9zb3J0LWhlYWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsdUJBQXVCLEVBQVUsaUJBQWlCLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDMUgsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFjdEQsTUFBTSxPQUFPLHFCQUFxQjs7Ozs7O0lBaUJoQyxZQUErQixLQUFzQixFQUM1QyxLQUF1QixFQUN0QixrQkFBcUM7UUFGaEIsVUFBSyxHQUFMLEtBQUssQ0FBaUI7UUFDNUMsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFDdEIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFtQjtRQUU3QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUzs7O1FBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxFQUFDLENBQUM7SUFDdEcsQ0FBQzs7Ozs7O0lBZkQsSUFDSSxHQUFHLENBQUMsS0FBYTtRQUNuQixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1NBQ25CO0lBQ0gsQ0FBQzs7OztJQUNELElBQUksR0FBRztRQUNMLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDOzs7O0lBU0QsUUFBUTtRQUNOLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxTQUFTOzs7UUFBQyxHQUFHLEVBQUU7WUFDdkUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3pDLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyx5QkFBeUIsRUFBRTtZQUNsQyxJQUFJLENBQUMseUJBQXlCLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDOUM7UUFDRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkMsQ0FBQzs7OztJQUVELFlBQVk7UUFDVixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsTUFBTTtRQUNmLElBQUksTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sS0FBSyxLQUFLLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNwRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFM0IsbUNBQW1DO1lBQ25DLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxLQUFLLEVBQUU7Z0JBQzVCLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQzthQUN6QjtTQUNGO0lBQ0gsQ0FBQzs7OztJQUVELGtCQUFrQjtRQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsS0FBSyxLQUFLLENBQUMsQ0FBQztJQUM3RSxDQUFDOzs7O0lBRUQsbUJBQW1CO1FBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxLQUFLLE1BQU0sQ0FBQyxDQUFDO0lBQzlFLENBQUM7Ozs7SUFFRCxhQUFhO1FBQ1gsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxLQUFLLEtBQUssRUFBRTtZQUNyRSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1NBQ2hEO1FBQ0QsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztJQUNoRCxDQUFDOzs7WUE3RUYsU0FBUyxTQUFDOztnQkFFVCxRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQyxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyxza0JBQXlDO2dCQUV6QyxJQUFJLEVBQUU7b0JBQ0osU0FBUyxFQUFFLGdCQUFnQjtvQkFDM0IsV0FBVyxFQUFFLG9CQUFvQjtpQkFDbEM7Z0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O2FBQ2hEOzs7O1lBaEJRLGVBQWUsdUJBa0NULFFBQVE7WUEvQmQsZ0JBQWdCO1lBSjZDLGlCQUFpQjs7O2tCQXlCcEYsS0FBSyxTQUFDLGtCQUFrQjs7Ozs7OztJQUx6QiwwREFBZ0Q7Ozs7O0lBQ2hELGtEQUF3Qzs7Ozs7SUFDeEMscUNBQXFCOztJQWFULHNDQUF5Qzs7SUFDbkQsc0NBQThCOzs7OztJQUM5QixtREFBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPcHRpb25hbCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIE9uSW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnhTb3J0RGlyZWN0aXZlIH0gZnJvbSAnLi9zb3J0LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEVOVEVSLCBTUEFDRSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9rZXljb2Rlcyc7XG5pbXBvcnQgeyBOeFNvcnRIZWFkZXJJbnRsIH0gZnJvbSAnLi9zb3J0LWhlYWRlci1pbnRsJztcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICd0aFtueFNvcnRIZWFkZXJDZWxsXScsXG4gIGV4cG9ydEFzOiAnbnhTb3J0SGVhZGVyQ29tcG9uZW50JyxcbiAgdGVtcGxhdGVVcmw6ICdzb3J0LWhlYWRlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWydzb3J0LWhlYWRlci5jb21wb25lbnQuc2NzcyddLFxuICBob3N0OiB7XG4gICAgJyhjbGljayknOiAnX2hhbmRsZUNsaWNrKCknLFxuICAgICcoa2V5ZG93biknOiAnX29uS2V5ZG93bigkZXZlbnQpJ1xuICB9LFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBOeFNvcnRIZWFkZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgcHJpdmF0ZSBfcGFyZW50Q2hhbmdlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgX2ludGxTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBfa2V5OiBzdHJpbmc7XG5cbiAgLyoqIFNldHMgdGhlIGtleSBvZiB0aGlzIHNvcnQgaGVhZGVyLiAqL1xuICBASW5wdXQoJ254U29ydEhlYWRlckNlbGwnKVxuICBzZXQga2V5KHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5fa2V5ICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fa2V5ID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIGdldCBrZXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fa2V5O1xuICB9XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHVibGljIF9zb3J0OiBOeFNvcnREaXJlY3RpdmUsXG4gICAgcHVibGljIF9pbnRsOiBOeFNvcnRIZWFkZXJJbnRsLFxuICAgIHByaXZhdGUgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZlxuICApIHtcbiAgICB0aGlzLl9pbnRsU3Vic2NyaXB0aW9uID0gdGhpcy5faW50bC5jaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKSk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLl9wYXJlbnRDaGFuZ2VTdWJzY3JpcHRpb24gPSB0aGlzLl9zb3J0Ll9zdGF0ZUNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuX2NoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuX3BhcmVudENoYW5nZVN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5fcGFyZW50Q2hhbmdlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICAgIHRoaXMuX2ludGxTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIF9oYW5kbGVDbGljaygpIHtcbiAgICB0aGlzLl9zb3J0LnNvcnQodGhpcy5fa2V5KTtcbiAgfVxuXG4gIF9vbktleWRvd24oJGV2ZW50KSB7XG4gICAgaWYgKCRldmVudCAmJiAoJGV2ZW50LmtleUNvZGUgPT09IEVOVEVSIHx8ICRldmVudC5rZXlDb2RlID09PSBTUEFDRSkpIHtcbiAgICAgIHRoaXMuX3NvcnQuc29ydCh0aGlzLl9rZXkpO1xuXG4gICAgICAvLyBwcmV2ZW50IHBhZ2UgZnJvbSBzY3JvbGxpbmcgZG93blxuICAgICAgaWYgKCRldmVudC5rZXlDb2RlID09PSBTUEFDRSkge1xuICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfaXNTb3J0ZWRBc2NlbmRpbmcoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9zb3J0LmFjdGl2ZSA9PT0gdGhpcy5fa2V5ICYmIHRoaXMuX3NvcnQuZGlyZWN0aW9uID09PSAnYXNjJyk7XG4gIH1cblxuICBfaXNTb3J0ZWREZXNjZW5kaW5nKCkge1xuICAgIHJldHVybiAodGhpcy5fc29ydC5hY3RpdmUgPT09IHRoaXMuX2tleSAmJiB0aGlzLl9zb3J0LmRpcmVjdGlvbiA9PT0gJ2Rlc2MnKTtcbiAgfVxuXG4gIF9nZXRBcmlhTGFiZWwoKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5fc29ydC5hY3RpdmUgPT09IHRoaXMuX2tleSAmJiB0aGlzLl9zb3J0LmRpcmVjdGlvbiA9PT0gJ2FzYycpIHtcbiAgICAgIHJldHVybiBgJHt0aGlzLl9pbnRsLnNvcnREZXNjZW5kaW5nQXJpYUxhYmVsfWA7XG4gICAgfVxuICAgIHJldHVybiBgJHt0aGlzLl9pbnRsLnNvcnRBc2NlbmRpbmdBcmlhTGFiZWx9YDtcbiAgfVxufVxuIl19