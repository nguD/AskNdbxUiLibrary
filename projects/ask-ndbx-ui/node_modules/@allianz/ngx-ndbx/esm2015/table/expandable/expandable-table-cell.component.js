/**
 * @fileoverview added by tsickle
 * Generated from: expandable/expandable-table-cell.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectionStrategy, Component, ChangeDetectorRef } from '@angular/core';
import { NxExpandableTableRowComponent } from './expandable-table-row.component';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
/**
 * This is an expandable table cell.
 * Only works in conjunction with the `[nxExpandableTableRow]` component.
 */
export class NxExpandableTableCellComponent {
    /**
     * @param {?} _row
     * @param {?} _changeDetectorRef
     */
    constructor(_row, _changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._destroyed = new Subject();
        this._open = false;
        _row.expanded.pipe(takeUntil(this._destroyed))
            .subscribe((/**
         * @param {?} open
         * @return {?}
         */
        open => {
            this._open = open;
            this._changeDetectorRef.markForCheck();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
    }
}
NxExpandableTableCellComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'td[nxExpandableTableCell]',
                template: "<div [@openClose]=\"_open ? 'open' : 'closed'\" class=\"nx-expandable-table-cell__content\">\n  <div class=\"nx-expandable-table-cell__wrapper\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                host: {
                    'class': 'nx-expandable-table-cell'
                },
                animations: [
                    trigger('openClose', [
                        state('open', style({
                            height: '*',
                            visibility: 'visible'
                        })),
                        state('closed, void', style({
                            height: '0',
                            visibility: 'hidden' // visibility and height to toggle instead of display: none to prevent cell width jumping
                        })),
                        transition('closed <=> open, void => closed', [
                            animate('225ms cubic-bezier(0.4,0.0,0.2,1)')
                        ])
                    ])
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
NxExpandableTableCellComponent.ctorParameters = () => [
    { type: NxExpandableTableRowComponent },
    { type: ChangeDetectorRef }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxExpandableTableCellComponent.prototype._destroyed;
    /** @type {?} */
    NxExpandableTableCellComponent.prototype._open;
    /**
     * @type {?}
     * @private
     */
    NxExpandableTableCellComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kYWJsZS10YWJsZS1jZWxsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGxpYW56L25neC1uZGJ4L3RhYmxlLyIsInNvdXJjZXMiOlsiZXhwYW5kYWJsZS9leHBhbmRhYmxlLXRhYmxlLWNlbGwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ2pHLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7OztBQThCM0MsTUFBTSxPQUFPLDhCQUE4Qjs7Ozs7SUFLekMsWUFDSSxJQUFtQyxFQUMzQixrQkFBcUM7UUFBckMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFtQjtRQU56QyxlQUFVLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUVuQyxVQUFLLEdBQVksS0FBSyxDQUFDO1FBTXJCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDM0MsU0FBUzs7OztRQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN6QyxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzdCLENBQUM7OztZQTNDRixTQUFTLFNBQUM7O2dCQUVULFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLGdOQUFxRDtnQkFDckQsSUFBSSxFQUFFO29CQUNKLE9BQU8sRUFBRSwwQkFBMEI7aUJBQ3BDO2dCQUNELFVBQVUsRUFBRTtvQkFDVixPQUFPLENBQUMsV0FBVyxFQUFFO3dCQUNuQixLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQzs0QkFDbEIsTUFBTSxFQUFFLEdBQUc7NEJBQ1gsVUFBVSxFQUFFLFNBQVM7eUJBQ3RCLENBQUMsQ0FBQzt3QkFDSCxLQUFLLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQzs0QkFDMUIsTUFBTSxFQUFFLEdBQUc7NEJBQ1gsVUFBVSxFQUFFLFFBQVEsQ0FBQyx5RkFBeUY7eUJBQy9HLENBQUMsQ0FBQzt3QkFDSCxVQUFVLENBQUMsaUNBQWlDLEVBQUU7NEJBQzVDLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQzt5QkFDN0MsQ0FBQztxQkFDSCxDQUFDO2lCQUNIO2dCQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7O1lBL0JRLDZCQUE2QjtZQURPLGlCQUFpQjs7Ozs7OztJQWtDNUQsb0RBQW1DOztJQUVuQywrQ0FBdUI7Ozs7O0lBSW5CLDREQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFuaW1hdGUsIHN0YXRlLCBzdHlsZSwgdHJhbnNpdGlvbiwgdHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnhFeHBhbmRhYmxlVGFibGVSb3dDb21wb25lbnQgfSBmcm9tICcuL2V4cGFuZGFibGUtdGFibGUtcm93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8qKlxuICogVGhpcyBpcyBhbiBleHBhbmRhYmxlIHRhYmxlIGNlbGwuXG4gKiBPbmx5IHdvcmtzIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIGBbbnhFeHBhbmRhYmxlVGFibGVSb3ddYCBjb21wb25lbnQuXG4gKi9cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAndGRbbnhFeHBhbmRhYmxlVGFibGVDZWxsXScsXG4gIHRlbXBsYXRlVXJsOiAnLi9leHBhbmRhYmxlLXRhYmxlLWNlbGwuY29tcG9uZW50Lmh0bWwnLFxuICBob3N0OiB7XG4gICAgJ2NsYXNzJzogJ254LWV4cGFuZGFibGUtdGFibGUtY2VsbCdcbiAgfSxcbiAgYW5pbWF0aW9uczogW1xuICAgIHRyaWdnZXIoJ29wZW5DbG9zZScsIFtcbiAgICAgIHN0YXRlKCdvcGVuJywgc3R5bGUoe1xuICAgICAgICBoZWlnaHQ6ICcqJyxcbiAgICAgICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnXG4gICAgICB9KSksXG4gICAgICBzdGF0ZSgnY2xvc2VkLCB2b2lkJywgc3R5bGUoe1xuICAgICAgICBoZWlnaHQ6ICcwJyxcbiAgICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbicgLy8gdmlzaWJpbGl0eSBhbmQgaGVpZ2h0IHRvIHRvZ2dsZSBpbnN0ZWFkIG9mIGRpc3BsYXk6IG5vbmUgdG8gcHJldmVudCBjZWxsIHdpZHRoIGp1bXBpbmdcbiAgICAgIH0pKSxcbiAgICAgIHRyYW5zaXRpb24oJ2Nsb3NlZCA8PT4gb3Blbiwgdm9pZCA9PiBjbG9zZWQnLCBbXG4gICAgICAgIGFuaW1hdGUoJzIyNW1zIGN1YmljLWJlemllcigwLjQsMC4wLDAuMiwxKScpXG4gICAgICBdKVxuICAgIF0pXG4gIF0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIE54RXhwYW5kYWJsZVRhYmxlQ2VsbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgX2Rlc3Ryb3llZCA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgX29wZW46IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIF9yb3c6IE54RXhwYW5kYWJsZVRhYmxlUm93Q29tcG9uZW50LFxuICAgICAgcHJpdmF0ZSBfY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7XG5cbiAgICBfcm93LmV4cGFuZGVkLnBpcGUodGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3llZCkpXG4gICAgICAuc3Vic2NyaWJlKG9wZW4gPT4ge1xuICAgICAgICB0aGlzLl9vcGVuID0gb3BlbjtcbiAgICAgICAgdGhpcy5fY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2Rlc3Ryb3llZC5uZXh0KCk7XG4gICAgdGhpcy5fZGVzdHJveWVkLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiJdfQ==