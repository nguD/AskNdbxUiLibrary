/**
 * @fileoverview added by tsickle
 * Generated from: expandable/expandable-table.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChildren, QueryList, Directive } from '@angular/core';
import { NxExpandableTableRowComponent } from './expandable-table-row.component';
import { flatMap, startWith, map, distinctUntilChanged } from 'rxjs/operators';
import { combineLatest, BehaviorSubject } from 'rxjs';
/**
 * The nxExpandableTable adds row expansion functionality to the nxTable.
 * It provides the logic to expand/collapse all expandable rows simultanously.
 */
export class NxExpandableTableDirective {
    constructor() {
        this.expanded = new BehaviorSubject(false);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.rows.changes.pipe(startWith(this.rows), flatMap((/**
         * @param {?} rows
         * @return {?}
         */
        (rows) => {
            return combineLatest(rows.map((/**
             * @param {?} row
             * @return {?}
             */
            row => row.expanded)));
        })), map((/**
         * @param {?} values
         * @return {?}
         */
        (values) => values.reduce((/**
         * @param {?} a
         * @param {?} x
         * @return {?}
         */
        (a, x) => a && x), true))), distinctUntilChanged())
            .subscribe((/**
         * @param {?} rowsOpen
         * @return {?}
         */
        (rowsOpen) => {
            this.expanded.next(rowsOpen);
        }));
    }
    /**
     * Toggles the expandable rows. If all rows are open it will close them, otherwise it will open them.
     * @return {?}
     */
    toggle() {
        if (this.expanded.value) {
            this.close();
        }
        else {
            this.expand();
        }
    }
    /**
     * Expands all expandable rows.
     * @return {?}
     */
    expand() {
        this.rows.forEach((/**
         * @param {?} row
         * @return {?}
         */
        row => row.expanded.next(true)));
    }
    /**
     * Closes all expandable rows.
     * @return {?}
     */
    close() {
        this.rows.forEach((/**
         * @param {?} row
         * @return {?}
         */
        row => row.expanded.next(false)));
    }
}
NxExpandableTableDirective.decorators = [
    { type: Directive, args: [{
                selector: 'table[nxExpandableTable]',
                exportAs: 'nxExpandableTable'
            },] }
];
NxExpandableTableDirective.propDecorators = {
    rows: [{ type: ContentChildren, args: [NxExpandableTableRowComponent, { descendants: true },] }]
};
if (false) {
    /** @type {?} */
    NxExpandableTableDirective.prototype.rows;
    /** @type {?} */
    NxExpandableTableDirective.prototype.expanded;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kYWJsZS10YWJsZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxsaWFuei9uZ3gtbmRieC90YWJsZS8iLCJzb3VyY2VzIjpbImV4cGFuZGFibGUvZXhwYW5kYWJsZS10YWJsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBaUIsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JGLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7OztBQVd0RCxNQUFNLE9BQU8sMEJBQTBCO0lBSnZDO1FBT0UsYUFBUSxHQUE2QixJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQTBDbEUsQ0FBQzs7OztJQXhDQyxlQUFlO1FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUNwQixTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUNwQixPQUFPOzs7O1FBQUMsQ0FBQyxJQUFxQyxFQUFFLEVBQUU7WUFDaEQsT0FBTyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUc7Ozs7WUFBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDO1FBQ3RELENBQUMsRUFBQyxFQUNGLEdBQUc7Ozs7UUFBQyxDQUFDLE1BQWlCLEVBQUUsRUFBRSxDQUN4QixNQUFNLENBQUMsTUFBTTs7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUUsSUFBSSxDQUFDLEVBQ3RDLEVBQ0Qsb0JBQW9CLEVBQUUsQ0FDdkI7YUFDQSxTQUFTOzs7O1FBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvQixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBS0QsTUFBTTtRQUNKLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUU7WUFDdkIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Q7YUFBTTtZQUNMLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNmO0lBQ0gsQ0FBQzs7Ozs7SUFLRCxNQUFNO1FBQ0osSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPOzs7O1FBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDO0lBQ3BELENBQUM7Ozs7O0lBS0QsS0FBSztRQUNILElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTzs7OztRQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQztJQUNyRCxDQUFDOzs7WUFoREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSwwQkFBMEI7Z0JBQ3BDLFFBQVEsRUFBRSxtQkFBbUI7YUFDOUI7OzttQkFFRSxlQUFlLFNBQUMsNkJBQTZCLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFOzs7O0lBQXJFLDBDQUFzSDs7SUFFdEgsOENBQWdFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udGVudENoaWxkcmVuLCBRdWVyeUxpc3QsIEFmdGVyVmlld0luaXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnhFeHBhbmRhYmxlVGFibGVSb3dDb21wb25lbnQgfSBmcm9tICcuL2V4cGFuZGFibGUtdGFibGUtcm93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBmbGF0TWFwLCBzdGFydFdpdGgsIG1hcCwgZGlzdGluY3RVbnRpbENoYW5nZWQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE54RXhwYW5kYWJsZSB9IGZyb20gJy4vdG9nZ2xlLWJ1dHRvbi5jb21wb25lbnQnO1xuXG4vKipcbiAqIFRoZSBueEV4cGFuZGFibGVUYWJsZSBhZGRzIHJvdyBleHBhbnNpb24gZnVuY3Rpb25hbGl0eSB0byB0aGUgbnhUYWJsZS5cbiAqIEl0IHByb3ZpZGVzIHRoZSBsb2dpYyB0byBleHBhbmQvY29sbGFwc2UgYWxsIGV4cGFuZGFibGUgcm93cyBzaW11bHRhbm91c2x5LlxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICd0YWJsZVtueEV4cGFuZGFibGVUYWJsZV0nLFxuICBleHBvcnRBczogJ254RXhwYW5kYWJsZVRhYmxlJ1xufSlcbmV4cG9ydCBjbGFzcyBOeEV4cGFuZGFibGVUYWJsZURpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE54RXhwYW5kYWJsZSB7XG4gIEBDb250ZW50Q2hpbGRyZW4oTnhFeHBhbmRhYmxlVGFibGVSb3dDb21wb25lbnQsIHsgZGVzY2VuZGFudHM6IHRydWUgfSkgcm93czogUXVlcnlMaXN0PE54RXhwYW5kYWJsZVRhYmxlUm93Q29tcG9uZW50PjtcblxuICBleHBhbmRlZDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMucm93cy5jaGFuZ2VzLnBpcGUoXG4gICAgICBzdGFydFdpdGgodGhpcy5yb3dzKSxcbiAgICAgIGZsYXRNYXAoKHJvd3M6IE54RXhwYW5kYWJsZVRhYmxlUm93Q29tcG9uZW50W10pID0+IHtcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVMYXRlc3Qocm93cy5tYXAocm93ID0+IHJvdy5leHBhbmRlZCkpO1xuICAgICAgfSksXG4gICAgICBtYXAoKHZhbHVlczogYm9vbGVhbltdKSA9PlxuICAgICAgICB2YWx1ZXMucmVkdWNlKChhLCB4KSA9PiBhICYmIHgsIHRydWUpXG4gICAgICApLFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxuICAgIClcbiAgICAuc3Vic2NyaWJlKChyb3dzT3BlbikgPT4ge1xuICAgICAgdGhpcy5leHBhbmRlZC5uZXh0KHJvd3NPcGVuKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBleHBhbmRhYmxlIHJvd3MuIElmIGFsbCByb3dzIGFyZSBvcGVuIGl0IHdpbGwgY2xvc2UgdGhlbSwgb3RoZXJ3aXNlIGl0IHdpbGwgb3BlbiB0aGVtLlxuICAgKi9cbiAgdG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLmV4cGFuZGVkLnZhbHVlKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXhwYW5kKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEV4cGFuZHMgYWxsIGV4cGFuZGFibGUgcm93cy5cbiAgICovXG4gIGV4cGFuZCgpIHtcbiAgICB0aGlzLnJvd3MuZm9yRWFjaChyb3cgPT4gcm93LmV4cGFuZGVkLm5leHQodHJ1ZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlcyBhbGwgZXhwYW5kYWJsZSByb3dzLlxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5yb3dzLmZvckVhY2gocm93ID0+IHJvdy5leHBhbmRlZC5uZXh0KGZhbHNlKSk7XG4gIH1cbn1cbiJdfQ==