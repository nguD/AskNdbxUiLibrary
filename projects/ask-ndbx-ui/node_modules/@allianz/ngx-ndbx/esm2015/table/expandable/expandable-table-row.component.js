/**
 * @fileoverview added by tsickle
 * Generated from: expandable/expandable-table-row.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
/**
 * This is an expandable table row.
 * It can collapse its height to hide the content.
 * Requires the table cells to have the `[nxExpandableTableCell]` component.
 */
export class NxExpandableTableRowComponent {
    /**
     * @param {?} _changeDetectorRef
     */
    constructor(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this.expanded = new BehaviorSubject(false);
    }
    /**
     * Toggles the expansion of this row.
     * @return {?}
     */
    toggle() {
        if (this.expanded.value) {
            this.close();
        }
        else {
            this.expand();
        }
    }
    /**
     * Expands this row.
     * @return {?}
     */
    expand() {
        if (!this.expanded.value) {
            this.expanded.next(true);
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * Closes this row.
     * @return {?}
     */
    close() {
        if (this.expanded.value) {
            this.expanded.next(false);
            this._changeDetectorRef.markForCheck();
        }
    }
}
NxExpandableTableRowComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'tr[nxExpandableTableRow]',
                host: {
                    'class': 'nx-expandable-table-row'
                },
                template: `<ng-content></ng-content>`,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
NxExpandableTableRowComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
if (false) {
    /** @type {?} */
    NxExpandableTableRowComponent.prototype.expanded;
    /**
     * @type {?}
     * @private
     */
    NxExpandableTableRowComponent.prototype._changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kYWJsZS10YWJsZS1yb3cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsbGlhbnovbmd4LW5kYngvdGFibGUvIiwic291cmNlcyI6WyJleHBhbmRhYmxlL2V4cGFuZGFibGUtdGFibGUtcm93LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7Ozs7O0FBaUJ2QyxNQUFNLE9BQU8sNkJBQTZCOzs7O0lBR3hDLFlBQW9CLGtCQUFxQztRQUFyQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1CO1FBRnpELGFBQVEsR0FBNkIsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFSixDQUFDOzs7OztJQUs3RCxNQUFNO1FBQ0osSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRTtZQUN2QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDZDthQUFNO1lBQ0wsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ2Y7SUFDSCxDQUFDOzs7OztJQUtELE1BQU07UUFDSixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQzs7Ozs7SUFLRCxLQUFLO1FBQ0gsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRTtZQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDeEM7SUFDSCxDQUFDOzs7WUEzQ0YsU0FBUyxTQUFDOztnQkFFVCxRQUFRLEVBQUUsMEJBQTBCO2dCQUNwQyxJQUFJLEVBQUU7b0JBQ0wsT0FBTyxFQUFFLHlCQUF5QjtpQkFDbEM7Z0JBQ0QsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDaEQ7Ozs7WUFqQjRDLGlCQUFpQjs7OztJQW1CNUQsaURBQWdFOzs7OztJQUVwRCwyREFBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOeEV4cGFuZGFibGUgfSBmcm9tICcuL3RvZ2dsZS1idXR0b24uY29tcG9uZW50JztcblxuLyoqXG4gKiBUaGlzIGlzIGFuIGV4cGFuZGFibGUgdGFibGUgcm93LlxuICogSXQgY2FuIGNvbGxhcHNlIGl0cyBoZWlnaHQgdG8gaGlkZSB0aGUgY29udGVudC5cbiAqIFJlcXVpcmVzIHRoZSB0YWJsZSBjZWxscyB0byBoYXZlIHRoZSBgW254RXhwYW5kYWJsZVRhYmxlQ2VsbF1gIGNvbXBvbmVudC5cbiAqL1xuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICd0cltueEV4cGFuZGFibGVUYWJsZVJvd10nLFxuICBob3N0OiB7XG4gICAnY2xhc3MnOiAnbngtZXhwYW5kYWJsZS10YWJsZS1yb3cnXG4gIH0sXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIE54RXhwYW5kYWJsZVRhYmxlUm93Q29tcG9uZW50IGltcGxlbWVudHMgTnhFeHBhbmRhYmxlIHtcbiAgZXhwYW5kZWQ6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPiA9IG5ldyBCZWhhdmlvclN1YmplY3QoZmFsc2UpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgZXhwYW5zaW9uIG9mIHRoaXMgcm93LlxuICAgKi9cbiAgdG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLmV4cGFuZGVkLnZhbHVlKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXhwYW5kKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEV4cGFuZHMgdGhpcyByb3cuXG4gICAqL1xuICBleHBhbmQoKSB7XG4gICAgaWYgKCF0aGlzLmV4cGFuZGVkLnZhbHVlKSB7XG4gICAgICB0aGlzLmV4cGFuZGVkLm5leHQodHJ1ZSk7XG4gICAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoaXMgcm93LlxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgaWYgKHRoaXMuZXhwYW5kZWQudmFsdWUpIHtcbiAgICAgIHRoaXMuZXhwYW5kZWQubmV4dChmYWxzZSk7XG4gICAgICB0aGlzLl9jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==