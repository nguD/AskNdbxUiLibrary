/**
 * @fileoverview added by tsickle
 * Generated from: autocomplete/autocomplete-trigger.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NxFormfieldComponent } from '@allianz/ngx-ndbx/formfield';
import { Directionality } from '@angular/cdk/bidi';
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';
import { Overlay, OverlayConfig, ViewportRuler, } from '@angular/cdk/overlay';
import { TemplatePortal } from '@angular/cdk/portal';
import { DOCUMENT } from '@angular/common';
import { ChangeDetectorRef, Directive, ElementRef, forwardRef, Host, Inject, Input, NgZone, Optional, ViewContainerRef, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subject, Subscription, defer, of, merge, fromEvent } from 'rxjs';
import { delay, filter, switchMap, take, tap, debounceTime, first } from 'rxjs/operators';
import { NxWordComponent } from '@allianz/ngx-ndbx/natural-language-form';
import { NxAutocompleteComponent } from './autocomplete.component';
/**
 * Provider that allows the autocomplete to register as a ControlValueAccessor.
 * \@docs-private
 * @type {?}
 */
export const NX_AUTOCOMPLETE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => NxAutocompleteTriggerDirective)),
    multi: true
};
/**
 * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.
 * @return {?}
 */
export function getNxAutocompleteMissingPanelError() {
    return Error('Attempting to open an undefined instance of `nx-autocomplete`. ' +
        'Make sure that the id passed to the `nxAutocomplete` is correct and that ' +
        'you\'re attempting to open it after the ngAfterContentInit hook.');
}
export class NxAutocompleteTriggerDirective {
    /**
     * @param {?} _element
     * @param {?} _overlay
     * @param {?} _viewContainerRef
     * @param {?} _zone
     * @param {?} _changeDetectorRef
     * @param {?} _dir
     * @param {?} _nxFormField
     * @param {?} _nxWordField
     * @param {?} _document
     * @param {?=} _viewportRuler
     */
    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, _dir, _nxFormField, _nxWordField, _document, _viewportRuler) {
        this._element = _element;
        this._overlay = _overlay;
        this._viewContainerRef = _viewContainerRef;
        this._zone = _zone;
        this._changeDetectorRef = _changeDetectorRef;
        this._dir = _dir;
        this._nxFormField = _nxFormField;
        this._nxWordField = _nxWordField;
        this._document = _document;
        this._viewportRuler = _viewportRuler;
        this._componentDestroyed = false;
        /**
         * Whether or not the label state is being overridden.
         */
        this._manuallyFloatingLabel = false;
        /**
         * Subscription to viewport size changes.
         */
        this._viewportSubscription = Subscription.EMPTY;
        /**
         * Stream of keyboard events that can close the panel.
         */
        this._closeKeyEventStream = new Subject();
        /**
         * Value changes
         */
        this._valueChanges = new Subject();
        this._itemsCb = null;
        this._debounce = 400;
        this._autocompleteDisabled = false;
        this._overlayAttached = false;
        /**
         * Stream of autocomplete option selections.
         */
        this.optionSelections = defer((/**
         * @return {?}
         */
        () => {
            if (this.autocomplete && this.autocomplete.options) {
                return merge(...this.autocomplete.options.map((/**
                 * @param {?} option
                 * @return {?}
                 */
                option => option.onSelectionChange)));
            }
            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.
            // Return a stream that we'll replace with the real one once everything is in place.
            return this._zone.onStable
                .asObservable()
                .pipe(take(1), switchMap((/**
             * @return {?}
             */
            () => this.optionSelections)));
        }));
        /**
         * `View -> model callback called when value changes`
         */
        this._onChange = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            this._valueChanges.next(val);
        });
        /**
         * `View -> model callback called when autocomplete has been touched`
         */
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * The items callback. Called with input value, must return Observable of Array of strings
     * @param {?} val
     * @return {?}
     */
    set itemsCb(val) {
        if (typeof val === 'function') {
            this._itemsCb = val;
        }
        else {
            throw new Error('Wrong value type for nxAutocompleteItems');
        }
    }
    /**
     * @return {?}
     */
    get itemsCb() {
        return this._itemsCb;
    }
    /**
     * Debounce in ms before items callback is triggered. Defaults to 400
     * @param {?} val
     * @return {?}
     */
    set debounce(val) {
        this._debounce = coerceNumberProperty(val);
    }
    /**
     * Whether autocomplete functionality is disabled.
     * @param {?} val
     * @return {?}
     */
    set autocompleteDisabled(val) {
        this._autocompleteDisabled = val;
        this._bindAutocompleteItems();
    }
    /**
     * @return {?}
     */
    get autocompleteDisabled() {
        return this._autocompleteDisabled;
    }
    /**
     * Whether or not the autocomplete panel is open.
     * @return {?}
     */
    get panelOpen() {
        return this._overlayAttached && this.autocomplete.showPanel;
    }
    /**
     * The currently active option, coerced to NxAutocompleteOptionComponent type.
     * @return {?}
     */
    get activeOption() {
        if (this.autocomplete && this.autocomplete._keyManager) {
            return this.autocomplete._keyManager.activeItem;
        }
        return null;
    }
    /**
     * Stream of clicks outside of the autocomplete panel.
     * @private
     * @return {?}
     */
    get _outsideClickStream() {
        if (!this._document) {
            return of(null);
        }
        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'touchend'))
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            /** @type {?} */
            const clickTarget = (/** @type {?} */ (event.target));
            /** @type {?} */
            const formField = this._formField ?
                this._formField.elementRef.nativeElement : null;
            return this._overlayAttached &&
                clickTarget !== this._element.nativeElement &&
                (!formField || !formField.contains(clickTarget)) &&
                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));
        })));
    }
    /**
     * @private
     * @return {?}
     */
    get _formField() {
        if (this._nxFormField) {
            return this._nxFormField;
        }
        else if (this._nxWordField) {
            return this._nxWordField;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._viewportSubscription.unsubscribe();
        this._componentDestroyed = true;
        this._destroyPanel();
        this._closeKeyEventStream.complete();
        if (this._controlValueChangesSubscription) {
            this._controlValueChangesSubscription.unsubscribe();
        }
        if (this._itemsSubscription) {
            this._itemsSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this._bindAutocompleteItems();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._bindAutocompleteItems();
    }
    /**
     * Binds or rebinds the autocomplete items. Prerequisites:
     * - items callback has to be defined
     * - autocomplete panel has to be bound
     * @private
     * @return {?}
     */
    _bindAutocompleteItems() {
        if (this._controlValueChangesSubscription) {
            this._controlValueChangesSubscription.unsubscribe();
        }
        if (typeof this._itemsCb === 'function' && this.autocomplete && !this.autocompleteDisabled) {
            /** @type {?} */
            const itemsSubject = new Subject();
            this.autocomplete.items = itemsSubject;
            /** @type {?} */
            const valueChanges = this._formField &&
                this._formField._control &&
                this._formField._control.ngControl &&
                this._formField._control.ngControl.valueChanges ?
                this._formField._control.ngControl.valueChanges : this._valueChanges;
            this._controlValueChangesSubscription = valueChanges.pipe(debounceTime(this._debounce))
                .subscribe((/**
             * @param {?} input
             * @return {?}
             */
            (input) => {
                if (this._itemsSubscription) {
                    this._itemsSubscription.unsubscribe();
                }
                this._itemsSubscription = this._itemsCb(input).pipe(first()).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                (result) => {
                    itemsSubject.next(result);
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    // On error reset
                    // TODO: Log error?
                    itemsSubject.next([]);
                }));
            }));
        }
    }
    /**
     * Opens the autocomplete suggestion panel.
     * @return {?}
     */
    openPanel() {
        if (!this.autocompleteDisabled) {
            this._attachOverlay();
            this._floatLabel();
        }
    }
    /**
     * Closes the autocomplete suggestion panel.
     * @return {?}
     */
    closePanel() {
        this._resetLabel();
        if (!this._overlayAttached) {
            return;
        }
        if (this.panelOpen) {
            // Only emit if the panel was visible.
            this.autocomplete.closed.emit();
        }
        this.autocomplete._isOpen = this._overlayAttached = false;
        if (this._overlayRef && this._overlayRef.hasAttached()) {
            this._overlayRef.detach();
            this._closingActionsSubscription.unsubscribe();
        }
        // Note that in some cases this can end up being called after the component is destroyed.
        // Add a check to ensure that we don't try to run change detection on a destroyed view.
        if (!this._componentDestroyed) {
            // We need to trigger change detection manually, because
            // `fromEvent` doesn't seem to do it at the proper time.
            // This ensures that the label is reset when the
            // user clicks outside.
            this._changeDetectorRef.detectChanges();
        }
    }
    /**
     * A stream of actions that should close the autocomplete panel, including
     * when an option is selected, on blur, and when TAB is pressed.
     * @return {?}
     */
    get panelClosingActions() {
        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter((/**
         * @return {?}
         */
        () => this._overlayAttached))), this._closeKeyEventStream, this._outsideClickStream, this._overlayRef ?
            this._overlayRef.detachments().pipe(filter((/**
             * @return {?}
             */
            () => this._overlayAttached))) :
            of());
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        Promise.resolve(null).then((/**
         * @return {?}
         */
        () => this._setTriggerValue(value)));
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this._element.nativeElement.disabled = isDisabled;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _handleKeydown(event) {
        /** @type {?} */
        const keyCode = event.keyCode;
        // Prevent the default action on all escape key presses. This is here primarily to bring IE
        // in line with other browsers. By default, pressing escape on IE will cause it to revert
        // the input value to the one that it had on focus, however it won't dispatch any events
        // which means that the model value will be out of sync with the view.
        if (keyCode === ESCAPE) {
            event.preventDefault();
        }
        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.
        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction
        if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {
            this._resetActiveItem();
            this._closeKeyEventStream.next();
            event.stopPropagation();
        }
        else if (this.activeOption && keyCode === ENTER && this.panelOpen) {
            this.activeOption._selectViaInteraction();
            this._resetActiveItem();
            event.preventDefault();
        }
        else {
            /** @type {?} */
            const prevActiveItem = this.autocomplete._keyManager.activeItem;
            /** @type {?} */
            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;
            if (this.panelOpen || keyCode === TAB) {
                this.autocomplete._keyManager.onKeydown(event);
            }
            else if (isArrowKey && this._isFieldEnabled()) {
                this.openPanel();
            }
            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {
                this._scrollToOption();
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _handleInput(event) {
        /** @type {?} */
        const target = (/** @type {?} */ (event.target));
        /** @type {?} */
        let value = target.value;
        // Based on `NumberValueAccessor` from forms.
        if (target.type === 'number') {
            value = value === '' ? null : parseFloat(value);
        }
        // If the input has a placeholder, IE will fire the `input` event on page load,
        // focus and blur, in addition to when the user actually changed the value. To
        // filter out all of the extra events, we save the value on focus and between
        // `input` events, and we check whether it changed.
        // See: https://connect.microsoft.com/IE/feedback/details/885747/
        if (this._isFieldEnabled() && this._previousValue !== value &&
            document.activeElement === event.target) {
            this._previousValue = value;
            this._onChange(value);
            this.openPanel();
        }
    }
    /**
     * @return {?}
     */
    _handleFocus() {
        if (this._isFieldEnabled()) {
            this._previousValue = this._element.nativeElement.value;
            this.openPanel();
        }
    }
    /**
     * In "auto" mode, the label will animate down as soon as focus is lost.
     * This causes the value to jump when selecting an option with the mouse.
     * This method manually floats the label until the panel can be closed.
     * @private
     * @return {?}
     */
    _floatLabel() {
        if (this._nxFormField && this._nxFormField.floatLabel === 'auto') {
            this._nxFormField.floatLabel = 'always';
            this._manuallyFloatingLabel = true;
        }
    }
    /**
     * If the label has been manually elevated, return it to its normal state.
     * @private
     * @return {?}
     */
    _resetLabel() {
        if (this._manuallyFloatingLabel) {
            this._nxFormField.floatLabel = 'auto';
            this._manuallyFloatingLabel = false;
        }
    }
    /**
     * Given that we are not actually focusing active options, we must manually adjust scroll
     * to reveal options below the fold. First, we find the offset of the option from the top
     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -
     * the panel height + the option height, so the active option will be just visible at the
     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop
     * will become the offset. If that offset is visible within the panel already, the scrollTop is
     * not adjusted.
     * @private
     * @return {?}
     */
    _scrollToOption() {
        if (this.autocomplete.options.length === 0) {
            return;
        }
        /** @type {?} */
        let optionOffset = 0;
        /** @type {?} */
        const optionHeight = this.autocomplete.options.first.elementRef.nativeElement.offsetHeight;
        if (this.autocomplete._keyManager.activeItem) {
            optionOffset = this.autocomplete._keyManager.activeItem.elementRef.nativeElement.offsetTop;
        }
        /** @type {?} */
        const newScrollPosition = _getOptionScrollPosition(optionOffset, optionHeight, this.autocomplete._getScrollTop(), this.autocomplete.panel.nativeElement.offsetHeight);
        this.autocomplete._setScrollTop(newScrollPosition);
    }
    /**
     * This method listens to a stream of panel closing actions and resets the
     * stream every time the option list changes.
     * @private
     * @return {?}
     */
    _subscribeToClosingActions() {
        /** @type {?} */
        const firstStable = this._zone.onStable.asObservable().pipe(take(1));
        /** @type {?} */
        const optionChanges = this.autocomplete.options.changes.pipe(tap((/**
         * @return {?}
         */
        () => this._positionStrategy.reapplyLastPosition())), 
        // Defer emitting to the stream until the next tick, because changing
        // bindings in here will cause "changed after checked" errors.
        delay(0));
        // When the zone is stable initially, and when the option list changes...
        return merge(firstStable, optionChanges)
            .pipe(
        // create a new stream of panelClosingActions, replacing any previous streams
        // that were created, and flatten it so our stream only emits closing events...
        switchMap((/**
         * @return {?}
         */
        () => {
            this._resetActiveItem();
            this.autocomplete._setVisibility();
            return this.panelClosingActions;
        })), 
        // when the first closing event occurs...
        take(1))
            // set the value, close the panel, and complete.
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => this._setValueAndClose(event)));
    }
    /**
     * Destroys the autocomplete suggestion panel.
     * @private
     * @return {?}
     */
    _destroyPanel() {
        if (this._overlayRef) {
            this.closePanel();
            this._overlayRef.dispose();
            this._overlayRef = null;
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _setTriggerValue(value) {
        /** @type {?} */
        const toDisplay = this.autocomplete && this.autocomplete.valueFormatter ?
            this.autocomplete.valueFormatter(value) :
            value;
        // Simply falling back to an empty string if the display value is falsy does not work properly.
        // The display value can also be the number zero and shouldn't fall back to an empty string.
        /** @type {?} */
        const inputValue = toDisplay != null ? toDisplay : '';
        // If it's used within a `NxFormField` or `NxWord`, we should set it through the property so it can go
        // through change detection.
        if (this._formField) {
            this._formField._control.value = inputValue;
        }
        else {
            this._element.nativeElement.value = inputValue;
        }
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     * @private
     * @param {?} event
     * @return {?}
     */
    _setValueAndClose(event) {
        if (event && event.source) {
            this._clearPreviousSelectedOption(event.source);
            this._setTriggerValue(event.source.value);
            this._onChange(event.source.value);
            this._element.nativeElement.focus();
            this.autocomplete._emitSelectEvent(event.source);
        }
        this.closePanel();
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     * @private
     * @param {?} skip
     * @return {?}
     */
    _clearPreviousSelectedOption(skip) {
        this.autocomplete.options.forEach((/**
         * @param {?} option
         * @return {?}
         */
        option => {
            if (option !== skip && option.selected) {
                option.deselect();
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _attachOverlay() {
        if (!this.autocomplete) {
            throw getNxAutocompleteMissingPanelError();
        }
        if (!this._overlayRef) {
            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);
            this._overlayRef = this._overlay.create(this._getOverlayConfig());
            if (this._viewportRuler) {
                this._viewportSubscription = this._viewportRuler.change().subscribe((/**
                 * @return {?}
                 */
                () => {
                    if (this.panelOpen && this._overlayRef) {
                        this._overlayRef.updateSize({ minWidth: this._getHostWidth() });
                    }
                }));
            }
        }
        else {
            /** Update the panel width, in case the host width has changed */
            this._overlayRef.updateSize({ minWidth: this._getHostWidth() });
        }
        if (this._overlayRef && !this._overlayRef.hasAttached()) {
            this._overlayRef.attach(this._portal);
            this._closingActionsSubscription = this._subscribeToClosingActions();
        }
        /** @type {?} */
        const wasOpen = this.panelOpen;
        this.autocomplete._setVisibility();
        this.autocomplete._isOpen = this._overlayAttached = true;
        // We need to do an extra `panelOpen` check in here, because the
        // autocomplete won't be shown if there are no options.
        if (this.panelOpen && wasOpen !== this.panelOpen) {
            this.autocomplete.opened.emit();
        }
    }
    /**
     * @private
     * @return {?}
     */
    _getOverlayConfig() {
        return new OverlayConfig({
            positionStrategy: this._getOverlayPosition(),
            scrollStrategy: this._scrollStrategy(),
            minWidth: this._getHostWidth(),
            direction: this._dir ? this._dir.value : 'ltr'
        });
    }
    /**
     * @private
     * @return {?}
     */
    _getOverlayPosition() {
        this._positionStrategy = this._overlay.position()
            .flexibleConnectedTo(this._getConnectedElement())
            .withViewportMargin(16)
            .withPush(false)
            .withPositions([
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top'
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom',
            }
        ]);
        return this._positionStrategy;
    }
    /**
     * @private
     * @return {?}
     */
    _scrollStrategy() {
        return this._overlay.scrollStrategies.reposition();
    }
    /**
     * @private
     * @return {?}
     */
    _getConnectedElement() {
        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;
    }
    /**
     * Returns the width of the input element, so the panel min-width can match it.
     * @private
     * @return {?}
     */
    _getHostWidth() {
        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;
    }
    /**
     * Resets the active item to -1 so arrow events will activate the
     * correct options, or to 0 if the consumer opted into it.
     * @private
     * @return {?}
     */
    _resetActiveItem() {
        this.autocomplete._keyManager.setActiveItem(-1);
    }
    /**
     * Determines whether the panel can be opened.
     * @private
     * @return {?}
     */
    _isFieldEnabled() {
        /** @type {?} */
        const element = this._element.nativeElement;
        return !element.readOnly && !element.disabled;
    }
}
NxAutocompleteTriggerDirective.decorators = [
    { type: Directive, args: [{
                selector: `input[nxAutocomplete], textarea[nxAutocomplete]`,
                host: {
                    'role': 'combobox',
                    'autocomplete': 'off',
                    'aria-autocomplete': 'list',
                    '[attr.aria-activedescendant]': 'activeOption?.id',
                    '[attr.aria-expanded]': 'panelOpen.toString()',
                    '[attr.aria-owns]': 'autocomplete?.id',
                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel
                    // a little earlier. This avoids issues where IE delays the focusing of the input.
                    '(focusin)': '_handleFocus()',
                    '(blur)': '_onTouched()',
                    '(input)': '_handleInput($event)',
                    '(keydown)': '_handleKeydown($event)',
                },
                exportAs: 'nxAutocompleteTrigger',
                providers: [NX_AUTOCOMPLETE_VALUE_ACCESSOR]
            },] }
];
/** @nocollapse */
NxAutocompleteTriggerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Overlay },
    { type: ViewContainerRef },
    { type: NgZone },
    { type: ChangeDetectorRef },
    { type: Directionality, decorators: [{ type: Optional }] },
    { type: NxFormfieldComponent, decorators: [{ type: Optional }, { type: Host }] },
    { type: NxWordComponent, decorators: [{ type: Optional }, { type: Host }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },
    { type: ViewportRuler }
];
NxAutocompleteTriggerDirective.propDecorators = {
    autocomplete: [{ type: Input, args: ['nxAutocomplete',] }],
    itemsCb: [{ type: Input, args: ['nxAutocompleteItems',] }],
    debounce: [{ type: Input, args: ['nxAutocompleteDebounce',] }],
    autocompleteDisabled: [{ type: Input, args: ['nxAutocompleteDisabled',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._overlayRef;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._portal;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._componentDestroyed;
    /**
     * Old value of the native input. Used to work around issues with the `input` event on IE.
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._previousValue;
    /**
     * Strategy that is used to position the panel.
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._positionStrategy;
    /**
     * Whether or not the label state is being overridden.
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._manuallyFloatingLabel;
    /**
     * The subscription for closing actions (some are bound to document).
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._closingActionsSubscription;
    /**
     * Subscription to viewport size changes.
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._viewportSubscription;
    /**
     * Subscription to control value changes
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._controlValueChangesSubscription;
    /**
     * Subscription to items observable
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._itemsSubscription;
    /**
     * Stream of keyboard events that can close the panel.
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._closeKeyEventStream;
    /**
     * Value changes
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._valueChanges;
    /**
     * The autocomplete panel to be attached to this trigger.
     * @type {?}
     */
    NxAutocompleteTriggerDirective.prototype.autocomplete;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._itemsCb;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._debounce;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._autocompleteDisabled;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._overlayAttached;
    /**
     * Stream of autocomplete option selections.
     * @type {?}
     */
    NxAutocompleteTriggerDirective.prototype.optionSelections;
    /**
     * `View -> model callback called when value changes`
     * @type {?}
     */
    NxAutocompleteTriggerDirective.prototype._onChange;
    /**
     * `View -> model callback called when autocomplete has been touched`
     * @type {?}
     */
    NxAutocompleteTriggerDirective.prototype._onTouched;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._zone;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._dir;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._nxFormField;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._nxWordField;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._document;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteTriggerDirective.prototype._viewportRuler;
}
/**
 * Determines the position to which to scroll a panel in order for an option to be into view.
 * \@docs-private
 * @param {?} optionOffset Option offset
 * @param {?} optionHeight Height of the options.
 * @param {?} currentScrollPosition Current scroll position of the panel.
 * @param {?} panelHeight Height of the panel.
 * @return {?}
 */
function _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {
    if (optionOffset < currentScrollPosition) {
        return optionOffset;
    }
    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {
        return Math.max(0, optionOffset - panelHeight + optionHeight);
    }
    return currentScrollPosition;
}
//# sourceMappingURL=data:application/json;base64,