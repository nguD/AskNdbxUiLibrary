/**
 * @fileoverview added by tsickle
 * Generated from: autocomplete/autocomplete.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { Component, ElementRef, EventEmitter, Input, Output, TemplateRef, ViewChild, ViewChildren, ContentChildren, QueryList, ChangeDetectionStrategy, ChangeDetectorRef, Optional } from '@angular/core';
import { NxAutocompleteOptionComponent } from './autocomplete-option.component';
import { NxFormfieldComponent } from '@allianz/ngx-ndbx/formfield';
import { Observable } from 'rxjs';
/**
 * Autocomplete IDs need to be unique across components, so this counter exists outside of
 * the component definition.
 * @type {?}
 */
let _uniqueAutocompleteIdCounter = 0;
/**
 * Event object that is emitted when an autocomplete option is selected.
 */
export class NxAutocompleteSelectedEvent {
    /**
     * @param {?} source
     * @param {?} option
     */
    constructor(source, option) {
        this.source = source;
        this.option = option;
    }
}
if (false) {
    /**
     * Reference to the autocomplete panel that emitted the event.
     * @type {?}
     */
    NxAutocompleteSelectedEvent.prototype.source;
    /**
     * Option that was selected.
     * @type {?}
     */
    NxAutocompleteSelectedEvent.prototype.option;
}
export class NxAutocompleteComponent {
    /**
     * @param {?} _changeDetectorRef
     * @param {?} _elementRef
     * @param {?} formFieldComponent
     */
    constructor(_changeDetectorRef, _elementRef, formFieldComponent) {
        this._changeDetectorRef = _changeDetectorRef;
        this._elementRef = _elementRef;
        this.formFieldComponent = formFieldComponent;
        /**
         * Whether the autocomplete panel should be visible, depending on option length.
         */
        this.showPanel = false;
        this._isOpen = false;
        this._items = null;
        this._hasItems = false;
        /**
         * Event that is emitted whenever an option from the list is selected.
         */
        this.optionSelected = new EventEmitter();
        /**
         * Event that is emitted when the autocomplete panel is opened.
         */
        this.opened = new EventEmitter();
        /**
         * Event that is emitted when the autocomplete panel is closed.
         */
        this.closed = new EventEmitter();
        this._classList = {};
        /**
         * Unique ID to be used by autocomplete trigger's "aria-owns" property.
         */
        this.id = `nx-autocomplete-${_uniqueAutocompleteIdCounter++}`;
        // As autocomplete option can hold any value, we might need a converter
        // to get a string representation, which can be stored in input. Default value ? value.toString() : null.
        /**
         * Value to string converter.
         */
        this.valueFormatter = (/**
         * @param {?} value
         * @return {?}
         */
        (value) => value ? value.toString() : null);
    }
    /**
     * Whether the autocomplete panel is open.
     * @return {?}
     */
    get isOpen() { return this._isOpen && this.showPanel; }
    /**
     * Items observable. If given, autocomplete takes care of the options and ng-content is discarderd
     * @param {?} val
     * @return {?}
     */
    set items(val) {
        this._hasItems = true;
        if (Array.isArray(val)) {
            this._items = val;
        }
        else if (val instanceof Observable) {
            if (this._itemsSubscription) {
                this._itemsSubscription.unsubscribe();
            }
            this._itemsSubscription = val.subscribe((/**
             * @param {?} itms
             * @return {?}
             */
            (itms) => {
                this._items = itms;
                this._changeDetectorRef.markForCheck();
                // and check visibility in next cycle, when options are set
                setTimeout((/**
                 * @return {?}
                 */
                () => this._setVisibility()));
            }));
        }
        else if (val === null) {
            this._items = val;
        }
        else {
            throw new Error('Invalid argument for autocomplete items. It has to be Array<string> or Observable<Array<string>>');
        }
    }
    /**
     * @return {?}
     */
    get items() {
        return this._items;
    }
    /**
     * \@docs-private
     * Is items observable set
     * @return {?}
     */
    get hasItems() {
        return this._hasItems;
    }
    /**
     * Autocomplete options
     * @return {?}
     */
    get options() {
        return this.hasItems ? this._vOptions : this._cOptions;
    }
    /**
     * Takes classes set on the host nx-autocomplete element and applies them to the panel
     * inside the overlay container to allow for easy styling.
     * @param {?} value
     * @return {?}
     */
    set classList(value) {
        if (value && value.length) {
            value.split(' ').forEach((/**
             * @param {?} className
             * @return {?}
             */
            className => this._classList[className.trim()] = true));
            this._elementRef.nativeElement.className = '';
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();
        this._setVisibility();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._itemsSubscription) {
            this._itemsSubscription.unsubscribe();
        }
    }
    /**
     * Sets the panel scrollTop. This allows us to manually scroll to display options
     * above or below the fold, as they are not actually being focused when active.
     * @param {?} scrollTop
     * @return {?}
     */
    _setScrollTop(scrollTop) {
        if (this.panel) {
            this.panel.nativeElement.scrollTop = scrollTop;
        }
    }
    /**
     * Returns the panel's scrollTop.
     * @return {?}
     */
    _getScrollTop() {
        return this.panel ? this.panel.nativeElement.scrollTop : 0;
    }
    /**
     * Panel should hide itself when the option list is empty.
     * @return {?}
     */
    _setVisibility() {
        this.showPanel = !!(this.options && this.options.length);
        this._classList['nx-autocomplete-visible'] = this.showPanel;
        this._classList['nx-autocomplete-hidden'] = !this.showPanel;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * Emits the `select` event.
     * @param {?} option
     * @return {?}
     */
    _emitSelectEvent(option) {
        /** @type {?} */
        const event = new NxAutocompleteSelectedEvent(this, option);
        this.optionSelected.emit(event);
    }
    /**
     * @return {?}
     */
    get _isInOutlineField() {
        return this.formFieldComponent !== null
            && this.formFieldComponent.appearance === 'outline';
    }
}
NxAutocompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'nx-autocomplete',
                template: "<ng-template>\n  <div class=\"nx-autocomplete-panel\" role=\"listbox\" [id]=\"id\" [ngClass]=\"_classList\"\n  [class.nx-autocomplete-panel--in-outline-field]=\"_isInOutlineField\" #panel>\n    <ng-container *ngIf=\"hasItems\">\n      <nx-autocomplete-option *ngFor=\"let item of items\" [value]=\"item\">\n        {{item}}\n      </nx-autocomplete-option>\n    </ng-container>\n    <ng-container *ngIf=\"!hasItems\">\n      <ng-content></ng-content>\n    </ng-container>\n  </div>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                exportAs: 'nxAutocomplete',
                host: {
                    'class': 'nx-autocomplete'
                },
                styles: [":host ::ng-deep .c-input::-ms-clear{width:0;height:0}.nx-autocomplete-panel{background-color:#fff;box-shadow:0 2px 4px rgba(65,65,65,.5);overflow-y:auto;overflow-x:hidden;max-height:280px;width:100%;border-radius:4px}.nx-autocomplete-panel.nx-autocomplete-visible{visibility:visible}.nx-autocomplete-panel.nx-autocomplete-hidden{visibility:hidden}.nx-autocomplete-panel--in-outline-field ::ng-deep nx-autocomplete-option .nx-autocomplete-option,.nx-autocomplete-panel--in-outline-field ::ng-deep nx-autocomplete-option .nx-autocomplete-option__label{font-size:16px;font-size:var(--dropdown-item-outline-font-size,16px);line-height:24px;line-height:var(--dropdown-item-outline-line-height,24px);font-weight:400;font-weight:var(--dropdown-item-outline-font-weight,400);letter-spacing:0;letter-spacing:var(--dropdown-item-outline-letter-spacing,0)}@media screen and (-ms-high-contrast:active){.nx-autocomplete-panel{box-shadow:0 0 0 1px windowText}}"]
            }] }
];
/** @nocollapse */
NxAutocompleteComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NxFormfieldComponent, decorators: [{ type: Optional }] }
];
NxAutocompleteComponent.propDecorators = {
    template: [{ type: ViewChild, args: [TemplateRef, { static: false },] }],
    panel: [{ type: ViewChild, args: ['panel', { static: false },] }],
    items: [{ type: Input }],
    optionSelected: [{ type: Output }],
    opened: [{ type: Output }],
    closed: [{ type: Output }],
    _vOptions: [{ type: ViewChildren, args: [NxAutocompleteOptionComponent,] }],
    _cOptions: [{ type: ContentChildren, args: [NxAutocompleteOptionComponent, { descendants: true },] }],
    classList: [{ type: Input, args: ['class',] }],
    valueFormatter: [{ type: Input, args: ['nxValueFormatter',] }]
};
if (false) {
    /**
     * Manages active item in option list based on key events.
     * @type {?}
     */
    NxAutocompleteComponent.prototype._keyManager;
    /**
     * Whether the autocomplete panel should be visible, depending on option length.
     * @type {?}
     */
    NxAutocompleteComponent.prototype.showPanel;
    /** @type {?} */
    NxAutocompleteComponent.prototype._isOpen;
    /**
     * \@docs-private
     * @type {?}
     */
    NxAutocompleteComponent.prototype.template;
    /**
     * \@docs-private
     * Element for the panel containing the autocomplete options.
     * @type {?}
     */
    NxAutocompleteComponent.prototype.panel;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteComponent.prototype._items;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteComponent.prototype._itemsSubscription;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteComponent.prototype._hasItems;
    /**
     * Event that is emitted whenever an option from the list is selected.
     * @type {?}
     */
    NxAutocompleteComponent.prototype.optionSelected;
    /**
     * Event that is emitted when the autocomplete panel is opened.
     * @type {?}
     */
    NxAutocompleteComponent.prototype.opened;
    /**
     * Event that is emitted when the autocomplete panel is closed.
     * @type {?}
     */
    NxAutocompleteComponent.prototype.closed;
    /**
     * Autocomplete options in view - ie from items
     * @type {?}
     * @private
     */
    NxAutocompleteComponent.prototype._vOptions;
    /**
     * Autocomplete options in content - ie user provided
     * @type {?}
     * @private
     */
    NxAutocompleteComponent.prototype._cOptions;
    /** @type {?} */
    NxAutocompleteComponent.prototype._classList;
    /**
     * Unique ID to be used by autocomplete trigger's "aria-owns" property.
     * @type {?}
     */
    NxAutocompleteComponent.prototype.id;
    /**
     * Value to string converter.
     * @type {?}
     */
    NxAutocompleteComponent.prototype.valueFormatter;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteComponent.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    NxAutocompleteComponent.prototype.formFieldComponent;
}
//# sourceMappingURL=data:application/json;base64,