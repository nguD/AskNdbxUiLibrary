import { Platform } from '@angular/cdk/platform';
import { DoCheck, ElementRef, OnChanges, OnDestroy, InjectionToken, OnInit } from '@angular/core';
import { FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { Subject } from 'rxjs';
import { AutofillMonitor } from '@angular/cdk/text-field';
import { NxFormfieldControl } from '@allianz/ngx-ndbx/formfield';
import { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';
export declare const NX_INPUT_VALUE_ACCESSOR: InjectionToken<{
    value: any;
}>;
export declare class NxInputDirective implements OnInit, DoCheck, OnChanges, OnDestroy, NxFormfieldControl<any> {
    protected _elementRef: ElementRef;
    protected _platform: Platform;
    /** @docs-private */
    ngControl: NgControl;
    private _parentForm;
    private _parentFormGroup;
    private _errorStateMatcher;
    private _autofillMonitor;
    protected _type: string;
    protected _id: string;
    protected _uid: string;
    protected _previousNativeValue: any;
    protected _disabled: boolean;
    protected _required: boolean;
    private _readonly;
    private _inputValueAccessor;
    _ariaDescribedby: string;
    private _placeholder;
    _ariaLabel: string;
    /** @docs-private */
    errorState: boolean;
    /**
     * Name of this control that is used inside the formfield component
     * @docs-private
     */
    controlType: string;
    /**
    * @docs-private
    */
    autofilled: boolean;
    /** @docs-private */
    stateChanges: Subject<void>;
    /** @docs-private */
    focused: boolean;
    /** The id of the input. */
    id: string;
    /** The input element's value. */
    value: any;
    /** Whether the element is readonly. */
    readonly: boolean;
    /** Whether the input is disabled. */
    disabled: boolean;
    /** Whether the element is required. */
    required: any;
    /** Sets the type of the input element (e.g. password, text etc). */
    type: string;
    /**
     * Sets the text for the input placeholder
     */
    placeholder: string;
    constructor(_elementRef: ElementRef, _platform: Platform, 
    /** @docs-private */
    ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _errorStateMatcher: ErrorStateMatcher, inputValueAccessor: any, _autofillMonitor: AutofillMonitor);
    ngOnInit(): void;
    /** @docs-private */
    readonly elementRef: ElementRef;
    _onInput(): void;
    _focusChanged(isFocused: boolean): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    /** @docs-private */
    updateErrorState(): void;
    /**
     * Set a list of ids that is currently describing this input
     * (if you have hints and errors for example).
     */
    setDescribedByIds(ids: string[]): void;
    /**
     * Method to set the aria label.
     * This is required if you use the input outside of a formfield
     * where you don't have a label connected.
     */
    setAriaLabel(value: string): void;
    protected _isBadInput(): boolean;
    /** @docs-private */
    readonly empty: boolean;
    protected _isNeverEmpty(): boolean;
    protected _isTextarea(): boolean;
    protected _validateType(): void;
    /** @docs-private */
    readonly shouldLabelFloat: boolean;
    protected _dirtyCheckNativeValue(): void;
}
