import { EventEmitter, ChangeDetectorRef, DoCheck, ElementRef } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';
/** Options for placement of the label */
export declare type POSITION = 'left' | 'right';
/** Options for sizing of the label */
export declare type LABEL_SIZE = 'small' | 'large';
export declare class NxSwitcherComponent implements ControlValueAccessor, DoCheck {
    private _changeDetectorRef;
    ngControl: NgControl;
    private _errorStateMatcher;
    private _parentForm;
    private _parentFormGroup;
    private _id;
    /** @docs-private */
    errorState: boolean;
    /** @docs-private */
    _switcherLabelWrapper: ElementRef;
    /** Sets the id of the switcher */
    id: string;
    private _labelPosition;
    /** Specifies the placement of the label */
    labelPosition: POSITION;
    private _name;
    /** Sets the label text of the switcher */
    name: string;
    private _checked;
    /** Whether the switcher is checked (on) or unchecked (off) */
    checked: boolean;
    private _big;
    /** Whether the big switcher is used */
    big: boolean;
    private _labelSize;
    /** Sets the size of the label */
    labelSize: LABEL_SIZE;
    private _negative;
    /** Whether the style for a dark background is used */
    negative: boolean;
    private _disabled;
    /** Whether the switcher is in the disabled state */
    disabled: boolean;
    /** An event is dispatched each time the switcher value is changed */
    checkedChange: EventEmitter<boolean>;
    private onChangeCallback;
    private onTouchedCallback;
    constructor(_changeDetectorRef: ChangeDetectorRef, ngControl: NgControl, _errorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective);
    /** Allows to toggle between the states */
    toggle(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngDoCheck(): void;
    setDisabledState(isDisabled: boolean): void;
    /** @docs-private */
    touch(): void;
    /** @docs-private */
    updateErrorState(): void;
    /** @docs-private */
    readonly labelHasContent: boolean;
    /** @docs-private
     * Callback for when the content of the label has changed.
     */
    labelContentChanged(): void;
}
