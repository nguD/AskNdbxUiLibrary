import { NxDatepickerIntl } from './datepicker-intl';
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Directionality } from '@angular/cdk/bidi';
import { Overlay, RepositionScrollStrategy, ScrollStrategy } from '@angular/cdk/overlay';
import { AfterContentInit, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';
import { Subject } from 'rxjs';
import { NxCalendarComponent } from './calendar';
import { NxDateAdapter } from '../adapter/date-adapter';
import { NxDatefieldDirective } from './../datefield.directive';
import { NxDatepickerToggleComponent } from './datepicker-toggle';
/** Injection token that determines the scroll handling while the calendar is open. */
export declare const NX_DATEPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;
/** @docs-private */
export declare function NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => RepositionScrollStrategy;
/** @docs-private */
export declare const NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER: {
    provide: InjectionToken<() => ScrollStrategy>;
    deps: (typeof Overlay)[];
    useFactory: typeof NX_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY;
};
export interface DatepickerDefaultOptions {
    /** Sets the focus on toggle behavior. (optional) */
    toggleIconTabindex?: number;
}
export declare const DATEPICKER_DEFAULT_OPTIONS: InjectionToken<DatepickerDefaultOptions>;
/**
 * @docs-private
 * Component used as the content for the datepicker dialog and popup. We use this instead of using
 * NxCalendarComponent directly as the content so we can control the initial focus. This also gives us a
 * place to put additional features of the popup that are not part of the calendar itself in the
 * future. (e.g. confirmation buttons).
 */
export declare class NxDatepickerContentComponent<D> implements AfterContentInit {
    _intl: NxDatepickerIntl;
    elementRef: ElementRef;
    private _ngZone;
    datepicker: NxDatepickerComponent<D>;
    _calendar: NxCalendarComponent<D>;
    constructor(_intl: NxDatepickerIntl, elementRef: ElementRef, _ngZone: NgZone);
    ngAfterContentInit(): void;
    /** Focuses the active cell after the microtask queue is empty. */
    private _focusActiveCell;
}
/** Component responsible for managing the datepicker popup/dialog. */
export declare class NxDatepickerComponent<D> implements OnDestroy {
    private _overlay;
    private _ngZone;
    private _viewContainerRef;
    private _scrollStrategy;
    private _dateAdapter;
    private _dir;
    private _document;
    /** The date to open the calendar initially. */
    startAt: D | null;
    private _startAt;
    /** The view that the calendar should start in. */
    startView: 'month' | 'year' | 'multi-year';
    /** Whether the datepicker pop-up should be disabled. */
    disabled: boolean;
    private _disabled;
    /** @docs-private */
    selectedChanged: EventEmitter<D>;
    /**
     * Emits selected year in multiyear view.
     * This doesn't imply a change on the selected date.
     */
    readonly yearSelected: EventEmitter<D>;
    /**
     * Emits selected month in year view.
     * This doesn't imply a change on the selected date.
     */
    readonly monthSelected: EventEmitter<D>;
    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */
    panelClass: string | string[];
    /** Emits when the datepicker has been opened. */
    openedStream: EventEmitter<void>;
    /** Emits when the datepicker has been closed. */
    closedStream: EventEmitter<void>;
    /** Whether the calendar is open. */
    opened: boolean;
    private _opened;
    /**
     * @docs-private
     * The id for the datepicker calendar.
     */
    id: string;
    /**
     * @docs-private
     * The currently selected date.
     */
    selected: D | null;
    private _validSelected;
    /**
     * @docs-private
     * The minimum selectable date.
     */
    readonly minDate: D | null;
    /**
     * @docs-private
     * The maximum selectable date.
     */
    readonly maxDate: D | null;
    /** @docs-private */
    readonly dateFilter: (date: D | null) => boolean;
    /** A reference to the overlay when the calendar is opened as a popup. */
    private _popupRef;
    /** A portal containing the calendar for this datepicker. */
    private _calendarPortal;
    /** Reference to the component instantiated in popup mode. */
    private _popupComponentRef;
    /** The element that was focused before the datepicker was opened. */
    private _focusedElementBeforeOpen;
    /** Subscription to value changes in the associated input element. */
    private _inputSubscription;
    /** The input element this datepicker is associated with. */
    _datepickerInput: NxDatefieldDirective<D>;
    _toggleButton: NxDatepickerToggleComponent<D>;
    /** Emits when the datepicker is disabled. */
    readonly _disabledChange: Subject<boolean>;
    constructor(_overlay: Overlay, _ngZone: NgZone, _viewContainerRef: ViewContainerRef, _scrollStrategy: any, _dateAdapter: NxDateAdapter<D>, _dir: Directionality, _document: any);
    ngOnDestroy(): void;
    /**
     * @docs-private
     * Selects the given date
     */
    select(date: D): void;
    /**
     * @docs-private
     * Emits the selected year in multiyear view
     */
    selectYear(normalizedYear: D): void;
    /**
     * @docs-private
     * Emits selected month in year view
     */
    selectMonth(normalizedMonth: D): void;
    /**
     * @docs-private
     * Register an input with this datepicker.
     * @param input The datepicker input to register with this datepicker.
     */
    registerInput(input: NxDatefieldDirective<D>): void;
    /**
     * @docs-private
     * Register an input toggle with this datepicker.
     */
    registerToggle(toggle: NxDatepickerToggleComponent<D>): void;
    /**
     * @docs-private
     * Open the calendar.
     */
    open(): void;
    /**
     * @docs-private
     * Close the calendar.
     */
    close(): void;
    /** Open the calendar as a popup. */
    private _openAsPopup;
    /** Create the popup. */
    private _createPopup;
    /** Create the popup PositionStrategy. */
    private _createPopupPositionStrategy;
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    private _getValidDateOrNull;
}
