import { NxFormfieldComponent } from '@allianz/ngx-ndbx/formfield';
import { AfterContentInit, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { AbstractControl, ControlValueAccessor, ValidationErrors, Validator, ValidatorFn } from '@angular/forms';
import { NxDateAdapter, NxDateFormats } from './adapter/index';
import { NxDatepickerComponent } from './datepicker/datepicker.component';
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
export declare const NX_DATEFIELD_VALUE_ACCESSOR: any;
export declare const NX_DATEFIELD_VALIDATORS: any;
/**
 * An event used for datepicker input and change events. We don't always have access to a native
 * input or change event because the event may have been triggered by the user clicking on the
 * calendar popup. For consistency, we always use NxDatepickerInputEvent instead.
 */
export declare class NxDatepickerInputEvent<D> {
    /** Reference to the datepicker input component that emitted the event. */
    target: NxDatefieldDirective<D>;
    /** Reference to the native input element associated with the datepicker input. */
    targetElement: HTMLElement;
    /** The new value for the target datepicker input. */
    value: D | null;
    constructor(
    /** Reference to the datepicker input component that emitted the event. */
    target: NxDatefieldDirective<D>, 
    /** Reference to the native input element associated with the datepicker input. */
    targetElement: HTMLElement);
}
/**
 * Directive used to provide date processing functionality to an input.
 */
export declare class NxDatefieldDirective<D> implements AfterContentInit, ControlValueAccessor, OnDestroy, Validator {
    private _elementRef;
    _dateAdapter: NxDateAdapter<D>;
    private _dateFormats;
    private _formField;
    /** @docs-private */
    currentFormattedDate: any;
    /** The datepicker that this input is associated with. */
    datepicker: NxDatepickerComponent<D>;
    _datepicker: NxDatepickerComponent<D>;
    private registerDatepicker;
    /** Function that can be used to filter out dates within the datepicker and invalidate values in the datefield. */
    datefieldFilter: (date: D | null) => boolean;
    _dateFilter: (date: D | null) => boolean;
    /** Provide or read the current date. It's type <D> depends on the chosen date implementation */
    value: D | null;
    private _value;
    /** Sets the minimum valid date. */
    min: D | null;
    private _min;
    /** Sets the maximum valid date. */
    max: D | null;
    private _max;
    /** If supported by the date implementation enable strict parsing (applies to Moment's parse function here) */
    strict: any;
    private _strict;
    /** Override the parse format given with parse.dateInput with the token NX_DATE_FORMATS  */
    parseFormat: string | string[];
    private _parseFormat;
    /** Override the display format given with display.dateInput with the token NX_DATE_FORMATS  */
    displayFormat: string;
    private _displayFormat;
    /** Whether the datepicker-input is disabled. */
    disabled: boolean;
    private _disabled;
    /** Emits when a `change` event is fired on this `<input>`. */
    readonly dateChange: EventEmitter<NxDatepickerInputEvent<D>>;
    /** Emits when an `input` event is fired on this `<input>`. */
    readonly dateInput: EventEmitter<NxDatepickerInputEvent<D>>;
    /** Emits when the value changes (either due to user input or programmatic change). */
    _valueChange: EventEmitter<D>;
    /** Emits when the disabled state has changed */
    _disabledChange: EventEmitter<boolean>;
    _onTouched: () => void;
    private _cvaOnChange;
    private _validatorOnChange;
    private _datepickerSubscription;
    private _localeSubscription;
    /**
     * @deprecated
     * @deletion-target 9.0.0
     * This will force the current value to be parsed again by the given DateAdapter.
     * That's a convenience method so you can trigger it manually.
     */
    format(): void;
    constructor(_elementRef: ElementRef, _dateAdapter: NxDateAdapter<D>, _dateFormats: NxDateFormats, _formField: NxFormfieldComponent);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /** @docs-private */
    registerOnValidatorChange(fn: () => void): void;
    /** @docs-private */
    validate(c: AbstractControl): ValidationErrors | null;
    /**
     * @docs-private
     * @deprecated
     * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead
     */
    getPopupConnectionElementRef(): ElementRef;
    /**
     * @docs-private
     *
     * Gets the element that the datepicker popup should be connected to.
     * @return The element to connect the popup to.
     */
    getConnectedOverlayOrigin(): ElementRef;
    writeValue(value: D): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    _onKeydown(event: KeyboardEvent): void;
    _onInput(value: string): void;
    _onChange(): void;
    _focus(): void;
    _onBlur(): void;
    /** Returns the validators of the datefield. */
    getValidators(): ValidatorFn[];
    /** Formats a value and sets it on the input native element. */
    private _formatValue;
    /**
     * @param obj The object to check.
     * @returns The given object if it is both a date instance and valid, otherwise null.
     */
    private _getValidDateOrNull;
}
