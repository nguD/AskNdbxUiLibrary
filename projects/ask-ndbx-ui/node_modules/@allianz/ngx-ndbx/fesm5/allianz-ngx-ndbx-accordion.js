import { __extends, __read } from 'tslib';
import { CdkAccordion, CdkAccordionItem } from '@angular/cdk/accordion';
import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { TemplatePortal, PortalModule } from '@angular/cdk/portal';
import { Directive, Input, TemplateRef, Component, ChangeDetectionStrategy, Optional, SkipSelf, ChangeDetectorRef, ViewContainerRef, ContentChild, Host, NgModule } from '@angular/core';
import { Subject, Subscription, merge } from 'rxjs';
import { startWith, filter, take } from 'rxjs/operators';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { CommonModule } from '@angular/common';
import { ENTER, SPACE } from '@angular/cdk/keycodes';

/**
 * @fileoverview added by tsickle
 * Generated from: accordion.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_TYPE = 'regular';
var NxAccordionDirective = /** @class */ (function (_super) {
    __extends(NxAccordionDirective, _super);
    function NxAccordionDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._style = 'regular';
        _this._negative = null;
        return _this;
    }
    Object.defineProperty(NxAccordionDirective.prototype, "style", {
        get: /**
         * @return {?}
         */
        function () {
            return this._style;
        },
        /**
         * Value for the styling that should be chosen.
         * Default value: 'regular'
         */
        set: /**
         * Value for the styling that should be chosen.
         * Default value: 'regular'
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value = value ? value : DEFAULT_TYPE;
            var _a = __read(value.match(/regular|light/) || [DEFAULT_TYPE], 1), newValue = _a[0];
            this._style = (/** @type {?} */ (newValue));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxAccordionDirective.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Whether the negative set of styles should be used. */
        set: /**
         * Whether the negative set of styles should be used.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._negative = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    NxAccordionDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: 'nx-accordion',
                    host: {
                        '[class.nx-accordion]': 'true',
                        'role': 'presentation'
                    }
                },] }
    ];
    NxAccordionDirective.propDecorators = {
        style: [{ type: Input, args: ['nxStyle',] }],
        negative: [{ type: Input }]
    };
    return NxAccordionDirective;
}(CdkAccordion));
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxAccordionDirective.prototype._style;
    /**
     * @type {?}
     * @private
     */
    NxAccordionDirective.prototype._negative;
}

/**
 * @fileoverview added by tsickle
 * Generated from: accordion-animations.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var nxAccordionAnimations = {
    bodyExpansion: trigger('bodyExpansion', [
        state('closed', style({ height: '0px', visibility: 'hidden' })),
        state('open', style({ height: '*', visibility: 'visible' })),
        transition('open <=> closed', animate('.5s cubic-bezier(0.86, 0, 0.07, 1)'))
    ]),
    indicatorRotate: trigger('indicatorRotate', [
        state('closed', style({ transform: 'rotate(0deg)' })),
        state('open', style({ transform: 'rotate(180deg)' })),
        transition('open <=> closed', animate('.3s ease')),
    ])
};

/**
 * @fileoverview added by tsickle
 * Generated from: expansion-panel-body.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxExpansionPanelBodyDirective = /** @class */ (function () {
    function NxExpansionPanelBodyDirective(_template) {
        this._template = _template;
    }
    NxExpansionPanelBodyDirective.decorators = [
        { type: Directive, args: [{ selector: '[nxExpansionPanelBody]' },] }
    ];
    /** @nocollapse */
    NxExpansionPanelBodyDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return NxExpansionPanelBodyDirective;
}());
if (false) {
    /** @type {?} */
    NxExpansionPanelBodyDirective.prototype._template;
}

/**
 * @fileoverview added by tsickle
 * Generated from: expansion-panel.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var nextId = 0;
/** @type {?} */
var DEFAULT_TYPE$1 = 'regular';
var Éµ0 = undefined;
var NxExpansionPanelComponent = /** @class */ (function (_super) {
    __extends(NxExpansionPanelComponent, _super);
    function NxExpansionPanelComponent(accordion, _changeDetectorRef, _expansionDispatcher, _viewContainerRef) {
        var _this = _super.call(this, accordion, _changeDetectorRef, _expansionDispatcher) || this;
        _this._viewContainerRef = _viewContainerRef;
        _this._negative = null;
        _this._accordionStyle = DEFAULT_TYPE$1;
        _this._style = null;
        _this._headerId = "nx-expansion-panel-header-" + nextId++;
        /**
         * Stream that emits for changes in `\@Input` properties.
         */
        _this._inputChanges = new Subject();
        _this.accordion = accordion;
        return _this;
    }
    Object.defineProperty(NxExpansionPanelComponent.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Whether the negative set of styles should be used. */
        set: /**
         * Whether the negative set of styles should be used.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._negative = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxExpansionPanelComponent.prototype, "style", {
        get: /**
         * @return {?}
         */
        function () {
            return this._style;
        },
        /**
         * Value for the styling that should be chosen.
         * Default value: 'regular'.
         */
        set: /**
         * Value for the styling that should be chosen.
         * Default value: 'regular'.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value = value ? value : DEFAULT_TYPE$1;
            var _a = __read(value.match(/regular|light/) || [DEFAULT_TYPE$1], 1), newValue = _a[0];
            this._style = (/** @type {?} */ (newValue));
            this._accordionStyle = (/** @type {?} */ (newValue));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxExpansionPanelComponent.prototype, "portal", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._portal;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxExpansionPanelComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.lazyContent) {
            // Render the content as soon as the panel becomes open.
            this.opened.pipe(startWith(null), filter((/**
             * @return {?}
             */
            function () { return _this.expanded && !_this._portal; })), take(1)).subscribe((/**
             * @return {?}
             */
            function () {
                _this._portal = new TemplatePortal(_this.lazyContent._template, _this._viewContainerRef);
            }));
        }
        // Inherit appearance given by the accordion (if any).
        if (Boolean(this.accordion)) {
            if (this.style === null && this.accordion.style !== null) {
                this.style = this.accordion.style;
            }
            if (this.negative === null && this.accordion.negative !== null) {
                this.negative = this.accordion.negative;
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NxExpansionPanelComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this._inputChanges.next(changes);
    };
    /**
     * @return {?}
     */
    NxExpansionPanelComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnDestroy.call(this);
        this._inputChanges.complete();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxExpansionPanelComponent.prototype.getOpenState = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        return this.expanded ? 'open' : 'closed';
    };
    NxExpansionPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-expansion-panel',
                    exportAs: 'NxExpansionPanelComponent',
                    template: "<ng-content select=\"nx-expansion-panel-header\"></ng-content>\n\n<div class=\"nx-expansion-panel__content\" role=\"region\" [@bodyExpansion]=\"getOpenState()\"\n  [attr.aria-labelledby]=\"_headerId\" [id]=\"id\">\n  <div class=\"nx-expansion-panel__body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"portal\"></ng-template>\n  </div>\n</div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [nxAccordionAnimations.bodyExpansion],
                    host: {
                        '[class.nx-expanded]': 'expanded',
                        '[class.nx-expansion-panel--light]': '_accordionStyle === "light"',
                        '[class.nx-expansion-panel--regular]': '_accordionStyle === "regular"',
                        '[class.nx-expansion-panel--negative]': 'negative',
                        '[class.is-disabled]': 'disabled',
                    },
                    providers: [
                        // Provide NxAccordionDirective as undefined to prevent nested expansion panels from registering
                        // to the same accordion.
                        { provide: NxAccordionDirective, useValue: Éµ0 },
                    ],
                    styles: [":host{display:block}:host(.nx-expansion-panel--negative) ::ng-deep div.nx-expansion-panel__body *{color:#fff}.nx-expansion-panel__content{overflow:hidden;display:block}.nx-expansion-panel__body{font-size:16px;font-size:var(--accordion-body-font-size,16px);line-height:24px;line-height:var(--accordion-body-line-height,24px);font-weight:400;font-weight:var(--accordion-body-font-weight,400);letter-spacing:0;letter-spacing:var(--accordion-body-letter-spacing,0);padding:24px 88px 32px 32px;padding:var(--accordion-regular-body-padding,24px 88px 32px 32px)}:host(.nx-expansion-panel--regular){margin-top:16px;margin-top:var(--accordion-regular-header-top-margin,16px)}:host(.nx-expansion-panel--regular) ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 transparent;box-shadow:inset 0 1px 0 0 var(--accordion-regular-border-color,transparent)}:host(.nx-expansion-panel--regular):last-child,:host(.nx-expansion-panel--regular):only-child{box-shadow:0 1px 0 0 transparent;box-shadow:0 1px 0 0 var(--accordion-regular-border-color,transparent)}@media (max-width:703px){.nx-expansion-panel__body{padding:24px 16px 32px}:host(.nx-expansion-panel--regular){margin-top:0}:host(.nx-expansion-panel--regular) ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 #d9d9d9}:host(.nx-expansion-panel--regular):last-child ::ng-deep .nx-expansion-panel__header-content,:host(.nx-expansion-panel--regular):only-child ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 #d9d9d9,inset 0 -1px 0 0 #d9d9d9}:host(.nx-expansion-panel--regular).nx-expanded ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 #d9d9d9,inset 0 -1px 0 0 #d9d9d9}}:host(.nx-expansion-panel--light) .nx-expansion-panel__body{padding:24px 88px 32px 32px;padding:var(--accordion-light-body-padding,24px 88px 32px 32px)}:host(.nx-expansion-panel--light):not(.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 #d9d9d9}:host(.nx-expansion-panel--light):not(.nx-expansion-panel--negative):last-child,:host(.nx-expansion-panel--light):not(.nx-expansion-panel--negative):only-child{box-shadow:0 1px 0 0 #d9d9d9}:host(.nx-expansion-panel--light.nx-expansion-panel--negative){color:#fff}:host(.nx-expansion-panel--light.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 #fff}:host(.nx-expansion-panel--light.nx-expansion-panel--negative):last-child,:host(.nx-expansion-panel--light.nx-expansion-panel--negative):only-child{box-shadow:0 1px 0 0 #fff}@media screen and (-ms-high-contrast:active){:host{border-color:windowText;color:buttonText}:host.nx-expansion-panel--regular{border:1px solid buttonText}:host.is-disabled{border-color:GrayText}:host.nx-expansion-panel--light.nx-expansion-panel--negative ::ng-deep .nx-expansion-panel__header-content,:host.nx-expansion-panel--light:not(.nx-expansion-panel--negative) ::ng-deep .nx-expansion-panel__header-content{box-shadow:inset 0 1px 0 0 windowText}:host.nx-expansion-panel--light.nx-expansion-panel--negative:last-child,:host.nx-expansion-panel--light.nx-expansion-panel--negative:only-child,:host.nx-expansion-panel--light:not(.nx-expansion-panel--negative):last-child,:host.nx-expansion-panel--light:not(.nx-expansion-panel--negative):only-child{box-shadow:0 1px 0 0 windowText}}"]
                }] }
    ];
    /** @nocollapse */
    NxExpansionPanelComponent.ctorParameters = function () { return [
        { type: NxAccordionDirective, decorators: [{ type: Optional }, { type: SkipSelf }] },
        { type: ChangeDetectorRef },
        { type: UniqueSelectionDispatcher },
        { type: ViewContainerRef }
    ]; };
    NxExpansionPanelComponent.propDecorators = {
        negative: [{ type: Input }],
        style: [{ type: Input, args: ['nxStyle',] }],
        lazyContent: [{ type: ContentChild, args: [NxExpansionPanelBodyDirective, { static: false },] }]
    };
    return NxExpansionPanelComponent;
}(CdkAccordionItem));
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxExpansionPanelComponent.prototype._negative;
    /** @type {?} */
    NxExpansionPanelComponent.prototype._accordionStyle;
    /**
     * @type {?}
     * @private
     */
    NxExpansionPanelComponent.prototype._style;
    /**
     * \@docs-private
     * @type {?}
     */
    NxExpansionPanelComponent.prototype.lazyContent;
    /**
     * @type {?}
     * @private
     */
    NxExpansionPanelComponent.prototype._portal;
    /**
     * \@docs-private
     * @type {?}
     */
    NxExpansionPanelComponent.prototype.accordion;
    /** @type {?} */
    NxExpansionPanelComponent.prototype._headerId;
    /**
     * Stream that emits for changes in `\@Input` properties.
     * @type {?}
     */
    NxExpansionPanelComponent.prototype._inputChanges;
    /**
     * @type {?}
     * @private
     */
    NxExpansionPanelComponent.prototype._viewContainerRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: expansion-panel-header.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxExpansionPanelHeaderComponent = /** @class */ (function () {
    function NxExpansionPanelHeaderComponent(panel, _changeDetectorRef) {
        var _this = this;
        this.panel = panel;
        this._changeDetectorRef = _changeDetectorRef;
        this._parentChangeSubscription = Subscription.EMPTY;
        this._parentChangeSubscription = merge(panel.opened, panel.closed, panel._inputChanges.pipe(filter((/**
         * @param {?} changes
         * @return {?}
         */
        function (changes) { return !!(changes.hideToggle || changes.disabled); }))))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this._changeDetectorRef.markForCheck(); }));
    }
    /**
     * @return {?}
     */
    NxExpansionPanelHeaderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._parentChangeSubscription.unsubscribe();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxExpansionPanelHeaderComponent.prototype.isExpanded = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        return this.panel.expanded;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxExpansionPanelHeaderComponent.prototype.getOpenState = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        return this.panel.getOpenState();
    };
    /**
     * @return {?}
     */
    NxExpansionPanelHeaderComponent.prototype._getPanelId = /**
     * @return {?}
     */
    function () {
        return this.panel.id;
    };
    /**
     * Toggle the expansion panel.
     */
    /**
     * Toggle the expansion panel.
     * @return {?}
     */
    NxExpansionPanelHeaderComponent.prototype.toggle = /**
     * Toggle the expansion panel.
     * @return {?}
     */
    function () {
        this.panel.toggle();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    NxExpansionPanelHeaderComponent.prototype.keydown = /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        switch (event.keyCode) {
            case SPACE:
            case ENTER:
                event.preventDefault();
                this.toggle();
                break;
            default:
                return;
        }
    };
    NxExpansionPanelHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-expansion-panel-header',
                    template: "<div class=\"nx-expansion-panel__header-content\">\n  <ng-content select=\"nx-expansion-panel-title\"></ng-content>\n  <ng-content select=\"nx-expansion-panel-description\"></ng-content>\n  <nx-icon\n    [@indicatorRotate]=\"getOpenState()\"\n    class=\"nx-expansion-panel__chevron\"\n    name=\"chevron-down\">\n  </nx-icon>\n</div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [nxAccordionAnimations.indicatorRotate],
                    host: {
                        '[class.nx-expanded]': 'isExpanded()',
                        'class': 'nx-expansion-panel__header',
                        'role': 'button',
                        '[attr.id]': 'panel._headerId',
                        '[attr.tabindex]': 'panel.disabled ? -1 : 0',
                        '[attr.aria-controls]': '_getPanelId()',
                        '[attr.aria-expanded]': 'isExpanded()',
                        '[attr.aria-disabled]': 'panel.disabled',
                        '[class.is-disabled]': 'panel.disabled',
                        '(keydown)': 'keydown($event)',
                        '(click)': 'toggle()'
                    },
                    styles: [":host:focus{outline:0}.nx-expansion-panel__header-content{width:100%;cursor:pointer;align-items:center;display:flex;justify-content:space-between;position:relative;outline:0;border:none;color:#414141;color:var(--accordion-regular-header-text-color,#414141);background:#f5f5f5;background:var(--accordion-regular-header-background-color,#f5f5f5);padding:24px 32px;padding:var(--accordion-regular-header-padding,24px 32px)}:host-context(.nx-expansion-panel--regular):not(.is-disabled) .nx-expansion-panel__header-content:hover{color:#414141;color:var(--accordion-regular-header-hover-text-color,#414141)}:host-context(.nx-expansion-panel--regular):not(.is-disabled) .nx-expansion-panel__header-content:hover .nx-expansion-panel__chevron{color:#006192;color:var(--accordion-regular-hover-chevron-color,#006192)}::ng-deep .nx-expansion-panel__header-title{font-size:26px;font-size:var(--accordion-regular-font-size,26px);line-height:32px;line-height:var(--accordion-regular-line-height,32px);font-weight:300;font-weight:var(--accordion-regular-font-weight,300);letter-spacing:.3px;letter-spacing:var(--accordion-regular-letter-spacing,.3px);text-align:left;margin-right:32px}@media (max-width:703px){.nx-expansion-panel__header-content{padding:16px}::ng-deep .nx-expansion-panel__header-title{font-size:20px;font-size:var(--accordion-regular-mobile-font-size,20px);line-height:28px;line-height:var(--accordion-regular-mobile-line-height,28px);font-weight:400;font-weight:var(--accordion-regular-mobile-font-weight,400);letter-spacing:.2px;letter-spacing:var(--accordion-regular-mobile-letter-spacing,.2px);margin-right:16px}}.nx-expansion-panel__chevron{pointer-events:none;font-size:24px;font-size:var(--accordion-chevron-size,24px)}:host(:not(.is-disabled)) .nx-expansion-panel__chevron{color:#006192;color:var(--accordion-regular-chevron-color,#006192)}:host-context(.nx-expansion-panel--light) .nx-expansion-panel__header-content{padding:24px 32px;padding:var(--accordion-light-header-padding,24px 32px);margin-top:0;background:0 0}:host-context(.nx-expansion-panel--light) .nx-expansion-panel__chevron{color:#006192;color:var(--accordion-light-chevron-color,#006192)}:host-context(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__header-title{font-size:20px;font-size:var(--accordion-light-font-size,20px);line-height:28px;line-height:var(--accordion-light-line-height,28px);font-weight:400;font-weight:var(--accordion-light-font-weight,400);letter-spacing:.2px;letter-spacing:var(--accordion-light-letter-spacing,.2px)}@media (max-width:703px){:host-context(.nx-expansion-panel--light) ::ng-deep .nx-expansion-panel__header-title{font-size:14px;font-size:var(--accordion-light-mobile-font-size,14px);line-height:20px;line-height:var(--accordion-light-mobile-line-height,20px);font-weight:600;font-weight:var(--accordion-light-mobile-font-weight,600);letter-spacing:.2px;letter-spacing:var(--accordion-light-mobile-letter-spacing,.2px)}}:host-context(.nx-expansion-panel--light:not(.nx-expansion-panel--negative)) .nx-expansion-panel__header-content{color:#006192;color:var(--accordion-light-header-text-color,#006192)}:host-context(.nx-expansion-panel--light:not(.nx-expansion-panel--negative)):not(.is-disabled) .nx-expansion-panel__header-content:hover{color:#006192;color:var(--accordion-light-header-hover-text-color,#006192)}:host-context(.nx-expansion-panel--light:not(.nx-expansion-panel--negative)):not(.is-disabled) .nx-expansion-panel__header-content:hover .nx-expansion-panel__chevron{color:#006192;color:var(--accordion-light-hover-chevron-color,#006192)}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) .nx-expansion-panel__header-content{color:#fff}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) .nx-expansion-panel__chevron{color:#fff}:host.is-disabled.is-disabled .nx-expansion-panel__chevron,:host.is-disabled.is-disabled .nx-expansion-panel__header-content{cursor:not-allowed;color:#c2c2c2;color:var(--accordion-disabled-color,#c2c2c2)}:host-context([data-whatinput=keyboard]):focus .nx-expansion-panel__header-content{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6);z-index:1}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]):focus .nx-expansion-panel__header-content{box-shadow:0 0 0 2px background,0 0 0 6px windowText}:host{-ms-high-contrast-adjust:none}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) .nx-expansion-panel__header-content,:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative):not(.is-disabled) .nx-expansion-panel__header-content:hover,:host-context(.nx-expansion-panel--light:not(.nx-expansion-panel--negative)) .nx-expansion-panel__header-content,:host-context(.nx-expansion-panel--light:not(.nx-expansion-panel--negative)):not(.is-disabled) .nx-expansion-panel__header-content:hover,:host-context(.nx-expansion-panel--regular):not(.is-disabled) .nx-expansion-panel__header-content,:host-context(.nx-expansion-panel--regular):not(.is-disabled):not(.is-disabled) .nx-expansion-panel__header-content:hover{color:buttonText;background-color:buttonFace}:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative) .nx-expansion-panel__header-content .nx-expansion-panel__chevron,:host-context(.nx-expansion-panel--light.nx-expansion-panel--negative):not(.is-disabled) .nx-expansion-panel__header-content:hover .nx-expansion-panel__chevron,:host-context(.nx-expansion-panel--light:not(.nx-expansion-panel--negative)) .nx-expansion-panel__header-content .nx-expansion-panel__chevron,:host-context(.nx-expansion-panel--light:not(.nx-expansion-panel--negative)):not(.is-disabled) .nx-expansion-panel__header-content:hover .nx-expansion-panel__chevron,:host-context(.nx-expansion-panel--regular):not(.is-disabled) .nx-expansion-panel__header-content .nx-expansion-panel__chevron,:host-context(.nx-expansion-panel--regular):not(.is-disabled):not(.is-disabled) .nx-expansion-panel__header-content:hover .nx-expansion-panel__chevron{color:buttonText}:host.is-disabled.is-disabled .nx-expansion-panel__header-content{color:GrayText;background-color:buttonFace}:host.is-disabled.is-disabled .nx-expansion-panel__header-content .nx-expansion-panel__chevron{color:GrayText}}"]
                }] }
    ];
    /** @nocollapse */
    NxExpansionPanelHeaderComponent.ctorParameters = function () { return [
        { type: NxExpansionPanelComponent, decorators: [{ type: Host }] },
        { type: ChangeDetectorRef }
    ]; };
    return NxExpansionPanelHeaderComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxExpansionPanelHeaderComponent.prototype._parentChangeSubscription;
    /**
     * \@docs-private
     * @type {?}
     */
    NxExpansionPanelHeaderComponent.prototype.panel;
    /**
     * @type {?}
     * @private
     */
    NxExpansionPanelHeaderComponent.prototype._changeDetectorRef;
}
/**
 * This directive is to be used inside of the NxExpansionPanelHeader component.
 */
var NxExpansionPanelDescriptionDirective = /** @class */ (function () {
    function NxExpansionPanelDescriptionDirective() {
    }
    NxExpansionPanelDescriptionDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: 'nx-expansion-panel-description',
                    host: {
                        class: 'nx-expansion-panel__header-description'
                    }
                },] }
    ];
    return NxExpansionPanelDescriptionDirective;
}());
/**
 * This directive is to be used inside of the NxExpansionPanelHeader component.
 */
var NxExpansionPanelTitleDirective = /** @class */ (function () {
    function NxExpansionPanelTitleDirective() {
    }
    NxExpansionPanelTitleDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: 'nx-expansion-panel-title',
                    host: {
                        class: 'nx-expansion-panel__header-title'
                    }
                },] }
    ];
    return NxExpansionPanelTitleDirective;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: accordion.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxAccordionModule = /** @class */ (function () {
    function NxAccordionModule() {
    }
    NxAccordionModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        PortalModule,
                        NxIconModule
                    ],
                    exports: [
                        NxAccordionDirective,
                        NxExpansionPanelComponent,
                        NxExpansionPanelHeaderComponent,
                        NxExpansionPanelDescriptionDirective,
                        NxExpansionPanelTitleDirective,
                        NxExpansionPanelBodyDirective
                    ],
                    declarations: [
                        NxAccordionDirective,
                        NxExpansionPanelComponent,
                        NxExpansionPanelHeaderComponent,
                        NxExpansionPanelDescriptionDirective,
                        NxExpansionPanelTitleDirective,
                        NxExpansionPanelBodyDirective
                    ],
                    providers: [],
                },] }
    ];
    return NxAccordionModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: allianz-ngx-ndbx-accordion.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxAccordionDirective, NxAccordionModule, NxExpansionPanelComponent, nxAccordionAnimations as Éµa, NxExpansionPanelBodyDirective as Éµb, NxExpansionPanelHeaderComponent as Éµc, NxExpansionPanelDescriptionDirective as Éµd, NxExpansionPanelTitleDirective as Éµe };
//# sourceMappingURL=allianz-ngx-ndbx-accordion.js.map
