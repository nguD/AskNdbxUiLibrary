import { NxProgressbarModule } from '@allianz/ngx-ndbx/progressbar';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, Inject, forwardRef, SkipSelf, QueryList, Directive, ElementRef, ContentChildren, NgModule } from '@angular/core';
import { __extends } from 'tslib';
import { DOCUMENT, CommonModule } from '@angular/common';
import { CdkStep, CdkStepper, CdkStepperNext, CdkStepperPrevious, CdkStepperModule } from '@angular/cdk/stepper';
import { takeUntil, takeWhile } from 'rxjs/operators';
import { ErrorStateMatcher, clamp } from '@allianz/ngx-ndbx/utils';
import { Subject } from 'rxjs';
import { Directionality } from '@angular/cdk/bidi';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { NxLabelModule } from '@allianz/ngx-ndbx/base';

/**
 * @fileoverview added by tsickle
 * Generated from: multi/multi-step-item.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docs-private
 */
var NxMultiStepItemComponent = /** @class */ (function () {
    function NxMultiStepItemComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._direction = 'horizontal';
    }
    Object.defineProperty(NxMultiStepItemComponent.prototype, "direction", {
        /** The direction of the step */
        get: /**
         * The direction of the step
         * @return {?}
         */
        function () {
            return this._direction;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._direction = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxMultiStepItemComponent.prototype, "selected", {
        /** Sets the selected step. */
        get: /**
         * Sets the selected step.
         * @return {?}
         */
        function () {
            return this._selected;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selected = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxMultiStepItemComponent.prototype, "active", {
        /** Sets the active step. */
        get: /**
         * Sets the active step.
         * @return {?}
         */
        function () {
            return this._active;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._active = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxMultiStepItemComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxMultiStepItemComponent.prototype, "last", {
        /** Sets the last step. */
        get: /**
         * Sets the last step.
         * @return {?}
         */
        function () {
            return this._last;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._last = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxMultiStepItemComponent.prototype, "completed", {
        /** Sets the step completed. */
        get: /**
         * Sets the step completed.
         * @return {?}
         */
        function () {
            return this._completed;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._completed = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    NxMultiStepItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-multi-step-item',
                    template: "<div class=\"label-box\">\n  <div class=\"dot\">\n    <div *ngIf=\"!completed && selected\" class=\"small-dot\"></div>\n    <nx-icon *ngIf=\"completed && !disabled\" name=\"check\"></nx-icon>\n  </div>\n  <div *ngIf=\"direction === 'vertical'\" class=\"label\" [attr.label]=\"label\">{{ label }}</div>\n</div>\n\n<div *ngIf=\"!last\" class=\"line\"></div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.nx-multi-step-item--vertical]': 'direction === "vertical"',
                        '[class.is-selected]': 'selected',
                        '[class.is-completed]': 'completed',
                        '[class.is-active]': 'active',
                        '[class.is-disabled]': 'disabled',
                        '[class.is-last]': 'last',
                        '[attr.aria-disabled]': 'disabled ? "true" : null'
                    },
                    styles: [":host{flex:1 1 100%;display:flex;align-items:center;justify-content:center;position:relative;padding-bottom:8px;cursor:pointer}:host.is-disabled{cursor:not-allowed}:host.is-disabled .dot{border-color:#c2c2c2;border-color:var(--multi-stepper-dot-disabled-color,#c2c2c2)}:host.is-completed:not(.is-disabled) .dot{background-color:#007ab3;background-color:var(--multi-stepper-dot-touched-color,#007ab3)}:host.nx-multi-step-item--vertical{flex:0 0 auto;flex-direction:column;align-items:flex-start;padding:0}:host.nx-multi-step-item--vertical .label-box{display:flex;align-items:center}:host.nx-multi-step-item--vertical .label{position:static;transform:none;margin-left:16px;white-space:nowrap;text-overflow:ellipsis;text-align:left;min-width:0;font-size:16px;font-size:var(--multi-stepper-step-font-size,16px);line-height:24px;line-height:var(--multi-stepper-step-line-height,24px);font-weight:400;font-weight:var(--multi-stepper-step-font-weight,400);letter-spacing:0;letter-spacing:var(--multi-stepper-step-letter-spacing,0)}:host.nx-multi-step-item--vertical .label:before{content:attr(label);height:0;overflow:hidden;display:block}:host.nx-multi-step-item--vertical.is-disabled .label{color:#c2c2c2;color:var(--multi-stepper-step-disabled-color,#c2c2c2)}:host.nx-multi-step-item--vertical.is-selected .label{font-weight:700}@media screen and (-ms-high-contrast:active){:host .dot{border-color:buttonText}:host.is-selected .dot{box-shadow:0 0 0 4px highlight}:host.is-disabled .label{color:GrayText}:host.is-disabled .dot{border-color:GrayText}:host.nx-multi-step-item--vertical .label{-ms-high-contrast-adjust:none;background-color:buttonFace;border-radius:4px;box-shadow:0 0 0 2px buttonFace;color:buttonText}:host.nx-multi-step-item--vertical.is-selected .label{background-color:highlight;border-radius:4px;box-shadow:0 0 0 2px highlight;color:highlightText}}:host.nx-multi-step-item--vertical .line{border-top:0;border-left-color:var(--multi-stepper-line-color,#c2c2c2);height:16px;flex:0 0 auto;margin-left:6px;border-left:4px dotted #c2c2c2}:host.nx-multi-step-item--vertical.is-active .line{border-left-style:solid;border-left-color:#007ab3;border-left-color:var(--multi-stepper-line-filled-color,#007ab3);margin-top:-5px;margin-bottom:-5px;height:26px}@media screen and (-ms-high-contrast:active){:host.nx-multi-step-item--vertical.is-active .line{border-color:windowText}}:host.nx-multi-step-item--vertical.is-last{flex:0 0 auto}:host:not(.nx-multi-step-item--vertical) .line{border-top-color:var(--multi-stepper-line-color,#c2c2c2);margin:0 4px;position:absolute;left:calc(16px + 4px);width:calc(100% - (16px + (4px * 2)));transform:translateX(50%);top:calc(16px / 2 - 4px / 2);border-top:4px dotted #c2c2c2}:host:not(.nx-multi-step-item--vertical).is-active .line{border-top-color:#007ab3;border-top-color:var(--multi-stepper-line-filled-color,#007ab3);border-top-style:solid;margin:0;left:calc(16px - 1px);width:calc(100% - (16px - 2px))}:host:not(:first-child)::before{content:''}:host.nx-multi-step-item--active::after{border-top-color:#007ab3;border-top-color:var(--multi-stepper-line-filled-color,#007ab3);border-top-style:solid;border-image-source:none;transition:border-style .1s ease-in;margin:0;left:calc(4px * 2);width:calc(100% - 4px)}.label-box{outline:0;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:none;padding:0;margin:0;background:0 0}:host-context([data-whatinput=keyboard]) .label-box:focus{outline:0}:host-context([data-whatinput=keyboard]) .label-box:focus::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]) .label-box:focus .dot{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}.label{position:absolute;top:calc(8px + 16px);text-align:center;color:#414141;color:var(--multi-stepper-step-color,#414141);left:0;width:100%}.dot{width:16px;height:16px;border-color:var(--multi-stepper-dot-touched-color,#007ab3);border-radius:50%;color:#fff;flex:0 0 auto;position:relative;border:2px solid #007ab3}.dot nx-icon{font-size:16px;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}.small-dot{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);width:8px;height:8px;border-radius:50%;background-color:#007ab3;background-color:var(--multi-stepper-dot-touched-color,#007ab3)}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]) .label-box:focus .dot{box-shadow:0 0 0 2px background,0 0 0 6px windowText}.small-dot{background-color:windowText}}"]
                }] }
    ];
    /** @nocollapse */
    NxMultiStepItemComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxMultiStepItemComponent.propDecorators = {
        direction: [{ type: Input }],
        label: [{ type: Input }],
        selected: [{ type: Input }],
        active: [{ type: Input }],
        disabled: [{ type: Input }],
        last: [{ type: Input }],
        completed: [{ type: Input }]
    };
    return NxMultiStepItemComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxMultiStepItemComponent.prototype._direction;
    /**
     * The label of the step.
     * @type {?}
     */
    NxMultiStepItemComponent.prototype.label;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepItemComponent.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepItemComponent.prototype._active;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepItemComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepItemComponent.prototype._last;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepItemComponent.prototype._completed;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepItemComponent.prototype._changeDetectorRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: progress-stepper.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:use-input-property-decorator
// We need to reference steps in stepper and stepper in steps. To prevent circular depenedency errors
// Provide both components in a single file. Otherwise we would have to introduce interface/abstract classes
// shared between both implementations.
var NxStepComponent = /** @class */ (function (_super) {
    __extends(NxStepComponent, _super);
    function NxStepComponent(stepper, _errorStateMatcher) {
        var _this = _super.call(this, stepper) || this;
        _this.stepper = stepper;
        _this._errorStateMatcher = _errorStateMatcher;
        _this._destroyed = new Subject();
        _this._interacted = false;
        return _this;
    }
    Object.defineProperty(NxStepComponent.prototype, "stepControl", {
        /** The top level abstract control of the step. */
        get: /**
         * The top level abstract control of the step.
         * @return {?}
         */
        function () {
            return this._stepControl;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._stepControl = value;
            // If a step control changes its state, the stepper needs to update.
            if (this._stepControl) {
                this._stepControl.statusChanges
                    .pipe(takeUntil(this._destroyed), takeWhile((/**
                 * @return {?}
                 */
                function () { return _this._stepControl === value; })))
                    .subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.stepper._stateChanged();
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxStepComponent.prototype, "interacted", {
        /** Whether the user has seen the expanded step content or not. */
        get: /**
         * Whether the user has seen the expanded step content or not.
         * @return {?}
         */
        function () {
            return this._interacted;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._interacted = value;
            if (this.stepper) {
                this.stepper._stateChanged();
            }
        },
        enumerable: true,
        configurable: true
    });
    /** Custom error state matcher that checks for validity of the step form. */
    /**
     * Custom error state matcher that checks for validity of the step form.
     * @param {?} control
     * @param {?} form
     * @return {?}
     */
    NxStepComponent.prototype.isErrorState = /**
     * Custom error state matcher that checks for validity of the step form.
     * @param {?} control
     * @param {?} form
     * @return {?}
     */
    function (control, form) {
        /** @type {?} */
        var originalErrorState = this._errorStateMatcher.isErrorState(control, form);
        // Checks for the validity of a step form that is not submitted or touched,
        // e.g when the user directly clicks the "next" button or directly on the step
        /** @type {?} */
        var customErrorState = !!(control && control.invalid && this.interacted);
        return originalErrorState || customErrorState;
    };
    /**
     * @return {?}
     */
    NxStepComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroyed.next(true);
        this._destroyed.complete();
    };
    NxStepComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-step',
                    template: "<ng-template><ng-content></ng-content></ng-template>\n",
                    exportAs: 'nxStep',
                    providers: [{ provide: ErrorStateMatcher, useExisting: NxStepComponent }],
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NxStepComponent.ctorParameters = function () { return [
        { type: NxProgressStepperDirective, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NxProgressStepperDirective; })),] }] },
        { type: ErrorStateMatcher, decorators: [{ type: SkipSelf }] }
    ]; };
    return NxStepComponent;
}(CdkStep));
if (false) {
    /** @type {?} */
    NxStepComponent.prototype._destroyed;
    /**
     * @type {?}
     * @private
     */
    NxStepComponent.prototype._stepControl;
    /**
     * @type {?}
     * @private
     */
    NxStepComponent.prototype._interacted;
    /**
     * @type {?}
     * @private
     */
    NxStepComponent.prototype.stepper;
    /**
     * @type {?}
     * @private
     */
    NxStepComponent.prototype._errorStateMatcher;
}
/**
 * \@docs-private
 */
var NxProgressStepperDirective = /** @class */ (function (_super) {
    __extends(NxProgressStepperDirective, _super);
    function NxProgressStepperDirective(_cdRef, _dir, _elementRef, _document) {
        var _this = _super.call(this, _dir, _cdRef, _elementRef, _document) || this;
        _this._cdRef = _cdRef;
        _this._stepHeader = new QueryList();
        return _this;
    }
    /**
     * @return {?}
     */
    NxProgressStepperDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Mark the component for change detection whenever the content children query changes
        this._steps.changes
            .pipe(takeUntil(this._destroyed))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this._stateChanged();
        }));
        // If a step control changes its state, the stepper needs to update.
        this._steps.filter((/**
         * @param {?} s
         * @return {?}
         */
        function (s) { return !!s.stepControl; }))
            .forEach((/**
         * @param {?} step
         * @return {?}
         */
        function (step) {
            step.stepControl.statusChanges
                .pipe(takeUntil(step._destroyed))
                .subscribe((/**
             * @return {?}
             */
            function () {
                _this._stateChanged();
            }));
        }));
        // we need to defer change detection that the nxStepperNext and NxStepperPrevious buttons
        // can run change detection again, because they are initialized before the stepper content
        Promise.resolve().then((/**
         * @return {?}
         */
        function () {
            _this._cdRef.detectChanges();
        }));
    };
    Object.defineProperty(NxProgressStepperDirective.prototype, "hasPrevious", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return (this.selectedIndex - 1) >= 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "hasNext", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return (this.selectedIndex + 1) < this.count;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "count", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._steps ? this._steps.length : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "currentStep", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            if (this.count === 0 || this.selectedIndex === -1) {
                return null;
            }
            /** @type {?} */
            var steps = this._steps.toArray();
            return steps[this.selectedIndex];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "nextStep", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            if (this.selectedIndex + 1 >= this._steps.length) {
                return null;
            }
            return this._steps.toArray()[this.selectedIndex + 1];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "steps", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._steps;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxProgressStepperDirective.prototype, "currentLabel", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var step = this.currentStep;
            /** @type {?} */
            var label = step.stepLabel || step.label;
            return this.currentStepLabel + " " + (this.selectedIndex + 1) + "/" + this.count + ": " + label;
        },
        enumerable: true,
        configurable: true
    });
    NxProgressStepperDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[nxProgressStepper]',
                    exportAs: 'nxProgressStepper',
                },] }
    ];
    /** @nocollapse */
    NxProgressStepperDirective.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Directionality },
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    NxProgressStepperDirective.propDecorators = {
        _steps: [{ type: ContentChildren, args: [NxStepComponent, { descendants: true },] }],
        currentStepLabel: [{ type: Input }],
        title: [{ type: Input }]
    };
    return NxProgressStepperDirective;
}(CdkStepper));
if (false) {
    /** @type {?} */
    NxProgressStepperDirective.prototype._steps;
    /** @type {?} */
    NxProgressStepperDirective.prototype._stepHeader;
    /**
     * Sets the label on the left side showing the current step label. Used for mobile viewports.
     * @type {?}
     */
    NxProgressStepperDirective.prototype.currentStepLabel;
    /**
     * Sets the title to be rendered above the progress bar.
     * \@deletion-target 10.0.0
     * @deprecated Use `nx-label` instead
     * @type {?}
     */
    NxProgressStepperDirective.prototype.title;
    /**
     * @type {?}
     * @private
     */
    NxProgressStepperDirective.prototype._cdRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: multi/multi-step-group.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxMultiStepperGroupComponent = /** @class */ (function () {
    function NxMultiStepperGroupComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
    }
    Object.defineProperty(NxMultiStepperGroupComponent.prototype, "label", {
        get: /**
         * @return {?}
         */
        function () {
            return this._label;
        },
        /** Sets the label of a group that is shown to the user. */
        set: /**
         * Sets the label of a group that is shown to the user.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._label = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    NxMultiStepperGroupComponent.decorators = [
        { type: Component, args: [{
                    template: "<ng-template><ng-content></ng-content></ng-template>\n",
                    selector: 'nx-step-group',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NxMultiStepperGroupComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxMultiStepperGroupComponent.propDecorators = {
        steps: [{ type: ContentChildren, args: [NxStepComponent, { descendants: true },] }],
        label: [{ type: Input }]
    };
    return NxMultiStepperGroupComponent;
}());
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxMultiStepperGroupComponent.prototype.steps;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepperGroupComponent.prototype._label;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepperGroupComponent.prototype._changeDetectorRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: multi/multi-step.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxMultiStepperComponent = /** @class */ (function (_super) {
    __extends(NxMultiStepperComponent, _super);
    function NxMultiStepperComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._direction = 'horizontal';
        return _this;
    }
    Object.defineProperty(NxMultiStepperComponent.prototype, "direction", {
        /** Sets the direction of the multi stepper. */
        get: /**
         * Sets the direction of the multi stepper.
         * @return {?}
         */
        function () {
            return this._direction;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._direction = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxMultiStepperComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.groups.length) {
            this._steps.reset(this._stepsInGroups);
        }
        this.groups.changes.subscribe((/**
         * @return {?}
         */
        function () {
            _this._steps.reset(_this._stepsInGroups);
        }));
    };
    /**
     * @param {?} index
     * @return {?}
     */
    NxMultiStepperComponent.prototype._stepDisabled = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var steps = this.steps.toArray();
        if (this.linear && index >= 0) {
            return steps.slice(0, index).some((/**
             * @param {?} step
             * @return {?}
             */
            function (step) {
                /** @type {?} */
                var control = step.stepControl;
                /** @type {?} */
                var isIncomplete = control
                    ? control.invalid || control.pending || !step.interacted
                    : !step.completed;
                return isIncomplete && !step.optional;
            }));
        }
        return false;
    };
    Object.defineProperty(NxMultiStepperComponent.prototype, "_stepsInGroups", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            if (this.groups.length) {
                return this.groups
                    .reduce((/**
                 * @param {?} steps
                 * @param {?} group
                 * @return {?}
                 */
                function (steps, group) { return steps.concat(group.steps.toArray()); }), []);
            }
            return [];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} step
     * @return {?}
     */
    NxMultiStepperComponent.prototype._getIndex = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        return this.steps.toArray().indexOf(step);
    };
    /**
     * @param {?} groupIndex
     * @return {?}
     */
    NxMultiStepperComponent.prototype._isGroupActive = /**
     * @param {?} groupIndex
     * @return {?}
     */
    function (groupIndex) {
        return this.selectedIndex >= this.getGroupItemIndex(groupIndex);
    };
    /**
     * @param {?} groupIndex
     * @return {?}
     */
    NxMultiStepperComponent.prototype._isGroupDisabled = /**
     * @param {?} groupIndex
     * @return {?}
     */
    function (groupIndex) {
        return this._stepDisabled(this.getGroupItemIndex(groupIndex));
    };
    /**
     * @private
     * @param {?} groupIndex
     * @return {?}
     */
    NxMultiStepperComponent.prototype.getGroupItemIndex = /**
     * @private
     * @param {?} groupIndex
     * @return {?}
     */
    function (groupIndex) {
        /** @type {?} */
        var count = 0;
        /** @type {?} */
        var groups = this.groups.toArray();
        for (var i = 0; i < groupIndex; i++) {
            count += groups[i].steps.length;
        }
        return count;
    };
    NxMultiStepperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-multi-stepper',
                    template: "<span *ngIf=\"title && direction === 'horizontal'\" class=\"nx-single-step__title\">{{title}}</span>\n<span class=\"nx-progress-stepper__title\" *ngIf=\"direction === 'horizontal'\">\n  <ng-content select=\"nx-label\"></ng-content>\n</span>\n\n<div class=\"nx-multi-stepper__items\">\n  <ng-container *ngIf=\"groups.length === 0 || direction === 'horizontal'; else groupsTemplate\">\n    <ng-container *ngFor=\"let step of _steps;let i = index; let isLast = last; let isFirst = first\">\n\n      <nx-multi-step-item\n        (click)=\"!_stepDisabled(i) && step.select()\"\n        [last]=\"isLast\"\n        [label]=\"step.stepLabel || step.label\"\n        [completed]=\"step.completed\"\n        [selected]=\"selectedIndex === i\"\n        [active]=\"selectedIndex > i\"\n        [disabled]=\"_stepDisabled(i)\"\n        [direction]=\"direction\">\n      </nx-multi-step-item>\n    </ng-container>\n  </ng-container>\n</div>\n\n\n<div class=\"labels-container\"\n     *ngIf=\"direction === 'horizontal'\">\n  <div class=\"label\" [attr.label]=\"step.label\" *ngFor=\"let step of _steps;let i = index; \"\n       [ngClass]=\"{'is-disabled':_stepDisabled(i), 'is-selected': (selectedIndex === i)}\"\n       (click)=\"!_stepDisabled(i) && step.select()\">\n    <span>{{ step.label }}</span>\n  </div>\n</div>\n\n<div class=\"nx-progress-stepper__mobile-label\">\n  {{currentLabel}}\n</div>\n\n<div *ngFor=\"let step of _steps; let i = index\"\n      class=\"nx-progress-stepper__content\" role=\"tabpanel\"\n      [id]=\"_getStepContentId(i)\"\n      [attr.aria-label]=\"currentLabel\"\n      [attr.aria-expanded]=\"selectedIndex === i\">\n  <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n</div>\n\n<ng-template #groupsTemplate>\n  <ng-container *ngFor=\"let group of groups; let i = index;\">\n    <div class=\"nx-multi-stepper__group\">\n      <div class=\"nx-multi-stepper__group-label\"\n          [class.is-active]=\"_isGroupActive(i)\"\n          [class.is-disabled]=\"_isGroupDisabled(i)\">\n        {{ group.label }}\n      </div>\n\n      <div class=\"nx-multi-stepper__group-items\">\n        <ng-container *ngFor=\"let step of group.steps; let isLast = last;\">\n          <nx-multi-step-item\n              (click)=\"!_stepDisabled(_getIndex(step)) && step.select()\"\n              [last]=\"isLast\"\n              [label]=\"step.stepLabel || step.label\"\n              [completed]=\"step.completed\"\n              [selected]=\"selectedIndex === _getIndex(step)\"\n              [active]=\"selectedIndex > _getIndex(step)\"\n              [disabled]=\"_stepDisabled(_getIndex(step))\"\n              [direction]=\"direction\">\n          </nx-multi-step-item>\n        </ng-container>\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n",
                    providers: [
                        {
                            provide: NxProgressStepperDirective,
                            useExisting: NxMultiStepperComponent
                        }
                    ],
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.nx-multi-stepper--vertical]': 'direction === "vertical"'
                    },
                    styles: [":host{display:block}.nx-progress-stepper__content[aria-expanded=false]{height:0;overflow:hidden}.nx-progress-stepper__mobile-label{display:none;color:#414141;color:var(--progress-indicator-mobile-color,#414141);font-size:16px;font-size:var(--progress-indicator-mobile-font-size,16px);line-height:24px;line-height:var(--progress-indicator-mobile-line-height,24px);font-weight:400;font-weight:var(--progress-indicator-mobile-font-weight,400);letter-spacing:0;letter-spacing:var(--progress-indicator-mobile-letter-spacing,0)}@media (max-width:703px){.nx-progress-stepper__mobile-label{display:block;text-align:center}}.nx-progress-stepper__title{display:block}.nx-progress-stepper__title ::ng-deep nx-label{margin-bottom:24px}", ":host{width:100%}@media (min-width:704px){:host.nx-multi-stepper--vertical{display:flex}}:host.nx-multi-stepper--vertical .nx-progress-stepper__content[aria-expanded=false]{width:0}:host.nx-multi-stepper--vertical .nx-multi-stepper__items{align-items:flex-start;flex-direction:column;margin:0 56px 0 0}:host.nx-multi-stepper--vertical .nx-multi-stepper__group-items{flex-direction:column}:host.nx-multi-stepper--vertical .nx-multi-stepper__group-label{transform:none;border-left:4px solid transparent;margin-bottom:16px;margin-left:6px;padding-left:22px}:host.nx-multi-stepper--vertical .nx-multi-stepper__group:nth-child(n+2) .nx-multi-stepper__group-label{padding-top:16px;margin-top:16px;border-left-style:dotted;border-left-color:#c2c2c2;border-left-color:var(--multi-stepper-line-color,#c2c2c2)}:host.nx-multi-stepper--vertical .nx-multi-stepper__group:nth-child(n+2) .nx-multi-stepper__group-label.is-active{padding-top:36px;padding-bottom:20px;margin-top:-4px;margin-bottom:-4px;border-left-style:solid;border-left-color:#007ab3;border-left-color:var(--multi-stepper-line-filled-color,#007ab3)}:host .labels-container{width:100%;flex:1 1 100%;display:flex;margin:0 auto;vertical-align:top;align-self:flex-start;align-items:flex-start}:host .labels-container .label{flex:1 1 100%;display:flex;align-items:center;justify-content:center;position:relative;font-size:16px;font-size:var(--multi-stepper-step-font-size,16px);line-height:24px;line-height:var(--multi-stepper-step-line-height,24px);font-weight:400;font-weight:var(--multi-stepper-step-font-weight,400);letter-spacing:0;letter-spacing:var(--multi-stepper-step-letter-spacing,0);color:#414141;color:var(--multi-stepper-step-color,#414141);cursor:pointer;text-align:center}:host .labels-container .label.is-disabled{color:#c2c2c2;color:var(--multi-stepper-step-disabled-color,#c2c2c2);cursor:not-allowed}@media screen and (-ms-high-contrast:active){:host .labels-container .label{color:buttonText}:host .labels-container .label.is-disabled{color:GrayText}:host .labels-container .label span{-ms-high-contrast-adjust:none;background-color:buttonFace;border-radius:4px;box-shadow:0 0 0 2px buttonFace;color:buttonText}:host .labels-container .label.is-selected span{background-color:highlight;border-radius:4px;box-shadow:0 0 0 2px highlight;color:highlightText}}.nx-multi-stepper__items{display:flex;margin:0 auto;align-items:center}@media (max-width:703px){:host .labels-container{display:none}.nx-multi-stepper__items{display:none}}.nx-multi-stepper__group-items{display:flex}.nx-multi-stepper__group{display:flex;flex-direction:column;flex:1 1 auto}.nx-multi-stepper__group-label{font-size:20px;font-size:var(--multi-stepper-group-font-size,20px);line-height:28px;line-height:var(--multi-stepper-group-line-height,28px);font-weight:400;font-weight:var(--multi-stepper-group-font-weight,400);letter-spacing:.2px;letter-spacing:var(--multi-stepper-group-letter-spacing,.2px);color:#414141;color:var(--multi-stepper-group-color,#414141)}.nx-multi-stepper__group-label.is-disabled{color:#c2c2c2;color:var(--multi-stepper-group-disabled-color,#c2c2c2)}"]
                }] }
    ];
    NxMultiStepperComponent.propDecorators = {
        groups: [{ type: ContentChildren, args: [NxMultiStepperGroupComponent, { descendants: true },] }],
        direction: [{ type: Input }]
    };
    return NxMultiStepperComponent;
}(NxProgressStepperDirective));
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxMultiStepperComponent.prototype.groups;
    /**
     * @type {?}
     * @private
     */
    NxMultiStepperComponent.prototype._direction;
}

/**
 * @fileoverview added by tsickle
 * Generated from: single/single-step.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxSingleStepperComponent = /** @class */ (function (_super) {
    __extends(NxSingleStepperComponent, _super);
    function NxSingleStepperComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._rightLabel = 'Next step:';
        return _this;
    }
    Object.defineProperty(NxSingleStepperComponent.prototype, "rightLabel", {
        /** Sets the label on the right showing the next step. */
        get: /**
         * Sets the label on the right showing the next step.
         * @return {?}
         */
        function () { return this._rightLabel; },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) { this._rightLabel = v; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSingleStepperComponent.prototype, "progress", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return (this.selectedIndex + 1) / this.count;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSingleStepperComponent.prototype, "currentLabel", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var step = this.currentStep;
            /** @type {?} */
            var label = step.stepLabel || step.label;
            return "\n    " + this.currentStepLabel + " " + (this.selectedIndex + 1) + "/" + this.count + ": " + label + "\n    ";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSingleStepperComponent.prototype, "nextLabel", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var step = this.nextStep;
            if (step) {
                /** @type {?} */
                var label = step.stepLabel || step.label;
                return "\n        " + this.rightLabel + " " + label + "\n      ";
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    NxSingleStepperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-single-stepper',
                    template: "<div class=\"nx-single-step-container\">\n  <span *ngIf=\"title\" class=\"nx-single-step__title\">{{title}}</span>\n  <span class=\"nx-progress-stepper__title\">\n    <ng-content select=\"nx-label\"></ng-content>\n  </span>\n\n  <nx-progressbar [value]=\"progress\"></nx-progressbar>\n\n  <div class=\"nx-single-step__infos\">\n    <div class=\"nx-single-step__current\">\n      {{ currentLabel }}\n    </div>\n    <div class=\"nx-single-step__next\">\n      {{ nextLabel }}\n    </div>\n  </div>\n\n  <div class=\"nx-progress-stepper__mobile-label\">\n    {{ currentLabel }}\n  </div>\n</div>\n\n<div\n  *ngFor=\"let step of _steps; let i = index\"\n  class=\"nx-progress-stepper__content\"\n  role=\"tabpanel\"\n  [id]=\"_getStepContentId(i)\"\n  [attr.aria-label]=\"currentLabel\"\n  [attr.aria-expanded]=\"selectedIndex === i\"\n>\n  <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n</div>\n",
                    providers: [{ provide: NxProgressStepperDirective, useExisting: NxSingleStepperComponent }],
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block}.nx-progress-stepper__content[aria-expanded=false]{height:0;overflow:hidden}.nx-progress-stepper__mobile-label{display:none;color:#414141;color:var(--progress-indicator-mobile-color,#414141);font-size:16px;font-size:var(--progress-indicator-mobile-font-size,16px);line-height:24px;line-height:var(--progress-indicator-mobile-line-height,24px);font-weight:400;font-weight:var(--progress-indicator-mobile-font-weight,400);letter-spacing:0;letter-spacing:var(--progress-indicator-mobile-letter-spacing,0)}@media (max-width:703px){.nx-progress-stepper__mobile-label{display:block;text-align:center}}.nx-progress-stepper__title{display:block}.nx-progress-stepper__title ::ng-deep nx-label{margin-bottom:24px}", ":host{display:block}.nx-single-step__infos{display:flex;font-size:16px;font-size:var(--single-stepper-step-font-size,16px);line-height:24px;line-height:var(--single-stepper-step-line-height,24px);font-weight:300;font-weight:var(--single-stepper-step-font-weight,300);letter-spacing:0;letter-spacing:var(--single-stepper-step-letter-spacing,0);color:#414141;color:var(--single-stepper-step-color,#414141);margin-top:8px}.nx-single-step__title,nx-progressbar{margin-bottom:8px;display:block}@media (max-width:703px){.nx-single-step__infos,nx-progressbar{display:none}}.nx-single-step__title{font-size:20px;font-size:var(--progress-stepper-label-font-size,20px);line-height:28px;line-height:var(--progress-stepper-label-line-height,28px);font-weight:300;font-weight:var(--progress-stepper-label-font-weight,300);letter-spacing:.2px;letter-spacing:var(--progress-stepper-label-letter-spacing,.2px);margin-bottom:24px}@media (min-width:320px){.nx-single-step__title{display:block}}.nx-single-step__next{margin-left:auto}@media (max-width:703px){.nx-single-step__next{display:none}}"]
                }] }
    ];
    NxSingleStepperComponent.propDecorators = {
        rightLabel: [{ type: Input, args: ['nextLabel',] }]
    };
    return NxSingleStepperComponent;
}(NxProgressStepperDirective));
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxSingleStepperComponent.prototype._rightLabel;
}

/**
 * @fileoverview added by tsickle
 * Generated from: progress/progress.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxProgressStepperComponent = /** @class */ (function (_super) {
    __extends(NxProgressStepperComponent, _super);
    function NxProgressStepperComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._progress = 0;
        return _this;
    }
    Object.defineProperty(NxProgressStepperComponent.prototype, "progress", {
        /** Sets the current value/progress of the progress bar. */
        get: /**
         * Sets the current value/progress of the progress bar.
         * @return {?}
         */
        function () { return this._progress; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._progress = clamp(value || 0); },
        enumerable: true,
        configurable: true
    });
    NxProgressStepperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-progress-stepper',
                    template: "<span *ngIf=\"title\" class=\"nx-single-step__title\">{{title}}</span>\n<span class=\"nx-progress-stepper__title\">\n  <ng-content select=\"nx-label\"></ng-content>\n</span>\n\n<div class=\"nx-subprogress__items\">\n  <ng-container *ngFor=\"let step of _steps; let i = index\">\n\n    <div\n      [class.nx-subprogress__item--inactive]=\"selectedIndex !== i && !step.completed\"\n      [attr.aria-disabled]=\"selectedIndex !== i && !step.completed\"\n      [class.nx-subprogress__item--selected]=\"selectedIndex === i\"\n      class=\"nx-subprogress__item\">\n\n      <div class=\"nx-subprogress__counter\">\n      <div class=\"nx-subprogress__number\">\n\n          {{ i + 1 }}\n          </div>\n      </div>\n\n      <label class=\"nx-subprogress__label\">{{step.stepLabel || step.label}}</label>\n\n      <div class=\"nx-subprogress__progress\"  *ngIf=\"selectedIndex === i\">\n        <nx-progressbar\n          [value]=\"progress\"></nx-progressbar>\n      </div>\n    </div>\n  </ng-container>\n</div>\n\n<div class=\"nx-progress-stepper__mobile-label\">\n    {{currentLabel}}\n</div>\n\n\n<div *ngFor=\"let step of _steps; let i = index\"\n      class=\"nx-progress-stepper__content\" role=\"tabpanel\"\n      [id]=\"_getStepContentId(i)\"\n      [attr.aria-label]=\"currentLabel\"\n      [attr.aria-expanded]=\"selectedIndex === i\">\n  <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n</div>\n",
                    providers: [{ provide: NxProgressStepperDirective, useExisting: NxProgressStepperComponent }],
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block}.nx-progress-stepper__content[aria-expanded=false]{height:0;overflow:hidden}.nx-progress-stepper__mobile-label{display:none;color:#414141;color:var(--progress-indicator-mobile-color,#414141);font-size:16px;font-size:var(--progress-indicator-mobile-font-size,16px);line-height:24px;line-height:var(--progress-indicator-mobile-line-height,24px);font-weight:400;font-weight:var(--progress-indicator-mobile-font-weight,400);letter-spacing:0;letter-spacing:var(--progress-indicator-mobile-letter-spacing,0)}@media (max-width:703px){.nx-progress-stepper__mobile-label{display:block;text-align:center}}.nx-progress-stepper__title{display:block}.nx-progress-stepper__title ::ng-deep nx-label{margin-bottom:24px}", ".nx-subprogress__items{display:flex;margin:0 auto}@media (max-width:703px){.nx-subprogress__items{display:none}}.nx-subprogress__item{display:flex;flex:1 0 auto}.nx-subprogress__item:not(:first-child){margin-left:16px}.nx-subprogress__item--selected{display:flex;flex:1 1 100%;align-items:center}.nx-subprogress__progress{flex:1 1 100%;margin-left:8px}.nx-subprogress__item--inactive .nx-subprogress__counter{max-width:24px;background-color:transparent;border-color:var(--progress-stepper-dot-disabled-background-color,#dadada);color:#dadada;color:var(--progress-stepper-dot-disabled-background-color,#dadada);border:2px solid #dadada}.nx-subprogress__item--inactive .nx-subprogress__label{color:#dadada;color:var(--progress-stepper-step-disabled-color,#dadada)}.nx-subprogress__label{flex:1 1 auto;white-space:nowrap;text-overflow:ellipsis;color:#006192;color:var(--progress-stepper-step-color,#006192);font-size:16px;font-size:var(--progress-stepper-step-font-size,16px);line-height:24px;line-height:var(--progress-stepper-step-line-height,24px);font-weight:400;font-weight:var(--progress-stepper-step-font-weight,400);letter-spacing:0;letter-spacing:var(--progress-stepper-step-letter-spacing,0)}.nx-subprogress__counter{flex:0 0 24px;display:flex;align-items:center;justify-content:center;background-color:#007ab3;background-color:var(--progress-stepper-dot-background-color,#007ab3);color:#fff;color:var(--progress-stepper-dot-color,#fff);width:24px;height:24px;text-align:center;border-radius:50%;margin-right:8px}@media screen and (-ms-high-contrast:active){.nx-subprogress__counter{-ms-high-contrast-adjust:none;background-color:transparent;color:windowText;border:1px solid windowText;border-radius:50%}.nx-subprogress__item--inactive{color:GrayText}.nx-subprogress__item--inactive .nx-subprogress__counter{color:GrayText;border:1px solid GrayText}}.nx-subprogress__number{font-size:14px;font-size:var(--progress-stepper-dotnumber-font-size,14px);line-height:20px;line-height:var(--progress-stepper-dotnumber-line-height,20px);font-weight:700;font-weight:var(--progress-stepper-dotnumber-font-weight,700);letter-spacing:.2px;letter-spacing:var(--progress-stepper-dotnumber-letter-spacing,.2px)}"]
                }] }
    ];
    NxProgressStepperComponent.propDecorators = {
        progress: [{ type: Input }]
    };
    return NxProgressStepperComponent;
}(NxProgressStepperDirective));
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxProgressStepperComponent.prototype._progress;
}

/**
 * @fileoverview added by tsickle
 * Generated from: buttons.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:use-input-property-decorator
var NxStepperNextDirective = /** @class */ (function (_super) {
    __extends(NxStepperNextDirective, _super);
    function NxStepperNextDirective(_stepper, changeDetectorRef) {
        var _this = _super.call(this, _stepper) || this;
        _this.changeDetectorRef = changeDetectorRef;
        /**
         * \@docs-private
         */
        _this.disabled = false;
        return _this;
    }
    /**
     * Implemented to prevent changed after checked error after stepper init.
     * When the stepper initializes the directive is checked first before
     * the stepper can check its content thus it doesn't know about it's children yet
     * so _stepper.hasNext returns false and disables the buttons. In the same CD cycle
     * after the stepper has checked its contents the button needs to be enabled resulting
     * in the error.
     */
    /**
     * Implemented to prevent changed after checked error after stepper init.
     * When the stepper initializes the directive is checked first before
     * the stepper can check its content thus it doesn't know about it's children yet
     * so _stepper.hasNext returns false and disables the buttons. In the same CD cycle
     * after the stepper has checked its contents the button needs to be enabled resulting
     * in the error.
     * @return {?}
     */
    NxStepperNextDirective.prototype.ngDoCheck = /**
     * Implemented to prevent changed after checked error after stepper init.
     * When the stepper initializes the directive is checked first before
     * the stepper can check its content thus it doesn't know about it's children yet
     * so _stepper.hasNext returns false and disables the buttons. In the same CD cycle
     * after the stepper has checked its contents the button needs to be enabled resulting
     * in the error.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var stepper = (/** @type {?} */ ((/** @type {?} */ (this._stepper))));
        if (this.disabled !== !stepper.hasNext) {
            this.disabled = !stepper.hasNext;
            this.changeDetectorRef.markForCheck();
        }
    };
    NxStepperNextDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'button[nxStepperNext]',
                    host: {
                        '[type]': 'type',
                        '[disabled]': 'disabled'
                    },
                    inputs: ['type'],
                    providers: [{ provide: CdkStepper, useExisting: NxProgressStepperDirective }]
                },] }
    ];
    /** @nocollapse */
    NxStepperNextDirective.ctorParameters = function () { return [
        { type: CdkStepper },
        { type: ChangeDetectorRef }
    ]; };
    return NxStepperNextDirective;
}(CdkStepperNext));
if (false) {
    /**
     * \@docs-private
     * @type {?}
     */
    NxStepperNextDirective.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    NxStepperNextDirective.prototype.changeDetectorRef;
}
var NxStepperPreviousDirective = /** @class */ (function (_super) {
    __extends(NxStepperPreviousDirective, _super);
    function NxStepperPreviousDirective(_stepper) {
        return _super.call(this, _stepper) || this;
    }
    Object.defineProperty(NxStepperPreviousDirective.prototype, "stepper", {
        get: /**
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (this._stepper));
        },
        enumerable: true,
        configurable: true
    });
    NxStepperPreviousDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'button[nxStepperPrevious]',
                    host: {
                        '[type]': 'type',
                        '[disabled]': '!stepper.hasPrevious'
                    },
                    inputs: ['type'],
                    providers: [{ provide: CdkStepper, useExisting: NxProgressStepperDirective }]
                },] }
    ];
    /** @nocollapse */
    NxStepperPreviousDirective.ctorParameters = function () { return [
        { type: CdkStepper }
    ]; };
    return NxStepperPreviousDirective;
}(CdkStepperPrevious));

/**
 * @fileoverview added by tsickle
 * Generated from: progress-stepper.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxProgressStepperModule = /** @class */ (function () {
    function NxProgressStepperModule() {
    }
    NxProgressStepperModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        CdkStepperModule,
                        NxIconModule,
                        NxProgressbarModule,
                        NxLabelModule
                    ],
                    declarations: [
                        NxProgressStepperDirective,
                        NxMultiStepperComponent,
                        NxStepComponent,
                        NxStepperNextDirective,
                        NxStepperPreviousDirective,
                        NxProgressStepperComponent,
                        NxSingleStepperComponent,
                        NxMultiStepItemComponent,
                        NxMultiStepperGroupComponent
                    ],
                    exports: [
                        NxProgressStepperDirective,
                        NxSingleStepperComponent,
                        NxProgressStepperComponent,
                        NxMultiStepperComponent,
                        NxStepComponent,
                        NxStepperNextDirective,
                        NxStepperPreviousDirective,
                        NxMultiStepperGroupComponent
                    ]
                },] }
    ];
    return NxProgressStepperModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: allianz-ngx-ndbx-progress-stepper.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxMultiStepItemComponent, NxMultiStepperComponent, NxMultiStepperGroupComponent, NxProgressStepperComponent, NxProgressStepperDirective, NxProgressStepperModule, NxSingleStepperComponent, NxStepComponent, NxStepperNextDirective, NxStepperPreviousDirective };
//# sourceMappingURL=allianz-ngx-ndbx-progress-stepper.js.map
