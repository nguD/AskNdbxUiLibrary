{"version":3,"file":"allianz-ngx-ndbx-modal.js","sources":["ng://@allianz/ngx-ndbx/modal/modal.service.ts","ng://@allianz/ngx-ndbx/modal/animations.ts","ng://@allianz/ngx-ndbx/modal/modal.component.ts","ng://@allianz/ngx-ndbx/modal/modal-open-on-click.directive.ts","ng://@allianz/ngx-ndbx/modal/modal.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** @docs-private */\n@Injectable()\nexport class NxModalService {\n\n  private subject = new Subject();\n  close$: Observable<any> = this.subject.asObservable();\n\n  close() {\n    this.subject.next();\n  }\n}\n","import { animate, animation, AnimationReferenceMetadata, style } from '@angular/animations';\n\nexport const fadeIn: AnimationReferenceMetadata = animation([\n    style({opacity: 0}),\n    animate('300ms', style({opacity: 1}))\n  ]);\n\nexport const fadeOut: AnimationReferenceMetadata = animation(\n  animate('300ms', style({opacity: 0}))\n);\n\nexport const scaleUp: AnimationReferenceMetadata = animation([\n    style({transform: 'scale(1)', opacity: 1}),\n    animate('250ms', style({transform: 'scale(1.3)', opacity: 0}))\n  ]);\n\nexport const scaleDown: AnimationReferenceMetadata = animation([\n    style({transform: 'scale(1.3)', opacity: 0}),\n    animate('250ms', style({transform: 'scale(1)', opacity: 1}))\n  ]);\n","import { OnDestroy, ChangeDetectionStrategy, Directive, ChangeDetectorRef } from '@angular/core';\nimport { Component, Input, OnInit, TemplateRef, Output, EventEmitter } from '@angular/core';\nimport { NxModalService } from './modal.service';\nimport { EventManager } from '@angular/platform-browser';\nimport { fadeIn, fadeOut, scaleDown, scaleUp } from './animations';\nimport { animateChild, query, transition, trigger, useAnimation } from '@angular/animations';\nimport { Subscription } from 'rxjs';\n\n/** Container for the action buttons in a modal. Has a fixed position at the bottom of the modal on scroll. */\n@Directive({\n  selector: '[nxModalActions]',\n  host: {\n    '[class.nx-modal__actions]': 'true'\n  }\n})\nexport class NxModalActionsDirective {}\n\n/** Scrollable container for the content of a modal. */\n@Directive({\n  selector: '[nxModalContent]',\n  host: {\n    '[class.nx-modal__content]': 'true'\n  }\n})\nexport class NxModalContentDirective {}\n\n@Component({\n  selector: 'nx-modal',\n  templateUrl: 'modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ './modal.component.scss' ],\n  animations: [\n    trigger('fadeInOut', [\n      transition(':enter', [\n        useAnimation(fadeIn),\n        query('@scaleUpDown', [\n          animateChild()\n        ])\n      ]),\n      transition(':leave', [\n        query('@scaleUpDown', [\n          animateChild()\n        ]),\n        useAnimation(fadeOut)\n      ])\n    ]),\n    trigger('scaleUpDown', [\n      transition(':enter', useAnimation(scaleDown)),\n      transition(':leave', useAnimation(scaleUp))\n    ])\n  ],\n  host: {\n    '[@fadeInOut]': '',\n    '[class.nx-modal--fixed-width]': 'size === \"fixed\"'\n  }\n})\n\nexport class NxModalComponent implements OnInit, OnDestroy {\n\n  private _closeButtonLabel: string = 'Close dialog';\n\n  /** Sets the 'aria-label' of the modal close button needed for accessibility.\n   *\n   * Default value is 'Close dialog'.\n   */\n  @Input()\n  set closeButtonLabel(value: string) {\n    if (value !== this._closeButtonLabel) {\n      this._closeButtonLabel = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get closeButtonLabel(): string {\n    return this._closeButtonLabel;\n  }\n\n  /**\n   * A template reference variable pointing to the template\n   * which contains the content of the modal view.\n   */\n  @Input('nxBody') body: TemplateRef<any>;\n\n  /**\n   * Whether the modal view should close when the user hits the escape key.\n   * Default is true.\n   */\n  @Input('nxHideOnEsc') hideOnEsc: boolean = true;\n\n  /**\n   * Whether the modal view should close when the user clicks on the backdrop.\n   * Default is true.\n   */\n  @Input('nxHideOnClickOutside') hideOnClickOutside: boolean = true;\n\n  /**\n   * Whether the modal view should have a close icon in the upper right corner.\n   * Default is true.\n   */\n  @Input('nxShowCloseIcon') showCloseIcon: boolean = true;\n\n  /**\n   * Controls the width of the dialog.\n   * On `auto` the width is controlled by the content width,\n   * on `fixed` the dialog gets a fixed width of 736px if the viewport is big enough. */\n  @Input('nxSize') size: 'fixed' | 'auto';\n\n  /**\n   * An event emitted when the user clicks on the backdrop or uses the built-in close button.\n   * This event can be applied in conjunction with the custom open state handling\n   * of a modal to close it when requested by the user.\n   */\n  @Output('nxClose') closeEvent = new EventEmitter<void>();\n\n  private closeSubscription: Subscription = Subscription.EMPTY;\n  private removeEventListener: Function = undefined;\n\n  constructor(private modalService: NxModalService, private eventManager: EventManager, private _changeDetectorRef: ChangeDetectorRef) {\n  }\n\n  ngOnInit() {\n    this.closeSubscription = this.modalService.close$.subscribe(() => this.closeEvent.emit());\n\n    this.removeEventListener = this.eventManager.addGlobalEventListener('window', 'keyup.esc', () => {\n      if (this.hideOnEsc) {\n        this.modalService.close();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.removeEventListener();\n    this.closeSubscription.unsubscribe();\n  }\n\n  /** @docs-private */\n  clickOutsideModal() {\n    if (this.hideOnClickOutside) {\n      this.modalService.close();\n    }\n  }\n\n  /** @docs-private */\n  closeButtonClick() {\n    this.modalService.close();\n  }\n\n  /** @docs-private */\n  cancelClick(evt: KeyboardEvent) {\n    evt.stopPropagation();\n  }\n}\n","import { Directive, Input, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { SubscriptionLike as ISubscription } from 'rxjs';\n\nimport { NxModalService } from './modal.service';\n\n@Directive({selector: '[nxOpenModalOnClick]'})\nexport class NxOpenModalOnClickDirective implements OnInit, OnDestroy {\n\n  /** @docs-private */\n  elements: Array<any>;\n\n  private subscription: ISubscription;\n\n  constructor(private templateRef: TemplateRef<any>,\n              private viewContainer: ViewContainerRef,\n              private modalService: NxModalService) {\n  }\n\n  ngOnInit() {\n    this.subscription = this.modalService.close$.subscribe(() => this.viewContainer.clear());\n  }\n\n  ngOnDestroy() {\n    this.elements.forEach(el => {\n      if (el.removeEventListener) {\n        el.removeEventListener('click', this.clickHandler);\n      }\n    });\n\n    this.subscription.unsubscribe();\n  }\n\n  /** @docs-private */\n  clickHandler = (event: any) => {\n    this.viewContainer.clear();\n    // instantiate the template onto which this directive is applied\n    const viewRef = this.viewContainer.createEmbeddedView(this.templateRef);\n    // we need to mark the viewRef explicitly if the modal is used inside another\n    // component that is using onPush change detection\n    viewRef.markForCheck();\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /**\n   * One or multiple template reference variables pointing to elements\n   * which should trigger opening the modal on click.\n   *\n   * Value: A single template reference variable or an array of template reference variables.\n   */\n  @Input()\n  set nxOpenModalOnClick(elements) {\n    // also support the case where only one element is passed, check for the length property to be sure elements is an array\n    if (elements.length) {\n      this.elements = elements;\n    } else {\n      this.elements = [ elements ];\n    }\n    // add a click event listener to any element passed as property to this directive\n    this.elements.forEach(el => {\n      if (el.addEventListener) {\n        el.addEventListener('click', this.clickHandler);\n      // workaround until refactoring: if the reference is a component\n      // reference the component has to implement a getter to its own elementRef\n      } else if (el.elementRef) {\n        el.elementRef.nativeElement.addEventListener('click', this.clickHandler);\n      } else {\n        console.warn(`nxOpenModalOnClick: Given Element doesn't appear to be an ElementRef.`, el);\n      }\n    });\n  }\n\n}\n","import { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport {NxModalComponent, NxModalActionsDirective, NxModalContentDirective} from './modal.component';\nimport { CommonModule } from '@angular/common';\nimport { NxOpenModalOnClickDirective } from './modal-open-on-click.directive';\nimport { NxModalService } from './modal.service';\nimport { A11yModule } from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [ CommonModule, A11yModule, NxIconModule ],\n  declarations: [\n    NxModalComponent,\n    NxOpenModalOnClickDirective,\n    NxModalActionsDirective,\n    NxModalContentDirective\n  ],\n  exports: [\n    NxModalComponent,\n    NxOpenModalOnClickDirective,\n    NxModalActionsDirective,\n    NxModalContentDirective\n  ],\n})\n\nexport class NxModalModule {\n  // define the modal service on root level as an application wide singleton,\n  // assuming that we only display one modal at a time, which seems quite reasonable\n  // this is static and named \"forRoot\" by convention\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NxModalModule,\n      providers: [NxModalService]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}