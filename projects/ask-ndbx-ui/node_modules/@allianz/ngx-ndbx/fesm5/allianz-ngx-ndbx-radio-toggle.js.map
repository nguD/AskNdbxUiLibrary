{"version":3,"file":"allianz-ngx-ndbx-radio-toggle.js","sources":["ng://@allianz/ngx-ndbx/radio-toggle/radio-toggle-button-base.component.ts","ng://@allianz/ngx-ndbx/radio-toggle/radio-toggle.component.ts","ng://@allianz/ngx-ndbx/radio-toggle/radio-toggle-button.component.ts","ng://@allianz/ngx-ndbx/radio-toggle/radio-toggle.module.ts"],"sourcesContent":["import {ElementRef, Input, Renderer2, ViewChild} from '@angular/core';\nimport { removeClasses } from '@allianz/ngx-ndbx/utils';\n\nlet nextId = 0;\n\n/** @docs-private */\nexport class NxRadioToggleButtonBaseComponent {\n  /** @docs-private */\n  toggleButtonId: string = 'nx-radio-toggle-button-' + nextId++;\n\n  /** @docs-private */\n  @Input('nxValue')\n  value: any;\n\n  /** @docs-private */\n  @ViewChild('toggleButtonLabelContainer', { static: true })\n  labelContainer: ElementRef;\n\n  /** @docs-private */\n  @ViewChild('toggleInput', { static: true })\n  toggleInput: ElementRef;\n\n  constructor(\n    /** @docs-private */\n    protected renderer: Renderer2) {\n  }\n\n  /** @docs-private */\n  triggerInputClick(event) {\n    event.stopPropagation();\n    this.toggleInput.nativeElement.click();\n  }\n\n  /** @docs-private */\n  setFirstButton() {\n    this.renderer.addClass(this.labelContainer.nativeElement, 'nx-radio-toggle__label-container--first');\n  }\n\n  /** @docs-private */\n  setLastButton() {\n    this.renderer.addClass(this.labelContainer.nativeElement, 'nx-radio-toggle__label-container--last');\n  }\n\n  /** @docs-private */\n  resetClasses() {\n    removeClasses(this.renderer, this.labelContainer, 'nx-radio-toggle__label-container--first nx-radio-toggle__label-container--last');\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mapClassNames } from '@allianz/ngx-ndbx/utils';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  OnDestroy,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ChangeDetectorRef,\n  Optional,\n  Self,\n  DoCheck\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject, merge } from 'rxjs';\nimport { filter, startWith, takeUntil } from 'rxjs/operators';\nimport { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';\nimport { NxRadioToggleButtonBaseComponent } from './radio-toggle-button-base.component';\nimport { NxRadioToggleButtonChange, NxRadioToggleButtonComponent } from './radio-toggle-button.component';\n\nlet nextId = 0;\n\nconst MAPPING = {\n  'negative': 'nx-radio-toggle--negative',\n  'small': 'nx-radio-toggle--small',\n};\n\n@Component({\n  selector: 'nx-radio-toggle',\n  templateUrl: 'radio-toggle.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['radio-toggle.component.scss']\n})\nexport class NxRadioToggleComponent implements ControlValueAccessor, AfterViewInit, OnDestroy,\n  AfterContentInit, DoCheck  {\n\n  private _toggleId: string = (nextId++).toString();\n\n  private _selection: any;\n\n  private _destroyed: Subject<void> = new Subject();\n\n  private _disabled: boolean = false;\n  /** @docs-private */\n  errorState: boolean = false;\n  // emits to signal children to run change detection\n  _disableChange = new Subject<void>();\n\n  /** Sets the component to the disabled state.*/\n  @Input('nxDisabled')\n  set disabled(value: boolean) {\n    const coerced = coerceBooleanProperty(value);\n    if (this._disabled !== coerced) {\n      this._disabled = coerced;\n      this._disableChange.next();\n    }\n  }\n\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  @ViewChild('toggleContainer', { static: true })\n  private toggleContainer: ElementRef;\n\n  private _name: string;\n\n  /** Sets the name used for accessibility. */\n  @Input('nxName')\n  set name(value: string) {\n    if (this._name !== value) {\n      this._name = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get name(): string {\n    return this._name;\n  }\n\n  /** @docs-private */\n  @ContentChildren(NxRadioToggleButtonBaseComponent)\n  toggleButtons: QueryList<NxRadioToggleButtonBaseComponent> = new QueryList();\n\n  private onTouchedCallback = () => { };\n\n  private onChangeCallback = (option: any) => { };\n\n  constructor(private renderer: Renderer2,\n              private _changeDetectorRef: ChangeDetectorRef,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() private _parentForm: NgForm,\n              @Optional() private _parentFormGroup: FormGroupDirective) {\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterViewInit() {\n    this.subscribeToToggleButtonsChange();\n  }\n\n  ngAfterContentInit() {\n    const changedOrDestroyed = merge(this.toggleButtons.changes, this._destroyed);\n\n    merge(...this.toggleButtons.map((button: any) => button.onChecked))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe((change: NxRadioToggleButtonChange) => {\n        this._selection = change.value;\n        this.onChangeCallback(this._selection);\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._disableChange.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  /** @docs-private */\n  subscribeToToggleButtonsChange(): void {\n    this.toggleButtons.changes\n      .pipe(\n        startWith(this.toggleButtons),\n        filter(toggles => toggles.length > 0),\n        takeUntil(this._destroyed)\n      ).subscribe((toggles) => {\n        toggles.forEach(toggle => {\n          toggle.resetClasses();\n          if (toggle.value === this.selection) {\n            // We need to defer the selection for the edge case that the button with the value of this.selection\n            // didn't exist yet but was added afterwards to prevent changed after checked errors\n            setTimeout(() => toggle.select());\n          }\n        });\n        toggles.first.setFirstButton();\n        toggles.last.setLastButton();\n      });\n  }\n\n  registerOnChange(onChangeCallback: any): void {\n    this.onChangeCallback = onChangeCallback;\n  }\n\n  registerOnTouched(onTouchedCallback: any): void {\n    this.onTouchedCallback = onTouchedCallback;\n  }\n\n  /** Preselects the respective options. */\n  @Input('nxSelection')\n  writeValue(value: string): void {\n    this._selection = value;\n    const correspondingButton =\n      this.toggleButtons.find((button: NxRadioToggleButtonComponent) => button.value === this._selection);\n    if (correspondingButton) {\n      (correspondingButton as NxRadioToggleButtonComponent).select();\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** @docs-private */\n  get id(): string {\n    return `nx-radio-toggle-${this._toggleId}`;\n  }\n\n  /** Sets the modifiers for the component. */\n  @Input('nxStyle')\n  set style(value: string) {\n    const modifierClasses = mapClassNames(value, [], MAPPING);\n    modifierClasses.split(' ')\n      .forEach(className => this.renderer.addClass(this.toggleContainer.nativeElement, className));\n  }\n\n  /** @docs-private */\n  set selection(selection: any) {\n    this._selection = selection;\n    this.onChangeCallback(selection);\n  }\n\n  get selection(): any {\n    return this._selection;\n  }\n\n  /** @docs-private */\n  change(value) {\n    this.onChangeCallback(value);\n    if (this.onTouchedCallback) {\n      this.onTouchedCallback();\n    }\n  }\n\n  /** @docs-private */\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const control = this.ngControl ? this.ngControl.control as FormControl : null;\n    const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n    }\n  }\n}\n","import { takeUntil } from 'rxjs/operators';\nimport {Subject } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef, Component, forwardRef, Inject, Input, Renderer2,\n  OnDestroy, HostListener\n} from '@angular/core';\n\nimport { NxRadioToggleButtonBaseComponent } from './radio-toggle-button-base.component';\nimport { NxRadioToggleComponent } from './radio-toggle.component';\n\n/** @docs-private */\nexport class NxRadioToggleButtonChange {\n  constructor(\n    public source: NxRadioToggleButtonComponent,\n    public value: any\n  ) {}\n}\n\n@Component({\n  selector: 'nx-radio-toggle-button',\n  styleUrls: ['radio-toggle-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'radio-toggle-button.component.html',\n  providers: [\n    {\n      provide: NxRadioToggleButtonBaseComponent, useExisting: forwardRef(() => NxRadioToggleButtonComponent)\n    }\n  ],\n  host: {\n    '[class.has-error]': '_controlInvalid() || null',\n    '[attr.aria-invalid]': '_controlInvalid() || null'\n  }\n})\nexport class NxRadioToggleButtonComponent extends NxRadioToggleButtonBaseComponent implements OnDestroy {\n\n  /** @docs-private */\n  // emits when the button is checked to notify the group\n  readonly onChecked = new Subject<NxRadioToggleButtonChange>();\n\n  private _destroyed: Subject<void> = new Subject();\n  private _disabled: boolean = false;\n  private _selected: boolean = false;\n\n  /** @docs-private */\n  @Input('nxDisabled')\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get disabled(): boolean {\n    return this._disabled || (this.radioToggle && this.radioToggle.disabled);\n  }\n\n  /** Sets the checked state and notify siblings and the parent group about the change */\n  // Only use this if you want the onChecked event to be fired, this will inform the parent about the change!\n  // To select a button without firing the event use the select() function\n  @Input('nxSelected')\n  set selected(value: boolean) {\n    if (this._selected !== value) {\n      this._selected = value;\n      if (this._selected) {\n        this._notifySiblings();\n        this._emitCheckedEvent();\n\n        if (this.radioToggle !== null) {\n          this.radioToggle.change(this.value);\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => { };\n\n  constructor(\n    @Inject(forwardRef(() => NxRadioToggleComponent)) private radioToggle: NxRadioToggleComponent,\n    /** @docs-private */\n    renderer: Renderer2,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _toggleDispatcher: UniqueSelectionDispatcher) {\n    super(renderer);\n\n    this._removeUniqueSelectionListener = this._toggleDispatcher.listen((id: string, radioToggleId: string) => {\n      if (this.radioToggle && this.radioToggle.id === radioToggleId && this.id !== id) {\n        this._selected = false;\n        // need to let change detector know in case that the select() function was called on another button\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n\n    this.radioToggle._disableChange.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** @docs-private */\n  get toggleId(): string {\n    return this.radioToggle.id;\n  }\n\n  /** @docs-private */\n  get id(): string {\n    return this.toggleButtonId;\n  }\n\n  private _notifySiblings() {\n    const toggleId = this.radioToggle ? this.radioToggle.id : this.id;\n    this._toggleDispatcher.notify(this.id, toggleId);\n  }\n\n  private _emitCheckedEvent() {\n    this.onChecked.next(new NxRadioToggleButtonChange(this, this.value));\n  }\n\n  // Does NOT emit the onChecked event. Useful when you need to set initial\n  // state. Used by the parent to set checked states on initialization and during\n  // writeValue() changes.\n  /** @docs-private */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._notifySiblings();\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** @docs-private */\n  @HostListener('keyup.space')\n  onKeyupSpace(): void {\n    this._selected = false;\n    this._notifySiblings();\n  }\n\n  /** @docs-private */\n  _controlInvalid(): boolean {\n    return !!(this.radioToggle && this.radioToggle.errorState);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NxRadioToggleComponent } from './radio-toggle.component';\nimport { FormsModule } from '@angular/forms';\nimport { NxRadioToggleButtonComponent } from './radio-toggle-button.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\n\n@NgModule({\n  declarations: [ NxRadioToggleComponent, NxRadioToggleButtonComponent ],\n  exports: [ NxRadioToggleComponent, NxRadioToggleButtonComponent ],\n  imports: [ CommonModule, FormsModule, NxIconModule ]\n})\nexport class NxRadioToggleModule { }\n"],"names":["nextId","tslib_1.__extends"],"mappings":"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"}