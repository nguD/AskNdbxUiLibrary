{"version":3,"file":"allianz-ngx-ndbx-formfield.js","sources":["ng://@allianz/ngx-ndbx/formfield/appendix.directive.ts","ng://@allianz/ngx-ndbx/formfield/error.directive.ts","ng://@allianz/ngx-ndbx/formfield/formfield-control.ts","ng://@allianz/ngx-ndbx/formfield/hint.directive.ts","ng://@allianz/ngx-ndbx/formfield/note.directive.ts","ng://@allianz/ngx-ndbx/formfield/suffix.directive.ts","ng://@allianz/ngx-ndbx/formfield/prefix.directive.ts","ng://@allianz/ngx-ndbx/formfield/label.directive.ts","ng://@allianz/ngx-ndbx/formfield/formfield.component.ts","ng://@allianz/ngx-ndbx/formfield/formfield.module.ts"],"sourcesContent":["import { Input, Directive } from '@angular/core';\nlet uniqueId = 0;\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n  selector: '[nxFormfieldAppendix]',\n  host: {\n    '[attr.id]': 'id'\n  }\n})\nexport class NxFormfieldAppendixDirective {\n\n  /** Sets the id of the formfield appendix. */\n  @Input() id: string = `nx-formfield-appendix-${uniqueId++}`;\n}\n","import { Directive, Input } from '@angular/core';\n\nlet uniqueId = 0;\n\n@Directive({\n  selector: '[nxFormfieldError], [nxError]',\n  host: {\n    role: 'alert',\n    '[attr.id]': 'id'\n  }\n})\nexport class NxFormfieldErrorDirective {\n  // create a unique id to be used by aria-described-by\n  /** Sets the id of the formfield error. */\n  @Input() id: string = `nx-formfield-error-${uniqueId++}`;\n}\n","import { ElementRef } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n/** @docs-private */\nexport abstract class NxFormfieldControl<T> {\n  value: T | null;\n\n  // Allow the control to notify the parent formfield about internal state changes\n  readonly stateChanges: Observable<void>;\n\n  readonly empty: boolean;\n\n  readonly id: string;\n\n  readonly ngControl: NgControl | null;\n\n  readonly focused: boolean;\n\n  readonly required: boolean;\n\n  readonly disabled: boolean;\n\n  readonly readonly: boolean;\n\n  readonly shouldLabelFloat?: boolean;\n\n  readonly errorState: boolean;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n    /**\n   * An optional name for the control type that can be used to distinguish `nx-formfield` elements\n   * based on their control type. The form field will add a class,\n   * `nx-formfield--type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  abstract setDescribedByIds(ids: string[]): void;\n\n  abstract setAriaLabel?(value: string): void;\n\n  abstract get elementRef(): ElementRef;\n}\n","import { Input, Directive } from '@angular/core';\nlet uniqueId = 0;\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n  selector: '[nxFormfieldHint]',\n  host: {\n    '[attr.id]': 'id'\n  }\n})\nexport class NxFormfieldHintDirective {\n  /** Sets the id of the formfield hint. */\n  @Input() id: string = `nx-formfield-hint-${uniqueId++}`;\n}\n","import { Input, Directive } from '@angular/core';\n\nlet uniqueId = 0;\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n  selector: '[nxFormfieldNote]',\n  host: {\n    '[attr.id]': 'id'\n  }\n})\nexport class NxFormfieldNoteDirective {\n\n  /** Sets the id of the formfield note. */\n  @Input() id: string = `nx-formfield-note-${uniqueId++}`;\n}\n","import { Input, Directive } from '@angular/core';\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n  selector: '[nxFormfieldSuffix]'\n})\nexport class NxFormfieldSuffixDirective {\n}\n","import { Input, Directive } from '@angular/core';\n\n// This Directive solely purpose is to mark given ng-content and project it into the required destination.\n@Directive({\n  selector: '[nxFormfieldPrefix]'\n})\nexport class NxFormfieldPrefixDirective {\n}\n","import { Directive } from '@angular/core';\n\n/** A directive for passing more complex custom label content. */\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: 'nx-formfield-label'\n})\nexport class NxFormfieldLabelDirective { }\n","import { ViewChild, InjectionToken, Inject, Optional } from '@angular/core';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  ViewEncapsulation,\n  Renderer2\n} from '@angular/core';\nimport { delay, startWith } from 'rxjs/operators';\nimport { getClassNameList } from '@allianz/ngx-ndbx/utils';\n\nimport { NxFormfieldHintDirective } from './hint.directive';\nimport { NxFormfieldNoteDirective } from './note.directive';\nimport { NxFormfieldErrorDirective } from './error.directive';\nimport { NxFormfieldControl } from './formfield-control';\nimport { Subscription } from 'rxjs';\nimport { NxFormfieldSuffixDirective } from './suffix.directive';\nimport { NxFormfieldPrefixDirective } from './prefix.directive';\nimport { NxFormfieldAppendixDirective } from './appendix.directive';\nimport { NxFormfieldLabelDirective } from './label.directive';\n\nconst NX_STYLES = {\n  'negative': 'nx-formfield--negative'\n};\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `FORMFIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface FormfieldDefaultOptions {\n  /** Sets the default appearance. (optional) */\n  appearance?: AppearanceType;\n\n  /** Sets the default float label type. (optional) */\n  nxFloatLabel?: FloatLabelType;\n}\n\nexport const FORMFIELD_DEFAULT_OPTIONS =\n  new InjectionToken<FormfieldDefaultOptions>('FORMFIELD_DEFAULT_OPTIONS');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'auto';\n\n/** Type for the appearance of the formfield. */\nexport type AppearanceType = 'outline' | 'auto';\n\n@Component({\n  selector: 'nx-formfield',\n  templateUrl: 'formfield.component.html',\n  styleUrls: [\n    'formfield.scss',\n    '../input/input.scss'\n  ],\n  host: {\n    '[class.nx-formfield]': 'true',\n    '[class.is-disabled]': 'this._control.disabled',\n    '[class.is-readonly]': 'this._control.readonly',\n    '[class.is-filled]': 'this._control.empty === false',\n    '[class.is-focused]': 'this._control.focused',\n    '[class.is-floating]': 'this.shouldLabelFloat',\n    '[class.has-error]': 'this._control.errorState',\n    '[class.has-outline]': 'this.appearance === \"outline\"',\n    '[class.has-hint]': 'this._hintChildren?.length > 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class NxFormfieldComponent implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _styles: string = '';\n  private _subscriptions: Subscription[] = [];\n\n  @ContentChild(NxFormfieldControl, {static: false}) _control: NxFormfieldControl<any>;\n\n  /**\n   * Sets the label which will act as a floating label.\n   * In addition, the component uses input and label to properly support accessibility.\n   */\n  @Input('nxLabel') label: string;\n\n  @ContentChild(NxFormfieldLabelDirective, {static: false}) _labelChild: NxFormfieldLabelDirective;\n  @ContentChildren(NxFormfieldHintDirective) _hintChildren: QueryList<NxFormfieldHintDirective>;\n  @ContentChildren(NxFormfieldNoteDirective) _noteChildren: QueryList<NxFormfieldNoteDirective>;\n  @ContentChildren(NxFormfieldErrorDirective) _errorChildren: QueryList<NxFormfieldErrorDirective>;\n  @ContentChildren(NxFormfieldSuffixDirective) _suffixChildren: QueryList<NxFormfieldSuffixDirective>;\n  @ContentChildren(NxFormfieldPrefixDirective) _prefixChildren: QueryList<NxFormfieldPrefixDirective>;\n  @ContentChildren(NxFormfieldAppendixDirective) _appendixChildren: QueryList<NxFormfieldAppendixDirective>;\n\n  @ViewChild('connectionContainer', { static: true }) _connectionContainerRef: ElementRef;\n\n  /**\n   * Whether the label should float once the input is focused or filled (auto, default)\n   * or force it to always float with a value of always to simulate a more static form.\n   */\n  @Input('nxFloatLabel')\n  get floatLabel(): FloatLabelType {\n    return this._floatLabel || (this._defaultOptions && this._defaultOptions.nxFloatLabel) || 'auto';\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /**\n   * Sets the styling of the formfield.\n   * If 'negative', a negative set of stylings is used.\n   */\n  @Input('nxStyle')\n  set styles(value: string) {\n\n    if (this._styles === value) {\n      return;\n    }\n\n    const classNames = getClassNameList(value, NX_STYLES);\n\n    classNames.forEach(classStr => {\n      this.renderer.addClass(this.elementRef.nativeElement, classStr);\n    });\n\n    this._styles = value;\n  }\n\n  private _appearance: AppearanceType;\n\n  /**\n   * **NDBX Expert option**\n   *\n   * Sets the appearance of the formfield.\n   */\n  @Input()\n  set appearance(value: AppearanceType) {\n    if (this._appearance !== value) {\n      this._appearance = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get appearance(): AppearanceType {\n    return this._appearance || (this._defaultOptions && this._defaultOptions.appearance) || 'auto';\n  }\n\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always';\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean {\n    return (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  constructor(\n    /** @docs-private */\n    public elementRef: ElementRef,\n    private renderer: Renderer2,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(FORMFIELD_DEFAULT_OPTIONS) private _defaultOptions: FormfieldDefaultOptions\n    ) { }\n\n  /** @docs-private */\n  get control() {\n    return this._control;\n  }\n\n  ngAfterContentInit() {\n    let subscription;\n    const subscriptions = [];\n\n    this._validateControlChild();\n\n    if (this._control.controlType) {\n      this.elementRef.nativeElement.classList.add(`nx-formfield--type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    subscription = this._control.stateChanges.pipe(startWith(null), delay(0)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    subscriptions.push(subscription);\n\n    // Re-validate when the number of hints changes.\n    subscription = this._hintChildren.changes.pipe(startWith(null), delay(0)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n    subscriptions.push(subscription);\n\n    // Update the aria-described by when the number of errors changes.\n    subscription = this._errorChildren.changes.pipe(startWith(null), delay(0)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n    subscriptions.push(subscription);\n\n    this._subscriptions = subscriptions;\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngOnDestroy() {\n    this._subscriptions.forEach((subscription: Subscription) => subscription.unsubscribe());\n  }\n\n  /** @docs-private */\n  getDisplayedMessage(): 'note' | 'error' | '' {\n    if (this._control.errorState && this._errorChildren && this._errorChildren.length > 0) {\n      return 'error';\n    }\n    if (this._noteChildren && this._noteChildren.length > 0) {\n      return 'note';\n    }\n\n    return '';\n  }\n\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n      ids = this._hintChildren.map(hint => hint.id);\n\n      if (this.getDisplayedMessage() === 'note') {\n        ids = [...this._noteChildren.map(hint => hint.id), ...ids];\n      } else if (this._errorChildren) {\n        ids = [...this._errorChildren.map(error => error.id), ...ids];\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  // Fail if the required control is missing.\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw new Error('Formfield must contain a NxFormfieldControl like input[nxInput] or a custom implementation');\n    }\n  }\n\n  /** @docs-private */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this.elementRef;\n  }\n\n  /** @docs-private */\n  _hasLabel() {\n    return !!this._labelChild || !!this.label;\n  }\n\n  /** @docs-private\n   * The placeholder is hidden when\n   *  - the control is not empty\n   *  - The label is not floated\n   * */\n  _hideControlPlaceholder() {\n    return !this.shouldLabelFloat && this._hasLabel() || this._control.empty === false;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NxFormfieldErrorDirective } from './error.directive';\nimport { NxFormfieldComponent } from './formfield.component';\nimport { NxFormfieldHintDirective } from './hint.directive';\nimport { NxFormfieldNoteDirective } from './note.directive';\nimport { NxFormfieldPrefixDirective } from './prefix.directive';\nimport { NxFormfieldSuffixDirective } from './suffix.directive';\nimport { NxFormfieldAppendixDirective } from './appendix.directive';\nimport { NxFormfieldLabelDirective } from './label.directive';\nimport { NxErrorModule, NxLabelModule } from '@allianz/ngx-ndbx/base';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NxFormfieldComponent,\n    NxFormfieldHintDirective,\n    NxFormfieldErrorDirective,\n    NxFormfieldNoteDirective,\n    NxFormfieldPrefixDirective,\n    NxFormfieldSuffixDirective,\n    NxFormfieldAppendixDirective,\n    NxFormfieldLabelDirective\n  ],\n  exports: [\n    NxFormfieldComponent,\n    NxFormfieldHintDirective,\n    NxFormfieldErrorDirective,\n    NxFormfieldNoteDirective,\n    NxFormfieldPrefixDirective,\n    NxFormfieldSuffixDirective,\n    NxFormfieldAppendixDirective,\n    NxFormfieldLabelDirective,\n    NxErrorModule,\n    NxLabelModule\n  ]\n})\nexport class NxFormfieldModule { }\n"],"names":["uniqueId"],"mappings":"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"}