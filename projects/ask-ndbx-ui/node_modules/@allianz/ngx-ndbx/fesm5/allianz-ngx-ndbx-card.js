import { EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Attribute, Input, Output, NgModule, forwardRef, Self, Optional, ContentChildren } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { CommonModule } from '@angular/common';
import { __extends } from 'tslib';
import { Subject } from 'rxjs';
import { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';
import { NgControl, NgForm, FormGroupDirective } from '@angular/forms';
import { NxErrorComponent, NxErrorModule } from '@allianz/ngx-ndbx/base';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';

/**
 * @fileoverview added by tsickle
 * Generated from: card.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxCardComponent = /** @class */ (function () {
    function NxCardComponent(_changeDetectorRef, tabindex) {
        this._changeDetectorRef = _changeDetectorRef;
        this._disabled = false;
        /**
         * Event emitted when the selected value has changed.
         *
         * This output  property of the card is deprecated,
         * as its selectable properties are deprecated as well.
         * Please use the selectable card component instead.
         *
         * @deprecated
         * \@deletion-target 10.0.0
         */
        this.selectedChange = new EventEmitter();
        this._tabindex = tabindex;
    }
    Object.defineProperty(NxCardComponent.prototype, "selectable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectable;
        },
        /**
         * Whether this card is selectable or not.
         *
         * The selectable property of the card is deprecated.
         * Please use the selectable card component instead.
         *
         * @deprecated
         * @deletion-target 10.0.0
         */
        set: /**
         * Whether this card is selectable or not.
         *
         * The selectable property of the card is deprecated.
         * Please use the selectable card component instead.
         *
         * @deprecated
         * \@deletion-target 10.0.0
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selectable = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCardComponent.prototype, "selected", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selected;
        },
        /**
         * Whether this card is selected or not.
         *
         * The selected property of the card is deprecated.
         * Please use the selectable card component instead.
         *
         * @deprecated
         * @deletion-target 10.0.0
        */
        set: /**
         * Whether this card is selected or not.
         *
         * The selected property of the card is deprecated.
         * Please use the selectable card component instead.
         *
         * @deprecated
         * \@deletion-target 10.0.0
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selected = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxCardComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * Whether a selectable card is disabled or not.
         *
         * The disabled property of the card will be deprecated,
         * as its selectable properties are deprecated as well.
         * Please use the selectable card component instead.
         *
         * @deprecated
         * @deletion-target 10.0.0
        */
        set: /**
         * Whether a selectable card is disabled or not.
         *
         * The disabled property of the card will be deprecated,
         * as its selectable properties are deprecated as well.
         * Please use the selectable card component instead.
         *
         * @deprecated
         * \@deletion-target 10.0.0
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxCardComponent.prototype._toggleSelected = /**
     * @return {?}
     */
    function () {
        if (this.selectable && !this.disabled) {
            this.selected = !this.selected;
            this.selectedChange.emit(this.selected);
        }
    };
    /**
     * @return {?}
     */
    NxCardComponent.prototype._getTabindex = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return '-1';
        }
        if (this.selectable) {
            return this._tabindex || '0';
        }
        return this._tabindex || '';
    };
    NxCardComponent.decorators = [
        { type: Component, args: [{
                    template: '<ng-content></ng-content>',
                    selector: 'nx-card',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        'class': 'nx-card',
                        '[class.is-selectable]': 'selectable',
                        '[class.is-selected]': 'selected',
                        '[class.is-disabled]': 'disabled',
                        '[attr.aria-disabled]': 'disabled',
                        '(click)': '_toggleSelected()',
                        '(keydown.enter)': '_toggleSelected()',
                        '[attr.tabindex]': '_getTabindex()'
                    },
                    styles: [":host{background:#fff;background:var(--card-background-color,#fff);border-color:var(--card-border-color,#d9d9d9);border-width:var(--card-border-width,1px);border-radius:4px;border-radius:var(--card-border-radius,4px);box-shadow:none;display:inline-block;margin-bottom:24px;padding:23px;transition:background-color .2s,box-shadow .2s;border:1px solid #d9d9d9}:host:focus,:host:hover{outline:0}:host.is-selectable{cursor:pointer}:host.is-selectable:hover{background:#f5f5f5;background:var(--card-background-hover-color,#f5f5f5)}:host.is-selected{box-shadow:0 8px 24px rgba(65,65,65,.35);background:#f5f5f5;background:var(--card-background-selected-color,#f5f5f5)}:host.is-disabled{cursor:not-allowed;opacity:.4}:host.is-disabled:hover{background:#fff;background:var(--card-background-color,#fff)}:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}:host.is-selectable{border-color:buttonText}:host.is-selected{border-width:3px;padding:21px;border-color:highlight}:host.is-disabled{opacity:1;border-color:GrayText;color:GrayText}}"]
                }] }
    ];
    /** @nocollapse */
    NxCardComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }
    ]; };
    NxCardComponent.propDecorators = {
        selectable: [{ type: Input }],
        selected: [{ type: Input }],
        disabled: [{ type: Input }],
        selectedChange: [{ type: Output }]
    };
    return NxCardComponent;
}());
if (false) {
    /** @type {?} */
    NxCardComponent.prototype._tabindex;
    /**
     * @type {?}
     * @private
     */
    NxCardComponent.prototype._selectable;
    /**
     * @type {?}
     * @private
     */
    NxCardComponent.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    NxCardComponent.prototype._disabled;
    /**
     * Event emitted when the selected value has changed.
     *
     * This output  property of the card is deprecated,
     * as its selectable properties are deprecated as well.
     * Please use the selectable card component instead.
     *
     * @deprecated
     * \@deletion-target 10.0.0
     * @type {?}
     */
    NxCardComponent.prototype.selectedChange;
    /**
     * @type {?}
     * @private
     */
    NxCardComponent.prototype._changeDetectorRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: card.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxCardModule = /** @class */ (function () {
    function NxCardModule() {
    }
    NxCardModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [NxCardComponent],
                    exports: [NxCardComponent],
                    imports: [
                        CommonModule
                    ]
                },] }
    ];
    return NxCardModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: selectable-card.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docs-private
 * @abstract
 */
var  /**
 * \@docs-private
 * @abstract
 */
SelectableCard = /** @class */ (function () {
    function SelectableCard() {
    }
    return SelectableCard;
}());
if (false) {
    /** @type {?} */
    SelectableCard.prototype.id;
    /** @type {?} */
    SelectableCard.prototype.value;
    /** @type {?} */
    SelectableCard.prototype.checked;
    /** @type {?} */
    SelectableCard.prototype.name;
    /** @type {?} */
    SelectableCard.prototype.negative;
    /** @type {?} */
    SelectableCard.prototype.disabled;
    /** @type {?} */
    SelectableCard.prototype.checkedChange;
    /** @type {?} */
    SelectableCard.prototype.selectionChange;
}

/**
 * @fileoverview added by tsickle
 * Generated from: selectable-card-change-event.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxSelectableCardChangeEvent = /** @class */ (function () {
    function NxSelectableCardChangeEvent(checked, value, card) {
        this.checked = checked;
        this.value = value;
        this.card = card;
    }
    return NxSelectableCardChangeEvent;
}());
if (false) {
    /**
     * The checked value of the selectable card.
     * @type {?}
     */
    NxSelectableCardChangeEvent.prototype.checked;
    /**
     * The value of the selectable card.
     * @type {?}
     */
    NxSelectableCardChangeEvent.prototype.value;
    /**
     * The component instance of the selectable card which emitted the change event.
     * @type {?}
     */
    NxSelectableCardChangeEvent.prototype.card;
}

/**
 * @fileoverview added by tsickle
 * Generated from: selectable-card.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var nextId = 0;
var NxSelectableCardComponent = /** @class */ (function (_super) {
    __extends(NxSelectableCardComponent, _super);
    function NxSelectableCardComponent(_changeDetectorRef, _errorStateMatcher, ngControl, _parentForm, _parentFormGroup) {
        var _this = _super.call(this) || this;
        _this._changeDetectorRef = _changeDetectorRef;
        _this._errorStateMatcher = _errorStateMatcher;
        _this.ngControl = ngControl;
        _this._parentForm = _parentForm;
        _this._parentFormGroup = _parentFormGroup;
        _this._id = (nextId++).toString();
        _this._checked = false;
        _this._disabled = false;
        _this._negative = false;
        _this._tabindex = '0';
        /**
         * \@docs-private
         */
        _this._errorListIds = '';
        /**
         * \@docs-private
         */
        _this.errorState = false;
        /**
         * \@docs-private
         */
        _this.stateChanges = new Subject();
        /**
         * An event is dispatched each time the selectable card value is changed
         */
        _this.selectionChange = new EventEmitter();
        /**
         * An event is dispatched each time the selectable card value is changed
         */
        _this.checkedChange = new EventEmitter();
        /**
         * \@docs-private
         */
        _this.onChangeCallback = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) { });
        _this.onTouchedCallback = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) { });
        if (_this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            _this.ngControl.valueAccessor = _this;
        }
        return _this;
    }
    Object.defineProperty(NxSelectableCardComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return "nx-selectable-card-" + this._id;
        },
        /**
         * Id of the selectable card.
         *
         * If not set, the selectable card gets an incremented value by default.
         */
        set: /**
         * Id of the selectable card.
         *
         * If not set, the selectable card gets an incremented value by default.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._id) {
                this._id = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSelectableCardComponent.prototype, "checked", {
        get: /**
         * @return {?}
         */
        function () {
            return this._checked;
        },
        /** Whether the selectable card  is checked. */
        set: /**
         * Whether the selectable card  is checked.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (newValue !== this._checked) {
                this._checked = newValue;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSelectableCardComponent.prototype, "value", {
        /** The value attribute of the native input element  */
        get: /**
         * The value attribute of the native input element
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._value = value;
            }
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSelectableCardComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled || null;
        },
        /** Whether the selectable card is disabled. */
        set: /**
         * Whether the selectable card is disabled.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (newValue !== this._disabled) {
                this._disabled = newValue;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSelectableCardComponent.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative || null;
        },
        /** Whether the selectable card is negative. */
        set: /**
         * Whether the selectable card is negative.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (newValue !== this._negative) {
                this._negative = newValue;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSelectableCardComponent.prototype, "required", {
        /** Whether the selectable card is required. */
        get: /**
         * Whether the selectable card is required.
         * @return {?}
         */
        function () {
            return this._required;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._required = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSelectableCardComponent.prototype, "name", {
        /** Name of the selectable card. */
        get: /**
         * Name of the selectable card.
         * @return {?}
         */
        function () {
            return this._name;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._name = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSelectableCardComponent.prototype, "tabindex", {
        /** The tabIndex of the element */
        get: /**
         * The tabIndex of the element
         * @return {?}
         */
        function () {
            if (this.disabled) {
                return '-1';
            }
            return this._tabindex;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._tabindex = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxSelectableCardComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._errorList.changes.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this._errorListIds = value.map((/**
             * @param {?} errorItem
             * @return {?}
             */
            function (errorItem) {
                return errorItem.id;
            })).join(' ');
            _this._changeDetectorRef.markForCheck();
        }));
        this._errorListIds = this._errorList.map((/**
         * @param {?} errorItem
         * @return {?}
         */
        function (errorItem) {
            return errorItem.id;
        })).join(' ');
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NxSelectableCardComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} onTouched
     * @return {?}
     */
    NxSelectableCardComponent.prototype.registerOnTouched = /**
     * @param {?} onTouched
     * @return {?}
     */
    function (onTouched) {
        this.onTouchedCallback = onTouched;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    NxSelectableCardComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NxSelectableCardComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.checked = !!value;
    };
    /**
     * @return {?}
     */
    NxSelectableCardComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxSelectableCardComponent.prototype.updateErrorState = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var oldState = this.errorState;
        /** @type {?} */
        var parent = this._parentFormGroup || this._parentForm;
        /** @type {?} */
        var control = this.ngControl ? (/** @type {?} */ (this.ngControl.control)) : null;
        /** @type {?} */
        var newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
            this.stateChanges.next();
        }
    };
    /** Toggles the checked state of the selectable card . */
    /**
     * Toggles the checked state of the selectable card .
     * @return {?}
     */
    NxSelectableCardComponent.prototype.toggle = /**
     * Toggles the checked state of the selectable card .
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.checked = !this.checked;
        }
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    NxSelectableCardComponent.prototype._onInputClick = /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // We have to stop propagation for click events on the visual hidden input element.
        // By default, when a user clicks on a label element, a generated click event will be
        // stop the propagation of the native click on the checkbox input so that a click is not triggered twice
        // Preventing bubbling for the second event will solve that issue.
        event.stopPropagation();
        if (!this.disabled) {
            this.toggle();
            this._emitChangeEvent();
        }
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    NxSelectableCardComponent.prototype._onInteractionEvent = /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // We always have to stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        // emit its event object to the `change` output.
        event.stopPropagation();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @private
     * @return {?}
     */
    NxSelectableCardComponent.prototype._emitChangeEvent = /**
     * \@docs-private
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var event = new NxSelectableCardChangeEvent(this.checked, this.value, this);
        this.onChangeCallback(this.checked);
        this.selectionChange.emit(event);
        this.checkedChange.emit(this.checked);
    };
    NxSelectableCardComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-selectable-card',
                    template: "<input #input\n       type=\"checkbox\"\n       [checked]=\"checked\"\n       [value]=\"value || null\"\n       [attr.disabled]=\"disabled\"\n       (change)=\"_onInteractionEvent($event)\"\n       (blur)=\"onTouchedCallback($event)\"\n       [attr.id]=\"id\"\n       [attr.name]=\"name\"\n       (click)=\"_onInputClick($event)\"\n       [required]=\"required\"\n       [attr.aria-required]=\"required\"\n       [attr.tabindex]=\"tabindex\"\n       [attr.aria-invalid]=\"errorState\"\n       [attr.aria-describedby]=\"_errorListIds || null\"\n>\n\n<label [attr.for]=\"id\" [class.is-disabled]=\"disabled\">\n  <ng-container *ngTemplateOutlet=\"selectableCardContent\"></ng-container>\n</label>\n\n<ng-content *ngIf=\"errorState\" select=\"nx-error\"></ng-content>\n\n<ng-template #selectableCardContent>\n  <nx-icon name=\"check-circle\" size=\"s\" class=\"checked-icon\"></nx-icon>\n  <div class=\"nx-selectable-card--headline\">\n    <ng-content select=\"nx-card-header\"></ng-content>\n  </div>\n  <div class=\"nx-selectable-card--content\">\n    <ng-content></ng-content>\n  </div>\n  <div class=\"nx-selectable-card--footer\">\n    <ng-content select=\"nx-card-footer\"></ng-content>\n  </div>\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: SelectableCard, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NxSelectableCardComponent; })) }],
                    host: {
                        '[class.is-checked]': 'checked',
                        '[class.is-disabled]': 'disabled',
                        '[class.has-error]': 'errorState',
                        '[attr.aria-invalid]': 'errorState',
                        '[attr.role]': '"checkbox"',
                        '[attr.aria-checked]': 'checked'
                    },
                    styles: [":host{display:block}:host input{position:absolute;height:0;width:0;overflow:hidden;opacity:0}:host label{border:1px solid #999;border:var(--selectable-card-border-width,1px) solid var(--selectable-card-border-color,#999);display:block;position:relative;padding:16px;cursor:pointer;width:100%;margin-bottom:8px;border-radius:4px;border-radius:var(--selectable-card-border-radius,4px);background:#fff;background:var(--selectable-card-background-color,#fff)}:host:focus{outline:0}:host::-moz-focus-inner{border:0}:host input:checked+label{background:#f5f5f5;background:var(--selectable-card-background-selected-color,#f5f5f5);border-color:#414141;border-color:var(--selectable-card-border-selected-color,#414141)}:host input:checked+label ::ng-deep nx-icon.checked-icon{display:block}:host label:active,:host label:hover{background:#f5f5f5;background:var(--selectable-card-background-hover-color,#f5f5f5);border-color:#414141;border-color:var(--selectable-card-border-hover-color,#414141)}:host input:checked+label:hover{background:#ececec;background:var(--selectable-card-background-selected-hover-color,#ececec)}:host ::ng-deep nx-icon.checked-icon{position:absolute;right:8px;top:8px;display:none}:host(.is-disabled) label{border-color:#ececec;border-color:var(--selectable-card-border-disabled-color,#ececec);cursor:not-allowed}:host(.is-disabled) label:hover{background:#fff;background:var(--selectable-card-background-disabled-color,#fff)}:host(.is-disabled) input:checked+label{background:#f5f5f5;background:var(--selectable-card-background-disabled-selected-color,#f5f5f5);border-color:#c2c2c2;border-color:var(--selectable-card-border-disabled-selected-color,#c2c2c2)}:host(.is-disabled) input:checked+label ::ng-deep nx-icon.checked-icon{display:block;color:#c2c2c2;color:var(--selectable-card-icon-diabled-color,#c2c2c2)}:host(.has-error) input:checked+label,:host(.has-error) input:checked+label:hover,:host(.has-error) label,:host(.has-error) label:hover{border-color:#dc3149;border-color:var(--selectable-card-border-error-color,#dc3149)}:host-context([data-whatinput=keyboard]) :host:focus label,:host-context([data-whatinput=keyboard]) input:focus+label{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]) :host:focus label,:host-context([data-whatinput=keyboard]) input:focus+label{box-shadow:0 0 0 2px background,0 0 0 6px windowText}:host label{border-color:buttonText}:host input:checked+label{border-width:3px;padding:14px;border-color:highlight}:host(.is-disabled) input:checked+label,:host(.is-disabled) label{border-color:GrayText;color:GrayText}:host(.is-disabled) input:checked+label ::ng-deep nx-icon.checked-icon,:host(.is-disabled) label ::ng-deep nx-icon.checked-icon{color:GrayText}}"]
                }] }
    ];
    /** @nocollapse */
    NxSelectableCardComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ErrorStateMatcher },
        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },
        { type: NgForm, decorators: [{ type: Optional }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }] }
    ]; };
    NxSelectableCardComponent.propDecorators = {
        _errorList: [{ type: ContentChildren, args: [NxErrorComponent,] }],
        selectionChange: [{ type: Output }],
        checkedChange: [{ type: Output }],
        id: [{ type: Input }],
        checked: [{ type: Input }],
        value: [{ type: Input }],
        disabled: [{ type: Input }],
        negative: [{ type: Input }],
        required: [{ type: Input }],
        name: [{ type: Input }],
        tabindex: [{ type: Input }]
    };
    return NxSelectableCardComponent;
}(SelectableCard));
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._id;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._checked;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._name;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._tabindex;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._required;
    /**
     * \@docs-private
     * @type {?}
     */
    NxSelectableCardComponent.prototype._errorListIds;
    /**
     * \@docs-private
     * @type {?}
     */
    NxSelectableCardComponent.prototype._errorList;
    /**
     * \@docs-private
     * @type {?}
     */
    NxSelectableCardComponent.prototype.errorState;
    /**
     * \@docs-private
     * @type {?}
     */
    NxSelectableCardComponent.prototype.stateChanges;
    /**
     * An event is dispatched each time the selectable card value is changed
     * @type {?}
     */
    NxSelectableCardComponent.prototype.selectionChange;
    /**
     * An event is dispatched each time the selectable card value is changed
     * @type {?}
     */
    NxSelectableCardComponent.prototype.checkedChange;
    /**
     * \@docs-private
     * @type {?}
     */
    NxSelectableCardComponent.prototype.onChangeCallback;
    /** @type {?} */
    NxSelectableCardComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._errorStateMatcher;
    /** @type {?} */
    NxSelectableCardComponent.prototype.ngControl;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._parentForm;
    /**
     * @type {?}
     * @private
     */
    NxSelectableCardComponent.prototype._parentFormGroup;
}

/**
 * @fileoverview added by tsickle
 * Generated from: card-header.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxCardHeaderComponent = /** @class */ (function () {
    function NxCardHeaderComponent() {
    }
    NxCardHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-card-header',
                    template: "<ng-content></ng-content>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    return NxCardHeaderComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: card-footer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxCardFooterComponent = /** @class */ (function () {
    function NxCardFooterComponent() {
    }
    NxCardFooterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-card-footer',
                    template: "<ng-content></ng-content>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    return NxCardFooterComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: selectable-card.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxSelectableCardModule = /** @class */ (function () {
    function NxSelectableCardModule() {
    }
    NxSelectableCardModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        NxSelectableCardComponent,
                        NxCardHeaderComponent,
                        NxCardFooterComponent
                    ],
                    exports: [
                        NxSelectableCardComponent,
                        NxCardHeaderComponent,
                        NxCardFooterComponent
                    ],
                    imports: [
                        CommonModule,
                        NxIconModule,
                        NxErrorModule
                    ]
                },] }
    ];
    return NxSelectableCardModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: allianz-ngx-ndbx-card.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxCardComponent, NxCardFooterComponent, NxCardHeaderComponent, NxCardModule, NxSelectableCardComponent, NxSelectableCardModule, SelectableCard as ɵa };
//# sourceMappingURL=allianz-ngx-ndbx-card.js.map
