import { removeClasses, mapClassNames, appendClasses } from '@allianz/ngx-ndbx/utils';

/**
 * @fileoverview added by tsickle
 * Generated from: breakpoints.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var BREAKPOINT_MOBILE = '(max-width: 703px)';
/** @type {?} */
var BREAKPOINT_TABLET = '(min-width: 704px) and (max-width: 992px)';
/** @type {?} */
var BREAKPOINT_DESKTOP = '(min-width: 993px)';

/**
 * @fileoverview added by tsickle
 * Generated from: mapped-styles.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MappedStyles = /** @class */ (function () {
    function MappedStyles(mapping, baseClasses, _elementRef, _renderer) {
        if (baseClasses === void 0) { baseClasses = []; }
        this.mapping = mapping;
        this.baseClasses = baseClasses;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.classNames = '';
    }
    Object.defineProperty(MappedStyles.prototype, "classNames", {
        get: /**
         * @return {?}
         */
        function () {
            return this._classNames;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._classNames === value) {
                return;
            }
            removeClasses(this._renderer, this._elementRef, this._classNamesSanitized);
            this._classNamesSanitized = mapClassNames(value, this.baseClasses, this.mapping);
            this._classNames = value;
            appendClasses(this._renderer, this._elementRef, this._classNamesSanitized);
        },
        enumerable: true,
        configurable: true
    });
    return MappedStyles;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    MappedStyles.prototype._classNames;
    /**
     * @type {?}
     * @private
     */
    MappedStyles.prototype._classNamesSanitized;
    /**
     * @type {?}
     * @private
     */
    MappedStyles.prototype.mapping;
    /**
     * @type {?}
     * @private
     */
    MappedStyles.prototype.baseClasses;
    /**
     * @type {?}
     * @protected
     */
    MappedStyles.prototype._elementRef;
    /**
     * @type {?}
     * @protected
     */
    MappedStyles.prototype._renderer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: allianz-ngx-ndbx-core.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { BREAKPOINT_DESKTOP, BREAKPOINT_MOBILE, BREAKPOINT_TABLET, MappedStyles };
//# sourceMappingURL=allianz-ngx-ndbx-core.js.map
