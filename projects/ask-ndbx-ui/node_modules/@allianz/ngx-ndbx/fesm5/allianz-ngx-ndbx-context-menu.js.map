{"version":3,"file":"allianz-ngx-ndbx-context-menu.js","sources":["ng://@allianz/ngx-ndbx/context-menu/context-menu-content.directive.ts","ng://@allianz/ngx-ndbx/context-menu/context-menu-animations.ts","ng://@allianz/ngx-ndbx/context-menu/context-menu.component.ts","ng://@allianz/ngx-ndbx/context-menu/context-menu-item.component.ts","ng://@allianz/ngx-ndbx/context-menu/context-menu-errors.ts","ng://@allianz/ngx-ndbx/context-menu/context-menu-trigger.directive.ts","ng://@allianz/ngx-ndbx/context-menu/context-menu.module.ts"],"sourcesContent":["import {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy\n} from '@angular/core';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport { Subject } from 'rxjs';\n\n/**\n * Context menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[nxContextMenuContent]'\n})\nexport class NxContextMenuContentDirective implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any\n  ) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(\n        this._document.createElement('div'),\n        this._componentFactoryResolver,\n        this._appRef,\n        this._injector\n      );\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    if (element.parentNode) {\n      element.parentNode.insertBefore(this._outlet.outletElement, element);\n    }\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","import {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the NxContextMenuComponent.\n * @docs-private\n */\nexport const nxContextMenuAnimations: {\n  readonly transformContextMenu: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the context menu panel's entry and exit from the page.\n   * When the context menu panel is added to the DOM, it scales in and fades in its border.\n   * When the context menu panel is removed from the DOM, it simply fades out.\n   */\n  transformContextMenu: trigger('transformContextMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.nx-context-menu__content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scale(1)' })),\n    ])),\n    transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n  ])\n};\n","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Direction } from '@angular/cdk/bidi';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  HOME,\n  END,\n  hasModifierKey\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, switchMap, take } from 'rxjs/operators';\nimport { nxContextMenuAnimations } from './context-menu-animations';\nimport { NxContextMenuContentDirective } from './context-menu-content.directive';\nimport { NxContextMenuItemComponent } from './context-menu-item.component';\nimport { AnimationEvent } from '@angular/animations';\n\n@Component({\n  selector: 'nx-context-menu',\n  templateUrl: './context-menu.component.html',\n  styleUrls: ['./context-menu.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'nxContextMenu',\n  animations: [\n    nxContextMenuAnimations.transformContextMenu\n  ]\n})\nexport class NxContextMenuComponent\n  implements AfterContentInit, OnDestroy {\n  private _keyManager: FocusKeyManager<NxContextMenuItemComponent>;\n\n  /** Menu items inside the current menu. */\n  private _items: NxContextMenuItemComponent[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<NxContextMenuItemComponent[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: { [key: string]: boolean } = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: NxContextMenuComponent | undefined;\n\n  /**\n   * @docs-private\n   * Layout direction of the menu.\n   */\n  direction: Direction;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, { static: false })\n  templateRef: TemplateRef<any>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(NxContextMenuContentDirective, { static: false })\n  lazyContent: NxContextMenuContentDirective;\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> = new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  constructor(private _ngZone: NgZone) {}\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<NxContextMenuItemComponent>(\n        this._items\n      )\n      .withWrap()\n      .withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() =>\n      this.closed.emit('tab')\n    );\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<NxContextMenuItemComponent> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n        break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n        break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME\n            ? manager.setFirstItemActive()\n            : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   */\n  focusFirstItem(): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable\n        .asObservable()\n        .pipe(take(1))\n        .subscribe(() =>\n          this._keyManager.setFirstItemActive()\n        );\n    } else {\n      this._keyManager.setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Registers a menu item with the context menu.\n   * @docs-private\n   */\n  addItem(item: NxContextMenuItemComponent) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `nx-context-menu` ancestor. If we used `@ContentChildren(NxContextMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `nx-context-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the context menu.\n   * @docs-private\n   */\n  removeItem(item: NxContextMenuItemComponent) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  Optional,\n  Input,\n  OnDestroy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { DOCUMENT } from '@angular/common';\nimport { NxContextMenuComponent } from './context-menu.component';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/**\n * This directive is intended to be used inside an nx-context-menu tag.\n * It exists mostly to set the role attribute, disabled state and styling.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: '[nxContextMenuItem]',\n  exportAs: 'nxContextMenuItem',\n  host: {\n    class: 'nx-context-menu-item',\n    role: 'menuitem',\n    '[class.is-highlighted]': '_highlighted',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(mouseenter)': '_handleMouseEnter()',\n    '(click)': '_checkDisabled($event)'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <ng-content></ng-content>\n    <nx-icon *ngIf=\"_triggersSubmenu\"\n      class=\"nx-context-menu-item__expand\"\n      name=\"chevron-right-small\">\n    </nx-icon>\n    `,\n  styleUrls: ['./context-menu-item.component.scss']\n})\nexport class NxContextMenuItemComponent implements OnDestroy {\n  private _document: Document;\n\n  /** Stream that emits when the context menu item is hovered. */\n  readonly _hovered: Subject<NxContextMenuItemComponent> = new Subject<NxContextMenuItemComponent>();\n\n  /** Whether the context menu item is disabled. */\n  @Input()\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  private _disabled: boolean = false;\n\n  /** Whether the context menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the context menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document: any,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Inject(NxContextMenuComponent)\n    @Optional() private _parentMenu: NxContextMenuComponent\n  ) {\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses this context menu item. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  ngOnDestroy() {\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n}\n","/**\n * Throws an exception for the case when menu trigger doesn't have a valid nx-context-menu instance\n * @docs-private\n */\nexport function throwNxContextMenuMissingError() {\n  throw Error(`nxContextMenuTriggerFor: must pass in an nx-context-menu instance.\n    Example:\n      <nx-context-menu #contextMenu=\"nxContextMenu\"></nx-context-menu>\n      <button [nxContextMenuTriggerFor]=\"contextMenu\"></button>`);\n}\n","import { Direction, Directionality } from '@angular/cdk/bidi';\nimport { LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  ConnectedPosition\n} from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef\n} from '@angular/core';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { asapScheduler, merge, of as observableOf, Subscription, fromEvent, Observable } from 'rxjs';\nimport { delay, filter, take, takeUntil, map } from 'rxjs/operators';\nimport { NxContextMenuComponent } from './context-menu.component';\nimport { throwNxContextMenuMissingError } from './context-menu-errors';\nimport { NxContextMenuItemComponent } from './context-menu-item.component';\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 16;\n\nexport const MENU_PANEL_OFFSET = 8;\n\nexport type NxContextMenuScrollStrategy = 'close' | 'reposition';\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n\n/**\n * This directive is intended to be used in conjunction with an nx-context-menu tag.\n * It is responsible for toggling the display of the provided context menu instance.\n */\n@Directive({\n  selector: `[nxContextMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'contextMenuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)'\n  },\n  exportAs: 'nxContextMenuTrigger'\n})\nexport class NxContextMenuTriggerDirective\n  implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _contextMenuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _contextMenuCloseSubscription = Subscription.EMPTY;\n  private _documentClickObservable: Observable<MouseEvent>;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** References the context menu instance that the trigger is associated with. */\n  @Input('nxContextMenuTriggerFor')\n  get contextMenu() {\n    return this._contextMenu;\n  }\n  set contextMenu(contextMenu: NxContextMenuComponent) {\n    if (contextMenu === this._contextMenu) {\n      return;\n    }\n\n    this._contextMenu = contextMenu;\n    this._contextMenuCloseSubscription.unsubscribe();\n\n    if (contextMenu) {\n      this._contextMenuCloseSubscription = contextMenu.closed\n        .asObservable()\n        .subscribe(reason => {\n          this._destroyMenu();\n\n          // If a click closed the menu, we should close the entire chain of nested menus.\n          if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n            this._parentMenu.closed.emit(reason);\n          }\n        });\n    }\n  }\n  private _contextMenu: NxContextMenuComponent;\n\n  @Input()\n  set scrollStrategy(value: NxContextMenuScrollStrategy) {\n    if (value === 'close') {\n      this._scrollStrategy = this._overlay.scrollStrategies.close;\n    } else {\n      this._scrollStrategy = this._overlay.scrollStrategies.reposition;\n    }\n  }\n\n  /** Whether the context menu is open. */\n  get contextMenuOpen(): boolean {\n    return this._contextMenuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  private get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('nxContextMenuTriggerData') contextMenuData: any;\n\n  /** Event emitted when the associated context menu is opened. */\n  @Output() readonly contextMenuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the associated context menu is closed. */\n  @Output() readonly contextMenuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  constructor(\n      private _overlay: Overlay,\n      private _element: ElementRef<HTMLElement>,\n      private _viewContainerRef: ViewContainerRef,\n      @Optional() private _parentMenu: NxContextMenuComponent,\n      @Optional()\n      @Self()\n      private _contextMenuItemInstance: NxContextMenuItemComponent,\n      @Optional() private _dir: Directionality) {\n\n    if (_contextMenuItemInstance) {\n      _contextMenuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = this._overlay.scrollStrategies.reposition;\n    this._documentClickObservable = fromEvent<MouseEvent>(document, 'click');\n  }\n\n  ngAfterContentInit() {\n    this._checkContextMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._contextMenuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the context menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._contextMenuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the context menu between the open and closed states. */\n  toggleContextMenu(): void {\n    return this.contextMenuOpen\n      ? this.closeContextMenu()\n      : this.openContextMenu();\n  }\n\n  /** Opens the context menu. */\n  openContextMenu(): void {\n    if (this.contextMenuOpen) {\n      return;\n    }\n\n    this._checkContextMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(\n      overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy\n    );\n    overlayRef.attach(this._getPortal());\n\n    if (this.contextMenu.lazyContent) {\n      this.contextMenu.lazyContent.attach(this.contextMenuData);\n    }\n\n    this._closingActionsSubscription = this._contextMenuClosingActions().subscribe(\n      () => this.closeContextMenu()\n    );\n    this._initContextMenu();\n\n    if (this.contextMenu instanceof NxContextMenuComponent) {\n      this.contextMenu._startAnimation();\n    }\n\n    this._waitForClose();\n  }\n\n  /** Closes the context menu. */\n  closeContextMenu(): void {\n    this.contextMenu.closed.emit();\n  }\n\n  /** Closes the context menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.contextMenuOpen) {\n      return;\n    }\n\n    const contextMenu = this.contextMenu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    contextMenu._resetAnimation();\n\n    if (contextMenu.lazyContent) {\n      // Wait for the exit animation to finish before detaching the content.\n      contextMenu._animationDone\n        .pipe(\n          filter(event => event.toState === 'void'),\n          take(1),\n          // Interrupt if the content got re-attached.\n          takeUntil(contextMenu.lazyContent._attached)\n        )\n        .subscribe({\n          next: () =>\n            contextMenu.lazyContent && contextMenu.lazyContent.detach(),\n          // No matter whether the content got re-attached, reset the menu.\n          complete: () => this._resetContextMenu()\n        });\n    } else {\n      this._resetContextMenu();\n    }\n  }\n\n  /**\n   * This method sets the context menu state to open and focuses the first item if\n   * the context menu was opened via the keyboard.\n   */\n  private _initContextMenu(): void {\n    this.contextMenu.parentMenu = this.triggersSubmenu()\n      ? this._parentMenu\n      : undefined;\n    this.contextMenu.direction = this.dir;\n    this._setIsContextMenuOpen(true);\n    this.contextMenu.focusFirstItem();\n  }\n\n  /**\n   * Focuses the context menu trigger.\n   */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * This method resets the context menu when it's closed, most importantly restoring\n   * focus to the context menu trigger if the context menu was opened via the keyboard.\n   */\n  private _resetContextMenu(): void {\n    this._setIsContextMenuOpen(false);\n    this.focus();\n  }\n\n  /** Set state rather than toggle to support triggers sharing a menu. */\n  private _setIsContextMenuOpen(isOpen: boolean): void {\n    this._contextMenuOpen = isOpen;\n    this._contextMenuOpen\n      ? this.contextMenuOpened.emit()\n      : this.contextMenuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._contextMenuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of NxContextMenuComponent has been passed into\n   * nxContextMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkContextMenu() {\n    if (!this.contextMenu) {\n      throwNxContextMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openContextMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay\n        .position()\n        .flexibleConnectedTo(this._element)\n        .withLockedPosition()\n        .withFlexibleDimensions(false)\n        .withTransformOriginOn('.nx-context-menu'),\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let originX = 'start';\n    let originFallbackX = 'end';\n    const overlayY = 'top';\n    const overlayFallbackY = 'bottom';\n    let originY = overlayY;\n    let originFallbackY = overlayFallbackY;\n    let overlayX = originX;\n    let overlayFallbackX = originFallbackX;\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = 'end';\n      originFallbackX = overlayX = 'start';\n      offsetY = -MENU_PANEL_TOP_PADDING;\n    } else {\n      offsetY = MENU_PANEL_OFFSET;\n      originY = 'bottom';\n      originFallbackY = 'top';\n    }\n\n    positionStrategy.withPositions([\n      { originX, originY, overlayX, overlayY, offsetY },\n      {\n        originX: originFallbackX,\n        originY,\n        overlayX: overlayFallbackX,\n        overlayY,\n        offsetY\n      },\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ] as ConnectedPosition[]);\n  }\n\n  /**\n   * Returns a stream that emits whenever an action that should close the context menu occurs. */\n  private _contextMenuClosingActions() {\n    let backdrop;\n    let detachments;\n\n    if (this._overlayRef) {\n      backdrop = this._overlayRef.backdropClick();\n      detachments = this._overlayRef.detachments();\n    }\n\n    const parentClose = this._parentMenu\n      ? this._parentMenu.closed\n      : observableOf();\n\n    const hover = this._parentMenu\n      ? this._parentMenu._hovered().pipe(\n          filter(active => active !== this._contextMenuItemInstance),\n          filter(() => this._contextMenuOpen)\n        )\n      : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    // Since right or middle button clicks won't trigger the `click` event,\n    // we shouldn't consider the menu as opened by mouse in those cases.\n    // this._openedBy = event.button === 0 ? 'mouse' : null;\n\n    // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n    // we should prevent focus from moving onto it via click to avoid the\n    // highlight from lingering on the menu item.\n    if (this.triggersSubmenu()) {\n      event.preventDefault();\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (\n      this.triggersSubmenu() &&\n      ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n        (keyCode === LEFT_ARROW && this.dir === 'rtl'))\n    ) {\n      this.openContextMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openContextMenu();\n    } else {\n      this.toggleContextMenu();\n    }\n  }\n\n  /* Subscribes to document clicks to close the context menu on clicks on the background. */\n  private _waitForClose() {\n    return this._documentClickObservable\n      .pipe(\n        map(event => event.target),\n        filter((target: Node) => !this._element.nativeElement.contains(target)),\n        takeUntil(this.contextMenu.closed))\n      .subscribe(() => {\n        this.closeContextMenu();\n      });\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu\n      ._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._contextMenuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.contextMenu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases.\n          this.contextMenu._animationDone\n            .pipe(\n              take(1),\n              delay(0, asapScheduler),\n              takeUntil(this._parentMenu._hovered())\n            )\n            .subscribe(() => this.openContextMenu());\n        } else {\n          this.openContextMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the context menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `NxContextMenuPanelComponent`, making it harder to consume.\n    if (!this._portal ||\n        this._portal.templateRef !== this.contextMenu.templateRef) {\n      this._portal = new TemplatePortal(\n        this.contextMenu.templateRef,\n        this._viewContainerRef\n      );\n    }\n\n    return this._portal;\n  }\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxContextMenuContentDirective } from './context-menu-content.directive';\nimport { NxContextMenuComponent } from './context-menu.component';\nimport { NxContextMenuItemComponent } from './context-menu-item.component';\nimport {\n  NxContextMenuTriggerDirective\n} from './context-menu-trigger.directive';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\n\nconst EXPORTED_MODULES = [\n  NxContextMenuComponent,\n  NxContextMenuContentDirective,\n  NxContextMenuItemComponent,\n  NxContextMenuTriggerDirective\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    NxIconModule\n  ],\n  exports: EXPORTED_MODULES,\n  declarations: EXPORTED_MODULES\n})\nexport class NxContextMenuModule { }\n"],"names":["observableOf"],"mappings":"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"}