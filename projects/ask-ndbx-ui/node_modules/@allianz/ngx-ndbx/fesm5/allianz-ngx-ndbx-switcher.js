import { EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Optional, Self, ViewChild, Input, Output, NgModule } from '@angular/core';
import { NgControl, NgForm, FormGroupDirective } from '@angular/forms';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';
import { CommonModule } from '@angular/common';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { ObserversModule } from '@angular/cdk/observers';

/**
 * @fileoverview added by tsickle
 * Generated from: switcher.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var nextId = 0;
var NxSwitcherComponent = /** @class */ (function () {
    function NxSwitcherComponent(_changeDetectorRef, ngControl, _errorStateMatcher, _parentForm, _parentFormGroup) {
        this._changeDetectorRef = _changeDetectorRef;
        this.ngControl = ngControl;
        this._errorStateMatcher = _errorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this._id = "nx-switcher-" + nextId++;
        /**
         * \@docs-private
         */
        this.errorState = false;
        this._labelPosition = 'right';
        this._name = null;
        this._checked = false;
        this._big = false;
        this._labelSize = 'large';
        this._negative = false;
        this._disabled = false;
        /**
         * An event is dispatched each time the switcher value is changed
         */
        this.checkedChange = new EventEmitter();
        this.onChangeCallback = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) { });
        this.onTouchedCallback = (/**
         * @return {?}
         */
        function () { });
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    Object.defineProperty(NxSwitcherComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this._id;
        },
        /** Sets the id of the switcher */
        set: /**
         * Sets the id of the switcher
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._id = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSwitcherComponent.prototype, "labelPosition", {
        get: /**
         * @return {?}
         */
        function () {
            return this._labelPosition;
        },
        /** Specifies the placement of the label */
        set: /**
         * Specifies the placement of the label
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._labelPosition = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSwitcherComponent.prototype, "name", {
        get: /**
         * @return {?}
         */
        function () {
            return this._name;
        },
        /** Sets the label text of the switcher */
        set: /**
         * Sets the label text of the switcher
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._name = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSwitcherComponent.prototype, "checked", {
        get: /**
         * @return {?}
         */
        function () {
            return this._checked;
        },
        /** Whether the switcher is checked (on) or unchecked (off) */
        set: /**
         * Whether the switcher is checked (on) or unchecked (off)
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._checked = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSwitcherComponent.prototype, "big", {
        get: /**
         * @return {?}
         */
        function () {
            return this._big;
        },
        /** Whether the big switcher is used */
        set: /**
         * Whether the big switcher is used
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            this._big = newValue;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSwitcherComponent.prototype, "labelSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._labelSize;
        },
        /** Sets the size of the label */
        set: /**
         * Sets the size of the label
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._labelSize = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSwitcherComponent.prototype, "negative", {
        get: /**
         * @return {?}
         */
        function () {
            return this._negative;
        },
        /** Whether the style for a dark background is used */
        set: /**
         * Whether the style for a dark background is used
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            this._negative = newValue;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSwitcherComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /** Whether the switcher is in the disabled state */
        set: /**
         * Whether the switcher is in the disabled state
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            this._disabled = newValue;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    /** Allows to toggle between the states */
    /**
     * Allows to toggle between the states
     * @return {?}
     */
    NxSwitcherComponent.prototype.toggle = /**
     * Allows to toggle between the states
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.checked = !this.checked;
            this.onChangeCallback(this.checked);
            this.checkedChange.emit(this.checked);
            if (this.onTouchedCallback) {
                this.onTouchedCallback();
            }
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NxSwitcherComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value === null) {
            value = false;
        }
        if (value !== this.checked) {
            this.checked = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NxSwitcherComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NxSwitcherComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @return {?}
     */
    NxSwitcherComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    NxSwitcherComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxSwitcherComponent.prototype.touch = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this.onTouchedCallback();
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxSwitcherComponent.prototype.updateErrorState = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var oldState = this.errorState;
        /** @type {?} */
        var parent = this._parentFormGroup || this._parentForm;
        /** @type {?} */
        var control = this.ngControl ? (/** @type {?} */ (this.ngControl.control)) : null;
        /** @type {?} */
        var newState = this._errorStateMatcher.isErrorState(control, parent);
        if (newState !== oldState) {
            this.errorState = newState;
        }
    };
    Object.defineProperty(NxSwitcherComponent.prototype, "labelHasContent", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return !!this._switcherLabelWrapper.nativeElement.innerHTML.trim();
        },
        enumerable: true,
        configurable: true
    });
    /** @docs-private
     * Callback for when the content of the label has changed.
     */
    /**
     * \@docs-private
     * Callback for when the content of the label has changed.
     * @return {?}
     */
    NxSwitcherComponent.prototype.labelContentChanged = /**
     * \@docs-private
     * Callback for when the content of the label has changed.
     * @return {?}
     */
    function () {
        this._changeDetectorRef.detectChanges();
    };
    NxSwitcherComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-switcher',
                    template: "<input type=\"checkbox\" [id]=\"id\" [attr.name]=\"name\" [disabled]=\"disabled\" [checked]=\"checked\" (click)=\"toggle()\" (blur)=\"touch()\"\n  role=\"switch\"\n  [attr.aria-checked]=\"checked\"\n  class=\"nx-switcher__input\">\n<label [attr.for]=\"id\" class=\"nx-switcher__label\" [class.has-label]=\"labelHasContent\">\n  <div class=\"nx-switcher__toggle\">\n    <div class=\"nx-switcher__dot\">\n      <nx-icon *ngIf=\"big\" name=\"check\"></nx-icon>\n    </div>\n  </div>\n  <div class=\"nx-switcher__label-text\" #switcherLabelWrapper (cdkObserveContent)=\"labelContentChanged()\">\n    <ng-content></ng-content>\n  </div>\n</label>\n\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        /* the host id should be set to null, otherwise nx-switcher and its <input> get the same id
                            and on label click the input click is not triggered (double id problem) */
                        '[attr.id]': 'null',
                        '[class.is-negative]': 'negative',
                        '[class.is-checked]': 'checked',
                        '[class.is-big]': 'big',
                        '[class.nx-switcher--small-label]': 'labelSize === "small"',
                        '[class.nx-switcher--large-label]': 'labelSize === "large"',
                        '[class.is-disabled]': 'disabled',
                        '[class.is-swapped]': 'labelPosition === "left"',
                        '[class.has-error]': 'errorState',
                        '[attr.aria-invalid]': 'errorState'
                    },
                    styles: [":host{position:relative;display:flex}:host(.is-swapped) .nx-switcher__label{flex-direction:row-reverse}:host(.is-swapped) .nx-switcher__label.has-label .nx-switcher__toggle{margin-left:12px}.nx-switcher__input{opacity:0;position:absolute}.nx-switcher__label{font-size:20px;font-size:var(--switcher-large-font-size,20px);line-height:28px;line-height:var(--switcher-large-line-height,28px);font-weight:400;font-weight:var(--switcher-large-font-weight,400);letter-spacing:.2px;letter-spacing:var(--switcher-large-letter-spacing,.2px);cursor:pointer;display:flex;position:relative}.nx-switcher__toggle{position:relative;display:inline-block;width:48px;min-width:48px;height:24px;background-color:#767676;background-color:var(--switcher-unchecked-background-color,#767676);border-radius:16px;transition:background-color .2s}:host(:not(.is-swapped)) .has-label .nx-switcher__toggle{margin-right:12px}.nx-switcher__dot{position:absolute;height:20px;width:20px;left:2px;bottom:2px;background-color:#fff;background-color:var(--switcher-dot-background-color,#fff);border-radius:16px;transform:translate(0);transition:transform .2s}:host(.is-checked) .nx-switcher__dot{transform:translate(24px)}:host(.is-checked) .nx-switcher__toggle{background-color:#007ab3;background-color:var(--switcher-checked-background-color,#007ab3)}:host(.is-checked.is-negative) .nx-switcher__toggle{background-color:rgba(255,255,255,.4)}:host(.is-big) .nx-switcher__toggle{width:56px;min-width:56px;height:32px}:host(.is-big) .nx-switcher__dot{height:28px;width:28px}:host(.is-big) nx-icon{position:absolute;top:2px;left:2px;font-size:24px;opacity:0;color:#006192;color:var(--switcher-checked-icon-color,#006192)}:host(.is-big).is-checked nx-icon{opacity:1;transition:opacity .2s}:host(.is-big).nx-switcher--large-label .has-label .nx-switcher__label-text{margin-top:2px;margin-top:var(--switcher-big-large-label-text-margin-top,2px)}:host(.is-big).nx-switcher--large-label .has-label .nx-switcher__toggle{margin-top:0;margin-top:var(--switcher-big-large-label-control-margin-top,0)}:host(.is-big).nx-switcher--small-label .has-label .nx-switcher__label-text{margin-top:4px;margin-top:var(--switcher-big-small-label-text-margin-top,4px)}:host(.is-big).nx-switcher--small-label .has-label .nx-switcher__toggle{margin-top:0;margin-top:var(--switcher-big-small-label-control-margin-top,0)}:host(.nx-switcher--large-label) .has-label .nx-switcher__label-text{margin-top:0;margin-top:var(--switcher-large-label-text-margin-top,0)}:host(.nx-switcher--large-label) .has-label .nx-switcher__toggle{margin-top:2px;margin-top:var(--switcher-large-label-control-margin-top,2px)}:host(.nx-switcher--small-label) .nx-switcher__label{font-size:16px;font-size:var(--switcher-small-font-size,16px);line-height:24px;line-height:var(--switcher-small-line-height,24px);font-weight:400;font-weight:var(--switcher-small-font-weight,400);letter-spacing:0;letter-spacing:var(--switcher-small-letter-spacing,0)}:host(.nx-switcher--small-label) .has-label .nx-switcher__label-text{margin-top:0;margin-top:var(--switcher-small-label-text-margin-top,0)}:host(.nx-switcher--small-label) .has-label .nx-switcher__toggle{margin-top:0;margin-top:var(--switcher-small-label-control-margin-top,0)}:host(.is-negative) .nx-switcher__label{color:#fff}:host(.is-negative) .nx-switcher__dot{background-color:#fff}:host(.is-negative) .nx-switcher__toggle{background-color:rgba(255,255,255,.4)}:host-context([data-whatinput=keyboard]) .nx-switcher__input:focus+.nx-switcher__label .nx-switcher__toggle{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}:host(.is-disabled) .nx-switcher__toggle{background-color:#c2c2c2;background-color:var(--switcher-disabled-background-color,#c2c2c2)}:host(.is-disabled) .nx-switcher__dot{background-color:#dadada;background-color:var(--switcher-disabled-dot-background-color,#dadada)}:host(.is-disabled) .nx-switcher__label{cursor:not-allowed;color:#c2c2c2;color:var(--switcher-disabled-text-color,#c2c2c2)}:host(.is-disabled) nx-icon{color:#c2c2c2;color:var(--switcher-disabled-icon-color,#c2c2c2)}:host(.has-error) .nx-switcher__toggle{background-color:#dc3149;background-color:var(--danger,#dc3149)}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]) .nx-switcher__input:focus+.nx-switcher__label .nx-switcher__toggle{box-shadow:0 0 0 2px background,0 0 0 6px windowText}.nx-switcher__label{color:buttonText}.nx-switcher__toggle{color:highlightText;background-color:highlight}:host:not(.is-checked) .nx-switcher__toggle{background-color:buttonFace;border:2px solid buttonText;color:buttonText}:host:not(.is-checked) .nx-switcher__dot{left:0;bottom:0;box-shadow:0 0 0 2px buttonText;background-color:buttonText}:host(.is-checked) .nx-switcher__dot{background-color:highlightText}:host(.is-checked) .nx-switcher__dot nx-icon{color:highlight}:host(.is-disabled) .nx-switcher__label{color:GrayText}:host(.is-disabled) .nx-switcher__toggle{color:GrayText}:host(.is-disabled) .nx-switcher__dot{opacity:1;background-color:GrayText}:host(.is-disabled):not(.is-checked) .nx-switcher__toggle{border:2px solid GrayText}:host(.is-disabled):not(.is-checked) .nx-switcher__dot{box-shadow:0 0 0 2px GrayText}:host(.is-disabled).is-checked .nx-switcher__toggle{background-color:GrayText}:host(.is-disabled).is-checked .nx-switcher__dot{background-color:window}:host(.is-disabled).is-checked .nx-switcher__dot nx-icon{color:GrayText}}"]
                }] }
    ];
    /** @nocollapse */
    NxSwitcherComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
        { type: ErrorStateMatcher },
        { type: NgForm, decorators: [{ type: Optional }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }] }
    ]; };
    NxSwitcherComponent.propDecorators = {
        _switcherLabelWrapper: [{ type: ViewChild, args: ['switcherLabelWrapper', { static: true },] }],
        id: [{ type: Input }],
        labelPosition: [{ type: Input }],
        name: [{ type: Input }],
        checked: [{ type: Input }],
        big: [{ type: Input, args: ['nxBig',] }],
        labelSize: [{ type: Input }],
        negative: [{ type: Input, args: ['nxNegative',] }],
        disabled: [{ type: Input }],
        checkedChange: [{ type: Output, args: ['checkedChange',] }]
    };
    return NxSwitcherComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._id;
    /**
     * \@docs-private
     * @type {?}
     */
    NxSwitcherComponent.prototype.errorState;
    /**
     * \@docs-private
     * @type {?}
     */
    NxSwitcherComponent.prototype._switcherLabelWrapper;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._labelPosition;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._name;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._checked;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._big;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._labelSize;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._negative;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._disabled;
    /**
     * An event is dispatched each time the switcher value is changed
     * @type {?}
     */
    NxSwitcherComponent.prototype.checkedChange;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype.onChangeCallback;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._changeDetectorRef;
    /** @type {?} */
    NxSwitcherComponent.prototype.ngControl;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._errorStateMatcher;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._parentForm;
    /**
     * @type {?}
     * @private
     */
    NxSwitcherComponent.prototype._parentFormGroup;
}

/**
 * @fileoverview added by tsickle
 * Generated from: switcher.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxSwitcherModule = /** @class */ (function () {
    function NxSwitcherModule() {
    }
    NxSwitcherModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [NxSwitcherComponent],
                    exports: [NxSwitcherComponent],
                    imports: [CommonModule, NxIconModule, ObserversModule]
                },] }
    ];
    return NxSwitcherModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: allianz-ngx-ndbx-switcher.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxSwitcherComponent, NxSwitcherModule };
//# sourceMappingURL=allianz-ngx-ndbx-switcher.js.map
