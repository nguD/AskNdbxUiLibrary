{"version":3,"file":"allianz-ngx-ndbx-table.js","sources":["ng://@allianz/ngx-ndbx/table/table-cell.component.ts","ng://@allianz/ngx-ndbx/table/header-cell.directive.ts","ng://@allianz/ngx-ndbx/table/table.component.ts","ng://@allianz/ngx-ndbx/table/table-row.component.ts","ng://@allianz/ngx-ndbx/table/expandable/expandable-table-row.component.ts","ng://@allianz/ngx-ndbx/table/expandable/expandable-table-cell.component.ts","ng://@allianz/ngx-ndbx/table/expandable/toggle-button.component.ts","ng://@allianz/ngx-ndbx/table/expandable/expandable-table.directive.ts","ng://@allianz/ngx-ndbx/table/sort-header/sort.directive.ts","ng://@allianz/ngx-ndbx/table/sort-header/sort-header-intl.ts","ng://@allianz/ngx-ndbx/table/sort-header/sort-header.component.ts","ng://@allianz/ngx-ndbx/table/table.module.ts"],"sourcesContent":["import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n/**\n * This is a table cell.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'td[nxTableCell], td[nxCell]',\n  template: '<ng-content></ng-content>',\n  host: {\n    '[class.nx-table-cell]': 'true',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxTableCellComponent { }\n","import { Directive } from '@angular/core';\n\n/**\n * This is a table header cell.\n */\n@Directive({\n  selector: '[nxHeaderCell]',\n  host: {\n    '[class.nx-header-cell]': 'true'\n  }\n})\nexport class NxHeaderCellDirective { }\n","import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n/**\n * This is a table.\n * The table supports a `zebra` and a `condensed` mode.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'table[nxTable]',\n  template: '<ng-content></ng-content>',\n  styleUrls: ['./table.component.scss'],\n  host: {\n    'class': 'nx-table',\n    '[class.nx-table--condensed]': 'condensed',\n    '[class.nx-table--zebra]': 'zebra'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NxTableComponent {\n\n  private _condensed: boolean;\n\n  private _zebra: boolean;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n   /** Change the table mode to condensed  */\n  @Input() set condensed(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (value !== this._condensed) {\n      this._condensed = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get condensed(): boolean {\n    return this._condensed;\n  }\n\n   /** Change the table mode to zebra  */\n  @Input() set zebra(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (value !== this._zebra) {\n      this._zebra = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  get zebra(): boolean {\n    return this._zebra;\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ChangeDetectorRef,\n  Output,\n  ElementRef\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EventEmitter } from '@angular/core';\nimport { SPACE } from '@angular/cdk/keycodes';\n\n/**\n * This is a table row.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'tr[nxTableRow]',\n  host: {\n   'class': 'nx-table-row',\n   '[class.is-selected]': 'selected',\n   '[class.nx-table-row--selectable]': 'selectable',\n   '[attr.aria-selected]': 'selected',\n   '(click)': '_onSelect($event)',\n   '(keydown.space)': '_onSelect($event)'\n  },\n  template: `<ng-content></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxTableRowComponent {\n\n  /** Whether this table row is selectable */\n  @Input()\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get selectable(): boolean {\n    return this._selectable;\n  }\n  private _selectable: boolean = false;\n\n  /** Whether this table row is selected */\n  @Input()\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  get selected(): boolean {\n    return this._selected;\n  }\n  private _selected: boolean = false;\n\n  @Output()\n  select: EventEmitter<void> = new EventEmitter();\n\n  constructor(protected _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) {}\n\n  _onSelect($event) {\n    if (!this._selectable || this.isActionEvent($event)) {\n      return;\n    }\n\n    if ($event.keyCode === SPACE) {\n      $event.preventDefault();\n    }\n\n    this.select.emit();\n  }\n\n  /**\n   * Checks if the event would trigger an action.\n   * Return `true` if a button, link, input or label are clicked.\n   */\n  private isActionEvent($event) {\n    let parent: HTMLElement = $event.target;\n\n    while (parent && parent !== this._elementRef.nativeElement) {\n      if (['A', 'INPUT', 'BUTTON'].indexOf(parent.tagName) >= 0) {\n        return true;\n      } else if (parent.tagName === 'LABEL' && parent.getAttribute('for')) {\n        return true;\n      }\n\n      parent = parent.parentElement;\n    }\n\n    return false;\n  }\n}\n","import { Component, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { NxExpandable } from './toggle-button.component';\n\n/**\n * This is an expandable table row.\n * It can collapse its height to hide the content.\n * Requires the table cells to have the `[nxExpandableTableCell]` component.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'tr[nxExpandableTableRow]',\n  host: {\n   'class': 'nx-expandable-table-row'\n  },\n  template: `<ng-content></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxExpandableTableRowComponent implements NxExpandable {\n  expanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Toggles the expansion of this row.\n   */\n  toggle() {\n    if (this.expanded.value) {\n      this.close();\n    } else {\n      this.expand();\n    }\n  }\n\n  /**\n   * Expands this row.\n   */\n  expand() {\n    if (!this.expanded.value) {\n      this.expanded.next(true);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Closes this row.\n   */\n  close() {\n    if (this.expanded.value) {\n      this.expanded.next(false);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { ChangeDetectionStrategy, Component, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NxExpandableTableRowComponent } from './expandable-table-row.component';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * This is an expandable table cell.\n * Only works in conjunction with the `[nxExpandableTableRow]` component.\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'td[nxExpandableTableCell]',\n  templateUrl: './expandable-table-cell.component.html',\n  host: {\n    'class': 'nx-expandable-table-cell'\n  },\n  animations: [\n    trigger('openClose', [\n      state('open', style({\n        height: '*',\n        visibility: 'visible'\n      })),\n      state('closed, void', style({\n        height: '0',\n        visibility: 'hidden' // visibility and height to toggle instead of display: none to prevent cell width jumping\n      })),\n      transition('closed <=> open, void => closed', [\n        animate('225ms cubic-bezier(0.4,0.0,0.2,1)')\n      ])\n    ])\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxExpandableTableCellComponent implements OnDestroy {\n  private _destroyed = new Subject();\n\n  _open: boolean = false;\n\n  constructor(\n      _row: NxExpandableTableRowComponent,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    _row.expanded.pipe(takeUntil(this._destroyed))\n      .subscribe(open => {\n        this._open = open;\n        this._changeDetectorRef.markForCheck();\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n}\n","import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { Subscription, BehaviorSubject } from 'rxjs';\n\nexport interface NxExpandable {\n  /** Indicates if this expandable instance is open or not.  */\n  expanded: BehaviorSubject<boolean>;\n\n  /** Toggles the open state. */\n  toggle: () => void;\n\n  /** Expands this component. */\n  expand: () => void;\n\n  /** Closes this component. */\n  close: () => void;\n}\n\n/**\n * This toggle button can be clicked and toggles expandable elements.\n * e.g. it can toggle a expandable table row or anything else that implements the `NxExpandable` interface.\n */\n@Component({\n  selector: 'nx-toggle-button',\n  templateUrl: './toggle-button.component.html',\n  styleUrls: ['./toggle-button.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxToggleButtonComponent implements OnDestroy {\n  _expanded: boolean = false;\n\n  /**\n   * This is the expandable target that will be toggled when the user clicks the button.\n   */\n  @Input()\n  set target(value: NxExpandable) {\n    this._target = value;\n\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n\n    if (this._target) {\n      this._subscription = this._target.expanded.subscribe(expanded => {\n          this._expanded = expanded;\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n  _target: NxExpandable;\n\n  @Input()\n  set ariaLabel(value: string) {\n    this._ariaLabel = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  _ariaLabel: string = '';\n\n  private _subscription: Subscription;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  _onClick() {\n    if (this._target) {\n      this._target.toggle();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n}\n","import { ContentChildren, QueryList, AfterViewInit, Directive } from '@angular/core';\nimport { NxExpandableTableRowComponent } from './expandable-table-row.component';\nimport { flatMap, startWith, map, distinctUntilChanged } from 'rxjs/operators';\nimport { combineLatest, BehaviorSubject } from 'rxjs';\nimport { NxExpandable } from './toggle-button.component';\n\n/**\n * The nxExpandableTable adds row expansion functionality to the nxTable.\n * It provides the logic to expand/collapse all expandable rows simultanously.\n */\n@Directive({\n  selector: 'table[nxExpandableTable]',\n  exportAs: 'nxExpandableTable'\n})\nexport class NxExpandableTableDirective implements AfterViewInit, NxExpandable {\n  @ContentChildren(NxExpandableTableRowComponent, { descendants: true }) rows: QueryList<NxExpandableTableRowComponent>;\n\n  expanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  ngAfterViewInit() {\n    this.rows.changes.pipe(\n      startWith(this.rows),\n      flatMap((rows: NxExpandableTableRowComponent[]) => {\n        return combineLatest(rows.map(row => row.expanded));\n      }),\n      map((values: boolean[]) =>\n        values.reduce((a, x) => a && x, true)\n      ),\n      distinctUntilChanged()\n    )\n    .subscribe((rowsOpen) => {\n      this.expanded.next(rowsOpen);\n    });\n  }\n\n  /**\n   * Toggles the expandable rows. If all rows are open it will close them, otherwise it will open them.\n   */\n  toggle() {\n    if (this.expanded.value) {\n      this.close();\n    } else {\n      this.expand();\n    }\n  }\n\n  /**\n   * Expands all expandable rows.\n   */\n  expand() {\n    this.rows.forEach(row => row.expanded.next(true));\n  }\n\n  /**\n   * Closes all expandable rows.\n   */\n  close() {\n    this.rows.forEach(row => row.expanded.next(false));\n  }\n}\n","import { Directive, Output, EventEmitter, Input, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nexport type SortDirection = 'asc' | 'desc';\n\nexport class SortEvent {\n  /** The name of the column that is being sorted by. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n\n  constructor(active, direction) {\n    this.active = active;\n    this.direction = direction;\n  }\n}\n\n@Directive({\n  selector: 'table[nxSort]',\n  exportAs: 'NxSortDirective'\n})\nexport class NxSortDirective implements OnDestroy {\n\n  readonly _stateChanges = new Subject<void>();\n\n  private _active: string;\n\n  /** Sets the key of the most recently sorted column. */\n  @Input()\n  set active(value: string) {\n    if (this._active !== value) {\n      this._active = value;\n      this.sortChange.emit(new SortEvent(this.active, this.direction));\n      this._stateChanges.next();\n    }\n  }\n  get active(): string {\n    return this._active;\n  }\n\n  private _direction: SortDirection = 'asc';\n\n  /** Sets the direction of the currently active sorted column. Default: 'asc'. */\n  @Input()\n  set direction(value: SortDirection) {\n    if (this._direction !== value) {\n      this._direction = value;\n      this.sortChange.emit(new SortEvent(this.active, this.direction));\n      this._stateChanges.next();\n    }\n  }\n  get direction(): SortDirection {\n    return this._direction;\n  }\n\n  /**\n   * @docs-private\n   * An event emitted when the active value has changed.\n   */\n  @Output() readonly activeChange: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * @docs-private\n   * An event emitted when the direction value has changed.\n   */\n  @Output() readonly directionChange: EventEmitter<SortDirection> = new EventEmitter<SortDirection>();\n\n  /** An event emitted when either the active sort or sort direction changes. */\n  @Output() readonly sortChange: EventEmitter<SortEvent> = new EventEmitter<SortEvent>();\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /**\n   * Sets the active sort key and determines the new sort direction.\n   * Afterwards the output event `sortChange` is called.\n   *\n   * If `sortable` is not the key of the active sort header, the initial direction to sort is 'asc'.\n   * Otherwise the direction of the sorted column changes.\n   */\n  sort(sortable: string): void {\n    if (this._active !== sortable) {\n      this._active = sortable;\n      this.activeChange.emit(this.active);\n      this._direction = 'asc';\n      this.directionChange.emit(this.direction);\n    } else if (this._direction === 'asc') {\n      this._direction = 'desc';\n      this.directionChange.emit(this.direction);\n    } else {\n      this._direction = 'asc';\n      this.directionChange.emit(this.direction);\n    }\n\n    this.sortChange.emit(new SortEvent(this.active, this.direction));\n    this._stateChanges.next();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class NxSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** The aria label for a header that can be sorted ascending. */\n  sortAscendingAriaLabel: string = 'sort ascending by';\n  /** The aria label for a header that can be sorted descending. */\n  sortDescendingAriaLabel: string = 'sort descending by';\n}\n","import { Component, Input, Optional, ChangeDetectionStrategy, OnInit, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NxSortDirective } from './sort.directive';\nimport { Subscription } from 'rxjs';\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { NxSortHeaderIntl } from './sort-header-intl';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'th[nxSortHeaderCell]',\n  exportAs: 'nxSortHeaderComponent',\n  templateUrl: 'sort-header.component.html',\n  styleUrls: ['sort-header.component.scss'],\n  host: {\n    '(click)': '_handleClick()',\n    '(keydown)': '_onKeydown($event)'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxSortHeaderComponent implements OnInit, OnDestroy {\n\n  private _parentChangeSubscription: Subscription;\n  private _intlSubscription: Subscription;\n  private _key: string;\n\n  /** Sets the key of this sort header. */\n  @Input('nxSortHeaderCell')\n  set key(value: string) {\n    if (this._key !== value) {\n      this._key = value;\n    }\n  }\n  get key(): string {\n    return this._key;\n  }\n\n  constructor(@Optional() public _sort: NxSortDirective,\n    public _intl: NxSortHeaderIntl,\n    private _changeDetectorRef: ChangeDetectorRef\n  ) {\n    this._intlSubscription = this._intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._parentChangeSubscription = this._sort._stateChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._parentChangeSubscription) {\n      this._parentChangeSubscription.unsubscribe();\n    }\n    this._intlSubscription.unsubscribe();\n  }\n\n  _handleClick() {\n    this._sort.sort(this._key);\n  }\n\n  _onKeydown($event) {\n    if ($event && ($event.keyCode === ENTER || $event.keyCode === SPACE)) {\n      this._sort.sort(this._key);\n\n      // prevent page from scrolling down\n      if ($event.keyCode === SPACE) {\n        $event.preventDefault();\n      }\n    }\n  }\n\n  _isSortedAscending() {\n    return (this._sort.active === this._key && this._sort.direction === 'asc');\n  }\n\n  _isSortedDescending() {\n    return (this._sort.active === this._key && this._sort.direction === 'desc');\n  }\n\n  _getAriaLabel(): string {\n    if (this._sort.active === this._key && this._sort.direction === 'asc') {\n      return `${this._intl.sortDescendingAriaLabel}`;\n    }\n    return `${this._intl.sortAscendingAriaLabel}`;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxTableCellComponent } from './table-cell.component';\nimport { NxHeaderCellDirective } from './header-cell.directive';\nimport { NxTableComponent } from './table.component';\nimport { NxTableRowComponent } from './table-row.component';\nimport { NxExpandableTableCellComponent } from './expandable/expandable-table-cell.component';\nimport { NxExpandableTableRowComponent } from './expandable/expandable-table-row.component';\nimport { NxToggleButtonComponent } from './expandable/toggle-button.component';\nimport { NxExpandableTableDirective } from './expandable/expandable-table.directive';\nimport { NxSortHeaderComponent } from './sort-header/sort-header.component';\nimport { NxSortDirective } from './sort-header/sort.directive';\nimport { NxSortHeaderIntl } from './sort-header/sort-header-intl';\n\nconst EXPORTED_DECLARED_ELEMENTS = [\n  NxHeaderCellDirective,\n  NxTableComponent,\n  NxTableCellComponent,\n  NxTableComponent,\n  NxTableRowComponent,\n  NxToggleButtonComponent,\n  NxExpandableTableDirective,\n  NxExpandableTableRowComponent,\n  NxExpandableTableCellComponent,\n  NxSortHeaderComponent,\n  NxSortDirective\n];\n@NgModule({\n  declarations: EXPORTED_DECLARED_ELEMENTS,\n  exports: EXPORTED_DECLARED_ELEMENTS,\n  imports: [\n    CommonModule,\n    NxIconModule\n  ],\n  providers: [ NxSortHeaderIntl ],\n})\nexport class NxTableModule { }\n"],"names":[],"mappings":"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"}