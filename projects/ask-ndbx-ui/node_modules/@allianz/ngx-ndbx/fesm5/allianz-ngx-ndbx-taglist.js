import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, Output, forwardRef, ViewChildren, ElementRef, NgModule } from '@angular/core';
import { DELETE, BACKSPACE, ENTER } from '@angular/cdk/keycodes';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { __spread } from 'tslib';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * Generated from: tag.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxTagComponent = /** @class */ (function () {
    function NxTagComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._tabindex = -1;
        /**
         * An event is dispatched each time when the tag is clicked.
         */
        this.clicked = new EventEmitter();
        /**
         * An event is dispatched each time when the tag is removed.
         */
        this.removed = new EventEmitter();
    }
    Object.defineProperty(NxTagComponent.prototype, "removable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._removable;
        },
        /** Whether the tag is removeable. */
        set: /**
         * Whether the tag is removeable.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._removable = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTagComponent.prototype, "tabindex", {
        get: /**
         * @return {?}
         */
        function () {
            return this.removable ? 0 : this._tabindex;
        },
        /**
         * Sets the tab-index of a tag. Default value: -1.
         *
         * If `nxAllowTagDeletion` of the taglist is set to true, the default value is 0.
         */
        set: /**
         * Sets the tab-index of a tag. Default value: -1.
         *
         * If `nxAllowTagDeletion` of the taglist is set to true, the default value is 0.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._tabindex = coerceNumberProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTagComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        /** Sets the value of the tag. */
        set: /**
         * Sets the value of the tag.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._value !== value) {
                this._value = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    /** @docs-private */
    // Emit the removed event that the parent can remove the value
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    // Emit the removed event that the parent can remove the value
    NxTagComponent.prototype.removeClickHandler = /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    // Emit the removed event that the parent can remove the value
    function (event) {
        event.stopPropagation();
        this.removed.emit(this.value);
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    NxTagComponent.prototype.removeKeyHandler = /**
     * \@docs-private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.removable && (event.keyCode === DELETE || event.keyCode === BACKSPACE)) {
            event.preventDefault();
            event.stopPropagation();
            this.removed.emit(this.value);
        }
        if (event.keyCode === ENTER) {
            this.clicked.emit(this.value);
        }
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    NxTagComponent.prototype.tagClickHandler = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this.clicked.emit(this.value);
    };
    NxTagComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-tag',
                    template: "{{ value }}\n<span role=\"link\" aria-label=\"close\" class=\"nx-tag__close\" *ngIf=\"removable\"\n    (click)=\"removeClickHandler($event)\">\n    <nx-icon class=\"nx-tag__close-icon\" name=\"close\"></nx-icon>\n</span>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '(click)': 'tagClickHandler()',
                        '(keydown)': 'removeKeyHandler($event)',
                        '[attr.tabindex]': 'tabindex'
                    },
                    styles: [":host{font-size:14px;font-size:var(--taglist-font-size,14px);line-height:16px;line-height:var(--taglist-line-height,16px);font-weight:600;font-weight:var(--taglist-font-weight,600);letter-spacing:1px;letter-spacing:var(--taglist-letter-spacing,1px);height:auto;max-width:100%;color:#767676;color:var(--taglist-color,#767676);background-color:transparent;background-color:var(--taglist-background-color,transparent);padding:6px 14px;display:flex;align-items:center;border:2px solid #d9d9d9;border:2px solid var(--taglist-border-color,#d9d9d9);border-radius:4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:background-color .2s,box-shadow .2s;cursor:pointer}:host:hover{border-color:#c2c2c2;border-color:var(--taglist-hover-border-color,#c2c2c2);color:#5b5b5b;color:var(--taglist-hover-color,#5b5b5b);background-color:#ececec;background-color:var(--taglist-hover-background-color,#ececec)}:host:focus{outline:transparent solid 2px}:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}.nx-tag__close-icon{outline:0;display:block;font-size:16px;font-size:var(--taglist-close-icon-size,16px)}.nx-tag__close{margin-left:8px}:host-context(.nx-taglist--keyword){padding:14px 22px}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}:host,:host:focus,:host:hover{color:buttonText;background-color:buttonFace;border-color:buttonText;-ms-high-contrast-adjust:none}}"]
                }] }
    ];
    /** @nocollapse */
    NxTagComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxTagComponent.propDecorators = {
        removable: [{ type: Input }],
        tabindex: [{ type: Input }],
        value: [{ type: Input }],
        clicked: [{ type: Output }],
        removed: [{ type: Output }]
    };
    return NxTagComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxTagComponent.prototype._removable;
    /**
     * @type {?}
     * @private
     */
    NxTagComponent.prototype._tabindex;
    /**
     * @type {?}
     * @private
     */
    NxTagComponent.prototype._value;
    /**
     * An event is dispatched each time when the tag is clicked.
     * @type {?}
     */
    NxTagComponent.prototype.clicked;
    /**
     * An event is dispatched each time when the tag is removed.
     * @type {?}
     */
    NxTagComponent.prototype.removed;
    /**
     * @type {?}
     * @private
     */
    NxTagComponent.prototype._changeDetectorRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: taglist.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxTaglistComponent = /** @class */ (function () {
    function NxTaglistComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * An event is dispatched each time when the list of tags changed.
         */
        this.tagsChange = new EventEmitter();
        /**
         * An event is dispatched each time when a tag is clicked.
         */
        this.tagClickEvent = new EventEmitter();
        this._tags = [];
        this._tabindex = -1;
        this._allowTagDeletion = true;
        this._isKeywordList = false;
        this._labelProperty = 'nxTaglistLabel';
        this._valueFormatterFn = (/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return value; });
        this._onChange = (/**
         * @return {?}
         */
        function () { });
        this._onTouched = (/**
         * @return {?}
         */
        function () { });
    }
    Object.defineProperty(NxTaglistComponent.prototype, "tags", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tags;
        },
        /** Sets the list of tags. */
        set: /**
         * Sets the list of tags.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._tags = value;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTaglistComponent.prototype, "tabindex", {
        get: /**
         * @return {?}
         */
        function () {
            return this.allowTagDeletion ? 0 : this._tabindex;
        },
        /** Sets the tabindex of the contained tags. Default value: -1. */
        set: /**
         * Sets the tabindex of the contained tags. Default value: -1.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._tabindex = coerceNumberProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTaglistComponent.prototype, "allowTagDeletion", {
        get: /**
         * @return {?}
         */
        function () {
            return this._allowTagDeletion;
        },
        /** Whether the tags can be removed from the list. Default: true. */
        set: /**
         * Whether the tags can be removed from the list. Default: true.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._allowTagDeletion = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTaglistComponent.prototype, "isKeywordList", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isKeywordList;
        },
        /** Whether the tags can be styled as keywords. */
        set: /**
         * Whether the tags can be styled as keywords.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isKeywordList = coerceBooleanProperty(value);
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTaglistComponent.prototype, "labelProp", {
        get: /**
         * @return {?}
         */
        function () {
            return this._labelProperty;
        },
        /** Sets the label property, in case tags represent objects. */
        set: /**
         * Sets the label property, in case tags represent objects.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._labelProperty !== value) {
                this._labelProperty = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTaglistComponent.prototype, "labelledby", {
        get: /**
         * @return {?}
         */
        function () {
            return this._ariaLabelledBy;
        },
        /** Sets the label property to improve accessibility. */
        set: /**
         * Sets the label property to improve accessibility.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._ariaLabelledBy !== value) {
                this._ariaLabelledBy = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxTaglistComponent.prototype, "valueFormatter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._valueFormatterFn;
        },
        /** Sets the customization function for tag value.  */
        set: /**
         * Sets the customization function for tag value.
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this._valueFormatterFn = fn;
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    /** Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter */
    /**
     * Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    NxTaglistComponent.prototype.delete = /**
     * Allows to delete a tag given index. Takes index of the tag to be deleted as a parameter
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    function (index, value) {
        if (this.allowTagDeletion) {
            this.tags = __spread(this.tags.slice(0, index), this.tags.slice(index + 1));
            // focus next element after deletion
            if (this.tagChildren.toArray()[index + 1]) {
                this.tagChildren.toArray()[index + 1].nativeElement.focus();
            }
            this._onChange(this.tags);
            this.tagsChange.emit(this.tags);
        }
    };
    /** Allows to add a tag. Takes tag object as an input */
    /**
     * Allows to add a tag. Takes tag object as an input
     * @param {?} tag
     * @return {?}
     */
    NxTaglistComponent.prototype.addTag = /**
     * Allows to add a tag. Takes tag object as an input
     * @param {?} tag
     * @return {?}
     */
    function (tag) {
        var _this = this;
        if (!tag) {
            return;
        }
        // make sure tag is either string or has the configured label prop and is not yet in the list
        if ((typeof tag === 'string' && this.tags.indexOf(tag) === -1) ||
            (tag[this.labelProp] && this.tags.filter((/**
             * @param {?} t
             * @return {?}
             */
            function (t) { return t[_this.labelProp] === tag[_this.labelProp]; })).length < 1)) {
            this.tags = __spread(this.tags, [tag]);
            this._onChange(this.tags);
            this.tagsChange.emit(this.tags);
        }
    };
    /** Allows to clear the tag list. */
    /**
     * Allows to clear the tag list.
     * @return {?}
     */
    NxTaglistComponent.prototype.clearTags = /**
     * Allows to clear the tag list.
     * @return {?}
     */
    function () {
        this.tags = [];
        this._onChange(this.tags);
        this.tagsChange.emit(this.tags);
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} tags
     * @return {?}
     */
    NxTaglistComponent.prototype.writeValue = /**
     * \@docs-private
     * @param {?} tags
     * @return {?}
     */
    function (tags) {
        this.tags = tags;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NxTaglistComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NxTaglistComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} tag
     * @return {?}
     */
    NxTaglistComponent.prototype.renderTag = /**
     * \@docs-private
     * @param {?} tag
     * @return {?}
     */
    function (tag) {
        /** @type {?} */
        var tagStr = typeof tag === 'string' ? tag : tag[this.labelProp];
        return this.valueFormatter(tagStr);
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    NxTaglistComponent.prototype.tagClick = /**
     * \@docs-private
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    function (index, value) {
        this.tagClickEvent.emit(this.tags[index]);
    };
    NxTaglistComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-taglist',
                    template: "  <ul class=\"nx-taglist\" *ngIf=\"tags.length > 0\">\n    <li class=\"nx-taglist__list-item\" tabindex=\"-1\" *ngFor=\"let tag of tags; let i = index\">\n      <nx-tag [value]=\"renderTag(tag)\" [removable]=\"allowTagDeletion\" [tabindex]=\"tabindex\" (clicked)=\"tagClick(i, $event)\" (removed)=\"delete(i, $event)\"></nx-tag>\n  </li>\n  </ul>\n  <ng-content *ngIf=\"tags.length < 1\"></ng-content>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NxTaglistComponent; })),
                            multi: true
                        }
                    ],
                    host: {
                        '[class.nx-taglist--keyword]': 'isKeywordList',
                        '[attr.aria-labelledby]': 'labelledby || null',
                        '[attr.tabindex]': '-1'
                    },
                    styles: [":host{position:relative;min-height:32px;margin-bottom:32px;display:flex;justify-content:space-between}:host:focus{outline:0}.nx-taglist{display:flex;flex-wrap:wrap}.nx-taglist__list-item{list-style:none;margin-right:12px;margin-bottom:12px;flex-wrap:wrap;display:flex}@media (max-width:703px){.nx-taglist--keyword{justify-content:center}}"]
                }] }
    ];
    /** @nocollapse */
    NxTaglistComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NxTaglistComponent.propDecorators = {
        tagsChange: [{ type: Output, args: ['nxTagsChange',] }],
        tagClickEvent: [{ type: Output, args: ['nxTagClick',] }],
        tagChildren: [{ type: ViewChildren, args: [NxTagComponent, { read: ElementRef },] }],
        tags: [{ type: Input, args: ['nxTags',] }],
        tabindex: [{ type: Input }],
        allowTagDeletion: [{ type: Input, args: ['nxAllowTagDeletion',] }],
        isKeywordList: [{ type: Input, args: ['nxIsKeywordList',] }],
        labelProp: [{ type: Input, args: ['nxLabelProperty',] }],
        labelledby: [{ type: Input, args: ['aria-labelledby',] }],
        valueFormatter: [{ type: Input, args: ['nxValueFormatter',] }]
    };
    return NxTaglistComponent;
}());
if (false) {
    /**
     * An event is dispatched each time when the list of tags changed.
     * @type {?}
     */
    NxTaglistComponent.prototype.tagsChange;
    /**
     * An event is dispatched each time when a tag is clicked.
     * @type {?}
     */
    NxTaglistComponent.prototype.tagClickEvent;
    /**
     * \@docs-private
     * @type {?}
     */
    NxTaglistComponent.prototype.tagChildren;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._tags;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._tabindex;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._allowTagDeletion;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._isKeywordList;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._labelProperty;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._ariaLabelledBy;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._valueFormatterFn;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._onTouched;
    /**
     * @type {?}
     * @private
     */
    NxTaglistComponent.prototype._changeDetectorRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: taglist.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxTaglistModule = /** @class */ (function () {
    function NxTaglistModule() {
    }
    NxTaglistModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [NxTaglistComponent, NxTagComponent],
                    exports: [NxTaglistComponent, NxTagComponent],
                    imports: [CommonModule, NxIconModule]
                },] }
    ];
    return NxTaglistModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: allianz-ngx-ndbx-taglist.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxTaglistComponent, NxTaglistModule, NxTagComponent as ɵa };
//# sourceMappingURL=allianz-ngx-ndbx-taglist.js.map
