{"version":3,"file":"allianz-ngx-ndbx-code-input.js","sources":["ng://@allianz/ngx-ndbx/code-input/code-input-intl.ts","ng://@allianz/ngx-ndbx/code-input/code-input.component.ts","ng://@allianz/ngx-ndbx/code-input/code-input.module.ts"],"sourcesContent":["import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NxCodeInputIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that should replace the 'Enter key' of the aria-label. */\n  inputFieldAriaLabel: string = 'Enter Key';\n\n  /** Label that should replace the 'of' of the aria-label. */\n  ofLabel?: string = 'of';\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  ChangeDetectorRef,\n  ElementRef,\n  Self,\n  Optional,\n  DoCheck\n} from '@angular/core';\nimport { ControlValueAccessor, NgControl, NgForm, FormGroupDirective, FormControl } from '@angular/forms';\nimport { NxCodeInputIntl } from './code-input-intl';\nimport { ErrorStateMatcher } from '@allianz/ngx-ndbx/utils';\nimport { BACKSPACE, LEFT_ARROW, RIGHT_ARROW, SPACE, DOWN_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nconst DEFAULT_INPUT_LENGTH = 6;\nconst TAG_NAME_INPUT = 'INPUT';\nconst AUTO_UPPERCASE = 'upper';\nconst AUTO_LOWERCASE = 'lower';\nconst INPUT_FIELD_GAP = 'nx-code-input--field-with-gap';\nexport type NxConversionTypes = 'lower' | 'upper';\n\n@Component({\n  selector: 'nx-code-input',\n  templateUrl: 'code-input.component.html',\n  styleUrls: [\n    'code-input.scss'\n  ],\n  host: {\n    '[class.nx-code-input]': 'true',\n    '[class.has-error]': 'errorState',\n    '[class.is-negative]': 'negative',\n    '[class.is-disabled]': 'disabled',\n    '[attr.tabindex]': '-1'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NxCodeInputComponent implements ControlValueAccessor, DoCheck {\n\n  /** Whether the current input of the component has an error. */\n  errorState: boolean = false;\n\n  /** The length of the code input. Default: 6. */\n  @Input('length')\n  set codeLength(value: number) {\n    this._codeLength = value;\n    this.setInputLength();\n    this._changeDetectorRef.markForCheck();\n  }\n  get codeLength() {\n    return this._codeLength;\n  }\n  private _codeLength: number = DEFAULT_INPUT_LENGTH;\n\n  /** The type of HTML input */\n  @Input()\n  set type(value: string) {\n    this._type = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get type() {\n    return this._type;\n  }\n  private _type: string = 'text';\n  private _isUpDown: boolean = false;\n\n  /** Sets the tabindex of the contained input elements. */\n  @Input()\n  set tabindex(value: number) {\n    this._tabindex = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get tabindex(): number {\n    return this._tabindex;\n  }\n  private _tabindex: number = 0;\n\n  /** Whether the form should auto capitalize or lowercase (optional). */\n  @Input('nxConvertTo')\n  set convertTo(value: NxConversionTypes) {\n    this._convertTo = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get convertTo() {\n    return this._convertTo;\n  }\n  private _convertTo?: NxConversionTypes;\n\n  /** The user input in array form */\n  _keyCode: string[] = new Array(DEFAULT_INPUT_LENGTH);\n  private _focused: boolean = false;\n\n  /** Whether the code input uses the negative set of styling. */\n  @Input()\n  set negative(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._negative !== newValue) {\n      this._negative = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get negative() {\n    return this._negative;\n  }\n\n  private _negative: boolean = false;\n\n  /** Whether the code input is disabled. */\n  @Input()\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get disabled() {\n    return this._disabled;\n  }\n\n  private _disabled: boolean = false;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _el: ElementRef,\n    @Self() @Optional() public _control: NgControl,\n    public _intl: NxCodeInputIntl,\n    private _errorStateMatcher: ErrorStateMatcher,\n    @Optional() private _parentForm: NgForm,\n    @Optional() private _parentFormGroup: FormGroupDirective) {\n    if (this._control) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this._control.valueAccessor = this;\n    }\n  }\n\n  ngDoCheck() {\n    if (this._control) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  /** Sets the length of the input fields. */\n  setInputLength(): void {\n    if (this.codeLength) {\n      this._keyCode = new Array(this.codeLength);\n    } else {\n      this._keyCode = new Array(DEFAULT_INPUT_LENGTH);\n    }\n  }\n\n  /** Converts to upper or lowercase when enabled. */\n  _convertLetterSize(value: any): string {\n    if (value === 'Ã') {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      if (this.convertTo === AUTO_UPPERCASE) {\n        return value.toUpperCase();\n      } else if (this.convertTo === AUTO_LOWERCASE) {\n        return value.toLowerCase();\n      }\n\n      return value;\n    }\n  }\n\n  /** Reacts to keydown event. */\n  _keydownAction(event): void | false {\n    const previousInputField: HTMLInputElement = event.target.previousElementSibling;\n    const nextInputField: HTMLInputElement = event.target.nextElementSibling;\n\n    switch (event.keyCode) {\n      case SPACE:\n        return false;\n\n      case BACKSPACE:\n        if (event.target.value === '') {\n          if (previousInputField && previousInputField.tagName === TAG_NAME_INPUT) {\n            this.selectInput(previousInputField);\n          }\n        }\n        break;\n\n      case LEFT_ARROW:\n        if (previousInputField && previousInputField.tagName === TAG_NAME_INPUT) {\n          event.preventDefault();\n          this.selectInput(previousInputField);\n        }\n        break;\n\n      case RIGHT_ARROW:\n        if (nextInputField && nextInputField.tagName === TAG_NAME_INPUT) {\n          this.selectInput(nextInputField);\n        }\n        event.preventDefault();\n        break;\n\n      case DOWN_ARROW:\n        this._isUpDown = true;\n        if (this._type === 'number' && (event.target.value === '' || event.target.value === '0')) {\n          event.preventDefault();\n        }\n        break;\n\n      case UP_ARROW:\n        this._isUpDown = true;\n        if (this._type === 'number' && event.target.value === '9') {\n          event.preventDefault();\n        }\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  /** Selects the value on click of an input field. */\n  _selectText(event): void {\n    this.selectInput(event.target);\n  }\n\n  /** Automatically focuses and selects the next input on key input. */\n  _selectNextInput(event): void {\n    event.target.value = this._convertLetterSize(event.target.value.slice(0, 1));\n    const currentIndex = this._getFocusedInputIndex(event);\n    // save in model with uppercase if needed\n    this._keyCode[currentIndex] = event.target.value;\n    this.propagateChange(this._keyCode.join(''));\n\n    // don't jump to next input if the user uses UP/DOWn arrow (native behaviour)\n    const focusNextInput = !(this._isUpDown && this.type === 'number');\n\n    if (event.target.value && focusNextInput) {\n      const nextInputField = event.target.nextSibling;\n\n      if (nextInputField !== null && nextInputField.tagName === TAG_NAME_INPUT) {\n        nextInputField.focus();\n        if (nextInputField.value !== '') {\n          this.selectInput(nextInputField);\n        }\n      }\n    }\n\n    this._isUpDown = false;\n  }\n\n  /** Paste event to distribute content in input fields. */\n  _pasteClipboard(event): void {\n    let copiedText = (event.clipboardData || (<any> window).clipboardData).getData('text');\n    let copiedTextIndex = 0;\n    const inputIndex = this._getFocusedInputIndex(event);\n\n    copiedText = this.type === 'number' ? this._formatNumberInput(copiedText) : copiedText;\n\n    for (let i = inputIndex; i < this.codeLength; i++) {\n      this._keyCode[i] = this._convertLetterSize(copiedText[copiedTextIndex]);\n      copiedTextIndex++;\n    }\n\n    this.propagateChange(this._keyCode.join(''));\n\n    if (inputIndex + copiedText.length < this.codeLength) {\n      this._el.nativeElement.children.item(inputIndex + copiedText.length).focus();\n    } else {\n      this._el.nativeElement.children.item(this.codeLength - 1).focus();\n    }\n\n    event.preventDefault();\n  }\n\n  /** Returns the index of the code input, which is currently focused. */\n  private _getFocusedInputIndex(event) {\n    let inputIndex;\n    for (let i = 0; i < this._el.nativeElement.children.length; i++) {\n      if (event.srcElement === this._el.nativeElement.children.item(i)) {\n        inputIndex = i;\n      }\n    }\n    return inputIndex;\n  }\n\n  /** Removes all characters from the input except for numbers [0-9]. */\n  private _formatNumberInput(copiedText: string) {\n    let formattedInput = '';\n    for (let i = 0; i < copiedText.length; i++) {\n      if (copiedText[i].match(/[0-9]{1}$/)) {\n        formattedInput += copiedText[i];\n      }\n    }\n\n    return formattedInput;\n  }\n\n  /** Triggers when an input field is blurred. */\n  _onBlur(): void {\n    this._focused = false;\n    setTimeout(() => {\n      if (!this._focused) {\n        this.propagateTouch(this._keyCode.join(''));\n      }\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Sets _focused state and makes valid. */\n  _setFocusState(): void {\n    this._focused = true;\n  }\n\n  /**\n   * Disables the code input. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Sets initial value, used by ControlValueAccessor. */\n  writeValue(value: string): void {\n    if (value) {\n      const valueAsArray = value.split('').slice(0, this.codeLength);\n\n      for (let i = 0; i < this.codeLength; i++) {\n        this._keyCode[i] = valueAsArray[i];\n      }\n    } else {\n      this.setInputLength();\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _trackByKeyCode(index: number, item: string): number {\n    return index;\n  }\n\n  /** Adds a gap to input fields when appropriate. */\n  _inputGap(index): string {\n    switch (this.codeLength) {\n      case 4:\n      case 6:\n      case 8:\n        if (index === this.codeLength / 2) {\n          return INPUT_FIELD_GAP;\n        }\n\n        break;\n      default:\n        return;\n    }\n  }\n\n  /** @docs-private */\n  propagateChange = (_: any) => {\n  }\n\n  /** @docs-private */\n  propagateTouch = (_: any) => {\n  }\n\n  registerOnChange(fn: any) {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.propagateTouch = fn;\n  }\n\n  /** @docs-private */\n  updateErrorState() {\n    const oldState = this.errorState;\n    const parent = this._parentFormGroup || this._parentForm;\n    const control = this._control ? this._control.control as FormControl : null;\n    const newState = this._errorStateMatcher.isErrorState(control, parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n    }\n  }\n\n  getAriaLabel(keyIndex: number) {\n    return `${this._intl.inputFieldAriaLabel} ${keyIndex + 1} ${this._intl.ofLabel} ${this._keyCode.length}`;\n  }\n\n /** @docs-private\n  * Workaround preventing the selection error because the `setSelectionRange` is not supported on input['type=number']\n  * */\n selectInput(input: HTMLInputElement) {\n   input.focus();\n   try {\n     input.setSelectionRange(0, input.value.length);\n   } catch (err) {\n     if (err instanceof DOMException && err.name === 'InvalidStateError') {\n       // setSelectionRange does not apply\n     } else {\n       throw err;\n     }\n   }\n }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NxCodeInputIntl } from './code-input-intl';\n\nimport {NxCodeInputComponent} from './code-input.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  declarations: [\n    NxCodeInputComponent,\n  ],\n  exports: [\n    NxCodeInputComponent,\n  ],\n  providers: [NxCodeInputIntl],\n})\nexport class NxCodeInputModule {\n}\n"],"names":[],"mappings":"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"}