{"version":3,"file":"allianz-ngx-ndbx-tree.js","sources":["ng://@allianz/ngx-ndbx/tree/data-source/flat-data-source.ts","ng://@allianz/ngx-ndbx/tree/data-source/flat-tree-control.ts","ng://@allianz/ngx-ndbx/tree/data-source/tree-node.ts","ng://@allianz/ngx-ndbx/tree/node.ts","ng://@allianz/ngx-ndbx/tree/outlet.ts","ng://@allianz/ngx-ndbx/tree/padding.ts","ng://@allianz/ngx-ndbx/tree/toggle.ts","ng://@allianz/ngx-ndbx/tree/tree.component.ts","ng://@allianz/ngx-ndbx/tree/tree.module.ts"],"sourcesContent":["import {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable, of} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\nimport { NxTreeNode, NxFlatTreeNode } from './tree-node';\nimport { NxFlatTreeControl } from './flat-tree-control';\nimport { TreeControl, FlatTreeControl } from '@angular/cdk/tree';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T extends NxTreeNode` to flattened nodes of type `F extends NxFlatTreeNode`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F extends NxFlatTreeNode` with additional information.\n */\nclass NxTreeFlattener<T extends NxTreeNode, F extends NxFlatTreeNode> {\n  transformFunction(node: NxTreeNode, level: number): F {\n    const { children, ...rest } = node;\n    return {\n      ...rest,\n      level,\n      expandable: Array.isArray(children) && children.length > 0\n    } as F;\n  }\n\n  getLevel(node: F): number {\n    return node.level;\n  }\n\n  isExpandable(node: F): boolean {\n    return node.expandable;\n  }\n\n  getChildren(node: T): Observable<T[]> | T[] {\n    return node.children as T[];\n  }\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      const childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1); // tslint:disable-line\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    const resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    const results: F[] = [];\n    const currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `NxTree`.\n * The nested tree nodes of type `T extends NxTreeNode` are flattened through `NxTreeFlattener`, and converted\n * to type `F extends NxFlatTreeNode` for `NxTree` to consume.\n */\nexport class NxTreeFlatDataSource<T extends NxTreeNode, F extends NxFlatTreeNode> extends DataSource<F> {\n  _treeFlattener: NxTreeFlattener<T, F>;\n\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data = new BehaviorSubject<T[]>([]);\n\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              initialData: T[] = []) {\n    super();\n    this._treeFlattener = new NxTreeFlattener();\n    this.data = initialData;\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.changed,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","import { FlatTreeControl } from '@angular/cdk/tree';\nimport { NxFlatTreeNode } from './tree-node';\n\n/** Flat tree control.\n  Able to expand/collapse a subtree recursively for flattened tree.\n*/\nexport class NxFlatTreeControl<F extends NxFlatTreeNode> extends FlatTreeControl<F> {\n  constructor() {\n    super(node => node.level, node => node.expandable);\n  }\n}\n","/**\n  This interface defines a single node of the trees data structure.\n*/\nexport interface NxTreeNode {\n  children?: NxTreeNode[];\n}\n\n/**\n  Flat node with level information.\n*/\nexport interface NxFlatTreeNode {\n  expandable: boolean;\n  level: number;\n}\n","import {CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  Component,\n  Directive,\n  Input,\n} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree node with NDBX design styles.\n */\n@Component({\n  selector: 'nx-tree-node',\n  exportAs: 'nxTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'nx-tree__node',\n    '[class.is-expanded]': 'isExpanded'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: NxTreeNodeComponent}],\n  templateUrl: './node.html'\n})\nexport class NxTreeNodeComponent<T> extends CdkTreeNode<T> {}\n\n/**\n * Wrapper for the CdkTree node definition with NDBX design styles.\n */\n@Directive({\n  selector: '[nxTreeNodeDef]',\n  inputs: [\n    'when: nxTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: NxTreeNodeDefDirective}]\n})\nexport class NxTreeNodeDefDirective<T> extends CdkTreeNodeDef<T> {\n  @Input('nxTreeNode') data: T;\n}\n","import {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[nxTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[nxTreeNodeOutlet]'\n})\nexport class NxTreeNodeOutletDirective implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","import {CdkTree, CdkTreeNode} from '@angular/cdk/tree';\nimport {Directive, Input, Renderer2, ElementRef, Optional, OnDestroy} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {takeUntil} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n@Directive({\n  selector: '[nxTreeNodePadding]',\n})\nexport class NxTreeNodePaddingDirective<T> implements OnDestroy {\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** CSS units used for the indentation value. */\n  indentUnits = 'px';\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('nxTreeNodePadding')\n  get level(): number { return this._level; }\n  set level(value: number) {\n    this._level = coerceNumberProperty(value);\n    this._setPadding();\n  }\n  _level: number;\n\n  /** The offset is added once on top of each indent. Default number is 0. */\n  @Input('nxTreeNodePaddingOffset')\n  get offset(): number { return this._offset; }\n  set offset(value: number) {\n    this._offset = coerceNumberProperty(value);\n    this._setPadding();\n  }\n  _offset: number = 0;\n\n  /**\n   * The indent for each level. Can be a number or a CSS string.\n   * Default number 24px from material design menu sub-menu spec.\n   */\n  @Input('nxTreeNodePaddingIndent')\n  get indent(): number | string { return this._indent; }\n  set indent(indent: number | string) {\n    let value = indent;\n    let units = 'px';\n\n    if (typeof indent === 'string') {\n      const parts = indent.split(cssUnitPattern);\n      value = parts[0];\n      units = parts[1] || units;\n    }\n\n    this.indentUnits = units;\n    this._indent = coerceNumberProperty(value);\n    this._setPadding();\n  }\n  _indent: number = 24;\n\n  constructor(private _treeNode: CdkTreeNode<T>,\n              private _tree: CdkTree<T>,\n              private _renderer: Renderer2,\n              private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {\n    this._setPadding();\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding());\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n  _paddingIndent(): string|null {\n    const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n      ? this._tree.treeControl.getLevel(this._treeNode.data)\n      : null;\n    const level = this._level || nodeLevel;\n    return level ? `${level * this._indent + this._offset}${this.indentUnits}` : null;\n  }\n\n  _setPadding() {\n    const padding = this._paddingIndent();\n    const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n    this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);\n  }\n}\n","import {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with NDBX design styles.\n */\n@Directive({\n  selector: '[nxTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: NxTreeNodeToggleDirective}]\n})\nexport class NxTreeNodeToggleDirective<T> extends CdkTreeNodeToggle<T> {\n  @Input('nxTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","import { CdkTree } from '@angular/cdk/tree';\nimport { ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { NxTreeNodeOutletDirective } from './outlet';\n\n/**\n * Wrapper for the CdkTable with NDBX design styles.\n */\n@Component({\n  selector: 'nx-tree',\n  exportAs: 'nxTree',\n  template: `<ng-container nxTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'nx-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{ provide: CdkTree, useExisting: NxTreeComponent }]\n})\nexport class NxTreeComponent<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(NxTreeNodeOutletDirective, { static: true }) _nodeOutlet: NxTreeNodeOutletDirective;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NxTreeComponent } from './tree.component';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { NxTreeNodeComponent, NxTreeNodeDefDirective } from './node';\nimport { NxTreeNodePaddingDirective } from './padding';\nimport { NxTreeNodeToggleDirective } from './toggle';\nimport { NxTreeNodeOutletDirective } from './outlet';\n\n@NgModule({\n  imports: [ CdkTreeModule, CommonModule ],\n  declarations: [ NxTreeComponent, NxTreeNodeComponent, NxTreeNodeDefDirective,\n    NxTreeNodePaddingDirective, NxTreeNodeToggleDirective, NxTreeNodeOutletDirective],\n  exports: [ NxTreeComponent, NxTreeNodeComponent, NxTreeNodeDefDirective,\n    NxTreeNodePaddingDirective, NxTreeNodeToggleDirective, NxTreeNodeOutletDirective]\n})\nexport class NxTreeModule { }\n"],"names":["tslib_1.__extends"],"mappings":"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"}