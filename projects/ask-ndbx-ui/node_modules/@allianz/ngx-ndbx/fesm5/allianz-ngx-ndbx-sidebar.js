import { NxButtonBase, NxButtonModule } from '@allianz/ngx-ndbx/button';
import { __extends } from 'tslib';
import { EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Renderer2, ElementRef, Output, Input, Optional, Host, NgModule } from '@angular/core';
import { SPACE, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { NxIconModule } from '@allianz/ngx-ndbx/icon';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * Generated from: sidebar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var MAX_WIDTH = 400;
/** @type {?} */
var MIN_WIDTH = 56;
/** @type {?} */
var AUTO_COLLAPSE_WIDTH = 168;
/** @type {?} */
var RESIZE_STEP_SIZE = 20;
var NxSidebarComponent = /** @class */ (function () {
    function NxSidebarComponent(_changeDetectorRef, renderer, _element) {
        this._changeDetectorRef = _changeDetectorRef;
        this.renderer = renderer;
        this._element = _element;
        /**
         * Emits the new width of the sidebar on resize or on close/open event.
         */
        this.widthChange = new EventEmitter();
        this._resizeable = false;
        this._minWidth = MIN_WIDTH;
        this._resizeHandleAriaLabel = '';
        this._open = true;
        this._width = 0;
        this._resizing = false;
        this._previousWidth = 0;
        this._isMobile = false;
        this._resizeWidth = 0;
        this._unsubscribeListeners = [];
        this._onResize = this._onResize.bind(this);
        this._onResizeEnd = this._onResizeEnd.bind(this);
    }
    Object.defineProperty(NxSidebarComponent.prototype, "resizeable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._resizeable;
        },
        /** If set to `true` this will enable dynamic resizing of the sidebar. */
        set: /**
         * If set to `true` this will enable dynamic resizing of the sidebar.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (newValue !== this._resizeable) {
                this._resizeable = newValue;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSidebarComponent.prototype, "minWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minWidth;
        },
        /** Sets the minimal width (in pixel) of the sidebar. */
        set: /**
         * Sets the minimal width (in pixel) of the sidebar.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._minWidth = coerceNumberProperty(value) || MIN_WIDTH;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSidebarComponent.prototype, "resizeHandleAriaLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return this._resizeHandleAriaLabel;
        },
        /** This sets the accessibility label for the resize handle of the sidebar. */
        set: /**
         * This sets the accessibility label for the resize handle of the sidebar.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._resizeHandleAriaLabel) {
                this._resizeHandleAriaLabel = value;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSidebarComponent.prototype, "open", {
        get: /**
         * @return {?}
         */
        function () {
            return this._open;
        },
        /** This reflects the current open state of the sidebar.
            It will be `true` if the sidebar is expanded and `false` if the sidebar is closed.
        */
        set: /**
         * This reflects the current open state of the sidebar.
         * It will be `true` if the sidebar is expanded and `false` if the sidebar is closed.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = coerceBooleanProperty(value);
            if (newValue !== this._open) {
                this._open = newValue;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxSidebarComponent.prototype, "width", {
        get: /**
         * @return {?}
         */
        function () {
            return this._width;
        },
        /** This sets the width of the sidebar. */
        set: /**
         * This sets the width of the sidebar.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var newValue = Math.max(value, this.minWidth);
            if (newValue !== this._width) {
                this._width = newValue;
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxSidebarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.width = this._element.nativeElement.clientWidth;
    };
    /**
     * @return {?}
     */
    NxSidebarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._removeDragEventListeners();
    };
    /** This will expand the sidebar to its full width. */
    /**
     * This will expand the sidebar to its full width.
     * @return {?}
     */
    NxSidebarComponent.prototype.expand = /**
     * This will expand the sidebar to its full width.
     * @return {?}
     */
    function () {
        this.open = true;
    };
    /** This will close the sidebar to its minimal width. */
    /**
     * This will close the sidebar to its minimal width.
     * @return {?}
     */
    NxSidebarComponent.prototype.close = /**
     * This will close the sidebar to its minimal width.
     * @return {?}
     */
    function () {
        this.open = false;
    };
    /** This will close or expand the sidebar depending if its expanded or closed. */
    /**
     * This will close or expand the sidebar depending if its expanded or closed.
     * @return {?}
     */
    NxSidebarComponent.prototype.toggle = /**
     * This will close or expand the sidebar depending if its expanded or closed.
     * @return {?}
     */
    function () {
        if (this.open) {
            this.close();
        }
        else {
            this.expand();
        }
        this._emitWidthChange(this._sidebarElementWidth);
    };
    Object.defineProperty(NxSidebarComponent.prototype, "_sidebarElementWidth", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._resizing) {
                return this._resizeWidth;
            }
            return this.open ? this.width : this.minWidth;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    NxSidebarComponent.prototype._onResizeStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.type.startsWith('touch')) {
            event = event.changedTouches[0];
        }
        this._resizeStartX = event.screenX;
        this._resizeStartWidth = this.open ? this.width : this.minWidth;
        this._resizeWidth = this.width;
        this._attachDragEventListeners();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NxSidebarComponent.prototype._onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._resizing = true;
        if (event.type.startsWith('touch')) {
            event = event.changedTouches[0];
        }
        /** @type {?} */
        var dx = event.screenX - this._resizeStartX;
        this._resizeWidth = Math.max(this.minWidth, this._resizeStartWidth + dx);
        this.open = this._resizeWidth > this.minWidth;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NxSidebarComponent.prototype._onResizeEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._resizing = false;
        this._removeDragEventListeners();
        if (this._isMouseDrag(this._resizeStartX, event.screenX)) {
            if (this._resizeWidth < AUTO_COLLAPSE_WIDTH) {
                this.open = false;
                this._emitWidthChange(this._sidebarElementWidth);
            }
            else {
                this.open = true;
                this.width = Math.min(MAX_WIDTH, this._resizeWidth);
                this._emitWidthChange(this.width);
            }
        }
        this._resizeWidth = 0;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NxSidebarComponent.prototype._onResizeHandleClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this._isMouseDrag(this._resizeStartX, event.screenX)) {
            return;
        }
        this.toggle();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NxSidebarComponent.prototype._onSidebarKeydown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.which === SPACE) {
            event.preventDefault();
            this.toggle();
        }
        else if (event.which === LEFT_ARROW) {
            this.width = this.width - RESIZE_STEP_SIZE;
            if (this.width <= AUTO_COLLAPSE_WIDTH) {
                this.open = false;
                this.width = AUTO_COLLAPSE_WIDTH + 1;
            }
            this._emitWidthChange(this.width);
        }
        else if (event.which === RIGHT_ARROW) {
            if (this.open) {
                this.width = Math.min(MAX_WIDTH, this.width + RESIZE_STEP_SIZE);
            }
            else {
                this.open = true;
                this.width = Math.max(this.width, AUTO_COLLAPSE_WIDTH);
            }
            this._emitWidthChange(this.width);
        }
    };
    /**
     * @private
     * @param {?} width
     * @return {?}
     */
    NxSidebarComponent.prototype._emitWidthChange = /**
     * @private
     * @param {?} width
     * @return {?}
     */
    function (width) {
        this.widthChange.emit(width);
    };
    /**
     * @private
     * @param {?} startX
     * @param {?} endX
     * @return {?}
     */
    NxSidebarComponent.prototype._isMouseDrag = /**
     * @private
     * @param {?} startX
     * @param {?} endX
     * @return {?}
     */
    function (startX, endX) {
        return Math.abs(endX - startX) > 5;
    };
    /**
     * @private
     * @return {?}
     */
    NxSidebarComponent.prototype._attachDragEventListeners = /**
     * @private
     * @return {?}
     */
    function () {
        this._unsubscribeListeners.push(this.renderer.listen('document', 'mousemove', this._onResize));
        this._unsubscribeListeners.push(this.renderer.listen('document', 'mouseup', this._onResizeEnd));
        this._unsubscribeListeners.push(this.renderer.listen('document', 'touchmove', this._onResize));
        this._unsubscribeListeners.push(this.renderer.listen('document', 'touchend', this._onResizeEnd));
    };
    /**
     * @private
     * @return {?}
     */
    NxSidebarComponent.prototype._removeDragEventListeners = /**
     * @private
     * @return {?}
     */
    function () {
        this._unsubscribeListeners.forEach((/**
         * @param {?} unsubscribe
         * @return {?}
         */
        function (unsubscribe) { return unsubscribe(); }));
    };
    NxSidebarComponent.decorators = [
        { type: Component, args: [{
                    template: "<div class=\"nx-sidebar__box\"\n  [attr.aria-expanded]=\"open\">\n  <div class=\"nx-sidebar__content\">\n    <ng-content></ng-content>\n  </div>\n  <ng-content select=\"nx-sidebar-footer\"></ng-content>\n</div>\n\n\n<button class=\"nx-sidebar__handle\"\n  *ngIf=\"resizeable\"\n  tabindex=\"0\"\n  type=\"button\"\n  (mousedown)=\"_onResizeStart($event)\"\n  (keydown)=\"_onSidebarKeydown($event)\"\n  (touchstart)=\"_onResizeStart($event)\"\n  (click)=\"_onResizeHandleClick($event)\"\n  [attr.aria-label]=\"resizeHandleAriaLabel\"></button>\n",
                    selector: 'nx-sidebar',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.is-resizing]': '_resizing',
                        '[class.is-closed]': '!open',
                        '[style.width.px]': "_sidebarElementWidth"
                    },
                    styles: [":host{position:relative;height:100%;transition:width .15s;display:flex;flex:0 0 auto;width:280px}:host.is-resizing{transition:none}@media (max-width:703px){:host{width:100%;position:absolute;transition:none}:host .nx-sidebar__handle{display:none}}:host.is-closed ::ng-deep button[nxSidebarToggle]{transform:rotateZ(180deg)}:host.is-closed ::ng-deep .nx-sidebar__footer-container{flex-direction:column;align-items:center}::ng-deep .nx-sidebar__footer{padding:16px 0;display:flex;justify-content:flex-end;color:#414141}::ng-deep .nx-sidebar__footer::after,::ng-deep .nx-sidebar__footer::before{content:'';display:block;flex:0 1 24px;min-width:8px;height:1px}::ng-deep .nx-sidebar__footer::after{flex:0 1 16px}::ng-deep .nx-sidebar__footer-container{display:flex;flex:1 1 auto;flex-direction:row}.nx-sidebar__handle{position:absolute;right:-14px;top:0;bottom:0;display:flex;flex:0 0 16px;justify-content:center;align-items:center;-webkit-appearance:none;-moz-appearance:none;appearance:none;border:none;box-shadow:none;background:0 0;margin:0;cursor:col-resize;outline:0;z-index:1;color:#c2c2c2;color:var(--sidebar-handle-color,#c2c2c2)}.nx-sidebar__handle::before{content:'||';font-size:14px;letter-spacing:-1px;font-weight:600;color:inherit}.nx-sidebar__handle::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]) .nx-sidebar__handle:focus::before{border-radius:4px;padding-right:1px;box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}.nx-sidebar__box{height:100%;flex:1 1 100%;display:flex;overflow:hidden;flex-direction:column;background:#f5f5f5;background:var(--sidebar-background-color,#f5f5f5)}@media screen and (-ms-high-contrast:active){.nx-sidebar__handle::before{-ms-high-contrast-adjust:none;color:buttonText;background-color:buttonFace;box-shadow:0 0 0 6px buttonFace,0 0 0 8px buttonText}:host-context([data-whatinput=keyboard]) .nx-sidebar__handle:focus::before{box-shadow:0 0 0 2px background,0 0 0 6px windowText}.nx-sidebar__box{border-right:1px solid windowText}}.nx-sidebar__content{flex:1 1 100%;overflow:hidden;overflow-y:auto;padding-top:16px}"]
                }] }
    ];
    /** @nocollapse */
    NxSidebarComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    NxSidebarComponent.propDecorators = {
        widthChange: [{ type: Output }],
        resizeable: [{ type: Input }],
        minWidth: [{ type: Input }],
        resizeHandleAriaLabel: [{ type: Input }]
    };
    return NxSidebarComponent;
}());
if (false) {
    /**
     * Emits the new width of the sidebar on resize or on close/open event.
     * @type {?}
     */
    NxSidebarComponent.prototype.widthChange;
    /**
     * @type {?}
     * @private
     */
    NxSidebarComponent.prototype._resizeable;
    /**
     * @type {?}
     * @private
     */
    NxSidebarComponent.prototype._minWidth;
    /**
     * @type {?}
     * @private
     */
    NxSidebarComponent.prototype._resizeHandleAriaLabel;
    /**
     * @type {?}
     * @private
     */
    NxSidebarComponent.prototype._open;
    /** @type {?} */
    NxSidebarComponent.prototype._width;
    /** @type {?} */
    NxSidebarComponent.prototype._resizing;
    /** @type {?} */
    NxSidebarComponent.prototype._previousWidth;
    /** @type {?} */
    NxSidebarComponent.prototype._isMobile;
    /** @type {?} */
    NxSidebarComponent.prototype._resizeWidth;
    /**
     * @type {?}
     * @private
     */
    NxSidebarComponent.prototype._resizeStartX;
    /**
     * @type {?}
     * @private
     */
    NxSidebarComponent.prototype._resizeStartWidth;
    /**
     * @type {?}
     * @private
     */
    NxSidebarComponent.prototype._unsubscribeListeners;
    /**
     * @type {?}
     * @private
     */
    NxSidebarComponent.prototype._changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    NxSidebarComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NxSidebarComponent.prototype._element;
}

/**
 * @fileoverview added by tsickle
 * Generated from: sidebar-toggle.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxSidebarToggleComponent = /** @class */ (function (_super) {
    __extends(NxSidebarToggleComponent, _super);
    function NxSidebarToggleComponent(_changeDetectorRef, _elementRef, _sidebar) {
        var _this = _super.call(this, _changeDetectorRef, _elementRef) || this;
        _this._sidebar = _sidebar;
        _this.classNames = 'tertiary small-medium';
        return _this;
    }
    /**
     * @return {?}
     */
    NxSidebarToggleComponent.prototype.toggle = /**
     * @return {?}
     */
    function () {
        this._sidebar.toggle();
    };
    NxSidebarToggleComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'button[nxSidebarToggle]',
                    template: "<div class=\"nx-sidebar__toggle-icons-container\">\n  <nx-icon name=\"chevron-left-small\" aria-hidden=\"true\"></nx-icon>\n  <nx-icon name=\"chevron-left-small\" aria-hidden=\"true\"></nx-icon>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        'class': 'nx-sidebar__toggle-button',
                        '(click)': 'toggle()',
                    },
                    styles: [":host{font-size:16px;font-size:var(--button-medium-font-size,16px);line-height:24px;line-height:var(--button-medium-line-height,24px);font-weight:600;font-weight:var(--button-medium-font-weight,600);letter-spacing:1px;letter-spacing:var(--button-medium-letter-spacing,1px);min-height:48px;min-height:var(--button-medium-height,48px);text-transform:uppercase;text-transform:var(--button-text-transform,uppercase);border-width:var(--button-border-width,2px);border-radius:4px;border-radius:var(--button-border-radius,4px);cursor:pointer;margin:0 0 24px;padding:10px 30px;padding:calc(12px - var(--button-border-width,2px)) calc(32px - var(--button-border-width,2px));transition:background-color .2s,border-color .2s,color .2s,box-shadow .2s;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:auto;-webkit-hyphens:none;-ms-hyphens:none;hyphens:none;vertical-align:middle;border:2px solid transparent}:host:disabled{cursor:not-allowed}:host:focus{outline:0}:host::-moz-focus-inner{border:0}:host-context([data-whatinput=keyboard]).nx-button--negative:focus,:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px #fff,0 0 0 6px #009de6;box-shadow:var(--focus-box-shadow,0 0 0 2px #fff,0 0 0 6px #009de6)}:host(.nx-button--primary){color:#fff;color:var(--button-primary-text-color,#fff);background-color:#007ab3;background-color:var(--button-primary-background-color,#007ab3);border-color:transparent;border-color:var(--button-primary-border-color,transparent)}:host(.nx-button--primary):hover:not(:disabled):not(:active){background-color:#006192;background-color:var(--button-primary-hover-background-color,#006192);color:#fff;color:var(--button-primary-hover-text-color,#fff);border-color:transparent;border-color:var(--button-primary-hover-border-color,transparent)}:host(.nx-button--primary):active{background-color:#003781;background-color:var(--button-primary-active-background-color,#003781);color:#fff;color:var(--button-primary-active-text-color,#fff);border-color:transparent;border-color:var(--button-primary-active-border-color,transparent)}:host(.nx-button--primary):disabled{background-color:rgba(0,122,179,.4);background-color:var(--button-primary-disabled-background-color,rgba(0,122,179,.4));color:rgba(255,255,255,.4);color:var(--button-primary-disabled-text-color,rgba(255,255,255,.4));border-color:transparent;border-color:var(--button-primary-disabled-border-color,transparent)}:host(.nx-button--primary.nx-button--negative){background-color:#fff;border-color:#fff;color:#006192}:host(.nx-button--primary.nx-button--negative):hover:not(:disabled):not(:active){background-color:#d9d9d9;border-color:#d9d9d9;color:#006192}:host(.nx-button--primary.nx-button--negative):active{background-color:#c2c2c2;border-color:#c2c2c2;color:#006192}:host(.nx-button--primary.nx-button--negative):disabled{background-color:rgba(255,255,255,.4);border-color:transparent;color:rgba(65,65,65,.3)}:host(.nx-button--secondary){color:#006192;color:var(--button-secondary-text-color,#006192);background-color:transparent;background-color:var(--button-secondary-background-color,transparent);border-color:#007ab3;border-color:var(--button-secondary-border-color,#007ab3)}:host(.nx-button--secondary):hover:not(:disabled):not(:active){background-color:#006192;background-color:var(--button-secondary-hover-background-color,#006192);color:#fff;color:var(--button-secondary-hover-text-color,#fff);border-color:transparent;border-color:var(--button-secondary-hover-border-color,transparent)}:host(.nx-button--secondary):active{background-color:#003781;background-color:var(--button-secondary-active-background-color,#003781);color:#fff;color:var(--button-secondary-active-text-color,#fff);border-color:transparent;border-color:var(--button-secondary-active-border-color,transparent)}:host(.nx-button--secondary):disabled{background-color:transparent;background-color:var(--button-secondary-disabled-background-color,transparent);color:rgba(0,97,146,.4);color:var(--button-secondary-disabled-text-color,rgba(0,97,146,.4));border-color:rgba(0,122,179,.4);border-color:var(--button-secondary-disabled-border-color,rgba(0,122,179,.4))}:host(.nx-button--secondary.nx-button--negative){color:#fff;border-color:#fff}:host(.nx-button--secondary.nx-button--negative):hover:not(:disabled):not(:active){background-color:#d9d9d9;border-color:#d9d9d9;color:#006192;color:var(--button-secondary-text-color,#006192)}:host(.nx-button--secondary.nx-button--negative):active{background-color:#c2c2c2;border-color:#c2c2c2;color:#006192;color:var(--button-secondary-text-color,#006192)}:host(.nx-button--secondary.nx-button--negative):disabled{background-color:transparent;border-color:rgba(255,255,255,.4);color:rgba(255,255,255,.4)}:host(.nx-button--tertiary){color:#006192;color:var(--button-tertiary-text-color,#006192);background-color:transparent;background-color:var(--button-tertiary-background-color,transparent);border-color:transparent;border-color:var(--button-tertiary-border-color,transparent)}:host(.nx-button--tertiary):hover:not(:disabled):not(:active){background-color:#ececec;background-color:var(--button-tertiary-hover-background-color,#ececec);color:#006192;color:var(--button-tertiary-hover-text-color,#006192);border-color:transparent;border-color:var(--button-tertiary-hover-border-color,transparent)}:host(.nx-button--tertiary):active{background-color:#d9d9d9;background-color:var(--button-tertiary-active-background-color,#d9d9d9);color:#006192;color:var(--button-tertiary-active-text-color,#006192);border-color:transparent;border-color:var(--button-tertiary-active-border-color,transparent)}:host(.nx-button--tertiary):disabled{background-color:transparent;background-color:var(--button-tertiary-disabled-background-color,transparent);color:rgba(0,97,146,.4);color:var(--button-tertiary-disabled-text-color,rgba(0,97,146,.4));border-color:transparent;border-color:var(--button-tertiary-disabled-border-color,transparent)}:host(.nx-button--tertiary.nx-button--negative){color:#fff}:host(.nx-button--tertiary.nx-button--negative):hover{background-color:#d9d9d9;color:#006192;color:var(--button-secondary-text-color,#006192)}:host(.nx-button--tertiary.nx-button--negative):active{background-color:#c2c2c2;color:#006192;color:var(--button-secondary-text-color,#006192)}:host(.nx-button--tertiary.nx-button--negative):disabled{background-color:transparent;color:rgba(255,255,255,.4)}:host(.nx-button--large){font-size:20px;font-size:var(--button-large-font-size,20px);line-height:24px;line-height:var(--button-large-line-height,24px);font-weight:600;font-weight:var(--button-large-font-weight,600);letter-spacing:1px;letter-spacing:var(--button-large-letter-spacing,1px);min-height:72px;min-height:var(--button-large-height,72px);padding:22px 46px;padding:calc(24px - var(--button-border-width,2px)) calc(48px - var(--button-border-width,2px))}@media (max-width:703px){:host{display:block;width:100%}:host(.nx-button--large){padding:22px 30px;padding:calc(24px - var(--button-border-width,2px)) calc(32px - var(--button-border-width,2px))}}:host(.nx-button--small-medium){display:inline-block;font-size:16px;font-size:var(--button-small-medium-font-size,16px);line-height:24px;line-height:var(--button-small-medium-line-height,24px);font-weight:600;font-weight:var(--button-small-medium-font-weight,600);letter-spacing:1px;letter-spacing:var(--button-small-medium-letter-spacing,1px);padding:6px 22px;padding:calc(8px - var(--button-border-width,2px)) calc(24px - var(--button-border-width,2px));text-transform:none;width:auto;min-height:40px;min-height:var(--button-small-medium-height,40px)}:host(.nx-button--small){font-size:14px;font-size:var(--button-small-font-size,14px);line-height:16px;line-height:var(--button-small-line-height,16px);font-weight:600;font-weight:var(--button-small-font-weight,600);letter-spacing:1px;letter-spacing:var(--button-small-letter-spacing,1px);min-height:32px;min-height:var(--button-small-height,32px);display:inline-block;padding:6px 14px;padding:calc(8px - var(--button-border-width,2px)) calc(16px - var(--button-border-width,2px));text-transform:none;width:auto}:host(.nx-button--cta){color:#fff;color:var(--button-cta-text-color,#fff);background-color:#3da556;background-color:var(--button-cta-background-color,#3da556);border-color:transparent;border-color:var(--button-cta-border-color,transparent)}:host(.nx-button--cta):hover:not(:disabled):not(:active){background-color:#348357;background-color:var(--button-cta-hover-background-color,#348357);color:#fff;color:var(--button-cta-hover-text-color,#fff);border-color:transparent;border-color:var(--button-cta-hover-border-color,transparent)}:host(.nx-button--cta):active{background-color:#276442;background-color:var(--button-cta-active-background-color,#276442);color:#fff;color:var(--button-cta-active-text-color,#fff);border-color:transparent;border-color:var(--button-cta-active-border-color,transparent)}:host(.nx-button--cta):disabled{background-color:rgba(61,165,86,.4);background-color:var(--button-cta-disabled-background-color,rgba(61,165,86,.4));color:rgba(255,255,255,.4);color:var(--button-cta-disabled-text-color,rgba(255,255,255,.4));border-color:transparent;border-color:var(--button-cta-disabled-border-color,transparent)}:host(.nx-button--emphasis){color:#fff;color:var(--button-emphasis-text-color,#fff);background-color:#f86200;background-color:var(--button-emphasis-background-color,#f86200);border-color:transparent;border-color:var(--button-emphasis-border-color,transparent)}:host(.nx-button--emphasis):hover:not(:disabled):not(:active){background-color:#e15200;background-color:var(--button-emphasis-hover-background-color,#e15200);color:#fff;color:var(--button-emphasis-hover-text-color,#fff);border-color:transparent;border-color:var(--button-emphasis-hover-border-color,transparent)}:host(.nx-button--emphasis):active{background-color:#c15500;background-color:var(--button-emphasis-active-background-color,#c15500);color:#fff;color:var(--button-emphasis-active-text-color,#fff);border-color:transparent;border-color:var(--button-emphasis-active-border-color,transparent)}:host(.nx-button--emphasis):disabled{background-color:rgba(248,98,0,.4);background-color:var(--button-emphasis-disabled-background-color,rgba(248,98,0,.4));color:rgba(255,255,255,.4);color:var(--button-emphasis-disabled-text-color,rgba(255,255,255,.4));border-color:transparent;border-color:var(--button-emphasis-disabled-border-color,transparent)}@media (min-width:704px){:host(.nx-button--block){display:block;width:100%}}:host .nx-button__content-wrapper{display:inline-flex;align-items:center;justify-content:center;vertical-align:bottom}:host([nxiconbutton]),:host([nxsidebartoggle]){padding:0;flex:0 0 auto}:host([nxiconbutton]).nx-button--small,:host([nxsidebartoggle]).nx-button--small{width:32px;width:var(--button-small-height,32px);font-size:16px;font-size:var(--icon-button-small-icon-size,16px)}:host([nxiconbutton]).nx-button--small-medium,:host([nxsidebartoggle]).nx-button--small-medium{width:40px;width:var(--button-small-medium-height,40px);font-size:24px;font-size:var(--icon-button-small-medium-icon-size,24px)}:host([nxiconbutton]).nx-button--medium,:host([nxsidebartoggle]).nx-button--medium{width:48px;width:var(--button-medium-height,48px);font-size:24px;font-size:var(--icon-button-medium-icon-size,24px)}:host([nxiconbutton]).nx-button--large,:host([nxsidebartoggle]).nx-button--large{width:72px;width:var(--button-large-height,72px);font-size:24px;font-size:var(--icon-button-large-icon-size,24px)}:host([nxbutton]).nx-button--small ::ng-deep nx-icon{font-size:16px;font-size:var(--button-small-icon-size,16px)}:host([nxbutton]).nx-button--small-medium ::ng-deep nx-icon{font-size:20px;font-size:var(--button-small-medium-icon-size,20px)}:host([nxbutton]).nx-button--medium ::ng-deep nx-icon{font-size:24px;font-size:var(--button-medium-icon-size,24px)}:host([nxbutton]).nx-button--large ::ng-deep nx-icon{font-size:24px;font-size:var(--button-large-icon-size,24px)}@media screen and (-ms-high-contrast:active){:host-context([data-whatinput=keyboard]).nx-button--negative:focus,:host-context([data-whatinput=keyboard]):focus{box-shadow:0 0 0 2px background,0 0 0 6px windowText}:host{background-color:buttonFace}:host .nx-button__content-wrapper{-ms-high-contrast-adjust:none}:host:disabled{color:GrayText;border-color:GrayText}}", ":host{margin:0 0 0 auto;order:100}:host .nx-sidebar__toggle-icons-container{display:flex}:host .nx-sidebar__toggle-icons-container nx-icon{font-size:24px;margin-left:2px}:host .nx-sidebar__toggle-icons-container nx-icon:last-child{margin-left:-18px}"]
                }] }
    ];
    /** @nocollapse */
    NxSidebarToggleComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NxSidebarComponent, decorators: [{ type: Optional }, { type: Host }] }
    ]; };
    return NxSidebarToggleComponent;
}(NxButtonBase));
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxSidebarToggleComponent.prototype._sidebar;
}

/**
 * @fileoverview added by tsickle
 * Generated from: sidebar-footer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxSidebarFooterComponent = /** @class */ (function () {
    function NxSidebarFooterComponent() {
    }
    NxSidebarFooterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-sidebar-footer',
                    host: {
                        'class': 'nx-sidebar__footer'
                    },
                    template: '<div class="nx-sidebar__footer-container"><ng-content></ng-content></div>',
                    styles: [".nx-sidebar__footer-container ::ng-deep [nxbutton],.nx-sidebar__footer-container ::ng-deep [nxiconbutton],.nx-sidebar__footer-container ::ng-deep [nxsidebartoggle]{color:#414141;color:var(--sidebar-footer-button-color,#414141)}"]
                }] }
    ];
    return NxSidebarFooterComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: sidebar.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxSidebarModule = /** @class */ (function () {
    function NxSidebarModule() {
    }
    NxSidebarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NxIconModule, NxButtonModule],
                    declarations: [NxSidebarComponent, NxSidebarFooterComponent, NxSidebarToggleComponent],
                    exports: [NxSidebarComponent, NxSidebarFooterComponent, NxSidebarToggleComponent]
                },] }
    ];
    return NxSidebarModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: allianz-ngx-ndbx-sidebar.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AUTO_COLLAPSE_WIDTH, MAX_WIDTH, MIN_WIDTH, NxSidebarComponent, NxSidebarFooterComponent, NxSidebarModule, NxSidebarToggleComponent, RESIZE_STEP_SIZE };
//# sourceMappingURL=allianz-ngx-ndbx-sidebar.js.map
