import { EventEmitter, Component, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Input, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BehaviorSubject } from 'rxjs';
import { __extends } from 'tslib';
import { DataSource } from '@angular/cdk/collections';
import { CdkTableModule } from '@angular/cdk/table';
import { ScrollingModule } from '@angular/cdk/scrolling';

/**
 * @fileoverview added by tsickle
 * Generated from: tabledata-source.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TableDataSource = /** @class */ (function (_super) {
    __extends(TableDataSource, _super);
    function TableDataSource(_datachange) {
        var _this = _super.call(this) || this;
        _this._datachange = _datachange;
        return _this;
    }
    /** @docs-private Connect function called by the table to retrieve one stream containing the data to render. */
    /**
     * \@docs-private Connect function called by the table to retrieve one stream containing the data to render.
     * @return {?}
     */
    TableDataSource.prototype.connect = /**
     * \@docs-private Connect function called by the table to retrieve one stream containing the data to render.
     * @return {?}
     */
    function () {
        return this._datachange;
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @return {?}
     */
    TableDataSource.prototype.disconnect = /**
     * \@docs-private
     * @return {?}
     */
    function () { };
    return TableDataSource;
}(DataSource));
if (false) {
    /**
     * @type {?}
     * @private
     */
    TableDataSource.prototype._datachange;
}

/**
 * @fileoverview added by tsickle
 * Generated from: dynamic-table.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxDynamicTableComponent = /** @class */ (function () {
    function NxDynamicTableComponent(el, _changeDetectorRef) {
        this.el = el;
        this._changeDetectorRef = _changeDetectorRef;
        this._dataChange = new BehaviorSubject([]);
        /**
         * An event is dispatched when a row is clicked.
         */
        this.nxRowClick = new EventEmitter();
    }
    Object.defineProperty(NxDynamicTableComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        /** Sets the data that it will show in the table. */
        set: /**
         * Sets the data that it will show in the table.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._data = value
                .filter((/**
             * @param {?} element
             * @return {?}
             */
            function (element) { return element; }));
            // If user dont pass displayedColumns the table will show all data and the name of columns will be the key of data
            if (!this._displayedColumns) {
                /** @type {?} */
                var keys_1 = [];
                /** @type {?} */
                var cArray_1 = [];
                // For catch keys of data Objects and assing title, key and type string by default to displayedColumns
                this._data
                    .forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    for (var key in element) {
                        if (keys_1.indexOf(key) === -1) {
                            keys_1.push(key);
                            cArray_1.push({ title: key, key: key, type: 'string' });
                        }
                    }
                }));
                this._columnKeys = keys_1;
                this._displayedColumns = cArray_1;
                // need to call markForCheck as the setter changes displayedColumns here
                // sidenote: isn't needed for the data itself as it gets passed to the cdk-table
                // by the datasource observable
                this._changeDetectorRef.markForCheck();
            }
            this._dataChange.next(this._data);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDynamicTableComponent.prototype, "displayedColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._displayedColumns;
        },
        /** Sets the name order and type of columns. */
        set: /**
         * Sets the name order and type of columns.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._displayedColumns = value;
            this._columnKeys = value.map((/**
             * @param {?} column
             * @return {?}
             */
            function (column) { return column.key; }));
            this._changeDetectorRef.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDynamicTableComponent.prototype, "dataSource", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._dataSource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NxDynamicTableComponent.prototype, "columnKeys", {
        /** @docs-private */
        get: /**
         * \@docs-private
         * @return {?}
         */
        function () {
            return this._columnKeys;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NxDynamicTableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this._data) {
            this._data = [];
            this._dataChange.next(this._data);
        }
        this._dataSource = new TableDataSource(this._dataChange);
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} row
     * @return {?}
     */
    NxDynamicTableComponent.prototype.handleRowClick = /**
     * \@docs-private
     * @param {?} row
     * @return {?}
     */
    function (row) {
        this.nxRowClick.emit(row);
    };
    /** @docs-private */
    /**
     * \@docs-private
     * @param {?} element
     * @return {?}
     */
    NxDynamicTableComponent.prototype.isNumeric = /**
     * \@docs-private
     * @param {?} element
     * @return {?}
     */
    function (element) {
        if (element.type === 'numeric') {
            return true;
        }
        return false;
    };
    NxDynamicTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-dynamic-table',
                    template: "<div class=\"nx-table__container\" *ngIf=\"data && data.length > 0\">\n  <div class=\"nx-table__scroll\">\n    <cdk-table [dataSource]=\"dataSource\" class=\"nx-table\">\n      <!-- Column Definition -->\n      <ng-container *ngFor=\"let element of displayedColumns\" cdkColumnDef=\"{{element.key}}\">\n        <cdk-header-cell *cdkHeaderCellDef class=\"nx-table__header-cell\"\n                         [ngClass]=\"{'nx-table__header-cell--number': isNumeric(element) }\">\n          <div class=\"nx-table__header-title--block\">\n            <span class=\"nx-table__header-title\"> {{element.title}}</span>\n          </div>\n        </cdk-header-cell>\n        <cdk-cell *cdkCellDef=\"let row\" class=\"nx-table__cell\"\n                  [ngClass]=\"{'nx-table__cell--number': isNumeric(element) }\" [innerHTML]=\"row[element.key]\"></cdk-cell>\n      </ng-container>\n\n      <!-- Header and Row Declarations -->\n      <cdk-header-row *cdkHeaderRowDef=\"columnKeys\" class=\"nx-table__header-row\"></cdk-header-row>\n      <cdk-row *cdkRowDef=\"let row; columns: columnKeys\" class=\"nx-table__row\"\n               (dblclick)=\"handleRowClick(row)\"></cdk-row>\n\n    </cdk-table>\n  </div>\n</div>\n<div class=\"nx-table__appendix\" *ngIf=\"data.length === 0\">\n  <ng-content></ng-content>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".nx-table{font-size:16px;font-size:var(--table-cell-font-size,16px);line-height:24px;line-height:var(--table-cell-line-height,24px);font-weight:400;font-weight:var(--table-cell-font-weight,400);letter-spacing:0;letter-spacing:var(--table-cell-letter-spacing,0);color:#414141;color:var(--table-cell-color,#414141);text-align:left;width:100%;display:table}.nx-table__container{margin:32px 0}.nx-table__scroll{max-width:100%;overflow:hidden;overflow-x:auto}.nx-table__header-cell{font-size:16px;font-size:var(--table-header-cell-font-size,16px);line-height:24px;line-height:var(--table-header-cell-line-height,24px);font-weight:600;font-weight:var(--table-header-cell-font-weight,600);letter-spacing:0;letter-spacing:var(--table-header-cell-letter-spacing,0);color:#414141;color:var(--table-header-cell-color,#414141);background:0 0;background:var(--table-header-cell-background-color,transparent);border-top:1px solid #d9d9d9;border-top:1px solid var(--table-cell-border-top-color,#d9d9d9);border-bottom:2px solid #414141;border-bottom:2px solid var(--table-header-border-bottom-color,#414141);padding:23px 16px 22px;position:relative}.nx-table__header-cell--number{display:flex;position:relative}.nx-table__header-cell--number .nx-table__header-title--block{justify-content:flex-end}.nx-table__cell--number,.nx-table__header-cell--number{text-align:right}.nx-table__header-row,.nx-table__row{display:table-row;vertical-align:inherit;background-color:transparent}.nx-table__row{background:0 0;background:var(--table-row-background-color,transparent)}.nx-table__cell{border-bottom:1px solid #d9d9d9;border-bottom:1px solid var(--table-header-border-top-color,#d9d9d9);padding:24px 16px 23px;vertical-align:top}.nx-table__row:last-child .nx-table__cell{padding-bottom:22px;border-bottom:2px solid #414141;border-bottom:2px solid var(--table-header-border-bottom-color,#414141)}.nx-table__cell,.nx-table__header-cell{display:table-cell;vertical-align:inherit}"]
                }] }
    ];
    /** @nocollapse */
    NxDynamicTableComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    NxDynamicTableComponent.propDecorators = {
        data: [{ type: Input, args: ['nxData',] }],
        displayedColumns: [{ type: Input, args: ['nxDisplayedColumns',] }],
        nxRowClick: [{ type: Output }]
    };
    return NxDynamicTableComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    NxDynamicTableComponent.prototype._dataChange;
    /**
     * @type {?}
     * @private
     */
    NxDynamicTableComponent.prototype._dataSource;
    /**
     * @type {?}
     * @private
     */
    NxDynamicTableComponent.prototype._data;
    /**
     * @type {?}
     * @private
     */
    NxDynamicTableComponent.prototype._displayedColumns;
    /**
     * @type {?}
     * @private
     */
    NxDynamicTableComponent.prototype._columnKeys;
    /**
     * An event is dispatched when a row is clicked.
     * @type {?}
     */
    NxDynamicTableComponent.prototype.nxRowClick;
    /**
     * @type {?}
     * @private
     */
    NxDynamicTableComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NxDynamicTableComponent.prototype._changeDetectorRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: dynamic-table.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NxDynamicTableModule = /** @class */ (function () {
    function NxDynamicTableModule() {
    }
    NxDynamicTableModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [NxDynamicTableComponent],
                    exports: [NxDynamicTableComponent],
                    imports: [CommonModule, CdkTableModule, ScrollingModule]
                },] }
    ];
    return NxDynamicTableModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: allianz-ngx-ndbx-dynamic-table.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NxDynamicTableComponent, NxDynamicTableModule };
//# sourceMappingURL=allianz-ngx-ndbx-dynamic-table.js.map
