{"version":3,"file":"allianz-ngx-ndbx-pagination.js","sources":["ng://@allianz/ngx-ndbx/pagination/pagination-texts.ts","ng://@allianz/ngx-ndbx/pagination/pagination-utils.ts","ng://@allianz/ngx-ndbx/pagination/pagination.component.ts","ng://@allianz/ngx-ndbx/pagination/pagination.module.ts"],"sourcesContent":["\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\n\n/**\n * Interface for providing custom labels in a simple pagination.\n * With an implementation you can localize your pagination with the NX_PAGINATION_TEXTS injection token.\n */\nexport interface IPaginationTexts {\n  /** Label that should replace 'previous'. */\n  previous: string;\n\n  /** Label that should replace 'next'. */\n  next: string;\n\n  /** Label that should replace 'first'.\n   *\n   * Optional attribute needed only for the advanced pagination.\n   */\n  first?: string;\n\n  /** Label that should replace 'last'.\n   *\n   * Optional attribute needed only for the advanced pagination.\n   */\n  last?: string;\n\n  /** Label that should replace 'of'. */\n  ofLabel: string;\n\n  /** Label that should replace the aria label. */\n  ariaLabel: string;\n}\n\nexport const DefaultPaginationTexts =  {\n  previous: 'Previous',\n  next: 'Next',\n  first: 'First',\n  last: 'Last',\n  ofLabel: 'of',\n  ariaLabel: 'Please select your page'\n};\n\n/** InjectionToken for pagination that can be used to override default locale code. */\nexport const NX_PAGINATION_TEXTS = new InjectionToken<IPaginationTexts>('nx-pagination-texts');\n","import { Injectable } from '@angular/core';\nimport { Page } from './pagination.component';\n\n/** @docs-private */\n@Injectable()\nexport class NxPaginationUtils  {\n  private _pagesMobile = 3;\n  private _elipsisText: string = '...';\n  private _classExpanded: string = 'expanded-view';\n\n  getPages(currentPage: number, totalPages: number): Page[] {\n\n    let pages = [];\n    let start = [], middle = [], end = [];\n\n    // First array -> start\n    start = this.getStartArray(currentPage, totalPages);\n    // Second array -> middle\n    middle =  this.getMiddleArray(currentPage, totalPages);\n    // Third array -> end\n    end = this.getEndArray(currentPage, totalPages);\n\n    pages = [ ...start, ...middle, ...end ];\n\n    return pages;\n  }\n\n  getMiddleArray(currentPage: number, totalPages: number): Array<any> {\n    let pageNumber = currentPage < 6 ? 4 : currentPage - 1;\n    const middle = [];\n\n    while (\n      middle.length < 3 &&\n      pageNumber >= 2 &&\n      pageNumber <= totalPages - 3 &&\n      (pageNumber <= currentPage + 1 && pageNumber >= currentPage - 1)\n    ) {\n      middle.push(this.createPaginationItem(pageNumber, pageNumber));\n      pageNumber++;\n    }\n    return middle;\n  }\n  getEndArray(currentPage: number, totalPages: number): Array<any> {\n    const end = [];\n    let currentItemToShow: number =\n      totalPages <= 3 ? totalPages + 1 :\n      totalPages <= 6 ? totalPages - (totalPages - 4) : totalPages - 2 ;\n    const showEllipsis = currentPage < totalPages - 4;\n\n    while (currentItemToShow <= totalPages) {\n      const endItem = end.length === 0 && showEllipsis ?\n        this.createPaginationItem(this._elipsisText, currentItemToShow, true) :\n        this.createPaginationItem(currentItemToShow , currentItemToShow, true);\n      end.push(endItem);\n      currentItemToShow++;\n    }\n\n    return end;\n  }\n  getStartArray(currentPage: number, totalPages: number): Array<any> {\n    let counterPages = 0;\n    const start = [];\n    const maxSizeArray = 3;\n\n    while (counterPages < maxSizeArray && counterPages < totalPages) {\n      const startItem = counterPages === 2 && currentPage > 5 ?\n        this.createPaginationItem(this._elipsisText, counterPages, true) :\n        this.createPaginationItem(counterPages + 1 , counterPages + 1, true);\n\n      start.push(startItem);\n      counterPages++;\n    }\n\n    return start;\n  }\n\n  getMobilePages(currentPage: number, totalPages: number): Array<any> {\n    // if we have less pages than the number we want to display take all\n    if (totalPages < this._pagesMobile) {\n      return Array.from(Array(totalPages).keys()).map(item => this.createPaginationItem(item + 1, item + 1));\n    }\n\n    switch (currentPage) {\n      // first page active\n      case 1:\n        return [1, 2, 3].map( item => this.createPaginationItem(item, item));\n      // last page active\n      case totalPages:\n        return [totalPages - 2, totalPages - 1, totalPages].map( item => this.createPaginationItem(item, item));\n      // any other page active\n      default:\n        return [currentPage - 1, currentPage, currentPage + 1].map( item => this.createPaginationItem(item, item));\n    }\n  }\n\n  private createPaginationItem(label: string | number, value: number, classExpanded?: boolean) {\n    return { label: label, value: value, class: classExpanded ? this._classExpanded : ''  };\n  }\n\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  AfterContentInit,\n} from '@angular/core';\n\nimport { DefaultPaginationTexts, IPaginationTexts, NX_PAGINATION_TEXTS } from './pagination-texts';\nimport { NxPaginationUtils } from './pagination-utils';\n\n/** @docs-private */\nexport interface Page {\n  label: string;\n  value: any;\n  class: string;\n}\n\n@Component({\n  selector: 'nx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [ './pagination.component.scss' ],\n})\n\nexport class NxPaginationComponent implements OnInit, AfterContentInit {\n  private _page: number;\n  private _count: number;\n  private _perPage: number;\n  private _type: string = 'simple';\n\n  /** @docs-private */\n  paginationTexts: IPaginationTexts;\n\n  /** @docs-private */\n  totalNumberPages: number = 0;\n\n  get page(): number { return this._page; }\n\n  /** Sets the current page. */\n  @Input('nxPage') // the current page\n  set page(value: number) {\n    this._page = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  get count(): number { return this._count; }\n\n  /** Number of total items over all pages. */\n  @Input('nxCount') // how many total items there are in all pages\n  set count(value: number) {\n    this._count = value;\n    this.totalNumberPages =  this.calculateTotalPages();\n    this._changeDetectorRef.markForCheck();\n  }\n  get perPage(): number { return this._perPage; }\n\n  /** Sets the number of items you want to show per page. */\n  @Input('nxPerPage') // how many items we want to show per page\n  set perPage(value: number) {\n    this._perPage = value;\n    this.totalNumberPages =  this.calculateTotalPages();\n    this._changeDetectorRef.markForCheck();\n  }\n  get type(): string { return this._type; }\n\n  /**\n   * Determines the type of pagination.\n   *\n   * Values: simple | advanced, default: simple.\n   */\n  @Input('nxType')\n  set type(value: string) { // type advanced or simple\n    this._type = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** An event emitted when the previous page button is clicked. */\n  @Output() nxGoPrev = new EventEmitter<void>();\n\n  /** An event emitted when the next page button is clicked */\n  @Output() nxGoNext = new EventEmitter<void>();\n\n  /**\n   * An event emitted when a page number is clicked.\n   * Provides the number of the page as parameter.\n   */\n  @Output() nxGoPage = new EventEmitter<number>();\n\n  constructor(\n      @Optional() @Inject(NX_PAGINATION_TEXTS) paginationTexts: IPaginationTexts,\n      private paginationUtilsService: NxPaginationUtils,\n      private _changeDetectorRef: ChangeDetectorRef) {\n    this.paginationTexts = paginationTexts || DefaultPaginationTexts;\n   }\n\n  ngOnInit() {\n    this.totalNumberPages =  this.calculateTotalPages();\n  }\n\n  ngAfterContentInit() {\n    if (this.type === 'advanced' && (!this.paginationTexts.last || !this.paginationTexts.first)) {\n      console.warn('Please define aria labels for the last and first arrows.');\n    }\n  }\n\n  /** Returns the number of the first page. */\n  getMin(): number {\n    return this.totalNumberPages > 0 ? 1 : 0;\n  }\n\n  /** Returns the number of the last page. */\n  getMax(): number {\n    let max = this._perPage * this._page;\n    if (max > this._count) {\n      max = this._count;\n    }\n    return max;\n  }\n\n  /** Returns the total number of pages */\n  calculateTotalPages(): number {\n    return Math.ceil(this._count / this._perPage) || 0;\n  }\n\n  /** Directs to the page with number n. */\n  onPage(n: number): void {\n    this.nxGoPage.emit(n);\n  }\n\n  /** Directs to the previous page. */\n  onPrev(): void {\n    if (!this._isPaginationPreviousDisabled()) {\n      this.nxGoPrev.emit();\n    }\n  }\n\n  /** Directs to the next page. */\n  onNext(): void {\n    if (!this._isPaginationNextDisabled()) {\n      this.nxGoNext.emit();\n    }\n  }\n\n  /** Directs to the first page. */\n  onFirst() {\n    if (!this._isPaginationPreviousDisabled()) {\n      this.onPage(1);\n    }\n  }\n\n  /** Directs to the last page. */\n  onLast() {\n    if (!this._isPaginationNextDisabled()) {\n      this.onPage(this.totalNumberPages);\n    }\n  }\n\n  /** Returns if the current page is the last page. */\n  lastPage(): boolean {\n    return this._perPage * this._page >= this._count;\n  }\n\n  /** @docs-private */\n  getPages(): Page[] {\n    return this.paginationUtilsService.getPages(this._page, this.totalNumberPages);\n  }\n\n  /** @docs-private */\n  getMobilePages(): Page[] {\n    return this.paginationUtilsService.getMobilePages(this._page, this.totalNumberPages);\n  }\n\n  /** @docs-private */\n  getPaginationItemClasses(page: Page): Object {\n    const classes = {\n      'is-ellipsis': page.label === '...',\n      'nx-pagination__item--expanded-view': page.class === 'expanded-view'\n    };\n    return classes;\n  }\n\n  /** @docs-private */\n  getPaginationNumberClasses(page: Page): Object {\n    const classes = {\n      'is-active': page.value === this.page,\n      'nx-pagination__ellipsis': page.label === '...',\n      'nx-pagination__link': page.label !== '...'\n    };\n    return classes;\n  }\n\n  /** Returns true, if `nxCount` is greater than 0, else false. */\n  isPaginationVisible(): boolean {\n    return this.count > 0;\n  }\n\n  /** Returns true, if `nxCount` is greater than 0 and the type of pagination is 'simple', else false. */\n  isPaginationCompactVisible(): boolean {\n    return this.type.includes('simple') && this.count > 0;\n  }\n\n  /** @docs-private */\n  isPaginationContainerVisible(): boolean {\n    return this.type.includes('advanced');\n  }\n\n  _isPaginationPreviousDisabled(): boolean {\n    return this.page === this.getMin();\n  }\n\n  _isPaginationNextDisabled(): boolean {\n    return this.page === this.totalNumberPages;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NxPaginationComponent } from './pagination.component';\nimport { NxIconModule } from '@allianz/ngx-ndbx/icon';\nimport { NxPaginationUtils } from './pagination-utils';\n\n@NgModule({\n  imports: [\n    CommonModule, NxIconModule\n  ],\n  declarations: [\n    NxPaginationComponent\n  ],\n  exports: [\n    NxPaginationComponent\n  ],\n  providers: [\n    NxPaginationUtils\n  ]\n})\nexport class NxPaginationModule { }\n"],"names":[],"mappings":"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"}