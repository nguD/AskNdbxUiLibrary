import { NxTabGroupBase } from './tab-group-base';
import { AfterContentChecked, AfterContentInit, ChangeDetectorRef, EventEmitter, OnDestroy, QueryList, OnInit } from '@angular/core';
import { Subject } from 'rxjs';
import { NxAccordionDirective } from '@allianz/ngx-ndbx/accordion';
import { NxExpansionPanelComponent } from '@allianz/ngx-ndbx/accordion';
import { NxTabComponent } from './tab';
import { NxTabBodyComponent } from './tab-body';
import { NxTabHeaderComponent } from './tab-header';
export declare class NxTabChangeEvent {
    /** The index of the selected or focused tab. */
    index: number;
    /** The component instance of the selected or focused tab. */
    tab: NxTabComponent;
}
export declare class NxTabGroupComponent implements NxTabGroupBase, OnInit, OnDestroy, AfterContentInit, AfterContentChecked {
    private _changeDetectorRef;
    private _selectedIndex;
    private _groupId;
    private _negative;
    private _disabled;
    private _indexToSelect;
    private _autoselect;
    private _mobileAccordion;
    _showAccordion: boolean;
    /** @docs-private */
    tabs: QueryList<NxTabComponent>;
    /** @docs-private */
    tabBodyChildren: QueryList<NxTabBodyComponent>;
    /** @docs-private */
    tabHeader: NxTabHeaderComponent;
    /** @docs-private */
    panels: QueryList<NxExpansionPanelComponent>;
    /** @docs-private */
    accordion: NxAccordionDirective;
    /** Sets the selected tab. */
    selectedIndex: number;
    /** Whether the negative set of styling should be used. */
    negative: boolean;
    /** Whether the tab group is disabled. Default: false. */
    disabled: boolean;
    /** Whether the tab should be immediately selected on focus. */
    autoselect: boolean;
    /** Whether the tabs should to accordion on mobile viewports. */
    mobileAccordion: boolean;
    /** An event emitted when the selected tab has changed. */
    readonly selectedIndexChange: EventEmitter<number>;
    /** An event emitted when the selected tab has changed. */
    readonly selectedTabChange: EventEmitter<NxTabChangeEvent>;
    /**
     * An event emitted when focus has changed within a tab group.
     *
     * **Note:** is not supported in mobile view.
     */
    readonly focusChange: EventEmitter<NxTabChangeEvent>;
    /** Subscription to tabs being added/removed. */
    private _tabsSubscription;
    /** Subscription to changes in the tab labels. */
    private _tabLabelSubscription;
    private _disabledTabsCache;
    _appearanceChange: Subject<unknown>;
    constructor(_changeDetectorRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    /**
      * After the content is checked, this component knows what tabs have been defined
      * and what the selected index should be.
      */
    ngAfterContentChecked(): void;
    ngOnDestroy(): void;
    /**
    * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is
    * on the NxTab component, whereas the data binding is inside the NxTabGroup. In order for the
    * binding to be updated, we need to subscribe to changes in it and trigger change detection
    * manually.
    */
    private _subscribeToTabLabels;
    /** Clamps the given index to the bounds of 0 and the tabs length. */
    private _clampTabIndex;
    /** @docs-private */
    focusChanged(index: number): void;
    private _createChangeEvent;
    /** @docs-private */
    handleClick(index: number): void;
    /**
     * @docs-private
     * Returns the tabindex for a tab label
     */
    getTabIndex(tab: NxTabComponent, idx: number): number | null;
    /** Returns a unique id for each tab label element */
    _getTabLabelId(i: number): string;
    /** Returns a unique id for each tab content element */
    _getTabContentId(i: number): string;
    /** @docs-private */
    onResize(event: any): void;
    private _switchAppearance;
    private _showMobileVersion;
    private _showDesktopVersion;
    /**
     * Emulate the tab change event when an accordion panel is opened in
     * mobile viewports.
     */
    _panelOpened(index: number): void;
}
